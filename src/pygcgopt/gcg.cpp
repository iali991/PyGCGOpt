/* Generated by Cython 0.29.26 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "/Users/lentz/Desktop/thesis/include/blockmemshell/memory.h",
            "/Users/lentz/Desktop/thesis/include/gcg/class_conspartition.h",
            "/Users/lentz/Desktop/thesis/include/gcg/class_detprobdata.h",
            "/Users/lentz/Desktop/thesis/include/gcg/class_partialdecomp.h",
            "/Users/lentz/Desktop/thesis/include/gcg/class_varpartition.h",
            "/Users/lentz/Desktop/thesis/include/gcg/cons_decomp.h",
            "/Users/lentz/Desktop/thesis/include/gcg/cons_decomp.hpp",
            "/Users/lentz/Desktop/thesis/include/gcg/gcg.h",
            "/Users/lentz/Desktop/thesis/include/gcg/gcgplugins.h",
            "/Users/lentz/Desktop/thesis/include/gcg/pricer_gcg.h",
            "/Users/lentz/Desktop/thesis/include/gcg/pub_gcgcol.h",
            "/Users/lentz/Desktop/thesis/include/gcg/pub_gcgsepa.h",
            "/Users/lentz/Desktop/thesis/include/gcg/pub_solver.h",
            "/Users/lentz/Desktop/thesis/include/scip/bendersdefcuts.h",
            "/Users/lentz/Desktop/thesis/include/scip/cons_and.h",
            "/Users/lentz/Desktop/thesis/include/scip/cons_cardinality.h",
            "/Users/lentz/Desktop/thesis/include/scip/cons_countsols.h",
            "/Users/lentz/Desktop/thesis/include/scip/cons_indicator.h",
            "/Users/lentz/Desktop/thesis/include/scip/cons_linear.h",
            "/Users/lentz/Desktop/thesis/include/scip/cons_nonlinear.h",
            "/Users/lentz/Desktop/thesis/include/scip/cons_or.h",
            "/Users/lentz/Desktop/thesis/include/scip/cons_sos1.h",
            "/Users/lentz/Desktop/thesis/include/scip/cons_sos2.h",
            "/Users/lentz/Desktop/thesis/include/scip/cons_xor.h",
            "/Users/lentz/Desktop/thesis/include/scip/expr_abs.h",
            "/Users/lentz/Desktop/thesis/include/scip/expr_exp.h",
            "/Users/lentz/Desktop/thesis/include/scip/expr_log.h",
            "/Users/lentz/Desktop/thesis/include/scip/expr_pow.h",
            "/Users/lentz/Desktop/thesis/include/scip/expr_product.h",
            "/Users/lentz/Desktop/thesis/include/scip/expr_sum.h",
            "/Users/lentz/Desktop/thesis/include/scip/expr_value.h",
            "/Users/lentz/Desktop/thesis/include/scip/expr_var.h",
            "/Users/lentz/Desktop/thesis/include/scip/expr_varidx.h",
            "/Users/lentz/Desktop/thesis/include/scip/paramset.h",
            "/Users/lentz/Desktop/thesis/include/scip/pub_expr.h",
            "/Users/lentz/Desktop/thesis/include/scip/pub_lp.h",
            "/Users/lentz/Desktop/thesis/include/scip/pub_nlp.h",
            "/Users/lentz/Desktop/thesis/include/scip/scip.h",
            "/Users/lentz/Desktop/thesis/include/scip/scip_cons.h",
            "/Users/lentz/Desktop/thesis/include/scip/scip_expr.h",
            "/Users/lentz/Desktop/thesis/include/scip/scip_nlp.h",
            "/Users/lentz/Desktop/thesis/include/scip/scip_tree.h",
            "/Users/lentz/Desktop/thesis/include/scip/scip_var.h",
            "/Users/lentz/Desktop/thesis/include/scip/scipdefplugins.h",
            "/Users/lentz/Desktop/thesis/include/scip/tree.h",
            "/Users/lentz/Desktop/thesis/include/tpi/tpi.h"
        ],
        "extra_compile_args": [
            "-std=c++11"
        ],
        "extra_link_args": [
            "-Wl,-rpath,/Users/lentz/Desktop/thesis/lib"
        ],
        "include_dirs": [
            "/Users/lentz/Desktop/thesis/include",
            "/Users/lentz/Desktop/thesis/include/gcg"
        ],
        "language": "c++",
        "libraries": [
            "scip",
            "gcg"
        ],
        "library_dirs": [
            "/Users/lentz/Desktop/thesis/lib"
        ],
        "name": "pygcgopt.gcg",
        "sources": [
            "src/pygcgopt/gcg.pyx"
        ]
    },
    "module_name": "pygcgopt.gcg"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_26"
#define CYTHON_HEX_VERSION 0x001D1AF0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL (PY_VERSION_HEX < 0x030B00A1)
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030B00A1
    static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *kwds=NULL, *argcount=NULL, *posonlyargcount=NULL, *kwonlyargcount=NULL;
        PyObject *nlocals=NULL, *stacksize=NULL, *flags=NULL, *replace=NULL, *call_result=NULL, *empty=NULL;
        const char *fn_cstr=NULL;
        const char *name_cstr=NULL;
        PyCodeObject* co=NULL;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        if (!(kwds=PyDict_New())) goto end;
        if (!(argcount=PyLong_FromLong(a))) goto end;
        if (PyDict_SetItemString(kwds, "co_argcount", argcount) != 0) goto end;
        if (!(posonlyargcount=PyLong_FromLong(0))) goto end;
        if (PyDict_SetItemString(kwds, "co_posonlyargcount", posonlyargcount) != 0) goto end;
        if (!(kwonlyargcount=PyLong_FromLong(k))) goto end;
        if (PyDict_SetItemString(kwds, "co_kwonlyargcount", kwonlyargcount) != 0) goto end;
        if (!(nlocals=PyLong_FromLong(l))) goto end;
        if (PyDict_SetItemString(kwds, "co_nlocals", nlocals) != 0) goto end;
        if (!(stacksize=PyLong_FromLong(s))) goto end;
        if (PyDict_SetItemString(kwds, "co_stacksize", stacksize) != 0) goto end;
        if (!(flags=PyLong_FromLong(f))) goto end;
        if (PyDict_SetItemString(kwds, "co_flags", flags) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_code", code) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_consts", c) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_names", n) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_varnames", v) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_freevars", fv) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_cellvars", cell) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_linetable", lnos) != 0) goto end;
        if (!(fn_cstr=PyUnicode_AsUTF8AndSize(fn, NULL))) goto end;
        if (!(name_cstr=PyUnicode_AsUTF8AndSize(name, NULL))) goto end;
        if (!(co = PyCode_NewEmpty(fn_cstr, name_cstr, fline))) goto end;
        if (!(replace = PyObject_GetAttrString((PyObject*)co, "replace"))) goto cleanup_code_too;
        if (!(empty = PyTuple_New(0))) goto cleanup_code_too; // unfortunately __pyx_empty_tuple isn't available here
        if (!(call_result = PyObject_Call(replace, empty, kwds))) goto cleanup_code_too;
        Py_XDECREF((PyObject*)co);
        co = (PyCodeObject*)call_result;
        call_result = NULL;
        if (0) {
            cleanup_code_too:
            Py_XDECREF((PyObject*)co);
            co = NULL;
        }
        end:
        Py_XDECREF(kwds);
        Py_XDECREF(argcount);
        Py_XDECREF(posonlyargcount);
        Py_XDECREF(kwonlyargcount);
        Py_XDECREF(nlocals);
        Py_XDECREF(stacksize);
        Py_XDECREF(replace);
        Py_XDECREF(call_result);
        Py_XDECREF(empty);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return co;
    }
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if defined(PyUnicode_IS_READY)
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #else
  #define __Pyx_PyUnicode_READY(op)       (0)
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #endif
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__pygcgopt__gcg
#define __PYX_HAVE_API__pygcgopt__gcg
/* Early includes */
#include "scip/scip.h"
#include "scip/tree.h"
#include "scip/scipdefplugins.h"
#include "scip/bendersdefcuts.h"
#include "scip/cons_linear.h"
#include "scip/cons_nonlinear.h"
#include "scip/cons_sos1.h"
#include "scip/cons_sos2.h"
#include "scip/cons_and.h"
#include "scip/cons_or.h"
#include "scip/cons_xor.h"
#include "scip/scip_cons.h"
#include "blockmemshell/memory.h"
#include "scip/scip_expr.h"
#include "scip/pub_expr.h"
#include "scip/expr_var.h"
#include "scip/expr_varidx.h"
#include "scip/expr_value.h"
#include "scip/expr_sum.h"
#include "scip/expr_abs.h"
#include "scip/expr_exp.h"
#include "scip/expr_log.h"
#include "scip/expr_product.h"
#include "scip/expr_pow.h"
#include "scip/pub_nlp.h"
#include "scip/scip_nlp.h"
#include "scip/cons_cardinality.h"
#include "scip/cons_indicator.h"
#include "scip/cons_countsols.h"
#include "scip/paramset.h"
#include "scip/pub_lp.h"
#include "scip/scip_tree.h"
#include "scip/scip_var.h"
#include "tpi/tpi.h"
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <string.h>
#include <string>
#include <utility>

    #if __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600)
    // move should be defined for these versions of MSVC, but __cplusplus isn't set usefully
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <map>
#include "limits.h"
#include "gcg/gcg.h"
#include "gcg/pub_gcgsepa.h"
#include "gcg/gcgplugins.h"
#include "gcg/pricer_gcg.h"
#include "gcg/pub_solver.h"
#include "gcg/pub_gcgcol.h"
#include "gcg/cons_decomp.h"
#include "gcg/cons_decomp.hpp"
#include "gcg/class_partialdecomp.h"
#include "gcg/class_detprobdata.h"
#include "gcg/class_conspartition.h"
#include "gcg/class_varpartition.h"
#include <stdio.h>
#include "pythread.h"
#include <stdlib.h>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "src/pygcgopt/detector.pxi",
  "src/pygcgopt/partition.pxi",
  "src/pygcgopt/decomposition.pxi",
  "src/pygcgopt/gcg.pyx",
  "stringsource",
  "src/pygcgopt/pricing_solver.pxi",
  "src/pygcgopt/detprobdata.pxi",
  "scip.pxd",
  "type.pxd",
  "bool.pxd",
  "complex.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_9pyscipopt_4scip_Expr;
struct __pyx_obj_9pyscipopt_4scip_Event;
struct __pyx_obj_9pyscipopt_4scip_Column;
struct __pyx_obj_9pyscipopt_4scip_Row;
struct __pyx_obj_9pyscipopt_4scip_NLRow;
struct __pyx_obj_9pyscipopt_4scip_Solution;
struct __pyx_obj_9pyscipopt_4scip_DomainChanges;
struct __pyx_obj_9pyscipopt_4scip_BoundChange;
struct __pyx_obj_9pyscipopt_4scip_Node;
struct __pyx_obj_9pyscipopt_4scip_Variable;
struct __pyx_obj_9pyscipopt_4scip_Constraint;
struct __pyx_obj_9pyscipopt_4scip_Model;
struct __pyx_obj_8pygcgopt_3gcg_GCGColumn;
struct __pyx_obj_8pygcgopt_3gcg_Detector;
struct __pyx_obj_8pygcgopt_3gcg_PricingSolver;
struct __pyx_obj_8pygcgopt_3gcg_ConsPart;
struct __pyx_obj_8pygcgopt_3gcg_VarPart;
struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition;
struct __pyx_obj_8pygcgopt_3gcg_DetProbData;
struct __pyx_obj_8pygcgopt_3gcg_PY_GCG_PRICINGSTATUS;
struct __pyx_obj_8pygcgopt_3gcg_GCGModel;
struct __pyx_obj_8pygcgopt_3gcg_GCGPricingModel;
struct __pyx_obj_8pygcgopt_3gcg_GCGMasterModel;
struct __pyx_opt_args_8pygcgopt_3gcg_20PartialDecomposition___generate_visualization;

/* "src/pygcgopt/decomposition.pxi":2137
 *         return self.__generate_visualization("png")
 * 
 *     cdef __generate_visualization(self, format="svg"):             # <<<<<<<<<<<<<<
 *         format = format.lower()
 *         if format not in ["svg", "png"]:
 */
struct __pyx_opt_args_8pygcgopt_3gcg_20PartialDecomposition___generate_visualization {
  int __pyx_n;
  PyObject *format;
};

/* "pyscipopt/scip.pxd":1734
 *     int SCIPtpiGetNumThreads()
 * 
 * cdef class Expr:             # <<<<<<<<<<<<<<
 *     cdef public terms
 * 
 */
struct __pyx_obj_9pyscipopt_4scip_Expr {
  PyObject_HEAD
  PyObject *terms;
};


/* "pyscipopt/scip.pxd":1737
 *     cdef public terms
 * 
 * cdef class Event:             # <<<<<<<<<<<<<<
 *     cdef SCIP_EVENT* event
 *     # can be used to store problem data
 */
struct __pyx_obj_9pyscipopt_4scip_Event {
  PyObject_HEAD
  struct __pyx_vtabstruct_9pyscipopt_4scip_Event *__pyx_vtab;
  SCIP_EVENT *event;
  PyObject *data;
};


/* "pyscipopt/scip.pxd":1744
 *     cdef create(SCIP_EVENT* scip_event)
 * 
 * cdef class Column:             # <<<<<<<<<<<<<<
 *     cdef SCIP_COL* scip_col
 *     # can be used to store problem data
 */
struct __pyx_obj_9pyscipopt_4scip_Column {
  PyObject_HEAD
  struct __pyx_vtabstruct_9pyscipopt_4scip_Column *__pyx_vtab;
  SCIP_COL *scip_col;
  PyObject *data;
};


/* "pyscipopt/scip.pxd":1752
 *     cdef create(SCIP_COL* scipcol)
 * 
 * cdef class Row:             # <<<<<<<<<<<<<<
 *     cdef SCIP_ROW* scip_row
 *     # can be used to store problem data
 */
struct __pyx_obj_9pyscipopt_4scip_Row {
  PyObject_HEAD
  struct __pyx_vtabstruct_9pyscipopt_4scip_Row *__pyx_vtab;
  SCIP_ROW *scip_row;
  PyObject *data;
};


/* "pyscipopt/scip.pxd":1760
 *     cdef create(SCIP_ROW* sciprow)
 * 
 * cdef class NLRow:             # <<<<<<<<<<<<<<
 *     cdef SCIP_NLROW* scip_nlrow
 *     # can be used to store problem data
 */
struct __pyx_obj_9pyscipopt_4scip_NLRow {
  PyObject_HEAD
  struct __pyx_vtabstruct_9pyscipopt_4scip_NLRow *__pyx_vtab;
  SCIP_NLROW *scip_nlrow;
  PyObject *data;
};


/* "pyscipopt/scip.pxd":1768
 *     cdef create(SCIP_NLROW* scipnlrow)
 * 
 * cdef class Solution:             # <<<<<<<<<<<<<<
 *     cdef SCIP_SOL* sol
 *     cdef SCIP* scip
 */
struct __pyx_obj_9pyscipopt_4scip_Solution {
  PyObject_HEAD
  struct __pyx_vtabstruct_9pyscipopt_4scip_Solution *__pyx_vtab;
  SCIP_SOL *sol;
  SCIP *scip;
  PyObject *data;
};


/* "pyscipopt/scip.pxd":1777
 *     cdef create(SCIP* scip, SCIP_SOL* scip_sol)
 * 
 * cdef class DomainChanges:             # <<<<<<<<<<<<<<
 *     cdef SCIP_DOMCHG* scip_domchg
 * 
 */
struct __pyx_obj_9pyscipopt_4scip_DomainChanges {
  PyObject_HEAD
  struct __pyx_vtabstruct_9pyscipopt_4scip_DomainChanges *__pyx_vtab;
  SCIP_DOMCHG *scip_domchg;
};


/* "pyscipopt/scip.pxd":1783
 *     cdef create(SCIP_DOMCHG* scip_domchg)
 * 
 * cdef class BoundChange:             # <<<<<<<<<<<<<<
 *     cdef SCIP_BOUNDCHG* scip_boundchg
 * 
 */
struct __pyx_obj_9pyscipopt_4scip_BoundChange {
  PyObject_HEAD
  struct __pyx_vtabstruct_9pyscipopt_4scip_BoundChange *__pyx_vtab;
  SCIP_BOUNDCHG *scip_boundchg;
};


/* "pyscipopt/scip.pxd":1789
 *     cdef create(SCIP_BOUNDCHG* scip_boundchg)
 * 
 * cdef class Node:             # <<<<<<<<<<<<<<
 *     cdef SCIP_NODE* scip_node
 *     # can be used to store problem data
 */
struct __pyx_obj_9pyscipopt_4scip_Node {
  PyObject_HEAD
  struct __pyx_vtabstruct_9pyscipopt_4scip_Node *__pyx_vtab;
  SCIP_NODE *scip_node;
  PyObject *data;
};


/* "pyscipopt/scip.pxd":1797
 *     cdef create(SCIP_NODE* scipnode)
 * 
 * cdef class Variable(Expr):             # <<<<<<<<<<<<<<
 *     cdef SCIP_VAR* scip_var
 *     # can be used to store problem data
 */
struct __pyx_obj_9pyscipopt_4scip_Variable {
  struct __pyx_obj_9pyscipopt_4scip_Expr __pyx_base;
  struct __pyx_vtabstruct_9pyscipopt_4scip_Variable *__pyx_vtab;
  SCIP_VAR *scip_var;
  PyObject *data;
};


/* "pyscipopt/scip.pxd":1805
 *     cdef create(SCIP_VAR* scipvar)
 * 
 * cdef class Constraint:             # <<<<<<<<<<<<<<
 *     cdef SCIP_CONS* scip_cons
 *     # can be used to store problem data
 */
struct __pyx_obj_9pyscipopt_4scip_Constraint {
  PyObject_HEAD
  struct __pyx_vtabstruct_9pyscipopt_4scip_Constraint *__pyx_vtab;
  SCIP_CONS *scip_cons;
  PyObject *data;
};


/* "pyscipopt/scip.pxd":1813
 *     cdef create(SCIP_CONS* scipcons)
 * 
 * cdef class Model:             # <<<<<<<<<<<<<<
 *     cdef SCIP* _scip
 *     cdef SCIP_Bool* _valid
 */
struct __pyx_obj_9pyscipopt_4scip_Model {
  PyObject_HEAD
  struct __pyx_vtabstruct_9pyscipopt_4scip_Model *__pyx_vtab;
  SCIP *_scip;
  SCIP_Bool *_valid;
  struct __pyx_obj_9pyscipopt_4scip_Solution *_bestSol;
  PyObject *data;
  PyObject *__weakref__;
  SCIP_Bool _freescip;
  PyObject *_modelvars;
};


/* "pygcgopt/gcg.pxd":434
 * 
 * 
 * cdef class GCGColumn:             # <<<<<<<<<<<<<<
 *     cdef GCG_COL* gcg_col
 * 
 */
struct __pyx_obj_8pygcgopt_3gcg_GCGColumn {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pygcgopt_3gcg_GCGColumn *__pyx_vtab;
  GCG_COL *gcg_col;
};


/* "src/pygcgopt/detector.pxi":1
 * cdef class Detector:             # <<<<<<<<<<<<<<
 *     """Base class of the Detector Plugin"""
 *     cdef public Model model
 */
struct __pyx_obj_8pygcgopt_3gcg_Detector {
  PyObject_HEAD
  struct __pyx_obj_9pyscipopt_4scip_Model *model;
  PyObject *detectorname;
};


/* "src/pygcgopt/pricing_solver.pxi":1
 * cdef class PricingSolver:             # <<<<<<<<<<<<<<
 *     """Base class of the Pricing Solver Plugin"""
 * 
 */
struct __pyx_obj_8pygcgopt_3gcg_PricingSolver {
  PyObject_HEAD
  struct __pyx_obj_9pyscipopt_4scip_Model *model;
  PyObject *solvername;
};


/* "src/pygcgopt/partition.pxi":1
 * cdef class ConsPart:             # <<<<<<<<<<<<<<
 *     cdef ConsPartition * thisptr
 *     cdef DetProbData detProbData
 */
struct __pyx_obj_8pygcgopt_3gcg_ConsPart {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pygcgopt_3gcg_ConsPart *__pyx_vtab;
  gcg::ConsPartition *thisptr;
  struct __pyx_obj_8pygcgopt_3gcg_DetProbData *detProbData;
  bool delete_thisptr;
};


/* "src/pygcgopt/partition.pxi":115
 * 
 * 
 * cdef class VarPart:             # <<<<<<<<<<<<<<
 *     cdef VarPartition * thisptr
 *     cdef bool delete_thisptr
 */
struct __pyx_obj_8pygcgopt_3gcg_VarPart {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pygcgopt_3gcg_VarPart *__pyx_vtab;
  gcg::VarPartition *thisptr;
  bool delete_thisptr;
};


/* "src/pygcgopt/decomposition.pxi":1
 * cdef class PartialDecomposition:             # <<<<<<<<<<<<<<
 *     """class to manage partial decompositions
 * 
 */
struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pygcgopt_3gcg_PartialDecomposition *__pyx_vtab;
  gcg::PARTIALDECOMP *thisptr;
  bool delete_thisptr;
  PyObject *_visualizations;
  PyObject *py_block_id_map;
};


/* "src/pygcgopt/detprobdata.pxi":1
 * cdef class DetProbData:             # <<<<<<<<<<<<<<
 *     """class to manage the detection process and data for one coefficient matrix of a MIP, usually there is one detprobdata for the original and one detprobdata for the presolved problem.
 *     """
 */
struct __pyx_obj_8pygcgopt_3gcg_DetProbData {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pygcgopt_3gcg_DetProbData *__pyx_vtab;
  gcg::DETPROBDATA *thisptr;
  bool delete_thisptr;
  PyObject *__weakref__;
};


/* "pygcgopt/gcg.pyx":44
 * 
 * 
 * cdef class PY_GCG_PRICINGSTATUS:             # <<<<<<<<<<<<<<
 *     UNKNOWN = GCG_PRICINGSTATUS_UNKNOWN
 *     NOTAPPLICABLE = GCG_PRICINGSTATUS_NOTAPPLICABLE
 */
struct __pyx_obj_8pygcgopt_3gcg_PY_GCG_PRICINGSTATUS {
  PyObject_HEAD
};


/* "pygcgopt/gcg.pyx":53
 * 
 * 
 * cdef class GCGModel(Model):             # <<<<<<<<<<<<<<
 *     """Main class for interaction with the GCG solver."""
 * 
 */
struct __pyx_obj_8pygcgopt_3gcg_GCGModel {
  struct __pyx_obj_9pyscipopt_4scip_Model __pyx_base;
};


/* "pygcgopt/gcg.pyx":351
 * 
 * 
 * cdef class GCGPricingModel(Model):             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef create(SCIP* scip):
 */
struct __pyx_obj_8pygcgopt_3gcg_GCGPricingModel {
  struct __pyx_obj_9pyscipopt_4scip_Model __pyx_base;
};


/* "pygcgopt/gcg.pyx":391
 * 
 * 
 * cdef class GCGMasterModel(Model):             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef create(SCIP* scip):
 */
struct __pyx_obj_8pygcgopt_3gcg_GCGMasterModel {
  struct __pyx_obj_9pyscipopt_4scip_Model __pyx_base;
};



/* "pyscipopt/scip.pxd":1737
 *     cdef public terms
 * 
 * cdef class Event:             # <<<<<<<<<<<<<<
 *     cdef SCIP_EVENT* event
 *     # can be used to store problem data
 */

struct __pyx_vtabstruct_9pyscipopt_4scip_Event {
  PyObject *(*create)(SCIP_EVENT *);
};
static struct __pyx_vtabstruct_9pyscipopt_4scip_Event *__pyx_vtabptr_9pyscipopt_4scip_Event;


/* "pyscipopt/scip.pxd":1744
 *     cdef create(SCIP_EVENT* scip_event)
 * 
 * cdef class Column:             # <<<<<<<<<<<<<<
 *     cdef SCIP_COL* scip_col
 *     # can be used to store problem data
 */

struct __pyx_vtabstruct_9pyscipopt_4scip_Column {
  PyObject *(*create)(SCIP_COL *);
};
static struct __pyx_vtabstruct_9pyscipopt_4scip_Column *__pyx_vtabptr_9pyscipopt_4scip_Column;


/* "pyscipopt/scip.pxd":1752
 *     cdef create(SCIP_COL* scipcol)
 * 
 * cdef class Row:             # <<<<<<<<<<<<<<
 *     cdef SCIP_ROW* scip_row
 *     # can be used to store problem data
 */

struct __pyx_vtabstruct_9pyscipopt_4scip_Row {
  PyObject *(*create)(SCIP_ROW *);
};
static struct __pyx_vtabstruct_9pyscipopt_4scip_Row *__pyx_vtabptr_9pyscipopt_4scip_Row;


/* "pyscipopt/scip.pxd":1760
 *     cdef create(SCIP_ROW* sciprow)
 * 
 * cdef class NLRow:             # <<<<<<<<<<<<<<
 *     cdef SCIP_NLROW* scip_nlrow
 *     # can be used to store problem data
 */

struct __pyx_vtabstruct_9pyscipopt_4scip_NLRow {
  PyObject *(*create)(SCIP_NLROW *);
};
static struct __pyx_vtabstruct_9pyscipopt_4scip_NLRow *__pyx_vtabptr_9pyscipopt_4scip_NLRow;


/* "pyscipopt/scip.pxd":1768
 *     cdef create(SCIP_NLROW* scipnlrow)
 * 
 * cdef class Solution:             # <<<<<<<<<<<<<<
 *     cdef SCIP_SOL* sol
 *     cdef SCIP* scip
 */

struct __pyx_vtabstruct_9pyscipopt_4scip_Solution {
  PyObject *(*create)(SCIP *, SCIP_SOL *);
};
static struct __pyx_vtabstruct_9pyscipopt_4scip_Solution *__pyx_vtabptr_9pyscipopt_4scip_Solution;


/* "pyscipopt/scip.pxd":1777
 *     cdef create(SCIP* scip, SCIP_SOL* scip_sol)
 * 
 * cdef class DomainChanges:             # <<<<<<<<<<<<<<
 *     cdef SCIP_DOMCHG* scip_domchg
 * 
 */

struct __pyx_vtabstruct_9pyscipopt_4scip_DomainChanges {
  PyObject *(*create)(SCIP_DOMCHG *);
};
static struct __pyx_vtabstruct_9pyscipopt_4scip_DomainChanges *__pyx_vtabptr_9pyscipopt_4scip_DomainChanges;


/* "pyscipopt/scip.pxd":1783
 *     cdef create(SCIP_DOMCHG* scip_domchg)
 * 
 * cdef class BoundChange:             # <<<<<<<<<<<<<<
 *     cdef SCIP_BOUNDCHG* scip_boundchg
 * 
 */

struct __pyx_vtabstruct_9pyscipopt_4scip_BoundChange {
  PyObject *(*create)(SCIP_BOUNDCHG *);
};
static struct __pyx_vtabstruct_9pyscipopt_4scip_BoundChange *__pyx_vtabptr_9pyscipopt_4scip_BoundChange;


/* "pyscipopt/scip.pxd":1789
 *     cdef create(SCIP_BOUNDCHG* scip_boundchg)
 * 
 * cdef class Node:             # <<<<<<<<<<<<<<
 *     cdef SCIP_NODE* scip_node
 *     # can be used to store problem data
 */

struct __pyx_vtabstruct_9pyscipopt_4scip_Node {
  PyObject *(*create)(SCIP_NODE *);
};
static struct __pyx_vtabstruct_9pyscipopt_4scip_Node *__pyx_vtabptr_9pyscipopt_4scip_Node;


/* "pyscipopt/scip.pxd":1797
 *     cdef create(SCIP_NODE* scipnode)
 * 
 * cdef class Variable(Expr):             # <<<<<<<<<<<<<<
 *     cdef SCIP_VAR* scip_var
 *     # can be used to store problem data
 */

struct __pyx_vtabstruct_9pyscipopt_4scip_Variable {
  PyObject *(*create)(SCIP_VAR *);
};
static struct __pyx_vtabstruct_9pyscipopt_4scip_Variable *__pyx_vtabptr_9pyscipopt_4scip_Variable;


/* "pyscipopt/scip.pxd":1805
 *     cdef create(SCIP_VAR* scipvar)
 * 
 * cdef class Constraint:             # <<<<<<<<<<<<<<
 *     cdef SCIP_CONS* scip_cons
 *     # can be used to store problem data
 */

struct __pyx_vtabstruct_9pyscipopt_4scip_Constraint {
  PyObject *(*create)(SCIP_CONS *);
};
static struct __pyx_vtabstruct_9pyscipopt_4scip_Constraint *__pyx_vtabptr_9pyscipopt_4scip_Constraint;


/* "pyscipopt/scip.pxd":1813
 *     cdef create(SCIP_CONS* scipcons)
 * 
 * cdef class Model:             # <<<<<<<<<<<<<<
 *     cdef SCIP* _scip
 *     cdef SCIP_Bool* _valid
 */

struct __pyx_vtabstruct_9pyscipopt_4scip_Model {
  PyObject *(*create)(SCIP *);
};
static struct __pyx_vtabstruct_9pyscipopt_4scip_Model *__pyx_vtabptr_9pyscipopt_4scip_Model;


/* "pygcgopt/gcg.pyx":407
 * 
 * 
 * cdef class GCGColumn:             # <<<<<<<<<<<<<<
 *     """Base class holding a pointer to corresponding GCG_COL"""
 * 
 */

struct __pyx_vtabstruct_8pygcgopt_3gcg_GCGColumn {
  PyObject *(*create)(GCG_COL *);
};
static struct __pyx_vtabstruct_8pygcgopt_3gcg_GCGColumn *__pyx_vtabptr_8pygcgopt_3gcg_GCGColumn;


/* "src/pygcgopt/partition.pxi":1
 * cdef class ConsPart:             # <<<<<<<<<<<<<<
 *     cdef ConsPartition * thisptr
 *     cdef DetProbData detProbData
 */

struct __pyx_vtabstruct_8pygcgopt_3gcg_ConsPart {
  PyObject *(*create)(gcg::ConsPartition *, struct __pyx_obj_8pygcgopt_3gcg_DetProbData *);
};
static struct __pyx_vtabstruct_8pygcgopt_3gcg_ConsPart *__pyx_vtabptr_8pygcgopt_3gcg_ConsPart;


/* "src/pygcgopt/partition.pxi":115
 * 
 * 
 * cdef class VarPart:             # <<<<<<<<<<<<<<
 *     cdef VarPartition * thisptr
 *     cdef bool delete_thisptr
 */

struct __pyx_vtabstruct_8pygcgopt_3gcg_VarPart {
  PyObject *(*create)(gcg::VarPartition *);
};
static struct __pyx_vtabstruct_8pygcgopt_3gcg_VarPart *__pyx_vtabptr_8pygcgopt_3gcg_VarPart;


/* "src/pygcgopt/decomposition.pxi":1
 * cdef class PartialDecomposition:             # <<<<<<<<<<<<<<
 *     """class to manage partial decompositions
 * 
 */

struct __pyx_vtabstruct_8pygcgopt_3gcg_PartialDecomposition {
  PyObject *(*create)(gcg::PARTIALDECOMP *);
  PyObject *(*__pyx___generate_visualization)(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *, struct __pyx_opt_args_8pygcgopt_3gcg_20PartialDecomposition___generate_visualization *__pyx_optional_args);
};
static struct __pyx_vtabstruct_8pygcgopt_3gcg_PartialDecomposition *__pyx_vtabptr_8pygcgopt_3gcg_PartialDecomposition;


/* "src/pygcgopt/detprobdata.pxi":1
 * cdef class DetProbData:             # <<<<<<<<<<<<<<
 *     """class to manage the detection process and data for one coefficient matrix of a MIP, usually there is one detprobdata for the original and one detprobdata for the presolved problem.
 *     """
 */

struct __pyx_vtabstruct_8pygcgopt_3gcg_DetProbData {
  PyObject *(*create)(gcg::DETPROBDATA *);
};
static struct __pyx_vtabstruct_8pygcgopt_3gcg_DetProbData *__pyx_vtabptr_8pygcgopt_3gcg_DetProbData;


/* "pygcgopt/gcg.pyx":53
 * 
 * 
 * cdef class GCGModel(Model):             # <<<<<<<<<<<<<<
 *     """Main class for interaction with the GCG solver."""
 * 
 */

struct __pyx_vtabstruct_8pygcgopt_3gcg_GCGModel {
  struct __pyx_vtabstruct_9pyscipopt_4scip_Model __pyx_base;
};
static struct __pyx_vtabstruct_8pygcgopt_3gcg_GCGModel *__pyx_vtabptr_8pygcgopt_3gcg_GCGModel;


/* "pygcgopt/gcg.pyx":351
 * 
 * 
 * cdef class GCGPricingModel(Model):             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef create(SCIP* scip):
 */

struct __pyx_vtabstruct_8pygcgopt_3gcg_GCGPricingModel {
  struct __pyx_vtabstruct_9pyscipopt_4scip_Model __pyx_base;
};
static struct __pyx_vtabstruct_8pygcgopt_3gcg_GCGPricingModel *__pyx_vtabptr_8pygcgopt_3gcg_GCGPricingModel;


/* "pygcgopt/gcg.pyx":391
 * 
 * 
 * cdef class GCGMasterModel(Model):             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef create(SCIP* scip):
 */

struct __pyx_vtabstruct_8pygcgopt_3gcg_GCGMasterModel {
  struct __pyx_vtabstruct_9pyscipopt_4scip_Model __pyx_base;
};
static struct __pyx_vtabstruct_8pygcgopt_3gcg_GCGMasterModel *__pyx_vtabptr_8pygcgopt_3gcg_GCGMasterModel;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if CYTHON_FAST_PYCALL
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif // CYTHON_FAST_PYCALL
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* IncludeStringH.proto */
#include <string.h>

/* decode_c_string_utf16.proto */
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 0;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16LE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = -1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16BE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}

/* decode_c_string.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* PyObjectFormatSimple.proto */
#if CYTHON_COMPILING_IN_PYPY
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#elif PY_MAJOR_VERSION < 3
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyString_CheckExact(s)) ? PyUnicode_FromEncodedObject(s, NULL, "strict") :\
        PyObject_Format(s, f))
#elif CYTHON_USE_TYPE_SLOTS
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyLong_CheckExact(s)) ? PyLong_Type.tp_str(s) :\
        likely(PyFloat_CheckExact(s)) ? PyFloat_Type.tp_str(s) :\
        PyObject_Format(s, f))
#else
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#endif

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* IncludeCppStringH.proto */
#include <string>

/* decode_c_bytes.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* decode_cpp_string.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_cpp_string(
         std::string cppstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    return __Pyx_decode_c_bytes(
        cppstring.data(), cppstring.size(), start, stop, encoding, errors, decode_func);
}

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* UnpackTupleError.proto */
static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

/* UnpackTuple2.proto */
#define __Pyx_unpack_tuple2(tuple, value1, value2, is_tuple, has_known_size, decref_tuple)\
    (likely(is_tuple || PyTuple_Check(tuple)) ?\
        (likely(has_known_size || PyTuple_GET_SIZE(tuple) == 2) ?\
            __Pyx_unpack_tuple2_exact(tuple, value1, value2, decref_tuple) :\
            (__Pyx_UnpackTupleError(tuple, 2), -1)) :\
        __Pyx_unpack_tuple2_generic(tuple, value1, value2, has_known_size, decref_tuple))
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
    PyObject* tuple, PyObject** value1, PyObject** value2, int decref_tuple);
static int __Pyx_unpack_tuple2_generic(
    PyObject* tuple, PyObject** value1, PyObject** value2, int has_known_size, int decref_tuple);

/* dict_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_NeObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* PyFloatBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_AddObjC(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyFloat_AddObjC(op1, op2, floatval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* SliceTupleAndList.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_GetSlice(PyObject* src, Py_ssize_t start, Py_ssize_t stop);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_GetSlice(PyObject* src, Py_ssize_t start, Py_ssize_t stop);
#else
#define __Pyx_PyList_GetSlice(seq, start, stop)   PySequence_GetSlice(seq, start, stop)
#define __Pyx_PyTuple_GetSlice(seq, start, stop)  PySequence_GetSlice(seq, start, stop)
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_TrueDivideObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_TrueDivideObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceTrueDivide(op1, op2) : PyNumber_TrueDivide(op1, op2))
#endif

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyDictContains.proto */
static CYTHON_INLINE int __Pyx_PyDict_ContainsTF(PyObject* item, PyObject* dict, int eq) {
    int result = PyDict_Contains(dict, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* PyObjectLookupSpecial.proto */
#if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name) {
    PyObject *res;
    PyTypeObject *tp = Py_TYPE(obj);
#if PY_MAJOR_VERSION < 3
    if (unlikely(PyInstance_Check(obj)))
        return __Pyx_PyObject_GetAttrStr(obj, attr_name);
#endif
    res = _PyType_Lookup(tp, attr_name);
    if (likely(res)) {
        descrgetfunc f = Py_TYPE(res)->tp_descr_get;
        if (!f) {
            Py_INCREF(res);
        } else {
            res = f(res, obj, (PyObject *)tp);
        }
    } else {
        PyErr_SetObject(PyExc_AttributeError, attr_name);
    }
    return res;
}
#else
#define __Pyx_PyObject_LookupSpecial(o,n) __Pyx_PyObject_GetAttrStr(o,n)
#endif

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* UnicodeAsUCS4.proto */
static CYTHON_INLINE Py_UCS4 __Pyx_PyUnicode_AsPy_UCS4(PyObject*);

/* object_ord.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyObject_Ord(c)\
    (likely(PyUnicode_Check(c)) ? (long)__Pyx_PyUnicode_AsPy_UCS4(c) : __Pyx__PyObject_Ord(c))
#else
#define __Pyx_PyObject_Ord(c) __Pyx__PyObject_Ord(c)
#endif
static long __Pyx__PyObject_Ord(PyObject* c);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* CallNextTpDealloc.proto */
static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc);

/* CallNextTpTraverse.proto */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse);

/* CallNextTpClear.proto */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_dealloc);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE gcg::USERGIVEN __Pyx_PyInt_As_gcg_3a__3a_USERGIVEN(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_GCG_PRICINGSTATUS(GCG_PRICINGSTATUS value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_SCIP_RESULT(SCIP_RESULT value);

/* CIntFromPy.proto */
static CYTHON_INLINE SCIP_RESULT __Pyx_PyInt_As_SCIP_RESULT(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE GCG_PRICINGSTATUS __Pyx_PyInt_As_GCG_PRICINGSTATUS(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_long(unsigned long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_SCIP_RETCODE(SCIP_RETCODE value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_SCIP_STAGE(SCIP_STAGE value);

/* CIntFromPy.proto */
static CYTHON_INLINE SCIP_PARAMSETTING __Pyx_PyInt_As_SCIP_PARAMSETTING(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static PyObject *__pyx_f_8pygcgopt_3gcg_8ConsPart_create(gcg::ConsPartition *__pyx_v_thisptr, struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_detProbData); /* proto*/
static PyObject *__pyx_f_8pygcgopt_3gcg_7VarPart_create(gcg::VarPartition *__pyx_v_thisptr); /* proto*/
static PyObject *__pyx_f_8pygcgopt_3gcg_20PartialDecomposition_create(gcg::PARTIALDECOMP *__pyx_v_thisptr); /* proto*/
static PyObject *__pyx_f_8pygcgopt_3gcg_20PartialDecomposition___generate_visualization(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, struct __pyx_opt_args_8pygcgopt_3gcg_20PartialDecomposition___generate_visualization *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_8pygcgopt_3gcg_11DetProbData_create(gcg::DETPROBDATA *__pyx_v_thisptr); /* proto*/
static PyObject *__pyx_f_8pygcgopt_3gcg_15GCGPricingModel_create(SCIP *__pyx_v_scip); /* proto*/
static PyObject *__pyx_f_8pygcgopt_3gcg_14GCGMasterModel_create(SCIP *__pyx_v_scip); /* proto*/
static PyObject *__pyx_f_8pygcgopt_3gcg_9GCGColumn_create(GCG_COL *__pyx_v_gcgcol); /* proto*/

/* Module declarations from 'pyscipopt.scip' */
static PyTypeObject *__pyx_ptype_9pyscipopt_4scip_Expr = 0;
static PyTypeObject *__pyx_ptype_9pyscipopt_4scip_Event = 0;
static PyTypeObject *__pyx_ptype_9pyscipopt_4scip_Column = 0;
static PyTypeObject *__pyx_ptype_9pyscipopt_4scip_Row = 0;
static PyTypeObject *__pyx_ptype_9pyscipopt_4scip_NLRow = 0;
static PyTypeObject *__pyx_ptype_9pyscipopt_4scip_Solution = 0;
static PyTypeObject *__pyx_ptype_9pyscipopt_4scip_DomainChanges = 0;
static PyTypeObject *__pyx_ptype_9pyscipopt_4scip_BoundChange = 0;
static PyTypeObject *__pyx_ptype_9pyscipopt_4scip_Node = 0;
static PyTypeObject *__pyx_ptype_9pyscipopt_4scip_Variable = 0;
static PyTypeObject *__pyx_ptype_9pyscipopt_4scip_Constraint = 0;
static PyTypeObject *__pyx_ptype_9pyscipopt_4scip_Model = 0;

/* Module declarations from 'libcpp' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.pair' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'cpython.version' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.exc' */

/* Module declarations from 'cpython.module' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'cpython.tuple' */

/* Module declarations from 'cpython.list' */

/* Module declarations from 'cpython.sequence' */

/* Module declarations from 'cpython.mapping' */

/* Module declarations from 'cpython.iterator' */

/* Module declarations from 'cpython.number' */

/* Module declarations from 'cpython.int' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.bool' */
static PyTypeObject *__pyx_ptype_7cpython_4bool_bool = 0;

/* Module declarations from 'cpython.long' */

/* Module declarations from 'cpython.float' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.complex' */
static PyTypeObject *__pyx_ptype_7cpython_7complex_complex = 0;

/* Module declarations from 'cpython.string' */

/* Module declarations from 'cpython.unicode' */

/* Module declarations from 'cpython.dict' */

/* Module declarations from 'cpython.instance' */

/* Module declarations from 'cpython.function' */

/* Module declarations from 'cpython.method' */

/* Module declarations from 'cpython.weakref' */

/* Module declarations from 'cpython.getargs' */

/* Module declarations from 'cpython.pythread' */

/* Module declarations from 'cpython.pystate' */

/* Module declarations from 'cpython.cobject' */

/* Module declarations from 'cpython.oldbuffer' */

/* Module declarations from 'cpython.set' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'cpython.bytes' */

/* Module declarations from 'cpython.pycapsule' */

/* Module declarations from 'cpython' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'pygcgopt.gcg' */
static PyTypeObject *__pyx_ptype_8pygcgopt_3gcg_GCGColumn = 0;
static PyTypeObject *__pyx_ptype_8pygcgopt_3gcg_Detector = 0;
static PyTypeObject *__pyx_ptype_8pygcgopt_3gcg_PricingSolver = 0;
static PyTypeObject *__pyx_ptype_8pygcgopt_3gcg_ConsPart = 0;
static PyTypeObject *__pyx_ptype_8pygcgopt_3gcg_VarPart = 0;
static PyTypeObject *__pyx_ptype_8pygcgopt_3gcg_PartialDecomposition = 0;
static PyTypeObject *__pyx_ptype_8pygcgopt_3gcg_DetProbData = 0;
static PyTypeObject *__pyx_ptype_8pygcgopt_3gcg_PY_GCG_PRICINGSTATUS = 0;
static PyTypeObject *__pyx_ptype_8pygcgopt_3gcg_GCGModel = 0;
static PyTypeObject *__pyx_ptype_8pygcgopt_3gcg_GCGPricingModel = 0;
static PyTypeObject *__pyx_ptype_8pygcgopt_3gcg_GCGMasterModel = 0;
static struct __pyx_obj_8pygcgopt_3gcg_Detector *__pyx_f_8pygcgopt_3gcg_get_py_detector(DEC_DETECTOR *); /*proto*/
static PyObject *__pyx_f_8pygcgopt_3gcg_get_py_partialdec_detection_data(PARTIALDEC_DETECTION_DATA *); /*proto*/
static PyObject *__pyx_f_8pygcgopt_3gcg_wrap_detector_callback_result(struct __pyx_obj_8pygcgopt_3gcg_Detector *, PARTIALDEC_DETECTION_DATA *, SCIP_RESULT *, PyObject *, double); /*proto*/
static SCIP_RETCODE __pyx_f_8pygcgopt_3gcg_PyDetectorFree(SCIP *, DEC_DETECTOR *); /*proto*/
static SCIP_RETCODE __pyx_f_8pygcgopt_3gcg_PyDetectorInit(SCIP *, DEC_DETECTOR *); /*proto*/
static SCIP_RETCODE __pyx_f_8pygcgopt_3gcg_PyDetectorExit(SCIP *, DEC_DETECTOR *); /*proto*/
static SCIP_RETCODE __pyx_f_8pygcgopt_3gcg_PyDetectorPropagatePartialdec(SCIP *, DEC_DETECTOR *, PARTIALDEC_DETECTION_DATA *, SCIP_RESULT *); /*proto*/
static SCIP_RETCODE __pyx_f_8pygcgopt_3gcg_PyDetectorFinishPartialdec(SCIP *, DEC_DETECTOR *, PARTIALDEC_DETECTION_DATA *, SCIP_RESULT *); /*proto*/
static SCIP_RETCODE __pyx_f_8pygcgopt_3gcg_PyDetectorPostprocessPartialdec(SCIP *, DEC_DETECTOR *, PARTIALDEC_DETECTION_DATA *, SCIP_RESULT *); /*proto*/
static SCIP_RETCODE __pyx_f_8pygcgopt_3gcg_PyDetectorSetParamAggressive(SCIP *, DEC_DETECTOR *, SCIP_RESULT *); /*proto*/
static SCIP_RETCODE __pyx_f_8pygcgopt_3gcg_PyDetectorSetParamDefault(SCIP *, DEC_DETECTOR *, SCIP_RESULT *); /*proto*/
static SCIP_RETCODE __pyx_f_8pygcgopt_3gcg_PyDetectorSetParamFast(SCIP *, DEC_DETECTOR *, SCIP_RESULT *); /*proto*/
static struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *__pyx_f_8pygcgopt_3gcg_get_py_pricing_solver(GCG_SOLVER *); /*proto*/
static SCIP_RETCODE __pyx_f_8pygcgopt_3gcg_PyPricingSolverFree(SCIP *, GCG_SOLVER *); /*proto*/
static SCIP_RETCODE __pyx_f_8pygcgopt_3gcg_PyPricingSolverInit(SCIP *, GCG_SOLVER *); /*proto*/
static SCIP_RETCODE __pyx_f_8pygcgopt_3gcg_PyPricingSolverExit(SCIP *, GCG_SOLVER *); /*proto*/
static SCIP_RETCODE __pyx_f_8pygcgopt_3gcg_PyPricingSolverInitSol(SCIP *, GCG_SOLVER *); /*proto*/
static SCIP_RETCODE __pyx_f_8pygcgopt_3gcg_PyPricingSolverExitSol(SCIP *, GCG_SOLVER *); /*proto*/
static SCIP_RETCODE __pyx_f_8pygcgopt_3gcg_PyPricingSolverUpdate(SCIP *, GCG_SOLVER *, int, SCIP_Bool, SCIP_Bool, SCIP_Bool); /*proto*/
static SCIP_RETCODE __pyx_f_8pygcgopt_3gcg_PyPricingSolverSolve(SCIP *, SCIP *, GCG_SOLVER *, int, SCIP_Real, SCIP_Real *, GCG_PRICINGSTATUS *); /*proto*/
static SCIP_RETCODE __pyx_f_8pygcgopt_3gcg_PyPricingSolverSolveHeur(SCIP *, SCIP *, GCG_SOLVER *, int, SCIP_Real, SCIP_Real *, GCG_PRICINGSTATUS *); /*proto*/
static SCIP_CLOCK *__pyx_f_8pygcgopt_3gcg_start_new_clock(SCIP *); /*proto*/
static double __pyx_f_8pygcgopt_3gcg_stop_and_free_clock(SCIP *, SCIP_CLOCK *); /*proto*/
static PyObject *__pyx_f_8pygcgopt_3gcg___pyx_unpickle_Detector__set_state(struct __pyx_obj_8pygcgopt_3gcg_Detector *, PyObject *); /*proto*/
static PyObject *__pyx_f_8pygcgopt_3gcg___pyx_unpickle_PricingSolver__set_state(struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *, PyObject *); /*proto*/
static PyObject *__pyx_f_8pygcgopt_3gcg___pyx_unpickle_PY_GCG_PRICINGSTATUS__set_state(struct __pyx_obj_8pygcgopt_3gcg_PY_GCG_PRICINGSTATUS *, PyObject *); /*proto*/
static PyObject *__pyx_convert_vector_to_py_int(const std::vector<int>  &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___(const std::vector<std::vector<int> >  &); /*proto*/
static std::vector<int>  __pyx_convert_vector_from_py_int(PyObject *); /*proto*/
static PyObject *__pyx_convert_vector_to_py_double(const std::vector<double>  &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_string(const std::vector<std::string>  &); /*proto*/
static std::vector<double>  __pyx_convert_vector_from_py_double(PyObject *); /*proto*/
static PyObject *__pyx_convert_pair_to_py_int____int(std::pair<int,int>  const &); /*proto*/
static PyObject *__pyx_convert_map_to_py_std_3a__3a_pair_3c_int_2c_int_3e_______double(std::map<std::pair<int,int> ,double>  const &); /*proto*/
static PyObject *__pyx_convert_map_to_py_std_3a__3a_pair_3c_int_2c_int_3e_______int(std::map<std::pair<int,int> ,int>  const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e___(const std::vector<std::pair<int,int> >  &); /*proto*/
static std::pair<int,int>  __pyx_convert_pair_from_py_int__and_int(PyObject *); /*proto*/
static std::vector<std::pair<int,int> >  __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e___(PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "pygcgopt.gcg"
extern int __pyx_module_is_main_pygcgopt__gcg;
int __pyx_module_is_main_pygcgopt__gcg = 0;

/* Implementation of 'pygcgopt.gcg' */
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_Warning;
static PyObject *__pyx_builtin_NotImplementedError;
static PyObject *__pyx_builtin_ImportError;
static PyObject *__pyx_builtin_print;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_super;
static PyObject *__pyx_builtin_enumerate;
static const char __pyx_k_N[] = "N";
static const char __pyx_k_c[] = "c";
static const char __pyx_k_s[] = "s";
static const char __pyx_k__3[] = ">";
static const char __pyx_k_ax[] = "ax";
static const char __pyx_k_BIN[] = "BIN";
static const char __pyx_k_IMP[] = "IMP";
static const char __pyx_k_INT[] = "INT";
static const char __pyx_k__12[] = "*";
static const char __pyx_k__18[] = ".";
static const char __pyx_k_all[] = "all";
static const char __pyx_k_col[] = "col";
static const char __pyx_k_dec[] = "dec";
static const char __pyx_k_dpi[] = "dpi";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_obj[] = "obj";
static const char __pyx_k_png[] = "png";
static const char __pyx_k_red[] = "red";
static const char __pyx_k_row[] = "row";
static const char __pyx_k_svg[] = "svg";
static const char __pyx_k_tan[] = "tan";
static const char __pyx_k_top[] = "top";
static const char __pyx_k_var[] = "var";
static const char __pyx_k_vis[] = "vis";
static const char __pyx_k_AGGR[] = "AGGR";
static const char __pyx_k_BINP[] = "BINP";
static const char __pyx_k_CARD[] = "CARD";
static const char __pyx_k_CONT[] = "CONT";
static const char __pyx_k_EQUK[] = "EQUK";
static const char __pyx_k_FREE[] = "FREE";
static const char __pyx_k_GENL[] = "GENL";
static const char __pyx_k_IKNA[] = "IKNA";
static const char __pyx_k_INVK[] = "INVK";
static const char __pyx_k_KNAP[] = "KNAP";
static const char __pyx_k_List[] = "List";
static const char __pyx_k_MIXB[] = "MIXB";
static const char __pyx_k_NONE[] = "NONE";
static const char __pyx_k_Path[] = "Path";
static const char __pyx_k_SCOV[] = "SCOV";
static const char __pyx_k_SING[] = "SING";
static const char __pyx_k_SPAC[] = "SPAC";
static const char __pyx_k_SPAR[] = "SPAR";
static const char __pyx_k_VARB[] = "VARB";
static const char __pyx_k_blue[] = "blue";
static const char __pyx_k_both[] = "both";
static const char __pyx_k_cmap[] = "cmap";
static const char __pyx_k_cons[] = "cons";
static const char __pyx_k_copy[] = "copy";
static const char __pyx_k_desc[] = "desc";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_dots[] = "dots";
static const char __pyx_k_exit[] = "__exit__";
static const char __pyx_k_gray[] = "gray";
static const char __pyx_k_lime[] = "lime";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_norm[] = "norm";
static const char __pyx_k_show[] = "show";
static const char __pyx_k_skip[] = "skip";
static const char __pyx_k_sort[] = "sort";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_vals[] = "vals";
static const char __pyx_k_xmax[] = "xmax";
static const char __pyx_k_xmin[] = "xmin";
static const char __pyx_k_EMPTY[] = "EMPTY";
static const char __pyx_k_alpha[] = "alpha";
static const char __pyx_k_bcoef[] = "bcoef";
static const char __pyx_k_black[] = "black";
static const char __pyx_k_block[] = "block";
static const char __pyx_k_boxes[] = "boxes";
static const char __pyx_k_class[] = "__class__";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_conss[] = "conss";
static const char __pyx_k_enter[] = "__enter__";
static const char __pyx_k_fname[] = "fname";
static const char __pyx_k_green[] = "green";
static const char __pyx_k_index[] = "index";
static const char __pyx_k_isray[] = "isray";
static const char __pyx_k_items[] = "items";
static const char __pyx_k_lower[] = "lower";
static const char __pyx_k_mkdir[] = "mkdir";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_proxy[] = "proxy";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_repid[] = "repid";
static const char __pyx_k_solve[] = "solve";
static const char __pyx_k_super[] = "super";
static const char __pyx_k_title[] = "title";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_varid[] = "varid";
static const char __pyx_k_xaxis[] = "xaxis";
static const char __pyx_k_yaxis[] = "yaxis";
static const char __pyx_k_000000[] = "#000000";
static const char __pyx_k_1340C7[] = "#1340C7";
static const char __pyx_k_718CDB[] = "#718CDB";
static const char __pyx_k_886100[] = "#886100";
static const char __pyx_k_FFB72D[] = "#FFB72D";
static const char __pyx_k_FFD88F[] = "#FFD88F";
static const char __pyx_k_Format[] = "Format ";
static const char __pyx_k_addVar[] = "addVar";
static const char __pyx_k_block1[] = "block1";
static const char __pyx_k_block2[] = "block2";
static const char __pyx_k_bottom[] = "bottom";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_master[] = "master";
static const char __pyx_k_matrix[] = "matrix";
static const char __pyx_k_nvotes[] = "nvotes";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_probnr[] = "probnr";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_result[] = "result";
static const char __pyx_k_status[] = "status";
static const char __pyx_k_typing[] = "typing";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_vis_gp[] = "vis.gp";
static const char __pyx_k_zorder[] = "zorder";
static const char __pyx_k_OPTIMAL[] = "OPTIMAL";
static const char __pyx_k_UNKNOWN[] = "UNKNOWN";
static const char __pyx_k_VarPart[] = "VarPart";
static const char __pyx_k_Warning[] = "Warning";
static const char __pyx_k_blockid[] = "blockid";
static const char __pyx_k_decchar[] = "decchar";
static const char __pyx_k_enabled[] = "enabled";
static const char __pyx_k_figsize[] = "figsize";
static const char __pyx_k_getCons[] = "getCons";
static const char __pyx_k_getName[] = "getName";
static const char __pyx_k_hotpink[] = "hotpink";
static const char __pyx_k_integer[] = "integer";
static const char __pyx_k_linking[] = "linking";
static const char __pyx_k_nonzero[] = "nonzero";
static const char __pyx_k_parents[] = "parents";
static const char __pyx_k_pathlib[] = "pathlib";
static const char __pyx_k_prepare[] = "prepare";
static const char __pyx_k_redcost[] = "redcost";
static const char __pyx_k_savefig[] = "savefig";
static const char __pyx_k_scatter[] = "scatter";
static const char __pyx_k_tab_red[] = "tab:red";
static const char __pyx_k_varname[] = "varname";
static const char __pyx_k_weakref[] = "weakref";
static const char __pyx_k_ConsPart[] = "ConsPart";
static const char __pyx_k_Detector[] = "Detector";
static const char __pyx_k_GCGModel[] = "GCGModel";
static const char __pyx_k_Iterable[] = "Iterable";
static const char __pyx_k_addBlock[] = "addBlock";
static const char __pyx_k_block_id[] = "block_id";
static const char __pyx_k_colorbar[] = "colorbar";
static const char __pyx_k_consname[] = "consname";
static const char __pyx_k_darkblue[] = "darkblue";
static const char __pyx_k_detector[] = "detector";
static const char __pyx_k_exist_ok[] = "exist_ok";
static const char __pyx_k_getNVars[] = "getNVars";
static const char __pyx_k_getStage[] = "getStage";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_joinpath[] = "joinpath";
static const char __pyx_k_original[] = "original";
static const char __pyx_k_priority[] = "priority";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_rotation[] = "rotation";
static const char __pyx_k_set_xlim[] = "set_xlim";
static const char __pyx_k_set_ylim[] = "set_ylim";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_subplots[] = "subplots";
static const char __pyx_k_tab_blue[] = "tab:blue";
static const char __pyx_k_tab_cyan[] = "tab:cyan";
static const char __pyx_k_tab_gray[] = "tab:gray";
static const char __pyx_k_tab_pink[] = "tab:pink";
static const char __pyx_k_tempfile[] = "tempfile";
static const char __pyx_k_tick_top[] = "tick_top";
static const char __pyx_k_varindex[] = "varindex";
static const char __pyx_k_GCGColumn[] = "GCGColumn";
static const char __pyx_k_Rectangle[] = "Rectangle";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_UNBOUNDED[] = "UNBOUNDED";
static const char __pyx_k_add_patch[] = "add_patch";
static const char __pyx_k_candidate[] = "candidate";
static const char __pyx_k_directory[] = "directory";
static const char __pyx_k_edgecolor[] = "edgecolor";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_extension[] = "extension";
static const char __pyx_k_facecolor[] = "facecolor";
static const char __pyx_k_getNConss[] = "getNConss";
static const char __pyx_k_linecolor[] = "linecolor";
static const char __pyx_k_linewidth[] = "linewidth";
static const char __pyx_k_opencolor[] = "opencolor";
static const char __pyx_k_otherdata[] = "otherdata";
static const char __pyx_k_partition[] = "partition";
static const char __pyx_k_peachpuff[] = "peachpuff";
static const char __pyx_k_presolved[] = "presolved";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_read_text[] = "read_text";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_set_ticks[] = "set_ticks";
static const char __pyx_k_set_title[] = "set_title";
static const char __pyx_k_tab_brown[] = "tab:brown";
static const char __pyx_k_tab_green[] = "tab:green";
static const char __pyx_k_tab_olive[] = "tab:olive";
static const char __pyx_k_variables[] = "variables";
static const char __pyx_k_INFEASIBLE[] = "INFEASIBLE";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_blockcolor[] = "blockcolor";
static const char __pyx_k_blockrepid[] = "blockrepid";
static const char __pyx_k_classindex[] = "classindex";
static const char __pyx_k_createscip[] = "createscip";
static const char __pyx_k_exitSolver[] = "exitSolver";
static const char __pyx_k_firstblock[] = "firstblock";
static const char __pyx_k_freeSolver[] = "freeSolver";
static const char __pyx_k_getNBlocks[] = "getNBlocks";
static const char __pyx_k_initSolver[] = "initSolver";
static const char __pyx_k_is_enabled[] = "is_enabled";
static const char __pyx_k_lowerbound[] = "lowerbound";
static const char __pyx_k_matrixType[] = "matrixType";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_read_bytes[] = "read_bytes";
static const char __pyx_k_scipVarMap[] = "scipVarMap";
static const char __pyx_k_set_params[] = "set_params";
static const char __pyx_k_set_ylabel[] = "set_ylabel";
static const char __pyx_k_solvername[] = "solvername";
static const char __pyx_k_tab_orange[] = "tab:orange";
static const char __pyx_k_tab_purple[] = "tab:purple";
static const char __pyx_k_varToBlock[] = "varToBlock";
static const char __pyx_k_DetProbData[] = "DetProbData";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_SOLVERLIMIT[] = "SOLVERLIMIT";
static const char __pyx_k_consToBlock[] = "consToBlock";
static const char __pyx_k_constoblock[] = "constoblock";
static const char __pyx_k_detprobdata[] = "detprobdata";
static const char __pyx_k_dualsolconv[] = "dualsolconv";
static const char __pyx_k_getVisuName[] = "getVisuName";
static const char __pyx_k_mastercolor[] = "mastercolor";
static const char __pyx_k_nMasterVars[] = ", nMasterVars=";
static const char __pyx_k_only_master[] = "only_master";
static const char __pyx_k_partialdecs[] = "partialdecs";
static const char __pyx_k_pricingprob[] = "pricingprob";
static const char __pyx_k_scipvartype[] = "scipvartype";
static const char __pyx_k_with_suffix[] = "with_suffix";
static const char __pyx_k_BoundaryNorm[] = "BoundaryNorm";
static const char __pyx_k_PY_SCIP_CALL[] = "PY_SCIP_CALL";
static const char __pyx_k_addClockTime[] = "addClockTime";
static const char __pyx_k_coefficients[] = "coefficients";
static const char __pyx_k_consschanged[] = "consschanged";
static const char __pyx_k_detectorname[] = "detectorname";
static const char __pyx_k_exactEnabled[] = "exactEnabled";
static const char __pyx_k_exitDetector[] = "exitDetector";
static const char __pyx_k_exitSolution[] = "exitSolution";
static const char __pyx_k_freeDetector[] = "freeDetector";
static const char __pyx_k_getNOpenvars[] = "getNOpenvars";
static const char __pyx_k_initDetector[] = "initDetector";
static const char __pyx_k_initSolution[] = "initSolution";
static const char __pyx_k_invert_yaxis[] = "invert_yaxis";
static const char __pyx_k_linkingcolor[] = "linkingcolor";
static const char __pyx_k_master_conss[] = "master_conss";
static const char __pyx_k_maxcallround[] = "maxcallround";
static const char __pyx_k_mincallround[] = "mincallround";
static const char __pyx_k_nLinkingVars[] = ", nLinkingVars=";
static const char __pyx_k_nMasterConss[] = ", nMasterConss=";
static const char __pyx_k_only_pricing[] = "only_pricing";
static const char __pyx_k_printVersion[] = "printVersion";
static const char __pyx_k_pygcgopt_gcg[] = "pygcgopt.gcg";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_setBoolParam[] = "setBoolParam";
static const char __pyx_k_setParamFast[] = "setParamFast";
static const char __pyx_k_setUsergiven[] = "setUsergiven";
static const char __pyx_k_stringsource[] = "stringsource";
static const char __pyx_k_updateSolver[] = "updateSolver";
static const char __pyx_k_usefulrecall[] = "usefulrecall";
static const char __pyx_k_ConsPart_name[] = "<ConsPart: name=";
static const char __pyx_k_NOTAPPLICABLE[] = "NOTAPPLICABLE";
static const char __pyx_k_PricingSolver[] = "PricingSolver";
static const char __pyx_k_SCIP_vartypes[] = "SCIP vartypes";
static const char __pyx_k_detector_name[] = "detector_name";
static const char __pyx_k_freqcallround[] = "freqcallround";
static const char __pyx_k_getMasterProb[] = "getMasterProb";
static const char __pyx_k_getNOpenconss[] = "getNOpenconss";
static const char __pyx_k_miplibConsMap[] = "miplibConsMap";
static const char __pyx_k_pricingSolver[] = "pricingSolver";
static const char __pyx_k_pygcgopt_util[] = "pygcgopt.util";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_GCGMasterModel[] = "GCGMasterModel";
static const char __pyx_k_ListedColormap[] = "ListedColormap";
static const char __pyx_k_comppartialdec[] = "comppartialdec";
static const char __pyx_k_fixConsToBlock[] = "fixConsToBlock";
static const char __pyx_k_getDetprobdata[] = "getDetprobdata";
static const char __pyx_k_getNMastervars[] = "getNMastervars";
static const char __pyx_k_miplibconstype[] = "miplibconstype";
static const char __pyx_k_newpartialdecs[] = "newpartialdecs";
static const char __pyx_k_pyscipopt_scip[] = "pyscipopt.scip";
static const char __pyx_k_set_ticklabels[] = "set_ticklabels";
static const char __pyx_k_solveHeuristic[] = "solveHeuristic";
static const char __pyx_k_str_conversion[] = "str_conversion";
static const char __pyx_k_varbndschanged[] = "varbndschanged";
static const char __pyx_k_varobjschanged[] = "varobjschanged";
static const char __pyx_k_GCGPricingModel[] = "GCGPricingModel";
static const char __pyx_k_collections_abc[] = "collections.abc";
static const char __pyx_k_createDirectory[] = "createDirectory";
static const char __pyx_k_fixConsToMaster[] = "fixConsToMaster";
static const char __pyx_k_fixConssToBlock[] = "fixConssToBlock";
static const char __pyx_k_getIndexForCons[] = "getIndexForCons";
static const char __pyx_k_getNLinkingvars[] = "getNLinkingvars";
static const char __pyx_k_getNMasterconss[] = "getNMasterconss";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_setParamDefault[] = "setParamDefault";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_MIPLIB_constypes[] = "MIPLIB constypes";
static const char __pyx_k_addDecomposition[] = "addDecomposition";
static const char __pyx_k_enabledfinishing[] = "enabledfinishing";
static const char __pyx_k_finishPartialdec[] = "finishPartialdec";
static const char __pyx_k_fixConsToBlockId[] = "fixConsToBlockId";
static const char __pyx_k_fixConssToMaster[] = "fixConssToMaster";
static const char __pyx_k_getNVarsForBlock[] = "getNVarsForBlock";
static const char __pyx_k_heuristicEnabled[] = "heuristicEnabled";
static const char __pyx_k_maxForWhiteScore[] = ", maxForWhiteScore=";
static const char __pyx_k_nonzerowithvalue[] = "nonzerowithvalue";
static const char __pyx_k_otherpartialdecs[] = "otherpartialdecs";
static const char __pyx_k_varclassesmaster[] = "varclassesmaster";
static const char __pyx_k_workonpartialdec[] = "workonpartialdec";
static const char __pyx_k_additionalNBlocks[] = "additionalNBlocks";
static const char __pyx_k_alldecompositions[] = "alldecompositions/";
static const char __pyx_k_consclassesmaster[] = "consclassesmaster";
static const char __pyx_k_getNConssForBlock[] = "getNConssForBlock";
static const char __pyx_k_get_major_locator[] = "get_major_locator";
static const char __pyx_k_matplotlib_colors[] = "matplotlib.colors";
static const char __pyx_k_matplotlib_pyplot[] = "matplotlib.pyplot";
static const char __pyx_k_matrixSCIPVarType[] = "matrixSCIPVarType";
static const char __pyx_k_stairlinkingcolor[] = "stairlinkingcolor";
static const char __pyx_k_varToStairLinking[] = "varToStairLinking";
static const char __pyx_k_varclasseslinking[] = "varclasseslinking";
static const char __pyx_k_TemporaryDirectory[] = "TemporaryDirectory";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_detectorchainindex[] = "detectorchainindex";
static const char __pyx_k_matplotlib_patches[] = "matplotlib.patches";
static const char __pyx_k_maxForWhiteScore_2[] = "maxForWhiteScore";
static const char __pyx_k_setParamAggressive[] = "setParamAggressive";
static const char __pyx_k_NotImplementedError[] = "NotImplementedError";
static const char __pyx_k_createDecomposition[] = "createDecomposition";
static const char __pyx_k_pricing_solver_name[] = "pricing_solver_name";
static const char __pyx_k_propagatePartialdec[] = "propagatePartialdec";
static const char __pyx_k_PY_GCG_PRICINGSTATUS[] = "PY_GCG_PRICINGSTATUS";
static const char __pyx_k_PartialDecomposition[] = "PartialDecomposition";
static const char __pyx_k_addDetectorChainInfo[] = "addDetectorChainInfo";
static const char __pyx_k_getNStairlinkingvars[] = "getNStairlinkingvars";
static const char __pyx_k_matplotlib_is_needed[] = "matplotlib is needed";
static const char __pyx_k_matrixMIPLIBConsType[] = "matrixMIPLIBConsType";
static const char __pyx_k_maxcallroundoriginal[] = "maxcallroundoriginal";
static const char __pyx_k_mincallroundoriginal[] = "mincallroundoriginal";
static const char __pyx_k_enabledpostprocessing[] = "enabledpostprocessing";
static const char __pyx_k_freqcallroundoriginal[] = "freqcallroundoriginal";
static const char __pyx_k_postprocessPartialdec[] = "postprocessPartialdec";
static const char __pyx_k_pyx_unpickle_Detector[] = "__pyx_unpickle_Detector";
static const char __pyx_k_uniqueMatrixSCIPVarType[] = "uniqueMatrixSCIPVarType";
static const char __pyx_k_pricingsolver_heurenabled[] = "pricingsolver/{}/heurenabled";
static const char __pyx_k_pricingsolver_exactenabled[] = "pricingsolver/{}/exactenabled";
static const char __pyx_k_pyx_unpickle_PricingSolver[] = "__pyx_unpickle_PricingSolver";
static const char __pyx_k_uniqueMatrixMIPLIBConsType[] = "uniqueMatrixMIPLIBConsType";
static const char __pyx_k_detection_detectors_enabled[] = "detection/detectors/{}/enabled";
static const char __pyx_k_PartialDecomposition_nBlocks[] = "<PartialDecomposition: nBlocks=";
static const char __pyx_k_setPricingSolverExactEnabled[] = "setPricingSolverExactEnabled";
static const char __pyx_k_pyx_unpickle_PY_GCG_PRICINGSTA[] = "__pyx_unpickle_PY_GCG_PRICINGSTATUS";
static const char __pyx_k_is_not_supported_Only_svg_and_p[] = " is not supported. Only \"svg\" and \"png\" are supported.";
static const char __pyx_k_Detector_callback_returned_of_ty[] = "Detector callback returned '{}' of type '{}'. Expected a dictionary with optional keys 'newpartialdecs' and 'result'.";
static const char __pyx_k_Expected_iterable_as_first_argum[] = "Expected iterable as first argument. Got '{}' instead.";
static const char __pyx_k_Incompatible_checksums_s_vs_0x7a[] = "Incompatible checksums (%s vs 0x7a6ef99 = (model, solvername))";
static const char __pyx_k_Incompatible_checksums_s_vs_0xd4[] = "Incompatible checksums (%s vs 0xd41d8cd = ())";
static const char __pyx_k_Incompatible_checksums_s_vs_0xf7[] = "Incompatible checksums (%s vs 0xf7f977a = (detectorname, model))";
static const char __pyx_k_Length_of_value_for_decchar_must[] = "Length of value for 'decchar' must be 1";
static const char __pyx_k_The_value_of_the_key_newpartiald[] = "The value of the key 'newpartialdecs' is '{}' of type '{}'. Expected a list of 'PartialDecomposition' objects.";
static const char __pyx_k_cannot_create_Column_with_GCG_CO[] = "cannot create Column with GCG_COL* == NULL";
static const char __pyx_k_cannot_create_ConsPart_with_Cons[] = "cannot create ConsPart with ConsPartition* == NULL";
static const char __pyx_k_cannot_create_DetProbData_with_D[] = "cannot create DetProbData with DETPROBDATA* == NULL";
static const char __pyx_k_cannot_create_Model_with_SCIP_NU[] = "cannot create Model with SCIP* == NULL";
static const char __pyx_k_cannot_create_PartialDecompositi[] = "cannot create PartialDecomposition with PARTIALDECOMP* == NULL";
static const char __pyx_k_cannot_create_VarPart_with_VarPa[] = "cannot create VarPart with VarPartition* == NULL";
static const char __pyx_k_detection_detectors_finishingena[] = "detection/detectors/{}/finishingenabled";
static const char __pyx_k_detection_detectors_postprocessi[] = "detection/detectors/{}/postprocessingenabled";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_self__scip_self__valid_cannot_be[] = "self._scip,self._valid cannot be converted to a Python object for pickling";
static const char __pyx_k_self_gcg_col_cannot_be_converted[] = "self.gcg_col cannot be converted to a Python object for pickling";
static const char __pyx_k_setPricingSolverHeuristicEnabled[] = "setPricingSolverHeuristicEnabled";
static PyObject *__pyx_kp_u_000000;
static PyObject *__pyx_kp_u_1340C7;
static PyObject *__pyx_kp_u_718CDB;
static PyObject *__pyx_kp_u_886100;
static PyObject *__pyx_n_u_AGGR;
static PyObject *__pyx_n_u_BIN;
static PyObject *__pyx_n_u_BINP;
static PyObject *__pyx_n_s_BoundaryNorm;
static PyObject *__pyx_n_u_CARD;
static PyObject *__pyx_n_u_CONT;
static PyObject *__pyx_n_s_ConsPart;
static PyObject *__pyx_kp_u_ConsPart_name;
static PyObject *__pyx_n_s_DetProbData;
static PyObject *__pyx_n_s_Detector;
static PyObject *__pyx_kp_u_Detector_callback_returned_of_ty;
static PyObject *__pyx_n_u_EMPTY;
static PyObject *__pyx_n_u_EQUK;
static PyObject *__pyx_kp_u_Expected_iterable_as_first_argum;
static PyObject *__pyx_kp_u_FFB72D;
static PyObject *__pyx_kp_u_FFD88F;
static PyObject *__pyx_n_u_FREE;
static PyObject *__pyx_kp_u_Format;
static PyObject *__pyx_n_s_GCGColumn;
static PyObject *__pyx_n_s_GCGMasterModel;
static PyObject *__pyx_n_s_GCGModel;
static PyObject *__pyx_n_s_GCGPricingModel;
static PyObject *__pyx_n_u_GENL;
static PyObject *__pyx_n_u_IKNA;
static PyObject *__pyx_n_u_IMP;
static PyObject *__pyx_n_s_INFEASIBLE;
static PyObject *__pyx_n_u_INT;
static PyObject *__pyx_n_u_INVK;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0x7a;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0xd4;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0xf7;
static PyObject *__pyx_n_s_Iterable;
static PyObject *__pyx_n_u_KNAP;
static PyObject *__pyx_kp_u_Length_of_value_for_decchar_must;
static PyObject *__pyx_n_s_List;
static PyObject *__pyx_n_s_ListedColormap;
static PyObject *__pyx_kp_u_MIPLIB_constypes;
static PyObject *__pyx_n_u_MIXB;
static PyObject *__pyx_n_s_N;
static PyObject *__pyx_n_u_NONE;
static PyObject *__pyx_n_s_NOTAPPLICABLE;
static PyObject *__pyx_n_s_NotImplementedError;
static PyObject *__pyx_n_s_OPTIMAL;
static PyObject *__pyx_n_s_PY_GCG_PRICINGSTATUS;
static PyObject *__pyx_n_s_PY_SCIP_CALL;
static PyObject *__pyx_n_s_PartialDecomposition;
static PyObject *__pyx_kp_u_PartialDecomposition_nBlocks;
static PyObject *__pyx_n_s_Path;
static PyObject *__pyx_n_s_PickleError;
static PyObject *__pyx_n_s_PricingSolver;
static PyObject *__pyx_n_s_Rectangle;
static PyObject *__pyx_kp_u_SCIP_vartypes;
static PyObject *__pyx_n_u_SCOV;
static PyObject *__pyx_n_u_SING;
static PyObject *__pyx_n_s_SOLVERLIMIT;
static PyObject *__pyx_n_u_SPAC;
static PyObject *__pyx_n_u_SPAR;
static PyObject *__pyx_n_s_TemporaryDirectory;
static PyObject *__pyx_kp_u_The_value_of_the_key_newpartiald;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_UNBOUNDED;
static PyObject *__pyx_n_s_UNKNOWN;
static PyObject *__pyx_n_u_VARB;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_VarPart;
static PyObject *__pyx_n_s_Warning;
static PyObject *__pyx_n_s__12;
static PyObject *__pyx_kp_u__18;
static PyObject *__pyx_kp_u__3;
static PyObject *__pyx_n_s_addBlock;
static PyObject *__pyx_n_s_addClockTime;
static PyObject *__pyx_n_s_addDecomposition;
static PyObject *__pyx_n_s_addDetectorChainInfo;
static PyObject *__pyx_n_s_addVar;
static PyObject *__pyx_n_s_add_patch;
static PyObject *__pyx_n_s_additionalNBlocks;
static PyObject *__pyx_n_s_all;
static PyObject *__pyx_kp_u_alldecompositions;
static PyObject *__pyx_n_s_alpha;
static PyObject *__pyx_n_s_ax;
static PyObject *__pyx_n_s_bcoef;
static PyObject *__pyx_n_u_black;
static PyObject *__pyx_n_s_block;
static PyObject *__pyx_n_s_block1;
static PyObject *__pyx_n_s_block2;
static PyObject *__pyx_n_s_block_id;
static PyObject *__pyx_n_s_blockcolor;
static PyObject *__pyx_n_s_blockid;
static PyObject *__pyx_n_s_blockrepid;
static PyObject *__pyx_n_u_blue;
static PyObject *__pyx_n_s_both;
static PyObject *__pyx_n_s_bottom;
static PyObject *__pyx_n_s_boxes;
static PyObject *__pyx_n_s_c;
static PyObject *__pyx_n_s_candidate;
static PyObject *__pyx_kp_u_cannot_create_Column_with_GCG_CO;
static PyObject *__pyx_kp_u_cannot_create_ConsPart_with_Cons;
static PyObject *__pyx_kp_u_cannot_create_DetProbData_with_D;
static PyObject *__pyx_kp_u_cannot_create_Model_with_SCIP_NU;
static PyObject *__pyx_kp_u_cannot_create_PartialDecompositi;
static PyObject *__pyx_kp_u_cannot_create_VarPart_with_VarPa;
static PyObject *__pyx_n_s_class;
static PyObject *__pyx_n_s_classindex;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_cmap;
static PyObject *__pyx_n_u_coefficients;
static PyObject *__pyx_n_s_col;
static PyObject *__pyx_n_s_collections_abc;
static PyObject *__pyx_n_s_colorbar;
static PyObject *__pyx_n_s_comppartialdec;
static PyObject *__pyx_n_s_cons;
static PyObject *__pyx_n_s_consToBlock;
static PyObject *__pyx_n_s_consclassesmaster;
static PyObject *__pyx_n_s_consname;
static PyObject *__pyx_n_s_conss;
static PyObject *__pyx_n_s_consschanged;
static PyObject *__pyx_n_s_constoblock;
static PyObject *__pyx_n_s_copy;
static PyObject *__pyx_n_s_createDecomposition;
static PyObject *__pyx_n_s_createDirectory;
static PyObject *__pyx_n_s_createscip;
static PyObject *__pyx_n_u_darkblue;
static PyObject *__pyx_n_u_dec;
static PyObject *__pyx_n_s_decchar;
static PyObject *__pyx_n_s_desc;
static PyObject *__pyx_kp_u_detection_detectors_enabled;
static PyObject *__pyx_kp_u_detection_detectors_finishingena;
static PyObject *__pyx_kp_u_detection_detectors_postprocessi;
static PyObject *__pyx_n_s_detector;
static PyObject *__pyx_n_s_detector_name;
static PyObject *__pyx_n_s_detectorchainindex;
static PyObject *__pyx_n_s_detectorname;
static PyObject *__pyx_n_s_detprobdata;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_n_s_directory;
static PyObject *__pyx_n_s_dots;
static PyObject *__pyx_n_s_dpi;
static PyObject *__pyx_n_s_dualsolconv;
static PyObject *__pyx_n_s_edgecolor;
static PyObject *__pyx_n_s_enabled;
static PyObject *__pyx_n_s_enabledfinishing;
static PyObject *__pyx_n_s_enabledpostprocessing;
static PyObject *__pyx_n_s_enter;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_exactEnabled;
static PyObject *__pyx_n_s_exist_ok;
static PyObject *__pyx_n_s_exit;
static PyObject *__pyx_n_s_exitDetector;
static PyObject *__pyx_n_s_exitSolution;
static PyObject *__pyx_n_s_exitSolver;
static PyObject *__pyx_n_s_extension;
static PyObject *__pyx_n_s_facecolor;
static PyObject *__pyx_n_s_figsize;
static PyObject *__pyx_n_s_finishPartialdec;
static PyObject *__pyx_n_s_firstblock;
static PyObject *__pyx_n_s_fixConsToBlock;
static PyObject *__pyx_n_s_fixConsToBlockId;
static PyObject *__pyx_n_s_fixConsToMaster;
static PyObject *__pyx_n_s_fixConssToBlock;
static PyObject *__pyx_n_s_fixConssToMaster;
static PyObject *__pyx_n_s_fname;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_freeDetector;
static PyObject *__pyx_n_s_freeSolver;
static PyObject *__pyx_n_s_freqcallround;
static PyObject *__pyx_n_s_freqcallroundoriginal;
static PyObject *__pyx_n_s_get;
static PyObject *__pyx_n_s_getCons;
static PyObject *__pyx_n_s_getDetprobdata;
static PyObject *__pyx_n_s_getIndexForCons;
static PyObject *__pyx_n_s_getMasterProb;
static PyObject *__pyx_n_s_getNBlocks;
static PyObject *__pyx_n_s_getNConss;
static PyObject *__pyx_n_s_getNConssForBlock;
static PyObject *__pyx_n_s_getNLinkingvars;
static PyObject *__pyx_n_s_getNMasterconss;
static PyObject *__pyx_n_s_getNMastervars;
static PyObject *__pyx_n_s_getNOpenconss;
static PyObject *__pyx_n_s_getNOpenvars;
static PyObject *__pyx_n_s_getNStairlinkingvars;
static PyObject *__pyx_n_s_getNVars;
static PyObject *__pyx_n_s_getNVarsForBlock;
static PyObject *__pyx_n_s_getName;
static PyObject *__pyx_n_s_getStage;
static PyObject *__pyx_n_s_getVisuName;
static PyObject *__pyx_n_s_get_major_locator;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_u_gray;
static PyObject *__pyx_n_u_green;
static PyObject *__pyx_n_s_heuristicEnabled;
static PyObject *__pyx_n_u_hotpink;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_index;
static PyObject *__pyx_n_s_initDetector;
static PyObject *__pyx_n_s_initSolution;
static PyObject *__pyx_n_s_initSolver;
static PyObject *__pyx_n_s_integer;
static PyObject *__pyx_n_s_invert_yaxis;
static PyObject *__pyx_n_s_is_enabled;
static PyObject *__pyx_kp_u_is_not_supported_Only_svg_and_p;
static PyObject *__pyx_n_s_isray;
static PyObject *__pyx_n_s_items;
static PyObject *__pyx_n_s_joinpath;
static PyObject *__pyx_n_u_lime;
static PyObject *__pyx_n_s_linecolor;
static PyObject *__pyx_n_s_linewidth;
static PyObject *__pyx_n_s_linking;
static PyObject *__pyx_n_s_linkingcolor;
static PyObject *__pyx_n_s_lower;
static PyObject *__pyx_n_u_lowerbound;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_master;
static PyObject *__pyx_n_s_master_conss;
static PyObject *__pyx_n_s_mastercolor;
static PyObject *__pyx_n_s_matplotlib_colors;
static PyObject *__pyx_kp_u_matplotlib_is_needed;
static PyObject *__pyx_n_s_matplotlib_patches;
static PyObject *__pyx_n_s_matplotlib_pyplot;
static PyObject *__pyx_n_s_matrix;
static PyObject *__pyx_n_s_matrixMIPLIBConsType;
static PyObject *__pyx_n_s_matrixSCIPVarType;
static PyObject *__pyx_n_s_matrixType;
static PyObject *__pyx_kp_u_maxForWhiteScore;
static PyObject *__pyx_n_s_maxForWhiteScore_2;
static PyObject *__pyx_n_s_maxcallround;
static PyObject *__pyx_n_s_maxcallroundoriginal;
static PyObject *__pyx_n_s_mincallround;
static PyObject *__pyx_n_s_mincallroundoriginal;
static PyObject *__pyx_n_s_miplibConsMap;
static PyObject *__pyx_n_u_miplibconstype;
static PyObject *__pyx_n_s_mkdir;
static PyObject *__pyx_kp_u_nLinkingVars;
static PyObject *__pyx_kp_u_nMasterConss;
static PyObject *__pyx_kp_u_nMasterVars;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_n_u_newpartialdecs;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_u_nonzero;
static PyObject *__pyx_n_u_nonzerowithvalue;
static PyObject *__pyx_n_s_norm;
static PyObject *__pyx_n_s_nvotes;
static PyObject *__pyx_n_s_obj;
static PyObject *__pyx_n_s_only_master;
static PyObject *__pyx_n_s_only_pricing;
static PyObject *__pyx_n_s_opencolor;
static PyObject *__pyx_n_s_original;
static PyObject *__pyx_n_s_otherdata;
static PyObject *__pyx_n_s_otherpartialdecs;
static PyObject *__pyx_n_s_parents;
static PyObject *__pyx_n_s_partialdecs;
static PyObject *__pyx_n_s_partition;
static PyObject *__pyx_n_s_pathlib;
static PyObject *__pyx_n_u_peachpuff;
static PyObject *__pyx_n_s_pickle;
static PyObject *__pyx_n_u_png;
static PyObject *__pyx_n_s_postprocessPartialdec;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_presolved;
static PyObject *__pyx_n_s_pricingSolver;
static PyObject *__pyx_n_s_pricing_solver_name;
static PyObject *__pyx_n_s_pricingprob;
static PyObject *__pyx_kp_u_pricingsolver_exactenabled;
static PyObject *__pyx_kp_u_pricingsolver_heurenabled;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_printVersion;
static PyObject *__pyx_n_s_priority;
static PyObject *__pyx_n_s_probnr;
static PyObject *__pyx_n_s_propagatePartialdec;
static PyObject *__pyx_n_s_proxy;
static PyObject *__pyx_n_s_pygcgopt_gcg;
static PyObject *__pyx_n_s_pygcgopt_util;
static PyObject *__pyx_n_s_pyscipopt_scip;
static PyObject *__pyx_n_s_pyx_PickleError;
static PyObject *__pyx_n_s_pyx_checksum;
static PyObject *__pyx_n_s_pyx_result;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_type;
static PyObject *__pyx_n_s_pyx_unpickle_Detector;
static PyObject *__pyx_n_s_pyx_unpickle_PY_GCG_PRICINGSTA;
static PyObject *__pyx_n_s_pyx_unpickle_PricingSolver;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_read_bytes;
static PyObject *__pyx_n_s_read_text;
static PyObject *__pyx_n_u_red;
static PyObject *__pyx_n_s_redcost;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_repid;
static PyObject *__pyx_n_u_result;
static PyObject *__pyx_n_s_rotation;
static PyObject *__pyx_n_s_row;
static PyObject *__pyx_n_s_s;
static PyObject *__pyx_n_s_savefig;
static PyObject *__pyx_n_s_scatter;
static PyObject *__pyx_n_s_scipVarMap;
static PyObject *__pyx_n_u_scipvartype;
static PyObject *__pyx_kp_s_self__scip_self__valid_cannot_be;
static PyObject *__pyx_kp_s_self_gcg_col_cannot_be_converted;
static PyObject *__pyx_n_s_setBoolParam;
static PyObject *__pyx_n_s_setParamAggressive;
static PyObject *__pyx_n_s_setParamDefault;
static PyObject *__pyx_n_s_setParamFast;
static PyObject *__pyx_n_s_setPricingSolverExactEnabled;
static PyObject *__pyx_n_s_setPricingSolverHeuristicEnabled;
static PyObject *__pyx_n_s_setUsergiven;
static PyObject *__pyx_n_s_set_params;
static PyObject *__pyx_n_s_set_ticklabels;
static PyObject *__pyx_n_s_set_ticks;
static PyObject *__pyx_n_s_set_title;
static PyObject *__pyx_n_s_set_xlim;
static PyObject *__pyx_n_s_set_ylabel;
static PyObject *__pyx_n_s_set_ylim;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_show;
static PyObject *__pyx_n_s_skip;
static PyObject *__pyx_n_s_solve;
static PyObject *__pyx_n_s_solveHeuristic;
static PyObject *__pyx_n_s_solvername;
static PyObject *__pyx_n_s_sort;
static PyObject *__pyx_n_s_stairlinkingcolor;
static PyObject *__pyx_n_u_status;
static PyObject *__pyx_n_s_str_conversion;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_subplots;
static PyObject *__pyx_n_s_super;
static PyObject *__pyx_n_u_svg;
static PyObject *__pyx_kp_u_tab_blue;
static PyObject *__pyx_kp_u_tab_brown;
static PyObject *__pyx_kp_u_tab_cyan;
static PyObject *__pyx_kp_u_tab_gray;
static PyObject *__pyx_kp_u_tab_green;
static PyObject *__pyx_kp_u_tab_olive;
static PyObject *__pyx_kp_u_tab_orange;
static PyObject *__pyx_kp_u_tab_pink;
static PyObject *__pyx_kp_u_tab_purple;
static PyObject *__pyx_kp_u_tab_red;
static PyObject *__pyx_n_u_tan;
static PyObject *__pyx_n_s_tempfile;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_tick_top;
static PyObject *__pyx_n_s_title;
static PyObject *__pyx_n_s_top;
static PyObject *__pyx_n_s_typing;
static PyObject *__pyx_n_s_uniqueMatrixMIPLIBConsType;
static PyObject *__pyx_n_s_uniqueMatrixSCIPVarType;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_updateSolver;
static PyObject *__pyx_n_s_usefulrecall;
static PyObject *__pyx_n_s_vals;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_s_var;
static PyObject *__pyx_n_s_varToBlock;
static PyObject *__pyx_n_s_varToStairLinking;
static PyObject *__pyx_n_s_varbndschanged;
static PyObject *__pyx_n_s_varclasseslinking;
static PyObject *__pyx_n_s_varclassesmaster;
static PyObject *__pyx_n_s_variables;
static PyObject *__pyx_n_s_varid;
static PyObject *__pyx_n_s_varindex;
static PyObject *__pyx_n_s_varname;
static PyObject *__pyx_n_s_varobjschanged;
static PyObject *__pyx_n_u_vis;
static PyObject *__pyx_kp_u_vis_gp;
static PyObject *__pyx_n_s_weakref;
static PyObject *__pyx_n_s_with_suffix;
static PyObject *__pyx_n_s_workonpartialdec;
static PyObject *__pyx_n_s_xaxis;
static PyObject *__pyx_n_s_xmax;
static PyObject *__pyx_n_s_xmin;
static PyObject *__pyx_n_s_yaxis;
static PyObject *__pyx_n_s_zorder;
static PyObject *__pyx_pf_8pygcgopt_3gcg_8Detector_freeDetector(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_Detector *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_8Detector_2initDetector(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_Detector *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_8Detector_4exitDetector(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_Detector *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_8Detector_6propagatePartialdec(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_Detector *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_detprobdata, CYTHON_UNUSED PyObject *__pyx_v_workonpartialdec); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_8Detector_8finishPartialdec(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_Detector *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_detprobdata, CYTHON_UNUSED PyObject *__pyx_v_workonpartialdec); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_8Detector_10postprocessPartialdec(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_Detector *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_detprobdata, CYTHON_UNUSED PyObject *__pyx_v_workonpartialdec); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_8Detector_12setParamAggressive(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_Detector *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_8Detector_14setParamDefault(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_Detector *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_8Detector_16setParamFast(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_Detector *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_8Detector_5model___get__(struct __pyx_obj_8pygcgopt_3gcg_Detector *__pyx_v_self); /* proto */
static int __pyx_pf_8pygcgopt_3gcg_8Detector_5model_2__set__(struct __pyx_obj_8pygcgopt_3gcg_Detector *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_8pygcgopt_3gcg_8Detector_5model_4__del__(struct __pyx_obj_8pygcgopt_3gcg_Detector *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_8Detector_12detectorname___get__(struct __pyx_obj_8pygcgopt_3gcg_Detector *__pyx_v_self); /* proto */
static int __pyx_pf_8pygcgopt_3gcg_8Detector_12detectorname_2__set__(struct __pyx_obj_8pygcgopt_3gcg_Detector *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_8pygcgopt_3gcg_8Detector_12detectorname_4__del__(struct __pyx_obj_8pygcgopt_3gcg_Detector *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_8Detector_18__reduce_cython__(struct __pyx_obj_8pygcgopt_3gcg_Detector *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_8Detector_20__setstate_cython__(struct __pyx_obj_8pygcgopt_3gcg_Detector *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_13PricingSolver_freeSolver(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_13PricingSolver_2initSolver(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_13PricingSolver_4exitSolver(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_13PricingSolver_6initSolution(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_13PricingSolver_8exitSolution(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_13PricingSolver_10updateSolver(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_pricingprob, CYTHON_UNUSED PyObject *__pyx_v_probnr, CYTHON_UNUSED PyObject *__pyx_v_varobjschanged, CYTHON_UNUSED PyObject *__pyx_v_varbndschanged, CYTHON_UNUSED PyObject *__pyx_v_consschanged); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_13PricingSolver_12solve(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_pricingprob, CYTHON_UNUSED PyObject *__pyx_v_probnr, CYTHON_UNUSED PyObject *__pyx_v_dualsolconv); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_13PricingSolver_14solveHeuristic(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_pricingprob, CYTHON_UNUSED PyObject *__pyx_v_probnr, CYTHON_UNUSED PyObject *__pyx_v_dualsolconv); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_13PricingSolver_5model___get__(struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *__pyx_v_self); /* proto */
static int __pyx_pf_8pygcgopt_3gcg_13PricingSolver_5model_2__set__(struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_8pygcgopt_3gcg_13PricingSolver_5model_4__del__(struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_13PricingSolver_10solvername___get__(struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *__pyx_v_self); /* proto */
static int __pyx_pf_8pygcgopt_3gcg_13PricingSolver_10solvername_2__set__(struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_8pygcgopt_3gcg_13PricingSolver_10solvername_4__del__(struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_13PricingSolver_16__reduce_cython__(struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_13PricingSolver_18__setstate_cython__(struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pygcgopt_3gcg_8ConsPart___cinit__(struct __pyx_obj_8pygcgopt_3gcg_ConsPart *__pyx_v_self); /* proto */
static void __pyx_pf_8pygcgopt_3gcg_8ConsPart_2__dealloc__(struct __pyx_obj_8pygcgopt_3gcg_ConsPart *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_8ConsPart_4assignConsToClass(struct __pyx_obj_8pygcgopt_3gcg_ConsPart *__pyx_v_self, struct __pyx_obj_9pyscipopt_4scip_Constraint *__pyx_v_cons, int __pyx_v_classindex); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_8ConsPart_6getAllSubsets(struct __pyx_obj_8pygcgopt_3gcg_ConsPart *__pyx_v_self, bool __pyx_v_both, bool __pyx_v_only_master, bool __pyx_v_only_pricing); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_8ConsPart_8getClassNameOfCons(struct __pyx_obj_8pygcgopt_3gcg_ConsPart *__pyx_v_self, struct __pyx_obj_9pyscipopt_4scip_Constraint *__pyx_v_cons); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_8ConsPart_10getClassOfCons(struct __pyx_obj_8pygcgopt_3gcg_ConsPart *__pyx_v_self, struct __pyx_obj_9pyscipopt_4scip_Constraint *__pyx_v_cons); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_8ConsPart_12getNConss(struct __pyx_obj_8pygcgopt_3gcg_ConsPart *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_8ConsPart_14getNConssOfClasses(struct __pyx_obj_8pygcgopt_3gcg_ConsPart *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_8ConsPart_16isConsClassified(struct __pyx_obj_8pygcgopt_3gcg_ConsPart *__pyx_v_self, struct __pyx_obj_9pyscipopt_4scip_Constraint *__pyx_v_cons); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_8ConsPart_18reduceClasses(struct __pyx_obj_8pygcgopt_3gcg_ConsPart *__pyx_v_self, int __pyx_v_maxNumberOfClasses); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_8ConsPart_20getName(struct __pyx_obj_8pygcgopt_3gcg_ConsPart *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_8ConsPart_22__repr__(struct __pyx_obj_8pygcgopt_3gcg_ConsPart *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_8ConsPart_24__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_ConsPart *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_8ConsPart_26__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_ConsPart *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pygcgopt_3gcg_7VarPart___cinit__(struct __pyx_obj_8pygcgopt_3gcg_VarPart *__pyx_v_self); /* proto */
static void __pyx_pf_8pygcgopt_3gcg_7VarPart_2__dealloc__(struct __pyx_obj_8pygcgopt_3gcg_VarPart *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_7VarPart_4assignVarToClass(struct __pyx_obj_8pygcgopt_3gcg_VarPart *__pyx_v_self, int __pyx_v_varindex, int __pyx_v_classindex); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_7VarPart_6getAllSubsets(struct __pyx_obj_8pygcgopt_3gcg_VarPart *__pyx_v_self, bool __pyx_v_all, bool __pyx_v_linking, bool __pyx_v_master, bool __pyx_v_block); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_7VarPart_8getClassNameOfVar(struct __pyx_obj_8pygcgopt_3gcg_VarPart *__pyx_v_self, int __pyx_v_varindex); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_7VarPart_10getClassOfVar(struct __pyx_obj_8pygcgopt_3gcg_VarPart *__pyx_v_self, int __pyx_v_varindex); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_7VarPart_12getNVars(struct __pyx_obj_8pygcgopt_3gcg_VarPart *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_7VarPart_14getNVarsOfClasses(struct __pyx_obj_8pygcgopt_3gcg_VarPart *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_7VarPart_16isVarClassified(struct __pyx_obj_8pygcgopt_3gcg_VarPart *__pyx_v_self, int __pyx_v_varindex); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_7VarPart_18reduceClasses(struct __pyx_obj_8pygcgopt_3gcg_VarPart *__pyx_v_self, int __pyx_v_maxNumberOfClasses); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_7VarPart_20__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_VarPart *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_7VarPart_22__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_VarPart *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition___cinit__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static void __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_2__dealloc__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_4__copy__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_6copy(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_8fixConsToMaster(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, struct __pyx_obj_9pyscipopt_4scip_Constraint *__pyx_v_cons); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_10fixConssToMaster(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_conss); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_12fixConsToBlockId(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, struct __pyx_obj_9pyscipopt_4scip_Constraint *__pyx_v_cons, int __pyx_v_block_id); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_14fixConssToBlockId(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_conss, int __pyx_v_block_id); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_16fixConsToBlock(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, struct __pyx_obj_9pyscipopt_4scip_Constraint *__pyx_v_cons, PyObject *__pyx_v_block); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_18fixConssToBlock(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_conss, PyObject *__pyx_v_block); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_20getOpenconss(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_22setUsergiven(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, gcg::USERGIVEN __pyx_v_value); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_13classic_score___get__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_17border_area_score___get__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_15max_white_score___get__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_19max_for_white_score___get__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_24set_part_for_white_score___get__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_23max_for_white_agg_score___get__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_28set_part_for_white_agg_score___get__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_13benders_score___get__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_19strong_decomp_score___get__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_24addBlock(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_26addClockTime(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, double __pyx_v_clocktime); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_28addDecChangesFromAncestor(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_ancestor); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_30addDetectorChainInfo(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_decinfo); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_32addNNewBlocks(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_nnewblocks); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_34addPctConssFromFree(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, double __pyx_v_pct); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_36addPctConssToBlock(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, double __pyx_v_pct); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_38addPctConssToBorder(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, double __pyx_v_pct); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_40addPctVarsFromFree(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, double __pyx_v_pct); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_42addPctVarsToBlock(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, double __pyx_v_pct); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_44addPctVarsToBorder(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, double __pyx_v_pct); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_46alreadyAssignedConssToBlocks(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_48assignCurrentStairlinking(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_50assignOpenConssToMaster(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_52assignPartialdecFromConstoblockVector(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_constoblock, int __pyx_v_additionalNBlocks); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_54assignSmallestComponentsButOneConssAdjacency(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_56calcStairlinkingVars(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_58checkAllConssAssigned(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_60checkConsistency(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_62complete(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_64completeByConnected(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_66completeByConnectedConssAdjacency(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_68completeGreedily(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_70removeMastercons(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_consid); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_72considerImplicits(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_74copyPartitionStatistics(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_otherpartialdec); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_76deleteEmptyBlocks(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, bool __pyx_v_variables); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_78deleteOpencons(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_opencons); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_80deleteOpenvar(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_openvar); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_82displayInfo(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_detailLevel); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_84findVarsLinkingToMaster(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_86findVarsLinkingToStairlinking(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_88getAncestorID(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_ancestorindex); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_90getAncestorList(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_92setAncestorList(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_newlist); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_94removeAncestorID(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_ancestorid); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_96addAncestorID(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_ancestor); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_98getBlocksForRep(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_repid); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_100getDetectorClockTime(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_detectorchainindex); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_102getDetectorClockTimes(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_104getBlockConss(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_block); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_106getFinishedByFinisher(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_108getHashValue(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_110getID(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_112getLinkingvars(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_114getMasterconss(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_116getMastervars(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_118getNCoeffsForBlock(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_blockid); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_120getNCoeffsForMaster(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_122hasSetppccardMaster(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_124hasSetppcMaster(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_126hasSetppMaster(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_128getUsergiven(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_130getNAncestors(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_132getNBlocks(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_134getNConss(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_136getNConssForBlock(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_block); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_138getDetectorchainInfo(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_140getNDetectors(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_142getNLinkingvars(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_144getNMasterconss(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_146getNMastervars(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_148getNNewBlocks(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_detectorchainindex); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_150getNNewBlocksVector(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_152getNTotalStairlinkingvars(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_154getNOpenconss(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_156getNOpenvars(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_158getNReps(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_160getNStairlinkingvars(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_block); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_162getNVars(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_164getNVarsForBlock(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_block); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_166getNVarsForBlocks(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_168getOpenconssVec(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_170getOpenvars(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_172getOpenvarsVec(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_174getPctVarsToBorder(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_detectorchainindex); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_176getPctVarsToBorderVector(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_178getPctVarsToBlock(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_detectorchainindex); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_180getPctVarsToBlockVector(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_182getPctVarsFromFree(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_detectorchainindex); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_184getPctVarsFromFreeVector(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_186getPctConssToBorder(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_detectorchainindex); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_188getPctConssToBorderVector(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_190getPctConssToBlock(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_detectorchainindex); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_192getPctConssToBlockVector(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_194getPctConssFromFree(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_detectorchainindex); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_196getPctConssFromFreeVector(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_198getRepForBlock(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_blockid); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_200getRepVarmap(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_repid, int __pyx_v_blockrepid); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_202getDetprobdata(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_204getStairlinkingvars(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_block); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_206getVarsForBlock(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_block); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_208getVarProbindexForBlock(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_varid, int __pyx_v_block); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_210isComplete(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_212isConsMastercons(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_cons); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_214isConsOpencons(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_cons); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_216isAssignedToOrigProb(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_10isSelected___get__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static int __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_10isSelected_2__set__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, bool __pyx_v_selected); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_218isTrivial(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_220isVarBlockvarOfBlock(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_var, int __pyx_v_block); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_222isVarLinkingvar(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_var); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_224isVarMastervar(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_var); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_226isVarOpenvar(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_var); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_228isVarStairlinkingvar(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_var); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_230isVarStairlinkingvarOfBlock(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_var, int __pyx_v_block); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_232refineToBlocks(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_234refineToMaster(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_236setConsPartitionStatistics(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_detectorchainindex, struct __pyx_obj_8pygcgopt_3gcg_ConsPart *__pyx_v_partition, PyObject *__pyx_v_consclassesmaster); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_238setConsToBlock(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_consToBlock, int __pyx_v_block); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_240setConsToMaster(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_consToMaster); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_242setFinishedByFinisher(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, bool __pyx_v_finished); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_244setFinishedByFinisherOrig(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, bool __pyx_v_finished); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_246setNBlocks(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_nblocks); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_248setStemsFromOrig(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, bool __pyx_v_fromorig); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_250setVarPartitionStatistics(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_detectorchainindex, struct __pyx_obj_8pygcgopt_3gcg_VarPart *__pyx_v_partition, PyObject *__pyx_v_varclasseslinking, PyObject *__pyx_v_varclassesmaster); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_252setVarToBlock(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_varToBlock, int __pyx_v_block); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_254fixVarToBlock(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_var, int __pyx_v_block); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_256setVarToLinking(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_varToLinking); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_258fixVarToLinking(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_var); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_260setVarToMaster(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_varToMaster); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_262fixVarToMaster(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_var); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_264setVarToStairlinking(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_varToStairLinking, int __pyx_v_block1, int __pyx_v_block2); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_266fixVarToStairlinking(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_var, int __pyx_v_firstblock); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_268fixConsToBlockByName(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_consname, int __pyx_v_blockid); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_270fixVarToBlockByName(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_varname, int __pyx_v_blockid); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_272fixConsToMasterByName(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_consname); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_274fixVarToMasterByName(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_varname); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_276fixVarToLinkingByName(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_varname); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_278showVisualization(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_280shouldCompletedByConsToMaster(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_282sort(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_284setPctConssToBlockVector(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_newvector); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_286setPctConssFromFreeVector(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_newvector); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_288setPctConssToBorderVector(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_newvector); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_290setPctVarsToBorderVector(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_newvector); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_292setPctVarsToBlockVector(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_newvector); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_294setPctVarsFromFreeVector(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_newvector); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_296setDetectorClockTimes(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_newvector); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_12classicScore___get__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static int __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_12classicScore_2__set__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, double __pyx_v_score); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_15borderAreaScore___get__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static int __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_15borderAreaScore_2__set__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, double __pyx_v_score); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_13maxWhiteScore___get__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static int __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_13maxWhiteScore_2__set__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, double __pyx_v_score); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_16maxForWhiteScore___get__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static int __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_16maxForWhiteScore_2__set__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, double __pyx_v_score); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_17partForWhiteScore___get__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static int __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_17partForWhiteScore_2__set__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, double __pyx_v_score); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_19maxForWhiteAggScore___get__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static int __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_19maxForWhiteAggScore_2__set__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, double __pyx_v_score); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_20partForWhiteAggScore___get__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static int __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_20partForWhiteAggScore_2__set__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, double __pyx_v_score); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_12bendersScore___get__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static int __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_12bendersScore_2__set__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, double __pyx_v_score); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_17strongDecompScore___get__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static int __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_17strongDecompScore_2__set__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, double __pyx_v_score); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_298prepare(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_300aggInfoCalculated(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_302calcAggregationInformation(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, bool __pyx_v_ignoreDetectionLimits); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_304getConssForBlocks(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_306getTranslatedpartialdecid(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_308setTranslatedpartialdecid(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_decid); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_310buildDecChainString(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_buffer); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_312getVisuName(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_314matrix(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_bcoef); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_316uniqueMatrixValues(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_bcoef); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_318matrixMIPLIBConsType(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_bcoef); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_320uniqueMatrixMIPLIBConsType(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_bcoef); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_322matrixSCIPVarType(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_bcoef); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_324uniqueMatrixSCIPVarType(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_bcoef); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_326scipVarMap(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_328miplibConsMap(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_330visualize(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_fname, PyObject *__pyx_v_figsize, PyObject *__pyx_v_dpi, PyObject *__pyx_v_title, PyObject *__pyx_v_matrixType, PyObject *__pyx_v_obj, PyObject *__pyx_v_bcoef, PyObject *__pyx_v_dots, PyObject *__pyx_v_boxes, PyObject *__pyx_v_s, PyObject *__pyx_v_alpha, PyObject *__pyx_v_cmap, PyObject *__pyx_v_norm, PyObject *__pyx_v_linkingcolor, PyObject *__pyx_v_mastercolor, PyObject *__pyx_v_blockcolor, PyObject *__pyx_v_stairlinkingcolor, PyObject *__pyx_v_opencolor, PyObject *__pyx_v_linecolor, PyObject *__pyx_v_linewidth); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_332_repr_svg_(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_334_repr_png_(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_336__repr__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_15_visualizations___get__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static int __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_15_visualizations_2__set__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_15_visualizations_4__del__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_338__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_340__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pygcgopt_3gcg_11DetProbData___cinit__(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self); /* proto */
static void __pyx_pf_8pygcgopt_3gcg_11DetProbData_2__dealloc__(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_17candidatesNBlocks___get__(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self); /* proto */
static int __pyx_pf_8pygcgopt_3gcg_11DetProbData_17candidatesNBlocks_2__set__(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, PyObject *__pyx_v_candidatesNBlocks); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_23conspartitioncollection___get__(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self); /* proto */
static int __pyx_pf_8pygcgopt_3gcg_11DetProbData_23conspartitioncollection_2__set__(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, PyObject *__pyx_v_conspartitioncollection); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_22varpartitioncollection___get__(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self); /* proto */
static int __pyx_pf_8pygcgopt_3gcg_11DetProbData_22varpartitioncollection_2__set__(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, PyObject *__pyx_v_varpartitioncollection); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_18classificationtime___get__(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self); /* proto */
static int __pyx_pf_8pygcgopt_3gcg_11DetProbData_18classificationtime_2__set__(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, double __pyx_v_classificationtime); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_25nblockscandidatescalctime___get__(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self); /* proto */
static int __pyx_pf_8pygcgopt_3gcg_11DetProbData_25nblockscandidatescalctime_2__set__(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, double __pyx_v_nblockscandidatescalctime); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_18postprocessingtime___get__(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self); /* proto */
static int __pyx_pf_8pygcgopt_3gcg_11DetProbData_18postprocessingtime_2__set__(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, double __pyx_v_postprocessingtime); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_15translatingtime___get__(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self); /* proto */
static int __pyx_pf_8pygcgopt_3gcg_11DetProbData_15translatingtime_2__set__(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, double __pyx_v_translatingtime); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_4addConsPartition(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, struct __pyx_obj_8pygcgopt_3gcg_ConsPart *__pyx_v_partition); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_6addCandidatesNBlocksNVotes(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, int __pyx_v_candidate, int __pyx_v_nvotes); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_8addPartialdecToAncestor(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_partialdec); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_10addPartialdecToOpen(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_partialdec); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_12addPartialdecToFinished(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_partialdec); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_14addPartialdecToFinishedUnchecked(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_partialdec); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_16addVarPartition(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, struct __pyx_obj_8pygcgopt_3gcg_VarPart *__pyx_v_partition); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_18clearAncestorPartialdecs(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_20clearCurrentPartialdecs(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_22clearFinishedPartialdecs(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_24createConssAdjacency(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_26freeTemporaryData(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_28getAncestorPartialdec(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, int __pyx_v_partialdecindex); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_30getConsPartition(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, int __pyx_v_partitionIndex); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_32getCons(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, int __pyx_v_consIndex); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_34getConssForCons(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, int __pyx_v_consIndex); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_36getConssForVar(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, int __pyx_v_varIndex); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_38getOpenPartialdecs(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_40getFinishedPartialdec(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, int __pyx_v_partialdecindex); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_42getFinishedPartialdecs(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_44getIndexForCons(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, struct __pyx_obj_9pyscipopt_4scip_Constraint *__pyx_v_cons); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_46getNAncestorPartialdecs(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_48getNConsPartitions(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_50getNConss(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_52getNConssForCons(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, int __pyx_v_consIndex); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_54getNConssForVar(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, int __pyx_v_varIndex); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_56getNOpenPartialdecs(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_58getNFinishedPartialdecs(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_60getNPartialdecs(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_62getNNonzeros(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_64getNVarPartitions(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_66getNVars(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_68getNVarsForCons(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, int __pyx_v_consIndex); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_70getOrigVarsFixedZero(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_72getRelevantConss(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_74getRelevantVars(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_76getModel(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_78getSortedCandidatesNBlocks(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, PyObject *__pyx_v_candidates); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_80getVal(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, int __pyx_v_row, int __pyx_v_col); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_82getValsForCons(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, int __pyx_v_consIndex); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_84getVarPartition(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, int __pyx_v_partitionIndex); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_86getVarPartitions(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_88getVar(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, int __pyx_v_varIndex); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_90getVarsForCons(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, int __pyx_v_consIndex); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_92isConsCardinalityCons(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, int __pyx_v_consindexd); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_94isConssAdjInitialized(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_96isConsSetpp(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, int __pyx_v_consindexd); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_98isConsSetppc(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, int __pyx_v_consindexd); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_100isPartialdecDuplicateofFinished(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_partialdec); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_102isAssignedToOrigProb(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_104partialdecIsNoDuplicateOfPartialdecs(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_comppartialdec, PyObject *__pyx_v_partialdecs, bool __pyx_v_sort); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_106sortFinishedForScore(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_108translatePartialdecs(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_otherdata, PyObject *__pyx_v_otherpartialdecs); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_110__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_112__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PY_GCG_PRICINGSTATUS___reduce_cython__(struct __pyx_obj_8pygcgopt_3gcg_PY_GCG_PRICINGSTATUS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_20PY_GCG_PRICINGSTATUS_2__setstate_cython__(struct __pyx_obj_8pygcgopt_3gcg_PY_GCG_PRICINGSTATUS *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_includeDefaultPlugins(struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_2addVar(struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_4presolve(struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_6detect(struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_8printStatistics(struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_10printVersion(struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_12optimize(struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_14getDualbound(struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_16listDecompositions(struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_18addDecompositionFromConss(struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self, PyObject *__pyx_v_master_conss, PyObject *__pyx_v_block_conss); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_20addPreexistingPartialDecomposition(struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self, struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_partialdec); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_22addDecomposition(struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self, struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_partialdec); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_24createPartialDecomposition(struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_26createDecomposition(struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_28includePricingSolver(struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self, struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *__pyx_v_pricingSolver, PyObject *__pyx_v_solvername, PyObject *__pyx_v_desc, PyObject *__pyx_v_priority, PyObject *__pyx_v_heuristicEnabled, PyObject *__pyx_v_exactEnabled); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_30listPricingSolvers(struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_32setPricingSolverEnabled(struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self, PyObject *__pyx_v_pricing_solver_name, PyObject *__pyx_v_is_enabled); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_34setPricingSolverExactEnabled(struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self, PyObject *__pyx_v_pricing_solver_name, PyObject *__pyx_v_is_enabled); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_36setPricingSolverHeuristicEnabled(struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self, PyObject *__pyx_v_pricing_solver_name, PyObject *__pyx_v_is_enabled); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_38includeDetector(struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self, struct __pyx_obj_8pygcgopt_3gcg_Detector *__pyx_v_detector, PyObject *__pyx_v_detectorname, PyObject *__pyx_v_decchar, PyObject *__pyx_v_desc, PyObject *__pyx_v_freqcallround, PyObject *__pyx_v_maxcallround, PyObject *__pyx_v_mincallround, PyObject *__pyx_v_freqcallroundoriginal, PyObject *__pyx_v_maxcallroundoriginal, PyObject *__pyx_v_mincallroundoriginal, PyObject *__pyx_v_priority, PyObject *__pyx_v_enabled, PyObject *__pyx_v_enabledfinishing, PyObject *__pyx_v_enabledpostprocessing, PyObject *__pyx_v_skip, PyObject *__pyx_v_usefulrecall); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_40listDetectors(struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_42setDetectorEnabled(struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self, PyObject *__pyx_v_detector_name, PyObject *__pyx_v_is_enabled); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_44setDetectorFinishingEnabled(struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self, PyObject *__pyx_v_detector_name, PyObject *__pyx_v_is_enabled); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_46setDetectorPostprocessingEnabled(struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self, PyObject *__pyx_v_detector_name, PyObject *__pyx_v_is_enabled); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_48getMasterProb(struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_50setGCGSeparating(struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self, PyObject *__pyx_v_setting); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_52writeAllDecomps(struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self, PyObject *__pyx_v_directory, PyObject *__pyx_v_extension, bool __pyx_v_original, bool __pyx_v_presolved, PyObject *__pyx_v_createDirectory); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_54__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_56__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_15GCGPricingModel_createGcgCol(struct __pyx_obj_8pygcgopt_3gcg_GCGPricingModel *__pyx_v_self, PyObject *__pyx_v_probnr, PyObject *__pyx_v_variables, PyObject *__pyx_v_vals, bool __pyx_v_isray, PyObject *__pyx_v_redcost); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_15GCGPricingModel_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_GCGPricingModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_15GCGPricingModel_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_GCGPricingModel *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_14GCGMasterModel_addCol(struct __pyx_obj_8pygcgopt_3gcg_GCGMasterModel *__pyx_v_self, struct __pyx_obj_8pygcgopt_3gcg_GCGColumn *__pyx_v_col); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_14GCGMasterModel_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_GCGMasterModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_14GCGMasterModel_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_GCGMasterModel *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static Py_hash_t __pyx_pf_8pygcgopt_3gcg_9GCGColumn___hash__(struct __pyx_obj_8pygcgopt_3gcg_GCGColumn *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_9GCGColumn_2__eq__(struct __pyx_obj_8pygcgopt_3gcg_GCGColumn *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_9GCGColumn_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_GCGColumn *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_9GCGColumn_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_GCGColumn *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg___pyx_unpickle_Detector(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_2__pyx_unpickle_PricingSolver(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_8pygcgopt_3gcg_4__pyx_unpickle_PY_GCG_PRICINGSTATUS(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_8pygcgopt_3gcg_GCGColumn(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygcgopt_3gcg_Detector(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygcgopt_3gcg_PricingSolver(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygcgopt_3gcg_ConsPart(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygcgopt_3gcg_VarPart(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygcgopt_3gcg_PartialDecomposition(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygcgopt_3gcg_DetProbData(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygcgopt_3gcg_PY_GCG_PRICINGSTATUS(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygcgopt_3gcg_GCGModel(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygcgopt_3gcg_GCGPricingModel(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygcgopt_3gcg_GCGMasterModel(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_float_0_5;
static PyObject *__pyx_float_0_8;
static PyObject *__pyx_float_neg_1_5;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_4;
static PyObject *__pyx_int_5;
static PyObject *__pyx_int_6;
static PyObject *__pyx_int_7;
static PyObject *__pyx_int_8;
static PyObject *__pyx_int_9;
static PyObject *__pyx_int_10;
static PyObject *__pyx_int_11;
static PyObject *__pyx_int_12;
static PyObject *__pyx_int_13;
static PyObject *__pyx_int_14;
static PyObject *__pyx_int_15;
static PyObject *__pyx_int_90;
static PyObject *__pyx_int_128380825;
static PyObject *__pyx_int_222419149;
static PyObject *__pyx_int_260020090;
static PyObject *__pyx_int_neg_1;
static gcg::USERGIVEN __pyx_k__10;
static PyObject *__pyx_k__25;
static PyObject *__pyx_k__26;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_codeobj__39;
static PyObject *__pyx_codeobj__41;
static PyObject *__pyx_codeobj__43;
/* Late includes */

/* "src/pygcgopt/detector.pxi":6
 *     cdef public str detectorname
 * 
 *     def freeDetector(self):             # <<<<<<<<<<<<<<
 *         '''calls destructor and frees memory of detector'''
 *         pass
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_8Detector_1freeDetector(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_8Detector_freeDetector[] = "Detector.freeDetector(self)\ncalls destructor and frees memory of detector";
static PyObject *__pyx_pw_8pygcgopt_3gcg_8Detector_1freeDetector(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("freeDetector (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8Detector_freeDetector(((struct __pyx_obj_8pygcgopt_3gcg_Detector *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_8Detector_freeDetector(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_Detector *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("freeDetector", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detector.pxi":10
 *         pass
 * 
 *     def initDetector(self):             # <<<<<<<<<<<<<<
 *         '''initializes detector'''
 *         pass
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_8Detector_3initDetector(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_8Detector_2initDetector[] = "Detector.initDetector(self)\ninitializes detector";
static PyObject *__pyx_pw_8pygcgopt_3gcg_8Detector_3initDetector(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initDetector (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8Detector_2initDetector(((struct __pyx_obj_8pygcgopt_3gcg_Detector *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_8Detector_2initDetector(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_Detector *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initDetector", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detector.pxi":14
 *         pass
 * 
 *     def exitDetector(self):             # <<<<<<<<<<<<<<
 *         '''calls exit method of detector'''
 *         pass
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_8Detector_5exitDetector(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_8Detector_4exitDetector[] = "Detector.exitDetector(self)\ncalls exit method of detector";
static PyObject *__pyx_pw_8pygcgopt_3gcg_8Detector_5exitDetector(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("exitDetector (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8Detector_4exitDetector(((struct __pyx_obj_8pygcgopt_3gcg_Detector *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_8Detector_4exitDetector(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_Detector *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("exitDetector", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detector.pxi":18
 *         pass
 * 
 *     def propagatePartialdec(self, detprobdata, workonpartialdec):             # <<<<<<<<<<<<<<
 *         '''refines a partial decomposition inside detection loop'''
 *         return {}
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_8Detector_7propagatePartialdec(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_8Detector_6propagatePartialdec[] = "Detector.propagatePartialdec(self, detprobdata, workonpartialdec)\nrefines a partial decomposition inside detection loop";
static PyObject *__pyx_pw_8pygcgopt_3gcg_8Detector_7propagatePartialdec(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_detprobdata = 0;
  CYTHON_UNUSED PyObject *__pyx_v_workonpartialdec = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("propagatePartialdec (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_detprobdata,&__pyx_n_s_workonpartialdec,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_detprobdata)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_workonpartialdec)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("propagatePartialdec", 1, 2, 2, 1); __PYX_ERR(0, 18, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "propagatePartialdec") < 0)) __PYX_ERR(0, 18, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_detprobdata = values[0];
    __pyx_v_workonpartialdec = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("propagatePartialdec", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 18, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.Detector.propagatePartialdec", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8Detector_6propagatePartialdec(((struct __pyx_obj_8pygcgopt_3gcg_Detector *)__pyx_v_self), __pyx_v_detprobdata, __pyx_v_workonpartialdec);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_8Detector_6propagatePartialdec(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_Detector *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_detprobdata, CYTHON_UNUSED PyObject *__pyx_v_workonpartialdec) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("propagatePartialdec", 0);

  /* "src/pygcgopt/detector.pxi":20
 *     def propagatePartialdec(self, detprobdata, workonpartialdec):
 *         '''refines a partial decomposition inside detection loop'''
 *         return {}             # <<<<<<<<<<<<<<
 * 
 *     def finishPartialdec(self, detprobdata, workonpartialdec):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/detector.pxi":18
 *         pass
 * 
 *     def propagatePartialdec(self, detprobdata, workonpartialdec):             # <<<<<<<<<<<<<<
 *         '''refines a partial decomposition inside detection loop'''
 *         return {}
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygcgopt.gcg.Detector.propagatePartialdec", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detector.pxi":22
 *         return {}
 * 
 *     def finishPartialdec(self, detprobdata, workonpartialdec):             # <<<<<<<<<<<<<<
 *         '''completes a partial decomposition when called in detection loop'''
 *         return {}
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_8Detector_9finishPartialdec(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_8Detector_8finishPartialdec[] = "Detector.finishPartialdec(self, detprobdata, workonpartialdec)\ncompletes a partial decomposition when called in detection loop";
static PyObject *__pyx_pw_8pygcgopt_3gcg_8Detector_9finishPartialdec(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_detprobdata = 0;
  CYTHON_UNUSED PyObject *__pyx_v_workonpartialdec = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("finishPartialdec (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_detprobdata,&__pyx_n_s_workonpartialdec,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_detprobdata)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_workonpartialdec)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("finishPartialdec", 1, 2, 2, 1); __PYX_ERR(0, 22, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "finishPartialdec") < 0)) __PYX_ERR(0, 22, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_detprobdata = values[0];
    __pyx_v_workonpartialdec = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("finishPartialdec", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 22, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.Detector.finishPartialdec", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8Detector_8finishPartialdec(((struct __pyx_obj_8pygcgopt_3gcg_Detector *)__pyx_v_self), __pyx_v_detprobdata, __pyx_v_workonpartialdec);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_8Detector_8finishPartialdec(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_Detector *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_detprobdata, CYTHON_UNUSED PyObject *__pyx_v_workonpartialdec) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("finishPartialdec", 0);

  /* "src/pygcgopt/detector.pxi":24
 *     def finishPartialdec(self, detprobdata, workonpartialdec):
 *         '''completes a partial decomposition when called in detection loop'''
 *         return {}             # <<<<<<<<<<<<<<
 * 
 *     def postprocessPartialdec(self, detprobdata, workonpartialdec):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/detector.pxi":22
 *         return {}
 * 
 *     def finishPartialdec(self, detprobdata, workonpartialdec):             # <<<<<<<<<<<<<<
 *         '''completes a partial decomposition when called in detection loop'''
 *         return {}
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygcgopt.gcg.Detector.finishPartialdec", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detector.pxi":26
 *         return {}
 * 
 *     def postprocessPartialdec(self, detprobdata, workonpartialdec):             # <<<<<<<<<<<<<<
 *         '''postprocess a complete decomposition, called after detection loop'''
 *         return {}
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_8Detector_11postprocessPartialdec(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_8Detector_10postprocessPartialdec[] = "Detector.postprocessPartialdec(self, detprobdata, workonpartialdec)\npostprocess a complete decomposition, called after detection loop";
static PyObject *__pyx_pw_8pygcgopt_3gcg_8Detector_11postprocessPartialdec(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_detprobdata = 0;
  CYTHON_UNUSED PyObject *__pyx_v_workonpartialdec = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("postprocessPartialdec (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_detprobdata,&__pyx_n_s_workonpartialdec,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_detprobdata)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_workonpartialdec)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("postprocessPartialdec", 1, 2, 2, 1); __PYX_ERR(0, 26, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "postprocessPartialdec") < 0)) __PYX_ERR(0, 26, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_detprobdata = values[0];
    __pyx_v_workonpartialdec = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("postprocessPartialdec", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 26, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.Detector.postprocessPartialdec", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8Detector_10postprocessPartialdec(((struct __pyx_obj_8pygcgopt_3gcg_Detector *)__pyx_v_self), __pyx_v_detprobdata, __pyx_v_workonpartialdec);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_8Detector_10postprocessPartialdec(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_Detector *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_detprobdata, CYTHON_UNUSED PyObject *__pyx_v_workonpartialdec) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("postprocessPartialdec", 0);

  /* "src/pygcgopt/detector.pxi":28
 *     def postprocessPartialdec(self, detprobdata, workonpartialdec):
 *         '''postprocess a complete decomposition, called after detection loop'''
 *         return {}             # <<<<<<<<<<<<<<
 * 
 *     def setParamAggressive(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/detector.pxi":26
 *         return {}
 * 
 *     def postprocessPartialdec(self, detprobdata, workonpartialdec):             # <<<<<<<<<<<<<<
 *         '''postprocess a complete decomposition, called after detection loop'''
 *         return {}
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygcgopt.gcg.Detector.postprocessPartialdec", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detector.pxi":30
 *         return {}
 * 
 *     def setParamAggressive(self):             # <<<<<<<<<<<<<<
 *         '''called if the detection emphasis setting aggressive is chosen'''
 *         pass
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_8Detector_13setParamAggressive(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_8Detector_12setParamAggressive[] = "Detector.setParamAggressive(self)\ncalled if the detection emphasis setting aggressive is chosen";
static PyObject *__pyx_pw_8pygcgopt_3gcg_8Detector_13setParamAggressive(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setParamAggressive (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8Detector_12setParamAggressive(((struct __pyx_obj_8pygcgopt_3gcg_Detector *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_8Detector_12setParamAggressive(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_Detector *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setParamAggressive", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detector.pxi":34
 *         pass
 * 
 *     def setParamDefault(self):             # <<<<<<<<<<<<<<
 *         '''called if the detection emphasis setting default is chosen'''
 *         pass
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_8Detector_15setParamDefault(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_8Detector_14setParamDefault[] = "Detector.setParamDefault(self)\ncalled if the detection emphasis setting default is chosen";
static PyObject *__pyx_pw_8pygcgopt_3gcg_8Detector_15setParamDefault(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setParamDefault (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8Detector_14setParamDefault(((struct __pyx_obj_8pygcgopt_3gcg_Detector *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_8Detector_14setParamDefault(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_Detector *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setParamDefault", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detector.pxi":38
 *         pass
 * 
 *     def setParamFast(self):             # <<<<<<<<<<<<<<
 *         '''called if the detection emphasis setting fast is chosen'''
 *         pass
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_8Detector_17setParamFast(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_8Detector_16setParamFast[] = "Detector.setParamFast(self)\ncalled if the detection emphasis setting fast is chosen";
static PyObject *__pyx_pw_8pygcgopt_3gcg_8Detector_17setParamFast(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setParamFast (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8Detector_16setParamFast(((struct __pyx_obj_8pygcgopt_3gcg_Detector *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_8Detector_16setParamFast(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_Detector *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setParamFast", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detector.pxi":3
 * cdef class Detector:
 *     """Base class of the Detector Plugin"""
 *     cdef public Model model             # <<<<<<<<<<<<<<
 *     cdef public str detectorname
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_8Detector_5model_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygcgopt_3gcg_8Detector_5model_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8Detector_5model___get__(((struct __pyx_obj_8pygcgopt_3gcg_Detector *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_8Detector_5model___get__(struct __pyx_obj_8pygcgopt_3gcg_Detector *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->model));
  __pyx_r = ((PyObject *)__pyx_v_self->model);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_8pygcgopt_3gcg_8Detector_5model_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_8pygcgopt_3gcg_8Detector_5model_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8Detector_5model_2__set__(((struct __pyx_obj_8pygcgopt_3gcg_Detector *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygcgopt_3gcg_8Detector_5model_2__set__(struct __pyx_obj_8pygcgopt_3gcg_Detector *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_9pyscipopt_4scip_Model))))) __PYX_ERR(0, 3, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->model);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->model));
  __pyx_v_self->model = ((struct __pyx_obj_9pyscipopt_4scip_Model *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygcgopt.gcg.Detector.model.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_8pygcgopt_3gcg_8Detector_5model_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_8pygcgopt_3gcg_8Detector_5model_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8Detector_5model_4__del__(((struct __pyx_obj_8pygcgopt_3gcg_Detector *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygcgopt_3gcg_8Detector_5model_4__del__(struct __pyx_obj_8pygcgopt_3gcg_Detector *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->model);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->model));
  __pyx_v_self->model = ((struct __pyx_obj_9pyscipopt_4scip_Model *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detector.pxi":4
 *     """Base class of the Detector Plugin"""
 *     cdef public Model model
 *     cdef public str detectorname             # <<<<<<<<<<<<<<
 * 
 *     def freeDetector(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_8Detector_12detectorname_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygcgopt_3gcg_8Detector_12detectorname_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8Detector_12detectorname___get__(((struct __pyx_obj_8pygcgopt_3gcg_Detector *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_8Detector_12detectorname___get__(struct __pyx_obj_8pygcgopt_3gcg_Detector *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->detectorname);
  __pyx_r = __pyx_v_self->detectorname;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_8pygcgopt_3gcg_8Detector_12detectorname_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_8pygcgopt_3gcg_8Detector_12detectorname_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8Detector_12detectorname_2__set__(((struct __pyx_obj_8pygcgopt_3gcg_Detector *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygcgopt_3gcg_8Detector_12detectorname_2__set__(struct __pyx_obj_8pygcgopt_3gcg_Detector *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyUnicode_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(0, 4, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->detectorname);
  __Pyx_DECREF(__pyx_v_self->detectorname);
  __pyx_v_self->detectorname = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygcgopt.gcg.Detector.detectorname.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_8pygcgopt_3gcg_8Detector_12detectorname_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_8pygcgopt_3gcg_8Detector_12detectorname_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8Detector_12detectorname_4__del__(((struct __pyx_obj_8pygcgopt_3gcg_Detector *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygcgopt_3gcg_8Detector_12detectorname_4__del__(struct __pyx_obj_8pygcgopt_3gcg_Detector *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->detectorname);
  __Pyx_DECREF(__pyx_v_self->detectorname);
  __pyx_v_self->detectorname = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_8Detector_19__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_8Detector_18__reduce_cython__[] = "Detector.__reduce_cython__(self)";
static PyObject *__pyx_pw_8pygcgopt_3gcg_8Detector_19__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8Detector_18__reduce_cython__(((struct __pyx_obj_8pygcgopt_3gcg_Detector *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_8Detector_18__reduce_cython__(struct __pyx_obj_8pygcgopt_3gcg_Detector *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.detectorname, self.model)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_self->detectorname);
  __Pyx_GIVEREF(__pyx_v_self->detectorname);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self->detectorname);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->model));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->model));
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_self->model));
  __pyx_v_state = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.detectorname, self.model)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = (self.detectorname, self.model)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.detectorname is not None or self.model is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.detectorname, self.model)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.detectorname is not None or self.model is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_Detector, (type(self), 0xf7f977a, None), state
 */
  /*else*/ {
    __pyx_t_2 = (__pyx_v_self->detectorname != ((PyObject*)Py_None));
    __pyx_t_5 = (__pyx_t_2 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_3 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->model) != Py_None);
    __pyx_t_2 = (__pyx_t_5 != 0);
    __pyx_t_3 = __pyx_t_2;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_3;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.detectorname is not None or self.model is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Detector, (type(self), 0xf7f977a, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = self.detectorname is not None or self.model is not None
 *     if use_setstate:
 *         return __pyx_unpickle_Detector, (type(self), 0xf7f977a, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_Detector, (type(self), 0xf7f977a, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_Detector); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_260020090);
    __Pyx_GIVEREF(__pyx_int_260020090);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_260020090);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.detectorname is not None or self.model is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Detector, (type(self), 0xf7f977a, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_Detector, (type(self), 0xf7f977a, None), state
 *     else:
 *         return __pyx_unpickle_Detector, (type(self), 0xf7f977a, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Detector__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_pyx_unpickle_Detector); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_260020090);
    __Pyx_GIVEREF(__pyx_int_260020090);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_260020090);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_6 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pygcgopt.gcg.Detector.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Detector, (type(self), 0xf7f977a, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Detector__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_8Detector_21__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_8Detector_20__setstate_cython__[] = "Detector.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_8pygcgopt_3gcg_8Detector_21__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8Detector_20__setstate_cython__(((struct __pyx_obj_8pygcgopt_3gcg_Detector *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_8Detector_20__setstate_cython__(struct __pyx_obj_8pygcgopt_3gcg_Detector *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_Detector, (type(self), 0xf7f977a, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Detector__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(4, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_8pygcgopt_3gcg___pyx_unpickle_Detector__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Detector, (type(self), 0xf7f977a, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Detector__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygcgopt.gcg.Detector.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detector.pxi":43
 * 
 * 
 * cdef Detector get_py_detector(DEC_DETECTOR* detector):             # <<<<<<<<<<<<<<
 *     cdef DEC_DETECTORDATA* detectordata
 *     detectordata = DECdetectorGetData(detector)
 */

static struct __pyx_obj_8pygcgopt_3gcg_Detector *__pyx_f_8pygcgopt_3gcg_get_py_detector(DEC_DETECTOR *__pyx_v_detector) {
  DEC_DETECTORDATA *__pyx_v_detectordata;
  struct __pyx_obj_8pygcgopt_3gcg_Detector *__pyx_v_py_detector = NULL;
  struct __pyx_obj_8pygcgopt_3gcg_Detector *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_py_detector", 0);

  /* "src/pygcgopt/detector.pxi":45
 * cdef Detector get_py_detector(DEC_DETECTOR* detector):
 *     cdef DEC_DETECTORDATA* detectordata
 *     detectordata = DECdetectorGetData(detector)             # <<<<<<<<<<<<<<
 *     py_detector = <Detector>detectordata
 *     return py_detector
 */
  __pyx_v_detectordata = DECdetectorGetData(__pyx_v_detector);

  /* "src/pygcgopt/detector.pxi":46
 *     cdef DEC_DETECTORDATA* detectordata
 *     detectordata = DECdetectorGetData(detector)
 *     py_detector = <Detector>detectordata             # <<<<<<<<<<<<<<
 *     return py_detector
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_detectordata);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_py_detector = ((struct __pyx_obj_8pygcgopt_3gcg_Detector *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/pygcgopt/detector.pxi":47
 *     detectordata = DECdetectorGetData(detector)
 *     py_detector = <Detector>detectordata
 *     return py_detector             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_py_detector));
  __pyx_r = __pyx_v_py_detector;
  goto __pyx_L0;

  /* "src/pygcgopt/detector.pxi":43
 * 
 * 
 * cdef Detector get_py_detector(DEC_DETECTOR* detector):             # <<<<<<<<<<<<<<
 *     cdef DEC_DETECTORDATA* detectordata
 *     detectordata = DECdetectorGetData(detector)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_detector);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detector.pxi":50
 * 
 * 
 * cdef tuple get_py_partialdec_detection_data(PARTIALDEC_DETECTION_DATA* partialdecdetectiondata):             # <<<<<<<<<<<<<<
 *     detprobdata = DetProbData.create(partialdecdetectiondata.detprobdata)
 *     workonpartialdec = PartialDecomposition.create(partialdecdetectiondata.workonpartialdec)
 */

static PyObject *__pyx_f_8pygcgopt_3gcg_get_py_partialdec_detection_data(PARTIALDEC_DETECTION_DATA *__pyx_v_partialdecdetectiondata) {
  PyObject *__pyx_v_detprobdata = NULL;
  PyObject *__pyx_v_workonpartialdec = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_py_partialdec_detection_data", 0);

  /* "src/pygcgopt/detector.pxi":51
 * 
 * cdef tuple get_py_partialdec_detection_data(PARTIALDEC_DETECTION_DATA* partialdecdetectiondata):
 *     detprobdata = DetProbData.create(partialdecdetectiondata.detprobdata)             # <<<<<<<<<<<<<<
 *     workonpartialdec = PartialDecomposition.create(partialdecdetectiondata.workonpartialdec)
 *     return detprobdata, workonpartialdec
 */
  __pyx_t_1 = __pyx_f_8pygcgopt_3gcg_11DetProbData_create(__pyx_v_partialdecdetectiondata->detprobdata); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_detprobdata = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "src/pygcgopt/detector.pxi":52
 * cdef tuple get_py_partialdec_detection_data(PARTIALDEC_DETECTION_DATA* partialdecdetectiondata):
 *     detprobdata = DetProbData.create(partialdecdetectiondata.detprobdata)
 *     workonpartialdec = PartialDecomposition.create(partialdecdetectiondata.workonpartialdec)             # <<<<<<<<<<<<<<
 *     return detprobdata, workonpartialdec
 * 
 */
  __pyx_t_1 = __pyx_f_8pygcgopt_3gcg_20PartialDecomposition_create(__pyx_v_partialdecdetectiondata->workonpartialdec); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_workonpartialdec = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "src/pygcgopt/detector.pxi":53
 *     detprobdata = DetProbData.create(partialdecdetectiondata.detprobdata)
 *     workonpartialdec = PartialDecomposition.create(partialdecdetectiondata.workonpartialdec)
 *     return detprobdata, workonpartialdec             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_detprobdata);
  __Pyx_GIVEREF(__pyx_v_detprobdata);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_detprobdata);
  __Pyx_INCREF(__pyx_v_workonpartialdec);
  __Pyx_GIVEREF(__pyx_v_workonpartialdec);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_workonpartialdec);
  __pyx_r = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/detector.pxi":50
 * 
 * 
 * cdef tuple get_py_partialdec_detection_data(PARTIALDEC_DETECTION_DATA* partialdecdetectiondata):             # <<<<<<<<<<<<<<
 *     detprobdata = DetProbData.create(partialdecdetectiondata.detprobdata)
 *     workonpartialdec = PartialDecomposition.create(partialdecdetectiondata.workonpartialdec)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygcgopt.gcg.get_py_partialdec_detection_data", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_detprobdata);
  __Pyx_XDECREF(__pyx_v_workonpartialdec);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detector.pxi":56
 * 
 * 
 * cdef wrap_detector_callback_result(Detector detector, PARTIALDEC_DETECTION_DATA* partialdecdetectiondata, SCIP_RESULT* result, object result_dict, double detection_time):             # <<<<<<<<<<<<<<
 *     if result_dict is None or type(result_dict) is not dict:
 *         raise TypeError("Detector callback returned '{}' of type '{}'. Expected a dictionary with optional keys 'newpartialdecs' and 'result'.".format(result_dict, type(result_dict)))
 */

static PyObject *__pyx_f_8pygcgopt_3gcg_wrap_detector_callback_result(struct __pyx_obj_8pygcgopt_3gcg_Detector *__pyx_v_detector, PARTIALDEC_DETECTION_DATA *__pyx_v_partialdecdetectiondata, SCIP_RESULT *__pyx_v_result, PyObject *__pyx_v_result_dict, double __pyx_v_detection_time) {
  PyObject *__pyx_v_py_newpartialdecs = NULL;
  PyObject *__pyx_v_nnewpartialdecs = NULL;
  gcg::PARTIALDECOMP **__pyx_v_newpartialdecs;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  size_t __pyx_t_11;
  PyObject *(*__pyx_t_12)(PyObject *);
  gcg::PARTIALDECOMP *__pyx_t_13;
  Py_ssize_t __pyx_t_14;
  SCIP_RESULT __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("wrap_detector_callback_result", 0);

  /* "src/pygcgopt/detector.pxi":57
 * 
 * cdef wrap_detector_callback_result(Detector detector, PARTIALDEC_DETECTION_DATA* partialdecdetectiondata, SCIP_RESULT* result, object result_dict, double detection_time):
 *     if result_dict is None or type(result_dict) is not dict:             # <<<<<<<<<<<<<<
 *         raise TypeError("Detector callback returned '{}' of type '{}'. Expected a dictionary with optional keys 'newpartialdecs' and 'result'.".format(result_dict, type(result_dict)))
 * 
 */
  __pyx_t_2 = (__pyx_v_result_dict == Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (((PyObject *)Py_TYPE(__pyx_v_result_dict)) != ((PyObject *)(&PyDict_Type)));
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "src/pygcgopt/detector.pxi":58
 * cdef wrap_detector_callback_result(Detector detector, PARTIALDEC_DETECTION_DATA* partialdecdetectiondata, SCIP_RESULT* result, object result_dict, double detection_time):
 *     if result_dict is None or type(result_dict) is not dict:
 *         raise TypeError("Detector callback returned '{}' of type '{}'. Expected a dictionary with optional keys 'newpartialdecs' and 'result'.".format(result_dict, type(result_dict)))             # <<<<<<<<<<<<<<
 * 
 *     py_newpartialdecs = result_dict.get("newpartialdecs", [])
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Detector_callback_returned_of_ty, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 58, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_v_result_dict, ((PyObject *)Py_TYPE(__pyx_v_result_dict))};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 58, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_v_result_dict, ((PyObject *)Py_TYPE(__pyx_v_result_dict))};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 58, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 58, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_6) {
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
      }
      __Pyx_INCREF(__pyx_v_result_dict);
      __Pyx_GIVEREF(__pyx_v_result_dict);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_v_result_dict);
      __Pyx_INCREF(((PyObject *)Py_TYPE(__pyx_v_result_dict)));
      __Pyx_GIVEREF(((PyObject *)Py_TYPE(__pyx_v_result_dict)));
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, ((PyObject *)Py_TYPE(__pyx_v_result_dict)));
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 58, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 58, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 58, __pyx_L1_error)

    /* "src/pygcgopt/detector.pxi":57
 * 
 * cdef wrap_detector_callback_result(Detector detector, PARTIALDEC_DETECTION_DATA* partialdecdetectiondata, SCIP_RESULT* result, object result_dict, double detection_time):
 *     if result_dict is None or type(result_dict) is not dict:             # <<<<<<<<<<<<<<
 *         raise TypeError("Detector callback returned '{}' of type '{}'. Expected a dictionary with optional keys 'newpartialdecs' and 'result'.".format(result_dict, type(result_dict)))
 * 
 */
  }

  /* "src/pygcgopt/detector.pxi":60
 *         raise TypeError("Detector callback returned '{}' of type '{}'. Expected a dictionary with optional keys 'newpartialdecs' and 'result'.".format(result_dict, type(result_dict)))
 * 
 *     py_newpartialdecs = result_dict.get("newpartialdecs", [])             # <<<<<<<<<<<<<<
 *     if py_newpartialdecs is None or type(py_newpartialdecs) is not list:
 *         raise TypeError("The value of the key 'newpartialdecs' is '{}' of type '{}'. Expected a list of 'PartialDecomposition' objects.".format(py_newpartialdecs, type(py_newpartialdecs)))
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_result_dict, __pyx_n_s_get); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = PyList_New(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_n_u_newpartialdecs, __pyx_t_8};
    __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 60, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_n_u_newpartialdecs, __pyx_t_8};
    __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 60, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  {
    __pyx_t_9 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 60, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_newpartialdecs);
    __Pyx_GIVEREF(__pyx_n_u_newpartialdecs);
    PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_7, __pyx_n_u_newpartialdecs);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_7, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_9, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 60, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_py_newpartialdecs = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "src/pygcgopt/detector.pxi":61
 * 
 *     py_newpartialdecs = result_dict.get("newpartialdecs", [])
 *     if py_newpartialdecs is None or type(py_newpartialdecs) is not list:             # <<<<<<<<<<<<<<
 *         raise TypeError("The value of the key 'newpartialdecs' is '{}' of type '{}'. Expected a list of 'PartialDecomposition' objects.".format(py_newpartialdecs, type(py_newpartialdecs)))
 * 
 */
  __pyx_t_2 = (__pyx_v_py_newpartialdecs == Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_3 = (((PyObject *)Py_TYPE(__pyx_v_py_newpartialdecs)) != ((PyObject *)(&PyList_Type)));
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L7_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "src/pygcgopt/detector.pxi":62
 *     py_newpartialdecs = result_dict.get("newpartialdecs", [])
 *     if py_newpartialdecs is None or type(py_newpartialdecs) is not list:
 *         raise TypeError("The value of the key 'newpartialdecs' is '{}' of type '{}'. Expected a list of 'PartialDecomposition' objects.".format(py_newpartialdecs, type(py_newpartialdecs)))             # <<<<<<<<<<<<<<
 * 
 *     nnewpartialdecs = len(py_newpartialdecs)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_The_value_of_the_key_newpartiald, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 62, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_9 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_v_py_newpartialdecs, ((PyObject *)Py_TYPE(__pyx_v_py_newpartialdecs))};
      __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 62, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_v_py_newpartialdecs, ((PyObject *)Py_TYPE(__pyx_v_py_newpartialdecs))};
      __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 62, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 62, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_9) {
        __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_9); __pyx_t_9 = NULL;
      }
      __Pyx_INCREF(__pyx_v_py_newpartialdecs);
      __Pyx_GIVEREF(__pyx_v_py_newpartialdecs);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_v_py_newpartialdecs);
      __Pyx_INCREF(((PyObject *)Py_TYPE(__pyx_v_py_newpartialdecs)));
      __Pyx_GIVEREF(((PyObject *)Py_TYPE(__pyx_v_py_newpartialdecs)));
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, ((PyObject *)Py_TYPE(__pyx_v_py_newpartialdecs)));
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 62, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 62, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 62, __pyx_L1_error)

    /* "src/pygcgopt/detector.pxi":61
 * 
 *     py_newpartialdecs = result_dict.get("newpartialdecs", [])
 *     if py_newpartialdecs is None or type(py_newpartialdecs) is not list:             # <<<<<<<<<<<<<<
 *         raise TypeError("The value of the key 'newpartialdecs' is '{}' of type '{}'. Expected a list of 'PartialDecomposition' objects.".format(py_newpartialdecs, type(py_newpartialdecs)))
 * 
 */
  }

  /* "src/pygcgopt/detector.pxi":64
 *         raise TypeError("The value of the key 'newpartialdecs' is '{}' of type '{}'. Expected a list of 'PartialDecomposition' objects.".format(py_newpartialdecs, type(py_newpartialdecs)))
 * 
 *     nnewpartialdecs = len(py_newpartialdecs)             # <<<<<<<<<<<<<<
 *     cdef PARTIALDECOMP** newpartialdecs = <PARTIALDECOMP**>malloc(nnewpartialdecs * sizeof(PARTIALDECOMP*))
 *     for i in range(nnewpartialdecs):
 */
  __pyx_t_10 = PyObject_Length(__pyx_v_py_newpartialdecs); if (unlikely(__pyx_t_10 == ((Py_ssize_t)-1))) __PYX_ERR(0, 64, __pyx_L1_error)
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_nnewpartialdecs = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "src/pygcgopt/detector.pxi":65
 * 
 *     nnewpartialdecs = len(py_newpartialdecs)
 *     cdef PARTIALDECOMP** newpartialdecs = <PARTIALDECOMP**>malloc(nnewpartialdecs * sizeof(PARTIALDECOMP*))             # <<<<<<<<<<<<<<
 *     for i in range(nnewpartialdecs):
 *         py_newpartialdecs[i].sort()
 */
  __pyx_t_4 = __Pyx_PyInt_FromSize_t((sizeof(gcg::PARTIALDECOMP *))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyNumber_Multiply(__pyx_v_nnewpartialdecs, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_11 = __Pyx_PyInt_As_size_t(__pyx_t_5); if (unlikely((__pyx_t_11 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_newpartialdecs = ((gcg::PARTIALDECOMP **)malloc(__pyx_t_11));

  /* "src/pygcgopt/detector.pxi":66
 *     nnewpartialdecs = len(py_newpartialdecs)
 *     cdef PARTIALDECOMP** newpartialdecs = <PARTIALDECOMP**>malloc(nnewpartialdecs * sizeof(PARTIALDECOMP*))
 *     for i in range(nnewpartialdecs):             # <<<<<<<<<<<<<<
 *         py_newpartialdecs[i].sort()
 *         # TODO: It would be nice if the user could set a custom chain info
 */
  __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_v_nnewpartialdecs); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
    __pyx_t_4 = __pyx_t_5; __Pyx_INCREF(__pyx_t_4); __pyx_t_10 = 0;
    __pyx_t_12 = NULL;
  } else {
    __pyx_t_10 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 66, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_12 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 66, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  for (;;) {
    if (likely(!__pyx_t_12)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_10); __Pyx_INCREF(__pyx_t_5); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(0, 66, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 66, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_10); __Pyx_INCREF(__pyx_t_5); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(0, 66, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 66, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_12(__pyx_t_4);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 66, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "src/pygcgopt/detector.pxi":67
 *     cdef PARTIALDECOMP** newpartialdecs = <PARTIALDECOMP**>malloc(nnewpartialdecs * sizeof(PARTIALDECOMP*))
 *     for i in range(nnewpartialdecs):
 *         py_newpartialdecs[i].sort()             # <<<<<<<<<<<<<<
 *         # TODO: It would be nice if the user could set a custom chain info
 *         py_newpartialdecs[i].addDetectorChainInfo(detector.detectorname)
 */
    __pyx_t_8 = __Pyx_PyObject_GetItem(__pyx_v_py_newpartialdecs, __pyx_v_i); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 67, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_sort); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 67, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_5 = (__pyx_t_8) ? __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_8) : __Pyx_PyObject_CallNoArg(__pyx_t_9);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 67, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "src/pygcgopt/detector.pxi":69
 *         py_newpartialdecs[i].sort()
 *         # TODO: It would be nice if the user could set a custom chain info
 *         py_newpartialdecs[i].addDetectorChainInfo(detector.detectorname)             # <<<<<<<<<<<<<<
 *         py_newpartialdecs[i].addClockTime(detection_time / nnewpartialdecs)
 *         newpartialdecs[i] = (<PartialDecomposition>py_newpartialdecs[i]).thisptr
 */
    __pyx_t_9 = __Pyx_PyObject_GetItem(__pyx_v_py_newpartialdecs, __pyx_v_i); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 69, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_addDetectorChainInfo); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 69, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_5 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_v_detector->detectorname) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_detector->detectorname);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 69, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "src/pygcgopt/detector.pxi":70
 *         # TODO: It would be nice if the user could set a custom chain info
 *         py_newpartialdecs[i].addDetectorChainInfo(detector.detectorname)
 *         py_newpartialdecs[i].addClockTime(detection_time / nnewpartialdecs)             # <<<<<<<<<<<<<<
 *         newpartialdecs[i] = (<PartialDecomposition>py_newpartialdecs[i]).thisptr
 *     partialdecdetectiondata.newpartialdecs = newpartialdecs
 */
    __pyx_t_8 = __Pyx_PyObject_GetItem(__pyx_v_py_newpartialdecs, __pyx_v_i); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 70, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_addClockTime); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 70, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyFloat_FromDouble(__pyx_v_detection_time); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 70, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_6 = __Pyx_PyNumber_Divide(__pyx_t_8, __pyx_v_nnewpartialdecs); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 70, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_5 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 70, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "src/pygcgopt/detector.pxi":71
 *         py_newpartialdecs[i].addDetectorChainInfo(detector.detectorname)
 *         py_newpartialdecs[i].addClockTime(detection_time / nnewpartialdecs)
 *         newpartialdecs[i] = (<PartialDecomposition>py_newpartialdecs[i]).thisptr             # <<<<<<<<<<<<<<
 *     partialdecdetectiondata.newpartialdecs = newpartialdecs
 *     partialdecdetectiondata.nnewpartialdecs = nnewpartialdecs
 */
    __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_v_py_newpartialdecs, __pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 71, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_13 = ((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_t_5)->thisptr;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_14 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_14 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 71, __pyx_L1_error)
    (__pyx_v_newpartialdecs[__pyx_t_14]) = __pyx_t_13;

    /* "src/pygcgopt/detector.pxi":66
 *     nnewpartialdecs = len(py_newpartialdecs)
 *     cdef PARTIALDECOMP** newpartialdecs = <PARTIALDECOMP**>malloc(nnewpartialdecs * sizeof(PARTIALDECOMP*))
 *     for i in range(nnewpartialdecs):             # <<<<<<<<<<<<<<
 *         py_newpartialdecs[i].sort()
 *         # TODO: It would be nice if the user could set a custom chain info
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "src/pygcgopt/detector.pxi":72
 *         py_newpartialdecs[i].addClockTime(detection_time / nnewpartialdecs)
 *         newpartialdecs[i] = (<PartialDecomposition>py_newpartialdecs[i]).thisptr
 *     partialdecdetectiondata.newpartialdecs = newpartialdecs             # <<<<<<<<<<<<<<
 *     partialdecdetectiondata.nnewpartialdecs = nnewpartialdecs
 *     partialdecdetectiondata.detectiontime = detection_time
 */
  __pyx_v_partialdecdetectiondata->newpartialdecs = __pyx_v_newpartialdecs;

  /* "src/pygcgopt/detector.pxi":73
 *         newpartialdecs[i] = (<PartialDecomposition>py_newpartialdecs[i]).thisptr
 *     partialdecdetectiondata.newpartialdecs = newpartialdecs
 *     partialdecdetectiondata.nnewpartialdecs = nnewpartialdecs             # <<<<<<<<<<<<<<
 *     partialdecdetectiondata.detectiontime = detection_time
 *     result[0] = result_dict.get("result", <SCIP_RESULT>result[0])
 */
  __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_v_nnewpartialdecs); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 73, __pyx_L1_error)
  __pyx_v_partialdecdetectiondata->nnewpartialdecs = __pyx_t_7;

  /* "src/pygcgopt/detector.pxi":74
 *     partialdecdetectiondata.newpartialdecs = newpartialdecs
 *     partialdecdetectiondata.nnewpartialdecs = nnewpartialdecs
 *     partialdecdetectiondata.detectiontime = detection_time             # <<<<<<<<<<<<<<
 *     result[0] = result_dict.get("result", <SCIP_RESULT>result[0])
 * 
 */
  __pyx_v_partialdecdetectiondata->detectiontime = __pyx_v_detection_time;

  /* "src/pygcgopt/detector.pxi":75
 *     partialdecdetectiondata.nnewpartialdecs = nnewpartialdecs
 *     partialdecdetectiondata.detectiontime = detection_time
 *     result[0] = result_dict.get("result", <SCIP_RESULT>result[0])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_result_dict, __pyx_n_s_get); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_9 = __Pyx_PyInt_From_SCIP_RESULT(((SCIP_RESULT)(__pyx_v_result[0]))); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_n_u_result, __pyx_t_9};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 75, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_n_u_result, __pyx_t_9};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 75, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_result);
    __Pyx_GIVEREF(__pyx_n_u_result);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_n_u_result);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_9);
    __pyx_t_9 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_15 = ((SCIP_RESULT)__Pyx_PyInt_As_SCIP_RESULT(__pyx_t_4)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  (__pyx_v_result[0]) = __pyx_t_15;

  /* "src/pygcgopt/detector.pxi":56
 * 
 * 
 * cdef wrap_detector_callback_result(Detector detector, PARTIALDEC_DETECTION_DATA* partialdecdetectiondata, SCIP_RESULT* result, object result_dict, double detection_time):             # <<<<<<<<<<<<<<
 *     if result_dict is None or type(result_dict) is not dict:
 *         raise TypeError("Detector callback returned '{}' of type '{}'. Expected a dictionary with optional keys 'newpartialdecs' and 'result'.".format(result_dict, type(result_dict)))
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pygcgopt.gcg.wrap_detector_callback_result", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_newpartialdecs);
  __Pyx_XDECREF(__pyx_v_nnewpartialdecs);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detector.pxi":78
 * 
 * 
 * cdef SCIP_RETCODE PyDetectorFree (SCIP* scip, DEC_DETECTOR* detector):             # <<<<<<<<<<<<<<
 *     py_detector = get_py_detector(detector)
 *     py_detector.freeDetector()
 */

static SCIP_RETCODE __pyx_f_8pygcgopt_3gcg_PyDetectorFree(CYTHON_UNUSED SCIP *__pyx_v_scip, DEC_DETECTOR *__pyx_v_detector) {
  struct __pyx_obj_8pygcgopt_3gcg_Detector *__pyx_v_py_detector = NULL;
  SCIP_RETCODE __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyDetectorFree", 0);

  /* "src/pygcgopt/detector.pxi":79
 * 
 * cdef SCIP_RETCODE PyDetectorFree (SCIP* scip, DEC_DETECTOR* detector):
 *     py_detector = get_py_detector(detector)             # <<<<<<<<<<<<<<
 *     py_detector.freeDetector()
 *     Py_DECREF(py_detector)
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_8pygcgopt_3gcg_get_py_detector(__pyx_v_detector)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_py_detector = ((struct __pyx_obj_8pygcgopt_3gcg_Detector *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/pygcgopt/detector.pxi":80
 * cdef SCIP_RETCODE PyDetectorFree (SCIP* scip, DEC_DETECTOR* detector):
 *     py_detector = get_py_detector(detector)
 *     py_detector.freeDetector()             # <<<<<<<<<<<<<<
 *     Py_DECREF(py_detector)
 *     return SCIP_OKAY
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_py_detector), __pyx_n_s_freeDetector); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/pygcgopt/detector.pxi":81
 *     py_detector = get_py_detector(detector)
 *     py_detector.freeDetector()
 *     Py_DECREF(py_detector)             # <<<<<<<<<<<<<<
 *     return SCIP_OKAY
 * 
 */
  Py_DECREF(((PyObject *)__pyx_v_py_detector));

  /* "src/pygcgopt/detector.pxi":82
 *     py_detector.freeDetector()
 *     Py_DECREF(py_detector)
 *     return SCIP_OKAY             # <<<<<<<<<<<<<<
 * 
 * cdef SCIP_RETCODE PyDetectorInit (SCIP* scip, DEC_DETECTOR* detector):
 */
  __pyx_r = SCIP_OKAY;
  goto __pyx_L0;

  /* "src/pygcgopt/detector.pxi":78
 * 
 * 
 * cdef SCIP_RETCODE PyDetectorFree (SCIP* scip, DEC_DETECTOR* detector):             # <<<<<<<<<<<<<<
 *     py_detector = get_py_detector(detector)
 *     py_detector.freeDetector()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("pygcgopt.gcg.PyDetectorFree", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = (SCIP_RETCODE) 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_detector);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detector.pxi":84
 *     return SCIP_OKAY
 * 
 * cdef SCIP_RETCODE PyDetectorInit (SCIP* scip, DEC_DETECTOR* detector):             # <<<<<<<<<<<<<<
 *     py_detector = get_py_detector(detector)
 *     py_detector.initDetector()
 */

static SCIP_RETCODE __pyx_f_8pygcgopt_3gcg_PyDetectorInit(CYTHON_UNUSED SCIP *__pyx_v_scip, DEC_DETECTOR *__pyx_v_detector) {
  struct __pyx_obj_8pygcgopt_3gcg_Detector *__pyx_v_py_detector = NULL;
  SCIP_RETCODE __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyDetectorInit", 0);

  /* "src/pygcgopt/detector.pxi":85
 * 
 * cdef SCIP_RETCODE PyDetectorInit (SCIP* scip, DEC_DETECTOR* detector):
 *     py_detector = get_py_detector(detector)             # <<<<<<<<<<<<<<
 *     py_detector.initDetector()
 *     return SCIP_OKAY
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_8pygcgopt_3gcg_get_py_detector(__pyx_v_detector)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 85, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_py_detector = ((struct __pyx_obj_8pygcgopt_3gcg_Detector *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/pygcgopt/detector.pxi":86
 * cdef SCIP_RETCODE PyDetectorInit (SCIP* scip, DEC_DETECTOR* detector):
 *     py_detector = get_py_detector(detector)
 *     py_detector.initDetector()             # <<<<<<<<<<<<<<
 *     return SCIP_OKAY
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_py_detector), __pyx_n_s_initDetector); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 86, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 86, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/pygcgopt/detector.pxi":87
 *     py_detector = get_py_detector(detector)
 *     py_detector.initDetector()
 *     return SCIP_OKAY             # <<<<<<<<<<<<<<
 * 
 * cdef SCIP_RETCODE PyDetectorExit (SCIP* scip, DEC_DETECTOR* detector):
 */
  __pyx_r = SCIP_OKAY;
  goto __pyx_L0;

  /* "src/pygcgopt/detector.pxi":84
 *     return SCIP_OKAY
 * 
 * cdef SCIP_RETCODE PyDetectorInit (SCIP* scip, DEC_DETECTOR* detector):             # <<<<<<<<<<<<<<
 *     py_detector = get_py_detector(detector)
 *     py_detector.initDetector()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("pygcgopt.gcg.PyDetectorInit", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = (SCIP_RETCODE) 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_detector);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detector.pxi":89
 *     return SCIP_OKAY
 * 
 * cdef SCIP_RETCODE PyDetectorExit (SCIP* scip, DEC_DETECTOR* detector):             # <<<<<<<<<<<<<<
 *     py_detector = get_py_detector(detector)
 *     py_detector.exitDetector()
 */

static SCIP_RETCODE __pyx_f_8pygcgopt_3gcg_PyDetectorExit(CYTHON_UNUSED SCIP *__pyx_v_scip, DEC_DETECTOR *__pyx_v_detector) {
  struct __pyx_obj_8pygcgopt_3gcg_Detector *__pyx_v_py_detector = NULL;
  SCIP_RETCODE __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyDetectorExit", 0);

  /* "src/pygcgopt/detector.pxi":90
 * 
 * cdef SCIP_RETCODE PyDetectorExit (SCIP* scip, DEC_DETECTOR* detector):
 *     py_detector = get_py_detector(detector)             # <<<<<<<<<<<<<<
 *     py_detector.exitDetector()
 *     return SCIP_OKAY
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_8pygcgopt_3gcg_get_py_detector(__pyx_v_detector)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_py_detector = ((struct __pyx_obj_8pygcgopt_3gcg_Detector *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/pygcgopt/detector.pxi":91
 * cdef SCIP_RETCODE PyDetectorExit (SCIP* scip, DEC_DETECTOR* detector):
 *     py_detector = get_py_detector(detector)
 *     py_detector.exitDetector()             # <<<<<<<<<<<<<<
 *     return SCIP_OKAY
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_py_detector), __pyx_n_s_exitDetector); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/pygcgopt/detector.pxi":92
 *     py_detector = get_py_detector(detector)
 *     py_detector.exitDetector()
 *     return SCIP_OKAY             # <<<<<<<<<<<<<<
 * 
 * cdef SCIP_RETCODE PyDetectorPropagatePartialdec (SCIP* scip, DEC_DETECTOR* detector, PARTIALDEC_DETECTION_DATA* partialdecdetectiondata, SCIP_RESULT* result):
 */
  __pyx_r = SCIP_OKAY;
  goto __pyx_L0;

  /* "src/pygcgopt/detector.pxi":89
 *     return SCIP_OKAY
 * 
 * cdef SCIP_RETCODE PyDetectorExit (SCIP* scip, DEC_DETECTOR* detector):             # <<<<<<<<<<<<<<
 *     py_detector = get_py_detector(detector)
 *     py_detector.exitDetector()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("pygcgopt.gcg.PyDetectorExit", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = (SCIP_RETCODE) 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_detector);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detector.pxi":94
 *     return SCIP_OKAY
 * 
 * cdef SCIP_RETCODE PyDetectorPropagatePartialdec (SCIP* scip, DEC_DETECTOR* detector, PARTIALDEC_DETECTION_DATA* partialdecdetectiondata, SCIP_RESULT* result):             # <<<<<<<<<<<<<<
 *     cdef SCIP_CLOCK* clock = start_new_clock(scip)
 * 
 */

static SCIP_RETCODE __pyx_f_8pygcgopt_3gcg_PyDetectorPropagatePartialdec(SCIP *__pyx_v_scip, DEC_DETECTOR *__pyx_v_detector, PARTIALDEC_DETECTION_DATA *__pyx_v_partialdecdetectiondata, SCIP_RESULT *__pyx_v_result) {
  SCIP_CLOCK *__pyx_v_clock;
  struct __pyx_obj_8pygcgopt_3gcg_Detector *__pyx_v_py_detector = NULL;
  PyObject *__pyx_v_detprobdata = NULL;
  PyObject *__pyx_v_workonpartialdec = NULL;
  PyObject *__pyx_v_result_dict = NULL;
  double __pyx_v_detection_time;
  SCIP_RETCODE __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyDetectorPropagatePartialdec", 0);

  /* "src/pygcgopt/detector.pxi":95
 * 
 * cdef SCIP_RETCODE PyDetectorPropagatePartialdec (SCIP* scip, DEC_DETECTOR* detector, PARTIALDEC_DETECTION_DATA* partialdecdetectiondata, SCIP_RESULT* result):
 *     cdef SCIP_CLOCK* clock = start_new_clock(scip)             # <<<<<<<<<<<<<<
 * 
 *     py_detector = get_py_detector(detector)
 */
  __pyx_v_clock = __pyx_f_8pygcgopt_3gcg_start_new_clock(__pyx_v_scip);

  /* "src/pygcgopt/detector.pxi":97
 *     cdef SCIP_CLOCK* clock = start_new_clock(scip)
 * 
 *     py_detector = get_py_detector(detector)             # <<<<<<<<<<<<<<
 *     detprobdata, workonpartialdec = get_py_partialdec_detection_data(partialdecdetectiondata)
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_8pygcgopt_3gcg_get_py_detector(__pyx_v_detector)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_py_detector = ((struct __pyx_obj_8pygcgopt_3gcg_Detector *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/pygcgopt/detector.pxi":98
 * 
 *     py_detector = get_py_detector(detector)
 *     detprobdata, workonpartialdec = get_py_partialdec_detection_data(partialdecdetectiondata)             # <<<<<<<<<<<<<<
 * 
 *     result_dict = py_detector.propagatePartialdec(detprobdata, workonpartialdec)
 */
  __pyx_t_1 = __pyx_f_8pygcgopt_3gcg_get_py_partialdec_detection_data(__pyx_v_partialdecdetectiondata); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(__pyx_t_1 != Py_None)) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 98, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 98, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 98, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 98, __pyx_L1_error)
  }
  __pyx_v_detprobdata = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_workonpartialdec = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "src/pygcgopt/detector.pxi":100
 *     detprobdata, workonpartialdec = get_py_partialdec_detection_data(partialdecdetectiondata)
 * 
 *     result_dict = py_detector.propagatePartialdec(detprobdata, workonpartialdec)             # <<<<<<<<<<<<<<
 * 
 *     cdef double detection_time = stop_and_free_clock(scip, clock)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_py_detector), __pyx_n_s_propagatePartialdec); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_detprobdata, __pyx_v_workonpartialdec};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 100, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_detprobdata, __pyx_v_workonpartialdec};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 100, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_detprobdata);
    __Pyx_GIVEREF(__pyx_v_detprobdata);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_detprobdata);
    __Pyx_INCREF(__pyx_v_workonpartialdec);
    __Pyx_GIVEREF(__pyx_v_workonpartialdec);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_workonpartialdec);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result_dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "src/pygcgopt/detector.pxi":102
 *     result_dict = py_detector.propagatePartialdec(detprobdata, workonpartialdec)
 * 
 *     cdef double detection_time = stop_and_free_clock(scip, clock)             # <<<<<<<<<<<<<<
 *     wrap_detector_callback_result(py_detector, partialdecdetectiondata, result, result_dict, detection_time)
 * 
 */
  __pyx_v_detection_time = __pyx_f_8pygcgopt_3gcg_stop_and_free_clock(__pyx_v_scip, __pyx_v_clock);

  /* "src/pygcgopt/detector.pxi":103
 * 
 *     cdef double detection_time = stop_and_free_clock(scip, clock)
 *     wrap_detector_callback_result(py_detector, partialdecdetectiondata, result, result_dict, detection_time)             # <<<<<<<<<<<<<<
 * 
 *     return SCIP_OKAY
 */
  __pyx_t_1 = __pyx_f_8pygcgopt_3gcg_wrap_detector_callback_result(__pyx_v_py_detector, __pyx_v_partialdecdetectiondata, __pyx_v_result, __pyx_v_result_dict, __pyx_v_detection_time); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/pygcgopt/detector.pxi":105
 *     wrap_detector_callback_result(py_detector, partialdecdetectiondata, result, result_dict, detection_time)
 * 
 *     return SCIP_OKAY             # <<<<<<<<<<<<<<
 * 
 * cdef SCIP_RETCODE PyDetectorFinishPartialdec (SCIP* scip, DEC_DETECTOR* detector, PARTIALDEC_DETECTION_DATA* partialdecdetectiondata, SCIP_RESULT* result):
 */
  __pyx_r = SCIP_OKAY;
  goto __pyx_L0;

  /* "src/pygcgopt/detector.pxi":94
 *     return SCIP_OKAY
 * 
 * cdef SCIP_RETCODE PyDetectorPropagatePartialdec (SCIP* scip, DEC_DETECTOR* detector, PARTIALDEC_DETECTION_DATA* partialdecdetectiondata, SCIP_RESULT* result):             # <<<<<<<<<<<<<<
 *     cdef SCIP_CLOCK* clock = start_new_clock(scip)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("pygcgopt.gcg.PyDetectorPropagatePartialdec", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = (SCIP_RETCODE) 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_detector);
  __Pyx_XDECREF(__pyx_v_detprobdata);
  __Pyx_XDECREF(__pyx_v_workonpartialdec);
  __Pyx_XDECREF(__pyx_v_result_dict);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detector.pxi":107
 *     return SCIP_OKAY
 * 
 * cdef SCIP_RETCODE PyDetectorFinishPartialdec (SCIP* scip, DEC_DETECTOR* detector, PARTIALDEC_DETECTION_DATA* partialdecdetectiondata, SCIP_RESULT* result):             # <<<<<<<<<<<<<<
 *     cdef SCIP_CLOCK* clock = start_new_clock(scip)
 * 
 */

static SCIP_RETCODE __pyx_f_8pygcgopt_3gcg_PyDetectorFinishPartialdec(SCIP *__pyx_v_scip, DEC_DETECTOR *__pyx_v_detector, PARTIALDEC_DETECTION_DATA *__pyx_v_partialdecdetectiondata, SCIP_RESULT *__pyx_v_result) {
  SCIP_CLOCK *__pyx_v_clock;
  struct __pyx_obj_8pygcgopt_3gcg_Detector *__pyx_v_py_detector = NULL;
  PyObject *__pyx_v_detprobdata = NULL;
  PyObject *__pyx_v_workonpartialdec = NULL;
  PyObject *__pyx_v_result_dict = NULL;
  double __pyx_v_detection_time;
  SCIP_RETCODE __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyDetectorFinishPartialdec", 0);

  /* "src/pygcgopt/detector.pxi":108
 * 
 * cdef SCIP_RETCODE PyDetectorFinishPartialdec (SCIP* scip, DEC_DETECTOR* detector, PARTIALDEC_DETECTION_DATA* partialdecdetectiondata, SCIP_RESULT* result):
 *     cdef SCIP_CLOCK* clock = start_new_clock(scip)             # <<<<<<<<<<<<<<
 * 
 *     py_detector = get_py_detector(detector)
 */
  __pyx_v_clock = __pyx_f_8pygcgopt_3gcg_start_new_clock(__pyx_v_scip);

  /* "src/pygcgopt/detector.pxi":110
 *     cdef SCIP_CLOCK* clock = start_new_clock(scip)
 * 
 *     py_detector = get_py_detector(detector)             # <<<<<<<<<<<<<<
 *     detprobdata, workonpartialdec = get_py_partialdec_detection_data(partialdecdetectiondata)
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_8pygcgopt_3gcg_get_py_detector(__pyx_v_detector)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_py_detector = ((struct __pyx_obj_8pygcgopt_3gcg_Detector *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/pygcgopt/detector.pxi":111
 * 
 *     py_detector = get_py_detector(detector)
 *     detprobdata, workonpartialdec = get_py_partialdec_detection_data(partialdecdetectiondata)             # <<<<<<<<<<<<<<
 * 
 *     result_dict = py_detector.finishPartialdec(detprobdata, workonpartialdec)
 */
  __pyx_t_1 = __pyx_f_8pygcgopt_3gcg_get_py_partialdec_detection_data(__pyx_v_partialdecdetectiondata); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(__pyx_t_1 != Py_None)) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 111, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 111, __pyx_L1_error)
  }
  __pyx_v_detprobdata = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_workonpartialdec = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "src/pygcgopt/detector.pxi":113
 *     detprobdata, workonpartialdec = get_py_partialdec_detection_data(partialdecdetectiondata)
 * 
 *     result_dict = py_detector.finishPartialdec(detprobdata, workonpartialdec)             # <<<<<<<<<<<<<<
 * 
 *     cdef double detection_time = stop_and_free_clock(scip, clock)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_py_detector), __pyx_n_s_finishPartialdec); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_detprobdata, __pyx_v_workonpartialdec};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 113, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_detprobdata, __pyx_v_workonpartialdec};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 113, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 113, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_detprobdata);
    __Pyx_GIVEREF(__pyx_v_detprobdata);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_detprobdata);
    __Pyx_INCREF(__pyx_v_workonpartialdec);
    __Pyx_GIVEREF(__pyx_v_workonpartialdec);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_workonpartialdec);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 113, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result_dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "src/pygcgopt/detector.pxi":115
 *     result_dict = py_detector.finishPartialdec(detprobdata, workonpartialdec)
 * 
 *     cdef double detection_time = stop_and_free_clock(scip, clock)             # <<<<<<<<<<<<<<
 *     wrap_detector_callback_result(py_detector, partialdecdetectiondata, result, result_dict, detection_time)
 * 
 */
  __pyx_v_detection_time = __pyx_f_8pygcgopt_3gcg_stop_and_free_clock(__pyx_v_scip, __pyx_v_clock);

  /* "src/pygcgopt/detector.pxi":116
 * 
 *     cdef double detection_time = stop_and_free_clock(scip, clock)
 *     wrap_detector_callback_result(py_detector, partialdecdetectiondata, result, result_dict, detection_time)             # <<<<<<<<<<<<<<
 * 
 *     return SCIP_OKAY
 */
  __pyx_t_1 = __pyx_f_8pygcgopt_3gcg_wrap_detector_callback_result(__pyx_v_py_detector, __pyx_v_partialdecdetectiondata, __pyx_v_result, __pyx_v_result_dict, __pyx_v_detection_time); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/pygcgopt/detector.pxi":118
 *     wrap_detector_callback_result(py_detector, partialdecdetectiondata, result, result_dict, detection_time)
 * 
 *     return SCIP_OKAY             # <<<<<<<<<<<<<<
 * 
 * cdef SCIP_RETCODE PyDetectorPostprocessPartialdec (SCIP* scip, DEC_DETECTOR* detector, PARTIALDEC_DETECTION_DATA* partialdecdetectiondata, SCIP_RESULT* result):
 */
  __pyx_r = SCIP_OKAY;
  goto __pyx_L0;

  /* "src/pygcgopt/detector.pxi":107
 *     return SCIP_OKAY
 * 
 * cdef SCIP_RETCODE PyDetectorFinishPartialdec (SCIP* scip, DEC_DETECTOR* detector, PARTIALDEC_DETECTION_DATA* partialdecdetectiondata, SCIP_RESULT* result):             # <<<<<<<<<<<<<<
 *     cdef SCIP_CLOCK* clock = start_new_clock(scip)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("pygcgopt.gcg.PyDetectorFinishPartialdec", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = (SCIP_RETCODE) 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_detector);
  __Pyx_XDECREF(__pyx_v_detprobdata);
  __Pyx_XDECREF(__pyx_v_workonpartialdec);
  __Pyx_XDECREF(__pyx_v_result_dict);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detector.pxi":120
 *     return SCIP_OKAY
 * 
 * cdef SCIP_RETCODE PyDetectorPostprocessPartialdec (SCIP* scip, DEC_DETECTOR* detector, PARTIALDEC_DETECTION_DATA* partialdecdetectiondata, SCIP_RESULT* result):             # <<<<<<<<<<<<<<
 *     cdef SCIP_CLOCK* clock = start_new_clock(scip)
 * 
 */

static SCIP_RETCODE __pyx_f_8pygcgopt_3gcg_PyDetectorPostprocessPartialdec(SCIP *__pyx_v_scip, DEC_DETECTOR *__pyx_v_detector, PARTIALDEC_DETECTION_DATA *__pyx_v_partialdecdetectiondata, SCIP_RESULT *__pyx_v_result) {
  SCIP_CLOCK *__pyx_v_clock;
  struct __pyx_obj_8pygcgopt_3gcg_Detector *__pyx_v_py_detector = NULL;
  PyObject *__pyx_v_detprobdata = NULL;
  PyObject *__pyx_v_workonpartialdec = NULL;
  PyObject *__pyx_v_result_dict = NULL;
  double __pyx_v_detection_time;
  SCIP_RETCODE __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyDetectorPostprocessPartialdec", 0);

  /* "src/pygcgopt/detector.pxi":121
 * 
 * cdef SCIP_RETCODE PyDetectorPostprocessPartialdec (SCIP* scip, DEC_DETECTOR* detector, PARTIALDEC_DETECTION_DATA* partialdecdetectiondata, SCIP_RESULT* result):
 *     cdef SCIP_CLOCK* clock = start_new_clock(scip)             # <<<<<<<<<<<<<<
 * 
 *     py_detector = get_py_detector(detector)
 */
  __pyx_v_clock = __pyx_f_8pygcgopt_3gcg_start_new_clock(__pyx_v_scip);

  /* "src/pygcgopt/detector.pxi":123
 *     cdef SCIP_CLOCK* clock = start_new_clock(scip)
 * 
 *     py_detector = get_py_detector(detector)             # <<<<<<<<<<<<<<
 *     detprobdata, workonpartialdec = get_py_partialdec_detection_data(partialdecdetectiondata)
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_8pygcgopt_3gcg_get_py_detector(__pyx_v_detector)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_py_detector = ((struct __pyx_obj_8pygcgopt_3gcg_Detector *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/pygcgopt/detector.pxi":124
 * 
 *     py_detector = get_py_detector(detector)
 *     detprobdata, workonpartialdec = get_py_partialdec_detection_data(partialdecdetectiondata)             # <<<<<<<<<<<<<<
 * 
 *     result_dict = py_detector.postprocessPartialdec(detprobdata, workonpartialdec)
 */
  __pyx_t_1 = __pyx_f_8pygcgopt_3gcg_get_py_partialdec_detection_data(__pyx_v_partialdecdetectiondata); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(__pyx_t_1 != Py_None)) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 124, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 124, __pyx_L1_error)
  }
  __pyx_v_detprobdata = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_workonpartialdec = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "src/pygcgopt/detector.pxi":126
 *     detprobdata, workonpartialdec = get_py_partialdec_detection_data(partialdecdetectiondata)
 * 
 *     result_dict = py_detector.postprocessPartialdec(detprobdata, workonpartialdec)             # <<<<<<<<<<<<<<
 * 
 *     cdef double detection_time = stop_and_free_clock(scip, clock)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_py_detector), __pyx_n_s_postprocessPartialdec); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_detprobdata, __pyx_v_workonpartialdec};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 126, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_detprobdata, __pyx_v_workonpartialdec};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 126, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 126, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_detprobdata);
    __Pyx_GIVEREF(__pyx_v_detprobdata);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_detprobdata);
    __Pyx_INCREF(__pyx_v_workonpartialdec);
    __Pyx_GIVEREF(__pyx_v_workonpartialdec);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_workonpartialdec);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 126, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result_dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "src/pygcgopt/detector.pxi":128
 *     result_dict = py_detector.postprocessPartialdec(detprobdata, workonpartialdec)
 * 
 *     cdef double detection_time = stop_and_free_clock(scip, clock)             # <<<<<<<<<<<<<<
 *     wrap_detector_callback_result(py_detector, partialdecdetectiondata, result, result_dict, detection_time)
 * 
 */
  __pyx_v_detection_time = __pyx_f_8pygcgopt_3gcg_stop_and_free_clock(__pyx_v_scip, __pyx_v_clock);

  /* "src/pygcgopt/detector.pxi":129
 * 
 *     cdef double detection_time = stop_and_free_clock(scip, clock)
 *     wrap_detector_callback_result(py_detector, partialdecdetectiondata, result, result_dict, detection_time)             # <<<<<<<<<<<<<<
 * 
 *     return SCIP_OKAY
 */
  __pyx_t_1 = __pyx_f_8pygcgopt_3gcg_wrap_detector_callback_result(__pyx_v_py_detector, __pyx_v_partialdecdetectiondata, __pyx_v_result, __pyx_v_result_dict, __pyx_v_detection_time); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/pygcgopt/detector.pxi":131
 *     wrap_detector_callback_result(py_detector, partialdecdetectiondata, result, result_dict, detection_time)
 * 
 *     return SCIP_OKAY             # <<<<<<<<<<<<<<
 * 
 * cdef SCIP_RETCODE PyDetectorSetParamAggressive (SCIP* scip, DEC_DETECTOR* detector, SCIP_RESULT* result):
 */
  __pyx_r = SCIP_OKAY;
  goto __pyx_L0;

  /* "src/pygcgopt/detector.pxi":120
 *     return SCIP_OKAY
 * 
 * cdef SCIP_RETCODE PyDetectorPostprocessPartialdec (SCIP* scip, DEC_DETECTOR* detector, PARTIALDEC_DETECTION_DATA* partialdecdetectiondata, SCIP_RESULT* result):             # <<<<<<<<<<<<<<
 *     cdef SCIP_CLOCK* clock = start_new_clock(scip)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("pygcgopt.gcg.PyDetectorPostprocessPartialdec", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = (SCIP_RETCODE) 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_detector);
  __Pyx_XDECREF(__pyx_v_detprobdata);
  __Pyx_XDECREF(__pyx_v_workonpartialdec);
  __Pyx_XDECREF(__pyx_v_result_dict);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detector.pxi":133
 *     return SCIP_OKAY
 * 
 * cdef SCIP_RETCODE PyDetectorSetParamAggressive (SCIP* scip, DEC_DETECTOR* detector, SCIP_RESULT* result):             # <<<<<<<<<<<<<<
 *     py_detector = get_py_detector(detector)
 *     result_dict = py_detector.setParamAggressive() or {}
 */

static SCIP_RETCODE __pyx_f_8pygcgopt_3gcg_PyDetectorSetParamAggressive(CYTHON_UNUSED SCIP *__pyx_v_scip, DEC_DETECTOR *__pyx_v_detector, SCIP_RESULT *__pyx_v_result) {
  struct __pyx_obj_8pygcgopt_3gcg_Detector *__pyx_v_py_detector = NULL;
  PyObject *__pyx_v_result_dict = NULL;
  SCIP_RETCODE __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  SCIP_RESULT __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyDetectorSetParamAggressive", 0);

  /* "src/pygcgopt/detector.pxi":134
 * 
 * cdef SCIP_RETCODE PyDetectorSetParamAggressive (SCIP* scip, DEC_DETECTOR* detector, SCIP_RESULT* result):
 *     py_detector = get_py_detector(detector)             # <<<<<<<<<<<<<<
 *     result_dict = py_detector.setParamAggressive() or {}
 *     result[0] = result_dict.get("result", <SCIP_RESULT>result[0])
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_8pygcgopt_3gcg_get_py_detector(__pyx_v_detector)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_py_detector = ((struct __pyx_obj_8pygcgopt_3gcg_Detector *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/pygcgopt/detector.pxi":135
 * cdef SCIP_RETCODE PyDetectorSetParamAggressive (SCIP* scip, DEC_DETECTOR* detector, SCIP_RESULT* result):
 *     py_detector = get_py_detector(detector)
 *     result_dict = py_detector.setParamAggressive() or {}             # <<<<<<<<<<<<<<
 *     result[0] = result_dict.get("result", <SCIP_RESULT>result[0])
 *     return SCIP_OKAY
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_py_detector), __pyx_n_s_setParamAggressive); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 135, __pyx_L1_error)
  if (!__pyx_t_5) {
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_1 = __pyx_t_2;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_L3_bool_binop_done:;
  __pyx_v_result_dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "src/pygcgopt/detector.pxi":136
 *     py_detector = get_py_detector(detector)
 *     result_dict = py_detector.setParamAggressive() or {}
 *     result[0] = result_dict.get("result", <SCIP_RESULT>result[0])             # <<<<<<<<<<<<<<
 *     return SCIP_OKAY
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_result_dict, __pyx_n_s_get); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_SCIP_RESULT(((SCIP_RESULT)(__pyx_v_result[0]))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_n_u_result, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 136, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_n_u_result, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 136, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_result);
    __Pyx_GIVEREF(__pyx_n_u_result);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_n_u_result);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_8 = ((SCIP_RESULT)__Pyx_PyInt_As_SCIP_RESULT(__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (__pyx_v_result[0]) = __pyx_t_8;

  /* "src/pygcgopt/detector.pxi":137
 *     result_dict = py_detector.setParamAggressive() or {}
 *     result[0] = result_dict.get("result", <SCIP_RESULT>result[0])
 *     return SCIP_OKAY             # <<<<<<<<<<<<<<
 * 
 * cdef SCIP_RETCODE PyDetectorSetParamDefault (SCIP* scip, DEC_DETECTOR* detector, SCIP_RESULT* result):
 */
  __pyx_r = SCIP_OKAY;
  goto __pyx_L0;

  /* "src/pygcgopt/detector.pxi":133
 *     return SCIP_OKAY
 * 
 * cdef SCIP_RETCODE PyDetectorSetParamAggressive (SCIP* scip, DEC_DETECTOR* detector, SCIP_RESULT* result):             # <<<<<<<<<<<<<<
 *     py_detector = get_py_detector(detector)
 *     result_dict = py_detector.setParamAggressive() or {}
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_WriteUnraisable("pygcgopt.gcg.PyDetectorSetParamAggressive", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = (SCIP_RETCODE) 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_detector);
  __Pyx_XDECREF(__pyx_v_result_dict);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detector.pxi":139
 *     return SCIP_OKAY
 * 
 * cdef SCIP_RETCODE PyDetectorSetParamDefault (SCIP* scip, DEC_DETECTOR* detector, SCIP_RESULT* result):             # <<<<<<<<<<<<<<
 *     py_detector = get_py_detector(detector)
 *     result_dict = py_detector.setParamDefault() or {}
 */

static SCIP_RETCODE __pyx_f_8pygcgopt_3gcg_PyDetectorSetParamDefault(CYTHON_UNUSED SCIP *__pyx_v_scip, DEC_DETECTOR *__pyx_v_detector, SCIP_RESULT *__pyx_v_result) {
  struct __pyx_obj_8pygcgopt_3gcg_Detector *__pyx_v_py_detector = NULL;
  PyObject *__pyx_v_result_dict = NULL;
  SCIP_RETCODE __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  SCIP_RESULT __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyDetectorSetParamDefault", 0);

  /* "src/pygcgopt/detector.pxi":140
 * 
 * cdef SCIP_RETCODE PyDetectorSetParamDefault (SCIP* scip, DEC_DETECTOR* detector, SCIP_RESULT* result):
 *     py_detector = get_py_detector(detector)             # <<<<<<<<<<<<<<
 *     result_dict = py_detector.setParamDefault() or {}
 *     result[0] = result_dict.get("result", <SCIP_RESULT>result[0])
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_8pygcgopt_3gcg_get_py_detector(__pyx_v_detector)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_py_detector = ((struct __pyx_obj_8pygcgopt_3gcg_Detector *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/pygcgopt/detector.pxi":141
 * cdef SCIP_RETCODE PyDetectorSetParamDefault (SCIP* scip, DEC_DETECTOR* detector, SCIP_RESULT* result):
 *     py_detector = get_py_detector(detector)
 *     result_dict = py_detector.setParamDefault() or {}             # <<<<<<<<<<<<<<
 *     result[0] = result_dict.get("result", <SCIP_RESULT>result[0])
 *     return SCIP_OKAY
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_py_detector), __pyx_n_s_setParamDefault); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 141, __pyx_L1_error)
  if (!__pyx_t_5) {
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_1 = __pyx_t_2;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_L3_bool_binop_done:;
  __pyx_v_result_dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "src/pygcgopt/detector.pxi":142
 *     py_detector = get_py_detector(detector)
 *     result_dict = py_detector.setParamDefault() or {}
 *     result[0] = result_dict.get("result", <SCIP_RESULT>result[0])             # <<<<<<<<<<<<<<
 *     return SCIP_OKAY
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_result_dict, __pyx_n_s_get); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_SCIP_RESULT(((SCIP_RESULT)(__pyx_v_result[0]))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_n_u_result, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 142, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_n_u_result, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 142, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 142, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_result);
    __Pyx_GIVEREF(__pyx_n_u_result);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_n_u_result);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 142, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_8 = ((SCIP_RESULT)__Pyx_PyInt_As_SCIP_RESULT(__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (__pyx_v_result[0]) = __pyx_t_8;

  /* "src/pygcgopt/detector.pxi":143
 *     result_dict = py_detector.setParamDefault() or {}
 *     result[0] = result_dict.get("result", <SCIP_RESULT>result[0])
 *     return SCIP_OKAY             # <<<<<<<<<<<<<<
 * 
 * cdef SCIP_RETCODE PyDetectorSetParamFast (SCIP* scip, DEC_DETECTOR* detector, SCIP_RESULT* result):
 */
  __pyx_r = SCIP_OKAY;
  goto __pyx_L0;

  /* "src/pygcgopt/detector.pxi":139
 *     return SCIP_OKAY
 * 
 * cdef SCIP_RETCODE PyDetectorSetParamDefault (SCIP* scip, DEC_DETECTOR* detector, SCIP_RESULT* result):             # <<<<<<<<<<<<<<
 *     py_detector = get_py_detector(detector)
 *     result_dict = py_detector.setParamDefault() or {}
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_WriteUnraisable("pygcgopt.gcg.PyDetectorSetParamDefault", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = (SCIP_RETCODE) 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_detector);
  __Pyx_XDECREF(__pyx_v_result_dict);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detector.pxi":145
 *     return SCIP_OKAY
 * 
 * cdef SCIP_RETCODE PyDetectorSetParamFast (SCIP* scip, DEC_DETECTOR* detector, SCIP_RESULT* result):             # <<<<<<<<<<<<<<
 *     py_detector = get_py_detector(detector)
 *     result_dict = py_detector.setParamFast() or {}
 */

static SCIP_RETCODE __pyx_f_8pygcgopt_3gcg_PyDetectorSetParamFast(CYTHON_UNUSED SCIP *__pyx_v_scip, DEC_DETECTOR *__pyx_v_detector, SCIP_RESULT *__pyx_v_result) {
  struct __pyx_obj_8pygcgopt_3gcg_Detector *__pyx_v_py_detector = NULL;
  PyObject *__pyx_v_result_dict = NULL;
  SCIP_RETCODE __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  SCIP_RESULT __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyDetectorSetParamFast", 0);

  /* "src/pygcgopt/detector.pxi":146
 * 
 * cdef SCIP_RETCODE PyDetectorSetParamFast (SCIP* scip, DEC_DETECTOR* detector, SCIP_RESULT* result):
 *     py_detector = get_py_detector(detector)             # <<<<<<<<<<<<<<
 *     result_dict = py_detector.setParamFast() or {}
 *     result[0] = result_dict.get("result", <SCIP_RESULT>result[0])
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_8pygcgopt_3gcg_get_py_detector(__pyx_v_detector)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_py_detector = ((struct __pyx_obj_8pygcgopt_3gcg_Detector *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/pygcgopt/detector.pxi":147
 * cdef SCIP_RETCODE PyDetectorSetParamFast (SCIP* scip, DEC_DETECTOR* detector, SCIP_RESULT* result):
 *     py_detector = get_py_detector(detector)
 *     result_dict = py_detector.setParamFast() or {}             # <<<<<<<<<<<<<<
 *     result[0] = result_dict.get("result", <SCIP_RESULT>result[0])
 *     return SCIP_OKAY
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_py_detector), __pyx_n_s_setParamFast); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 147, __pyx_L1_error)
  if (!__pyx_t_5) {
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_1 = __pyx_t_2;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_L3_bool_binop_done:;
  __pyx_v_result_dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "src/pygcgopt/detector.pxi":148
 *     py_detector = get_py_detector(detector)
 *     result_dict = py_detector.setParamFast() or {}
 *     result[0] = result_dict.get("result", <SCIP_RESULT>result[0])             # <<<<<<<<<<<<<<
 *     return SCIP_OKAY
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_result_dict, __pyx_n_s_get); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_SCIP_RESULT(((SCIP_RESULT)(__pyx_v_result[0]))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_n_u_result, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 148, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_n_u_result, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 148, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_result);
    __Pyx_GIVEREF(__pyx_n_u_result);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_n_u_result);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_8 = ((SCIP_RESULT)__Pyx_PyInt_As_SCIP_RESULT(__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (__pyx_v_result[0]) = __pyx_t_8;

  /* "src/pygcgopt/detector.pxi":149
 *     result_dict = py_detector.setParamFast() or {}
 *     result[0] = result_dict.get("result", <SCIP_RESULT>result[0])
 *     return SCIP_OKAY             # <<<<<<<<<<<<<<
 */
  __pyx_r = SCIP_OKAY;
  goto __pyx_L0;

  /* "src/pygcgopt/detector.pxi":145
 *     return SCIP_OKAY
 * 
 * cdef SCIP_RETCODE PyDetectorSetParamFast (SCIP* scip, DEC_DETECTOR* detector, SCIP_RESULT* result):             # <<<<<<<<<<<<<<
 *     py_detector = get_py_detector(detector)
 *     result_dict = py_detector.setParamFast() or {}
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_WriteUnraisable("pygcgopt.gcg.PyDetectorSetParamFast", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = (SCIP_RETCODE) 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_detector);
  __Pyx_XDECREF(__pyx_v_result_dict);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/pricing_solver.pxi":7
 *     cdef public str solvername
 * 
 *     def freeSolver(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_13PricingSolver_1freeSolver(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_13PricingSolver_freeSolver[] = "PricingSolver.freeSolver(self)";
static PyObject *__pyx_pw_8pygcgopt_3gcg_13PricingSolver_1freeSolver(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("freeSolver (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_13PricingSolver_freeSolver(((struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_13PricingSolver_freeSolver(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("freeSolver", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/pricing_solver.pxi":10
 *         pass
 * 
 *     def initSolver(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_13PricingSolver_3initSolver(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_13PricingSolver_2initSolver[] = "PricingSolver.initSolver(self)";
static PyObject *__pyx_pw_8pygcgopt_3gcg_13PricingSolver_3initSolver(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initSolver (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_13PricingSolver_2initSolver(((struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_13PricingSolver_2initSolver(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initSolver", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/pricing_solver.pxi":13
 *         pass
 * 
 *     def exitSolver(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_13PricingSolver_5exitSolver(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_13PricingSolver_4exitSolver[] = "PricingSolver.exitSolver(self)";
static PyObject *__pyx_pw_8pygcgopt_3gcg_13PricingSolver_5exitSolver(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("exitSolver (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_13PricingSolver_4exitSolver(((struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_13PricingSolver_4exitSolver(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("exitSolver", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/pricing_solver.pxi":16
 *         pass
 * 
 *     def initSolution(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_13PricingSolver_7initSolution(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_13PricingSolver_6initSolution[] = "PricingSolver.initSolution(self)";
static PyObject *__pyx_pw_8pygcgopt_3gcg_13PricingSolver_7initSolution(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initSolution (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_13PricingSolver_6initSolution(((struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_13PricingSolver_6initSolution(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initSolution", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/pricing_solver.pxi":19
 *         pass
 * 
 *     def exitSolution(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_13PricingSolver_9exitSolution(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_13PricingSolver_8exitSolution[] = "PricingSolver.exitSolution(self)";
static PyObject *__pyx_pw_8pygcgopt_3gcg_13PricingSolver_9exitSolution(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("exitSolution (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_13PricingSolver_8exitSolution(((struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_13PricingSolver_8exitSolution(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("exitSolution", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/pricing_solver.pxi":22
 *         pass
 * 
 *     def updateSolver(self, pricingprob, probnr, varobjschanged, varbndschanged, consschanged):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_13PricingSolver_11updateSolver(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_13PricingSolver_10updateSolver[] = "PricingSolver.updateSolver(self, pricingprob, probnr, varobjschanged, varbndschanged, consschanged)";
static PyObject *__pyx_pw_8pygcgopt_3gcg_13PricingSolver_11updateSolver(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_pricingprob = 0;
  CYTHON_UNUSED PyObject *__pyx_v_probnr = 0;
  CYTHON_UNUSED PyObject *__pyx_v_varobjschanged = 0;
  CYTHON_UNUSED PyObject *__pyx_v_varbndschanged = 0;
  CYTHON_UNUSED PyObject *__pyx_v_consschanged = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("updateSolver (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pricingprob,&__pyx_n_s_probnr,&__pyx_n_s_varobjschanged,&__pyx_n_s_varbndschanged,&__pyx_n_s_consschanged,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pricingprob)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_probnr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("updateSolver", 1, 5, 5, 1); __PYX_ERR(5, 22, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_varobjschanged)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("updateSolver", 1, 5, 5, 2); __PYX_ERR(5, 22, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_varbndschanged)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("updateSolver", 1, 5, 5, 3); __PYX_ERR(5, 22, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_consschanged)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("updateSolver", 1, 5, 5, 4); __PYX_ERR(5, 22, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "updateSolver") < 0)) __PYX_ERR(5, 22, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_pricingprob = values[0];
    __pyx_v_probnr = values[1];
    __pyx_v_varobjschanged = values[2];
    __pyx_v_varbndschanged = values[3];
    __pyx_v_consschanged = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("updateSolver", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(5, 22, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PricingSolver.updateSolver", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_13PricingSolver_10updateSolver(((struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *)__pyx_v_self), __pyx_v_pricingprob, __pyx_v_probnr, __pyx_v_varobjschanged, __pyx_v_varbndschanged, __pyx_v_consschanged);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_13PricingSolver_10updateSolver(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_pricingprob, CYTHON_UNUSED PyObject *__pyx_v_probnr, CYTHON_UNUSED PyObject *__pyx_v_varobjschanged, CYTHON_UNUSED PyObject *__pyx_v_varbndschanged, CYTHON_UNUSED PyObject *__pyx_v_consschanged) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("updateSolver", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/pricing_solver.pxi":25
 *         pass
 * 
 *     def solve(self, pricingprob, probnr, dualsolconv):             # <<<<<<<<<<<<<<
 *         return {}
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_13PricingSolver_13solve(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_13PricingSolver_12solve[] = "PricingSolver.solve(self, pricingprob, probnr, dualsolconv)";
static PyObject *__pyx_pw_8pygcgopt_3gcg_13PricingSolver_13solve(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_pricingprob = 0;
  CYTHON_UNUSED PyObject *__pyx_v_probnr = 0;
  CYTHON_UNUSED PyObject *__pyx_v_dualsolconv = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solve (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pricingprob,&__pyx_n_s_probnr,&__pyx_n_s_dualsolconv,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pricingprob)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_probnr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("solve", 1, 3, 3, 1); __PYX_ERR(5, 25, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dualsolconv)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("solve", 1, 3, 3, 2); __PYX_ERR(5, 25, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "solve") < 0)) __PYX_ERR(5, 25, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_pricingprob = values[0];
    __pyx_v_probnr = values[1];
    __pyx_v_dualsolconv = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("solve", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(5, 25, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PricingSolver.solve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_13PricingSolver_12solve(((struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *)__pyx_v_self), __pyx_v_pricingprob, __pyx_v_probnr, __pyx_v_dualsolconv);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_13PricingSolver_12solve(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_pricingprob, CYTHON_UNUSED PyObject *__pyx_v_probnr, CYTHON_UNUSED PyObject *__pyx_v_dualsolconv) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("solve", 0);

  /* "src/pygcgopt/pricing_solver.pxi":26
 * 
 *     def solve(self, pricingprob, probnr, dualsolconv):
 *         return {}             # <<<<<<<<<<<<<<
 * 
 *     def solveHeuristic(self, pricingprob, probnr, dualsolconv):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/pricing_solver.pxi":25
 *         pass
 * 
 *     def solve(self, pricingprob, probnr, dualsolconv):             # <<<<<<<<<<<<<<
 *         return {}
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygcgopt.gcg.PricingSolver.solve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/pricing_solver.pxi":28
 *         return {}
 * 
 *     def solveHeuristic(self, pricingprob, probnr, dualsolconv):             # <<<<<<<<<<<<<<
 *         return {}
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_13PricingSolver_15solveHeuristic(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_13PricingSolver_14solveHeuristic[] = "PricingSolver.solveHeuristic(self, pricingprob, probnr, dualsolconv)";
static PyObject *__pyx_pw_8pygcgopt_3gcg_13PricingSolver_15solveHeuristic(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_pricingprob = 0;
  CYTHON_UNUSED PyObject *__pyx_v_probnr = 0;
  CYTHON_UNUSED PyObject *__pyx_v_dualsolconv = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solveHeuristic (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pricingprob,&__pyx_n_s_probnr,&__pyx_n_s_dualsolconv,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pricingprob)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_probnr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("solveHeuristic", 1, 3, 3, 1); __PYX_ERR(5, 28, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dualsolconv)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("solveHeuristic", 1, 3, 3, 2); __PYX_ERR(5, 28, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "solveHeuristic") < 0)) __PYX_ERR(5, 28, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_pricingprob = values[0];
    __pyx_v_probnr = values[1];
    __pyx_v_dualsolconv = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("solveHeuristic", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(5, 28, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PricingSolver.solveHeuristic", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_13PricingSolver_14solveHeuristic(((struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *)__pyx_v_self), __pyx_v_pricingprob, __pyx_v_probnr, __pyx_v_dualsolconv);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_13PricingSolver_14solveHeuristic(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_pricingprob, CYTHON_UNUSED PyObject *__pyx_v_probnr, CYTHON_UNUSED PyObject *__pyx_v_dualsolconv) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("solveHeuristic", 0);

  /* "src/pygcgopt/pricing_solver.pxi":29
 * 
 *     def solveHeuristic(self, pricingprob, probnr, dualsolconv):
 *         return {}             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/pricing_solver.pxi":28
 *         return {}
 * 
 *     def solveHeuristic(self, pricingprob, probnr, dualsolconv):             # <<<<<<<<<<<<<<
 *         return {}
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygcgopt.gcg.PricingSolver.solveHeuristic", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/pricing_solver.pxi":4
 *     """Base class of the Pricing Solver Plugin"""
 * 
 *     cdef public Model model             # <<<<<<<<<<<<<<
 *     cdef public str solvername
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_13PricingSolver_5model_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygcgopt_3gcg_13PricingSolver_5model_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_13PricingSolver_5model___get__(((struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_13PricingSolver_5model___get__(struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->model));
  __pyx_r = ((PyObject *)__pyx_v_self->model);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_8pygcgopt_3gcg_13PricingSolver_5model_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_8pygcgopt_3gcg_13PricingSolver_5model_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_13PricingSolver_5model_2__set__(((struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygcgopt_3gcg_13PricingSolver_5model_2__set__(struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_9pyscipopt_4scip_Model))))) __PYX_ERR(5, 4, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->model);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->model));
  __pyx_v_self->model = ((struct __pyx_obj_9pyscipopt_4scip_Model *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygcgopt.gcg.PricingSolver.model.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_8pygcgopt_3gcg_13PricingSolver_5model_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_8pygcgopt_3gcg_13PricingSolver_5model_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_13PricingSolver_5model_4__del__(((struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygcgopt_3gcg_13PricingSolver_5model_4__del__(struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->model);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->model));
  __pyx_v_self->model = ((struct __pyx_obj_9pyscipopt_4scip_Model *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/pricing_solver.pxi":5
 * 
 *     cdef public Model model
 *     cdef public str solvername             # <<<<<<<<<<<<<<
 * 
 *     def freeSolver(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_13PricingSolver_10solvername_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygcgopt_3gcg_13PricingSolver_10solvername_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_13PricingSolver_10solvername___get__(((struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_13PricingSolver_10solvername___get__(struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->solvername);
  __pyx_r = __pyx_v_self->solvername;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_8pygcgopt_3gcg_13PricingSolver_10solvername_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_8pygcgopt_3gcg_13PricingSolver_10solvername_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_13PricingSolver_10solvername_2__set__(((struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygcgopt_3gcg_13PricingSolver_10solvername_2__set__(struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyUnicode_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(5, 5, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->solvername);
  __Pyx_DECREF(__pyx_v_self->solvername);
  __pyx_v_self->solvername = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygcgopt.gcg.PricingSolver.solvername.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_8pygcgopt_3gcg_13PricingSolver_10solvername_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_8pygcgopt_3gcg_13PricingSolver_10solvername_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_13PricingSolver_10solvername_4__del__(((struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygcgopt_3gcg_13PricingSolver_10solvername_4__del__(struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->solvername);
  __Pyx_DECREF(__pyx_v_self->solvername);
  __pyx_v_self->solvername = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_13PricingSolver_17__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_13PricingSolver_16__reduce_cython__[] = "PricingSolver.__reduce_cython__(self)";
static PyObject *__pyx_pw_8pygcgopt_3gcg_13PricingSolver_17__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_13PricingSolver_16__reduce_cython__(((struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_13PricingSolver_16__reduce_cython__(struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.model, self.solvername)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->model));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->model));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->model));
  __Pyx_INCREF(__pyx_v_self->solvername);
  __Pyx_GIVEREF(__pyx_v_self->solvername);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_self->solvername);
  __pyx_v_state = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.model, self.solvername)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = (self.model, self.solvername)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.model is not None or self.solvername is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.model, self.solvername)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.model is not None or self.solvername is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_PricingSolver, (type(self), 0x7a6ef99, None), state
 */
  /*else*/ {
    __pyx_t_2 = (((PyObject *)__pyx_v_self->model) != Py_None);
    __pyx_t_5 = (__pyx_t_2 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_3 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (__pyx_v_self->solvername != ((PyObject*)Py_None));
    __pyx_t_2 = (__pyx_t_5 != 0);
    __pyx_t_3 = __pyx_t_2;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_3;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.model is not None or self.solvername is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_PricingSolver, (type(self), 0x7a6ef99, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = self.model is not None or self.solvername is not None
 *     if use_setstate:
 *         return __pyx_unpickle_PricingSolver, (type(self), 0x7a6ef99, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_PricingSolver, (type(self), 0x7a6ef99, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_PricingSolver); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_128380825);
    __Pyx_GIVEREF(__pyx_int_128380825);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_128380825);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.model is not None or self.solvername is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_PricingSolver, (type(self), 0x7a6ef99, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_PricingSolver, (type(self), 0x7a6ef99, None), state
 *     else:
 *         return __pyx_unpickle_PricingSolver, (type(self), 0x7a6ef99, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_PricingSolver__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_pyx_unpickle_PricingSolver); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_128380825);
    __Pyx_GIVEREF(__pyx_int_128380825);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_128380825);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_6 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pygcgopt.gcg.PricingSolver.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PricingSolver, (type(self), 0x7a6ef99, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PricingSolver__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_13PricingSolver_19__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_13PricingSolver_18__setstate_cython__[] = "PricingSolver.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_8pygcgopt_3gcg_13PricingSolver_19__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_13PricingSolver_18__setstate_cython__(((struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_13PricingSolver_18__setstate_cython__(struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_PricingSolver, (type(self), 0x7a6ef99, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_PricingSolver__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(4, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_8pygcgopt_3gcg___pyx_unpickle_PricingSolver__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PricingSolver, (type(self), 0x7a6ef99, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PricingSolver__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygcgopt.gcg.PricingSolver.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/pricing_solver.pxi":32
 * 
 * 
 * cdef PricingSolver get_py_pricing_solver(GCG_SOLVER* pricingSolver):             # <<<<<<<<<<<<<<
 *     cdef GCG_SOLVERDATA* solverdata
 *     solverdata = GCGsolverGetData(pricingSolver)
 */

static struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *__pyx_f_8pygcgopt_3gcg_get_py_pricing_solver(GCG_SOLVER *__pyx_v_pricingSolver) {
  GCG_SOLVERDATA *__pyx_v_solverdata;
  struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *__pyx_v_py_pricing_solver = NULL;
  struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_py_pricing_solver", 0);

  /* "src/pygcgopt/pricing_solver.pxi":34
 * cdef PricingSolver get_py_pricing_solver(GCG_SOLVER* pricingSolver):
 *     cdef GCG_SOLVERDATA* solverdata
 *     solverdata = GCGsolverGetData(pricingSolver)             # <<<<<<<<<<<<<<
 *     py_pricing_solver = <PricingSolver>solverdata
 *     return py_pricing_solver
 */
  __pyx_v_solverdata = GCGsolverGetData(__pyx_v_pricingSolver);

  /* "src/pygcgopt/pricing_solver.pxi":35
 *     cdef GCG_SOLVERDATA* solverdata
 *     solverdata = GCGsolverGetData(pricingSolver)
 *     py_pricing_solver = <PricingSolver>solverdata             # <<<<<<<<<<<<<<
 *     return py_pricing_solver
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_solverdata);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_py_pricing_solver = ((struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/pygcgopt/pricing_solver.pxi":36
 *     solverdata = GCGsolverGetData(pricingSolver)
 *     py_pricing_solver = <PricingSolver>solverdata
 *     return py_pricing_solver             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_py_pricing_solver));
  __pyx_r = __pyx_v_py_pricing_solver;
  goto __pyx_L0;

  /* "src/pygcgopt/pricing_solver.pxi":32
 * 
 * 
 * cdef PricingSolver get_py_pricing_solver(GCG_SOLVER* pricingSolver):             # <<<<<<<<<<<<<<
 *     cdef GCG_SOLVERDATA* solverdata
 *     solverdata = GCGsolverGetData(pricingSolver)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_pricing_solver);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/pricing_solver.pxi":39
 * 
 * 
 * cdef SCIP_RETCODE PyPricingSolverFree (SCIP* scip, GCG_SOLVER* solver):             # <<<<<<<<<<<<<<
 *     py_pricing_solver = get_py_pricing_solver(solver)
 *     py_pricing_solver.freeSolver()
 */

static SCIP_RETCODE __pyx_f_8pygcgopt_3gcg_PyPricingSolverFree(CYTHON_UNUSED SCIP *__pyx_v_scip, GCG_SOLVER *__pyx_v_solver) {
  struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *__pyx_v_py_pricing_solver = NULL;
  SCIP_RETCODE __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyPricingSolverFree", 0);

  /* "src/pygcgopt/pricing_solver.pxi":40
 * 
 * cdef SCIP_RETCODE PyPricingSolverFree (SCIP* scip, GCG_SOLVER* solver):
 *     py_pricing_solver = get_py_pricing_solver(solver)             # <<<<<<<<<<<<<<
 *     py_pricing_solver.freeSolver()
 *     Py_DECREF(py_pricing_solver)
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_8pygcgopt_3gcg_get_py_pricing_solver(__pyx_v_solver)); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_py_pricing_solver = ((struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/pygcgopt/pricing_solver.pxi":41
 * cdef SCIP_RETCODE PyPricingSolverFree (SCIP* scip, GCG_SOLVER* solver):
 *     py_pricing_solver = get_py_pricing_solver(solver)
 *     py_pricing_solver.freeSolver()             # <<<<<<<<<<<<<<
 *     Py_DECREF(py_pricing_solver)
 *     return SCIP_OKAY
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_py_pricing_solver), __pyx_n_s_freeSolver); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/pygcgopt/pricing_solver.pxi":42
 *     py_pricing_solver = get_py_pricing_solver(solver)
 *     py_pricing_solver.freeSolver()
 *     Py_DECREF(py_pricing_solver)             # <<<<<<<<<<<<<<
 *     return SCIP_OKAY
 * 
 */
  Py_DECREF(((PyObject *)__pyx_v_py_pricing_solver));

  /* "src/pygcgopt/pricing_solver.pxi":43
 *     py_pricing_solver.freeSolver()
 *     Py_DECREF(py_pricing_solver)
 *     return SCIP_OKAY             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = SCIP_OKAY;
  goto __pyx_L0;

  /* "src/pygcgopt/pricing_solver.pxi":39
 * 
 * 
 * cdef SCIP_RETCODE PyPricingSolverFree (SCIP* scip, GCG_SOLVER* solver):             # <<<<<<<<<<<<<<
 *     py_pricing_solver = get_py_pricing_solver(solver)
 *     py_pricing_solver.freeSolver()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("pygcgopt.gcg.PyPricingSolverFree", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = (SCIP_RETCODE) 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_pricing_solver);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/pricing_solver.pxi":46
 * 
 * 
 * cdef SCIP_RETCODE PyPricingSolverInit (SCIP* scip, GCG_SOLVER* solver):             # <<<<<<<<<<<<<<
 *     py_pricing_solver = get_py_pricing_solver(solver)
 *     py_pricing_solver.initSolver()
 */

static SCIP_RETCODE __pyx_f_8pygcgopt_3gcg_PyPricingSolverInit(CYTHON_UNUSED SCIP *__pyx_v_scip, GCG_SOLVER *__pyx_v_solver) {
  struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *__pyx_v_py_pricing_solver = NULL;
  SCIP_RETCODE __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyPricingSolverInit", 0);

  /* "src/pygcgopt/pricing_solver.pxi":47
 * 
 * cdef SCIP_RETCODE PyPricingSolverInit (SCIP* scip, GCG_SOLVER* solver):
 *     py_pricing_solver = get_py_pricing_solver(solver)             # <<<<<<<<<<<<<<
 *     py_pricing_solver.initSolver()
 *     return SCIP_OKAY
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_8pygcgopt_3gcg_get_py_pricing_solver(__pyx_v_solver)); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_py_pricing_solver = ((struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/pygcgopt/pricing_solver.pxi":48
 * cdef SCIP_RETCODE PyPricingSolverInit (SCIP* scip, GCG_SOLVER* solver):
 *     py_pricing_solver = get_py_pricing_solver(solver)
 *     py_pricing_solver.initSolver()             # <<<<<<<<<<<<<<
 *     return SCIP_OKAY
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_py_pricing_solver), __pyx_n_s_initSolver); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/pygcgopt/pricing_solver.pxi":49
 *     py_pricing_solver = get_py_pricing_solver(solver)
 *     py_pricing_solver.initSolver()
 *     return SCIP_OKAY             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = SCIP_OKAY;
  goto __pyx_L0;

  /* "src/pygcgopt/pricing_solver.pxi":46
 * 
 * 
 * cdef SCIP_RETCODE PyPricingSolverInit (SCIP* scip, GCG_SOLVER* solver):             # <<<<<<<<<<<<<<
 *     py_pricing_solver = get_py_pricing_solver(solver)
 *     py_pricing_solver.initSolver()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("pygcgopt.gcg.PyPricingSolverInit", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = (SCIP_RETCODE) 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_pricing_solver);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/pricing_solver.pxi":52
 * 
 * 
 * cdef SCIP_RETCODE PyPricingSolverExit (SCIP* scip, GCG_SOLVER* solver):             # <<<<<<<<<<<<<<
 *     py_pricing_solver = get_py_pricing_solver(solver)
 *     py_pricing_solver.exitSolver()
 */

static SCIP_RETCODE __pyx_f_8pygcgopt_3gcg_PyPricingSolverExit(CYTHON_UNUSED SCIP *__pyx_v_scip, GCG_SOLVER *__pyx_v_solver) {
  struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *__pyx_v_py_pricing_solver = NULL;
  SCIP_RETCODE __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyPricingSolverExit", 0);

  /* "src/pygcgopt/pricing_solver.pxi":53
 * 
 * cdef SCIP_RETCODE PyPricingSolverExit (SCIP* scip, GCG_SOLVER* solver):
 *     py_pricing_solver = get_py_pricing_solver(solver)             # <<<<<<<<<<<<<<
 *     py_pricing_solver.exitSolver()
 *     return SCIP_OKAY
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_8pygcgopt_3gcg_get_py_pricing_solver(__pyx_v_solver)); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_py_pricing_solver = ((struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/pygcgopt/pricing_solver.pxi":54
 * cdef SCIP_RETCODE PyPricingSolverExit (SCIP* scip, GCG_SOLVER* solver):
 *     py_pricing_solver = get_py_pricing_solver(solver)
 *     py_pricing_solver.exitSolver()             # <<<<<<<<<<<<<<
 *     return SCIP_OKAY
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_py_pricing_solver), __pyx_n_s_exitSolver); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/pygcgopt/pricing_solver.pxi":55
 *     py_pricing_solver = get_py_pricing_solver(solver)
 *     py_pricing_solver.exitSolver()
 *     return SCIP_OKAY             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = SCIP_OKAY;
  goto __pyx_L0;

  /* "src/pygcgopt/pricing_solver.pxi":52
 * 
 * 
 * cdef SCIP_RETCODE PyPricingSolverExit (SCIP* scip, GCG_SOLVER* solver):             # <<<<<<<<<<<<<<
 *     py_pricing_solver = get_py_pricing_solver(solver)
 *     py_pricing_solver.exitSolver()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("pygcgopt.gcg.PyPricingSolverExit", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = (SCIP_RETCODE) 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_pricing_solver);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/pricing_solver.pxi":58
 * 
 * 
 * cdef SCIP_RETCODE PyPricingSolverInitSol (SCIP* scip, GCG_SOLVER* solver):             # <<<<<<<<<<<<<<
 *     py_pricing_solver = get_py_pricing_solver(solver)
 *     py_pricing_solver.initSolution()
 */

static SCIP_RETCODE __pyx_f_8pygcgopt_3gcg_PyPricingSolverInitSol(CYTHON_UNUSED SCIP *__pyx_v_scip, GCG_SOLVER *__pyx_v_solver) {
  struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *__pyx_v_py_pricing_solver = NULL;
  SCIP_RETCODE __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyPricingSolverInitSol", 0);

  /* "src/pygcgopt/pricing_solver.pxi":59
 * 
 * cdef SCIP_RETCODE PyPricingSolverInitSol (SCIP* scip, GCG_SOLVER* solver):
 *     py_pricing_solver = get_py_pricing_solver(solver)             # <<<<<<<<<<<<<<
 *     py_pricing_solver.initSolution()
 *     return SCIP_OKAY
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_8pygcgopt_3gcg_get_py_pricing_solver(__pyx_v_solver)); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_py_pricing_solver = ((struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/pygcgopt/pricing_solver.pxi":60
 * cdef SCIP_RETCODE PyPricingSolverInitSol (SCIP* scip, GCG_SOLVER* solver):
 *     py_pricing_solver = get_py_pricing_solver(solver)
 *     py_pricing_solver.initSolution()             # <<<<<<<<<<<<<<
 *     return SCIP_OKAY
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_py_pricing_solver), __pyx_n_s_initSolution); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/pygcgopt/pricing_solver.pxi":61
 *     py_pricing_solver = get_py_pricing_solver(solver)
 *     py_pricing_solver.initSolution()
 *     return SCIP_OKAY             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = SCIP_OKAY;
  goto __pyx_L0;

  /* "src/pygcgopt/pricing_solver.pxi":58
 * 
 * 
 * cdef SCIP_RETCODE PyPricingSolverInitSol (SCIP* scip, GCG_SOLVER* solver):             # <<<<<<<<<<<<<<
 *     py_pricing_solver = get_py_pricing_solver(solver)
 *     py_pricing_solver.initSolution()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("pygcgopt.gcg.PyPricingSolverInitSol", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = (SCIP_RETCODE) 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_pricing_solver);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/pricing_solver.pxi":64
 * 
 * 
 * cdef SCIP_RETCODE PyPricingSolverExitSol (SCIP* scip, GCG_SOLVER* solver):             # <<<<<<<<<<<<<<
 *     py_pricing_solver = get_py_pricing_solver(solver)
 *     py_pricing_solver.exitSolution()
 */

static SCIP_RETCODE __pyx_f_8pygcgopt_3gcg_PyPricingSolverExitSol(CYTHON_UNUSED SCIP *__pyx_v_scip, GCG_SOLVER *__pyx_v_solver) {
  struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *__pyx_v_py_pricing_solver = NULL;
  SCIP_RETCODE __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyPricingSolverExitSol", 0);

  /* "src/pygcgopt/pricing_solver.pxi":65
 * 
 * cdef SCIP_RETCODE PyPricingSolverExitSol (SCIP* scip, GCG_SOLVER* solver):
 *     py_pricing_solver = get_py_pricing_solver(solver)             # <<<<<<<<<<<<<<
 *     py_pricing_solver.exitSolution()
 *     return SCIP_OKAY
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_8pygcgopt_3gcg_get_py_pricing_solver(__pyx_v_solver)); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_py_pricing_solver = ((struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/pygcgopt/pricing_solver.pxi":66
 * cdef SCIP_RETCODE PyPricingSolverExitSol (SCIP* scip, GCG_SOLVER* solver):
 *     py_pricing_solver = get_py_pricing_solver(solver)
 *     py_pricing_solver.exitSolution()             # <<<<<<<<<<<<<<
 *     return SCIP_OKAY
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_py_pricing_solver), __pyx_n_s_exitSolution); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/pygcgopt/pricing_solver.pxi":67
 *     py_pricing_solver = get_py_pricing_solver(solver)
 *     py_pricing_solver.exitSolution()
 *     return SCIP_OKAY             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = SCIP_OKAY;
  goto __pyx_L0;

  /* "src/pygcgopt/pricing_solver.pxi":64
 * 
 * 
 * cdef SCIP_RETCODE PyPricingSolverExitSol (SCIP* scip, GCG_SOLVER* solver):             # <<<<<<<<<<<<<<
 *     py_pricing_solver = get_py_pricing_solver(solver)
 *     py_pricing_solver.exitSolution()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("pygcgopt.gcg.PyPricingSolverExitSol", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = (SCIP_RETCODE) 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_pricing_solver);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/pricing_solver.pxi":70
 * 
 * 
 * cdef SCIP_RETCODE PyPricingSolverUpdate (SCIP* pricingprob, GCG_SOLVER* solver, int probnr, SCIP_Bool varobjschanged, SCIP_Bool varbndschanged, SCIP_Bool consschanged):             # <<<<<<<<<<<<<<
 *     py_pricing_solver = get_py_pricing_solver(solver)
 *     py_pricingprob = GCGPricingModel.create(pricingprob)
 */

static SCIP_RETCODE __pyx_f_8pygcgopt_3gcg_PyPricingSolverUpdate(SCIP *__pyx_v_pricingprob, GCG_SOLVER *__pyx_v_solver, int __pyx_v_probnr, SCIP_Bool __pyx_v_varobjschanged, SCIP_Bool __pyx_v_varbndschanged, SCIP_Bool __pyx_v_consschanged) {
  struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *__pyx_v_py_pricing_solver = NULL;
  PyObject *__pyx_v_py_pricingprob = NULL;
  SCIP_RETCODE __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyPricingSolverUpdate", 0);

  /* "src/pygcgopt/pricing_solver.pxi":71
 * 
 * cdef SCIP_RETCODE PyPricingSolverUpdate (SCIP* pricingprob, GCG_SOLVER* solver, int probnr, SCIP_Bool varobjschanged, SCIP_Bool varbndschanged, SCIP_Bool consschanged):
 *     py_pricing_solver = get_py_pricing_solver(solver)             # <<<<<<<<<<<<<<
 *     py_pricingprob = GCGPricingModel.create(pricingprob)
 *     py_pricing_solver.updateSolver(py_pricingprob, probnr, varobjschanged, varbndschanged, consschanged)
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_8pygcgopt_3gcg_get_py_pricing_solver(__pyx_v_solver)); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_py_pricing_solver = ((struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/pygcgopt/pricing_solver.pxi":72
 * cdef SCIP_RETCODE PyPricingSolverUpdate (SCIP* pricingprob, GCG_SOLVER* solver, int probnr, SCIP_Bool varobjschanged, SCIP_Bool varbndschanged, SCIP_Bool consschanged):
 *     py_pricing_solver = get_py_pricing_solver(solver)
 *     py_pricingprob = GCGPricingModel.create(pricingprob)             # <<<<<<<<<<<<<<
 *     py_pricing_solver.updateSolver(py_pricingprob, probnr, varobjschanged, varbndschanged, consschanged)
 *     return SCIP_OKAY
 */
  __pyx_t_1 = __pyx_f_8pygcgopt_3gcg_15GCGPricingModel_create(__pyx_v_pricingprob); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_py_pricingprob = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "src/pygcgopt/pricing_solver.pxi":73
 *     py_pricing_solver = get_py_pricing_solver(solver)
 *     py_pricingprob = GCGPricingModel.create(pricingprob)
 *     py_pricing_solver.updateSolver(py_pricingprob, probnr, varobjschanged, varbndschanged, consschanged)             # <<<<<<<<<<<<<<
 *     return SCIP_OKAY
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_py_pricing_solver), __pyx_n_s_updateSolver); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_probnr); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_varobjschanged); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyBool_FromLong(__pyx_v_varbndschanged); if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyBool_FromLong(__pyx_v_consschanged); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[6] = {__pyx_t_7, __pyx_v_py_pricingprob, __pyx_t_3, __pyx_t_4, __pyx_t_5, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 5+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 73, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[6] = {__pyx_t_7, __pyx_v_py_pricingprob, __pyx_t_3, __pyx_t_4, __pyx_t_5, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 5+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 73, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_9 = PyTuple_New(5+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(5, 73, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_INCREF(__pyx_v_py_pricingprob);
    __Pyx_GIVEREF(__pyx_v_py_pricingprob);
    PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_v_py_pricingprob);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_8, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_9, 3+__pyx_t_8, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_9, 4+__pyx_t_8, __pyx_t_6);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 73, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/pygcgopt/pricing_solver.pxi":74
 *     py_pricingprob = GCGPricingModel.create(pricingprob)
 *     py_pricing_solver.updateSolver(py_pricingprob, probnr, varobjschanged, varbndschanged, consschanged)
 *     return SCIP_OKAY             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = SCIP_OKAY;
  goto __pyx_L0;

  /* "src/pygcgopt/pricing_solver.pxi":70
 * 
 * 
 * cdef SCIP_RETCODE PyPricingSolverUpdate (SCIP* pricingprob, GCG_SOLVER* solver, int probnr, SCIP_Bool varobjschanged, SCIP_Bool varbndschanged, SCIP_Bool consschanged):             # <<<<<<<<<<<<<<
 *     py_pricing_solver = get_py_pricing_solver(solver)
 *     py_pricingprob = GCGPricingModel.create(pricingprob)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_WriteUnraisable("pygcgopt.gcg.PyPricingSolverUpdate", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = (SCIP_RETCODE) 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_pricing_solver);
  __Pyx_XDECREF(__pyx_v_py_pricingprob);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/pricing_solver.pxi":77
 * 
 * 
 * cdef SCIP_RETCODE PyPricingSolverSolve (SCIP* scip, SCIP* pricingprob, GCG_SOLVER* solver, int probnr, SCIP_Real dualsolconv, SCIP_Real* lowerbound, GCG_PRICINGSTATUS* status):             # <<<<<<<<<<<<<<
 *     py_pricing_solver = get_py_pricing_solver(solver)
 *     py_pricingprob = GCGPricingModel.create(pricingprob)
 */

static SCIP_RETCODE __pyx_f_8pygcgopt_3gcg_PyPricingSolverSolve(CYTHON_UNUSED SCIP *__pyx_v_scip, SCIP *__pyx_v_pricingprob, GCG_SOLVER *__pyx_v_solver, int __pyx_v_probnr, SCIP_Real __pyx_v_dualsolconv, SCIP_Real *__pyx_v_lowerbound, GCG_PRICINGSTATUS *__pyx_v_status) {
  struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *__pyx_v_py_pricing_solver = NULL;
  PyObject *__pyx_v_py_pricingprob = NULL;
  PyObject *__pyx_v_result_dict = NULL;
  SCIP_RETCODE __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  SCIP_Real __pyx_t_8;
  GCG_PRICINGSTATUS __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyPricingSolverSolve", 0);

  /* "src/pygcgopt/pricing_solver.pxi":78
 * 
 * cdef SCIP_RETCODE PyPricingSolverSolve (SCIP* scip, SCIP* pricingprob, GCG_SOLVER* solver, int probnr, SCIP_Real dualsolconv, SCIP_Real* lowerbound, GCG_PRICINGSTATUS* status):
 *     py_pricing_solver = get_py_pricing_solver(solver)             # <<<<<<<<<<<<<<
 *     py_pricingprob = GCGPricingModel.create(pricingprob)
 *     result_dict = py_pricing_solver.solve(py_pricingprob, probnr, dualsolconv)
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_8pygcgopt_3gcg_get_py_pricing_solver(__pyx_v_solver)); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_py_pricing_solver = ((struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/pygcgopt/pricing_solver.pxi":79
 * cdef SCIP_RETCODE PyPricingSolverSolve (SCIP* scip, SCIP* pricingprob, GCG_SOLVER* solver, int probnr, SCIP_Real dualsolconv, SCIP_Real* lowerbound, GCG_PRICINGSTATUS* status):
 *     py_pricing_solver = get_py_pricing_solver(solver)
 *     py_pricingprob = GCGPricingModel.create(pricingprob)             # <<<<<<<<<<<<<<
 *     result_dict = py_pricing_solver.solve(py_pricingprob, probnr, dualsolconv)
 *     lowerbound[0] = result_dict.get("lowerbound", 0)
 */
  __pyx_t_1 = __pyx_f_8pygcgopt_3gcg_15GCGPricingModel_create(__pyx_v_pricingprob); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_py_pricingprob = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "src/pygcgopt/pricing_solver.pxi":80
 *     py_pricing_solver = get_py_pricing_solver(solver)
 *     py_pricingprob = GCGPricingModel.create(pricingprob)
 *     result_dict = py_pricing_solver.solve(py_pricingprob, probnr, dualsolconv)             # <<<<<<<<<<<<<<
 *     lowerbound[0] = result_dict.get("lowerbound", 0)
 *     status[0] = result_dict.get("status", <GCG_PRICINGSTATUS>status[0])
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_py_pricing_solver), __pyx_n_s_solve); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_probnr); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_dualsolconv); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_py_pricingprob, __pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 80, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_py_pricingprob, __pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 80, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(5, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_py_pricingprob);
    __Pyx_GIVEREF(__pyx_v_py_pricingprob);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_py_pricingprob);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_6, __pyx_t_4);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_result_dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "src/pygcgopt/pricing_solver.pxi":81
 *     py_pricingprob = GCGPricingModel.create(pricingprob)
 *     result_dict = py_pricing_solver.solve(py_pricingprob, probnr, dualsolconv)
 *     lowerbound[0] = result_dict.get("lowerbound", 0)             # <<<<<<<<<<<<<<
 *     status[0] = result_dict.get("status", <GCG_PRICINGSTATUS>status[0])
 *     return SCIP_OKAY
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_result_dict, __pyx_n_s_get); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_8 == ((SCIP_Real)-1)) && PyErr_Occurred())) __PYX_ERR(5, 81, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_lowerbound[0]) = __pyx_t_8;

  /* "src/pygcgopt/pricing_solver.pxi":82
 *     result_dict = py_pricing_solver.solve(py_pricingprob, probnr, dualsolconv)
 *     lowerbound[0] = result_dict.get("lowerbound", 0)
 *     status[0] = result_dict.get("status", <GCG_PRICINGSTATUS>status[0])             # <<<<<<<<<<<<<<
 *     return SCIP_OKAY
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_result_dict, __pyx_n_s_get); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyInt_From_GCG_PRICINGSTATUS(((GCG_PRICINGSTATUS)(__pyx_v_status[0]))); if (unlikely(!__pyx_t_7)) __PYX_ERR(5, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_n_u_status, __pyx_t_7};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 82, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_n_u_status, __pyx_t_7};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 82, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_status);
    __Pyx_GIVEREF(__pyx_n_u_status);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_6, __pyx_n_u_status);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_6, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_9 = ((GCG_PRICINGSTATUS)__Pyx_PyInt_As_GCG_PRICINGSTATUS(__pyx_t_2)); if (unlikely(PyErr_Occurred())) __PYX_ERR(5, 82, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_status[0]) = __pyx_t_9;

  /* "src/pygcgopt/pricing_solver.pxi":83
 *     lowerbound[0] = result_dict.get("lowerbound", 0)
 *     status[0] = result_dict.get("status", <GCG_PRICINGSTATUS>status[0])
 *     return SCIP_OKAY             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = SCIP_OKAY;
  goto __pyx_L0;

  /* "src/pygcgopt/pricing_solver.pxi":77
 * 
 * 
 * cdef SCIP_RETCODE PyPricingSolverSolve (SCIP* scip, SCIP* pricingprob, GCG_SOLVER* solver, int probnr, SCIP_Real dualsolconv, SCIP_Real* lowerbound, GCG_PRICINGSTATUS* status):             # <<<<<<<<<<<<<<
 *     py_pricing_solver = get_py_pricing_solver(solver)
 *     py_pricingprob = GCGPricingModel.create(pricingprob)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_WriteUnraisable("pygcgopt.gcg.PyPricingSolverSolve", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = (SCIP_RETCODE) 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_pricing_solver);
  __Pyx_XDECREF(__pyx_v_py_pricingprob);
  __Pyx_XDECREF(__pyx_v_result_dict);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/pricing_solver.pxi":86
 * 
 * 
 * cdef SCIP_RETCODE PyPricingSolverSolveHeur (SCIP* scip, SCIP* pricingprob, GCG_SOLVER* solver, int probnr, SCIP_Real dualsolconv, SCIP_Real* lowerbound, GCG_PRICINGSTATUS* status):             # <<<<<<<<<<<<<<
 *     py_pricing_solver = get_py_pricing_solver(solver)
 *     py_pricingprob = GCGPricingModel.create(pricingprob)
 */

static SCIP_RETCODE __pyx_f_8pygcgopt_3gcg_PyPricingSolverSolveHeur(CYTHON_UNUSED SCIP *__pyx_v_scip, SCIP *__pyx_v_pricingprob, GCG_SOLVER *__pyx_v_solver, int __pyx_v_probnr, SCIP_Real __pyx_v_dualsolconv, SCIP_Real *__pyx_v_lowerbound, GCG_PRICINGSTATUS *__pyx_v_status) {
  struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *__pyx_v_py_pricing_solver = NULL;
  PyObject *__pyx_v_py_pricingprob = NULL;
  PyObject *__pyx_v_result_dict = NULL;
  SCIP_RETCODE __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  SCIP_Real __pyx_t_8;
  GCG_PRICINGSTATUS __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyPricingSolverSolveHeur", 0);

  /* "src/pygcgopt/pricing_solver.pxi":87
 * 
 * cdef SCIP_RETCODE PyPricingSolverSolveHeur (SCIP* scip, SCIP* pricingprob, GCG_SOLVER* solver, int probnr, SCIP_Real dualsolconv, SCIP_Real* lowerbound, GCG_PRICINGSTATUS* status):
 *     py_pricing_solver = get_py_pricing_solver(solver)             # <<<<<<<<<<<<<<
 *     py_pricingprob = GCGPricingModel.create(pricingprob)
 *     result_dict = py_pricing_solver.solveHeuristic(py_pricingprob, probnr, dualsolconv)
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_8pygcgopt_3gcg_get_py_pricing_solver(__pyx_v_solver)); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_py_pricing_solver = ((struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/pygcgopt/pricing_solver.pxi":88
 * cdef SCIP_RETCODE PyPricingSolverSolveHeur (SCIP* scip, SCIP* pricingprob, GCG_SOLVER* solver, int probnr, SCIP_Real dualsolconv, SCIP_Real* lowerbound, GCG_PRICINGSTATUS* status):
 *     py_pricing_solver = get_py_pricing_solver(solver)
 *     py_pricingprob = GCGPricingModel.create(pricingprob)             # <<<<<<<<<<<<<<
 *     result_dict = py_pricing_solver.solveHeuristic(py_pricingprob, probnr, dualsolconv)
 *     lowerbound[0] = result_dict.get("lowerbound", 0)
 */
  __pyx_t_1 = __pyx_f_8pygcgopt_3gcg_15GCGPricingModel_create(__pyx_v_pricingprob); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_py_pricingprob = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "src/pygcgopt/pricing_solver.pxi":89
 *     py_pricing_solver = get_py_pricing_solver(solver)
 *     py_pricingprob = GCGPricingModel.create(pricingprob)
 *     result_dict = py_pricing_solver.solveHeuristic(py_pricingprob, probnr, dualsolconv)             # <<<<<<<<<<<<<<
 *     lowerbound[0] = result_dict.get("lowerbound", 0)
 *     status[0] = result_dict.get("status", <GCG_PRICINGSTATUS>status[0])
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_py_pricing_solver), __pyx_n_s_solveHeuristic); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_probnr); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_dualsolconv); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_py_pricingprob, __pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 89, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_py_pricingprob, __pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 89, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(5, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_py_pricingprob);
    __Pyx_GIVEREF(__pyx_v_py_pricingprob);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_py_pricingprob);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_6, __pyx_t_4);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_result_dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "src/pygcgopt/pricing_solver.pxi":90
 *     py_pricingprob = GCGPricingModel.create(pricingprob)
 *     result_dict = py_pricing_solver.solveHeuristic(py_pricingprob, probnr, dualsolconv)
 *     lowerbound[0] = result_dict.get("lowerbound", 0)             # <<<<<<<<<<<<<<
 *     status[0] = result_dict.get("status", <GCG_PRICINGSTATUS>status[0])
 *     return SCIP_OKAY
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_result_dict, __pyx_n_s_get); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_8 == ((SCIP_Real)-1)) && PyErr_Occurred())) __PYX_ERR(5, 90, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_lowerbound[0]) = __pyx_t_8;

  /* "src/pygcgopt/pricing_solver.pxi":91
 *     result_dict = py_pricing_solver.solveHeuristic(py_pricingprob, probnr, dualsolconv)
 *     lowerbound[0] = result_dict.get("lowerbound", 0)
 *     status[0] = result_dict.get("status", <GCG_PRICINGSTATUS>status[0])             # <<<<<<<<<<<<<<
 *     return SCIP_OKAY
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_result_dict, __pyx_n_s_get); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyInt_From_GCG_PRICINGSTATUS(((GCG_PRICINGSTATUS)(__pyx_v_status[0]))); if (unlikely(!__pyx_t_7)) __PYX_ERR(5, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_n_u_status, __pyx_t_7};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 91, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_n_u_status, __pyx_t_7};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 91, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 91, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_status);
    __Pyx_GIVEREF(__pyx_n_u_status);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_6, __pyx_n_u_status);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_6, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 91, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_9 = ((GCG_PRICINGSTATUS)__Pyx_PyInt_As_GCG_PRICINGSTATUS(__pyx_t_2)); if (unlikely(PyErr_Occurred())) __PYX_ERR(5, 91, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_status[0]) = __pyx_t_9;

  /* "src/pygcgopt/pricing_solver.pxi":92
 *     lowerbound[0] = result_dict.get("lowerbound", 0)
 *     status[0] = result_dict.get("status", <GCG_PRICINGSTATUS>status[0])
 *     return SCIP_OKAY             # <<<<<<<<<<<<<<
 */
  __pyx_r = SCIP_OKAY;
  goto __pyx_L0;

  /* "src/pygcgopt/pricing_solver.pxi":86
 * 
 * 
 * cdef SCIP_RETCODE PyPricingSolverSolveHeur (SCIP* scip, SCIP* pricingprob, GCG_SOLVER* solver, int probnr, SCIP_Real dualsolconv, SCIP_Real* lowerbound, GCG_PRICINGSTATUS* status):             # <<<<<<<<<<<<<<
 *     py_pricing_solver = get_py_pricing_solver(solver)
 *     py_pricingprob = GCGPricingModel.create(pricingprob)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_WriteUnraisable("pygcgopt.gcg.PyPricingSolverSolveHeur", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = (SCIP_RETCODE) 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_pricing_solver);
  __Pyx_XDECREF(__pyx_v_py_pricingprob);
  __Pyx_XDECREF(__pyx_v_result_dict);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/partition.pxi":6
 *     cdef bool delete_thisptr
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 *         self.delete_thisptr = True
 */

/* Python wrapper */
static int __pyx_pw_8pygcgopt_3gcg_8ConsPart_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pygcgopt_3gcg_8ConsPart_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8ConsPart___cinit__(((struct __pyx_obj_8pygcgopt_3gcg_ConsPart *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygcgopt_3gcg_8ConsPart___cinit__(struct __pyx_obj_8pygcgopt_3gcg_ConsPart *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "src/pygcgopt/partition.pxi":7
 * 
 *     def __cinit__(self):
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 *         self.delete_thisptr = True
 * 
 */
  __pyx_v_self->thisptr = NULL;

  /* "src/pygcgopt/partition.pxi":8
 *     def __cinit__(self):
 *         self.thisptr = NULL
 *         self.delete_thisptr = True             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->delete_thisptr = 1;

  /* "src/pygcgopt/partition.pxi":6
 *     cdef bool delete_thisptr
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 *         self.delete_thisptr = True
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/partition.pxi":10
 *         self.delete_thisptr = True
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.delete_thisptr and self.thisptr != NULL:
 *             del self.thisptr
 */

/* Python wrapper */
static void __pyx_pw_8pygcgopt_3gcg_8ConsPart_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pygcgopt_3gcg_8ConsPart_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pygcgopt_3gcg_8ConsPart_2__dealloc__(((struct __pyx_obj_8pygcgopt_3gcg_ConsPart *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pygcgopt_3gcg_8ConsPart_2__dealloc__(struct __pyx_obj_8pygcgopt_3gcg_ConsPart *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "src/pygcgopt/partition.pxi":11
 * 
 *     def __dealloc__(self):
 *         if self.delete_thisptr and self.thisptr != NULL:             # <<<<<<<<<<<<<<
 *             del self.thisptr
 * 
 */
  __pyx_t_2 = (__pyx_v_self->delete_thisptr != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_self->thisptr != NULL) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "src/pygcgopt/partition.pxi":12
 *     def __dealloc__(self):
 *         if self.delete_thisptr and self.thisptr != NULL:
 *             del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    delete __pyx_v_self->thisptr;

    /* "src/pygcgopt/partition.pxi":11
 * 
 *     def __dealloc__(self):
 *         if self.delete_thisptr and self.thisptr != NULL:             # <<<<<<<<<<<<<<
 *             del self.thisptr
 * 
 */
  }

  /* "src/pygcgopt/partition.pxi":10
 *         self.delete_thisptr = True
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.delete_thisptr and self.thisptr != NULL:
 *             del self.thisptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "src/pygcgopt/partition.pxi":15
 * 
 *     @staticmethod
 *     cdef create(ConsPartition* thisptr, DetProbData detProbData):             # <<<<<<<<<<<<<<
 *         if thisptr == NULL:
 *             raise Warning("cannot create ConsPart with ConsPartition* == NULL")
 */

static PyObject *__pyx_f_8pygcgopt_3gcg_8ConsPart_create(gcg::ConsPartition *__pyx_v_thisptr, struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_detProbData) {
  struct __pyx_obj_8pygcgopt_3gcg_ConsPart *__pyx_v_new_ConsPart = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create", 0);

  /* "src/pygcgopt/partition.pxi":16
 *     @staticmethod
 *     cdef create(ConsPartition* thisptr, DetProbData detProbData):
 *         if thisptr == NULL:             # <<<<<<<<<<<<<<
 *             raise Warning("cannot create ConsPart with ConsPartition* == NULL")
 *         new_ConsPart = ConsPart()
 */
  __pyx_t_1 = ((__pyx_v_thisptr == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "src/pygcgopt/partition.pxi":17
 *     cdef create(ConsPartition* thisptr, DetProbData detProbData):
 *         if thisptr == NULL:
 *             raise Warning("cannot create ConsPart with ConsPartition* == NULL")             # <<<<<<<<<<<<<<
 *         new_ConsPart = ConsPart()
 *         new_ConsPart.thisptr = thisptr
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_Warning, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 17, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 17, __pyx_L1_error)

    /* "src/pygcgopt/partition.pxi":16
 *     @staticmethod
 *     cdef create(ConsPartition* thisptr, DetProbData detProbData):
 *         if thisptr == NULL:             # <<<<<<<<<<<<<<
 *             raise Warning("cannot create ConsPart with ConsPartition* == NULL")
 *         new_ConsPart = ConsPart()
 */
  }

  /* "src/pygcgopt/partition.pxi":18
 *         if thisptr == NULL:
 *             raise Warning("cannot create ConsPart with ConsPartition* == NULL")
 *         new_ConsPart = ConsPart()             # <<<<<<<<<<<<<<
 *         new_ConsPart.thisptr = thisptr
 *         new_ConsPart.delete_thisptr = False
 */
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygcgopt_3gcg_ConsPart)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_new_ConsPart = ((struct __pyx_obj_8pygcgopt_3gcg_ConsPart *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "src/pygcgopt/partition.pxi":19
 *             raise Warning("cannot create ConsPart with ConsPartition* == NULL")
 *         new_ConsPart = ConsPart()
 *         new_ConsPart.thisptr = thisptr             # <<<<<<<<<<<<<<
 *         new_ConsPart.delete_thisptr = False
 *         new_ConsPart.detProbData = detProbData
 */
  __pyx_v_new_ConsPart->thisptr = __pyx_v_thisptr;

  /* "src/pygcgopt/partition.pxi":20
 *         new_ConsPart = ConsPart()
 *         new_ConsPart.thisptr = thisptr
 *         new_ConsPart.delete_thisptr = False             # <<<<<<<<<<<<<<
 *         new_ConsPart.detProbData = detProbData
 *         return new_ConsPart
 */
  __pyx_v_new_ConsPart->delete_thisptr = 0;

  /* "src/pygcgopt/partition.pxi":21
 *         new_ConsPart.thisptr = thisptr
 *         new_ConsPart.delete_thisptr = False
 *         new_ConsPart.detProbData = detProbData             # <<<<<<<<<<<<<<
 *         return new_ConsPart
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_detProbData));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_detProbData));
  __Pyx_GOTREF(__pyx_v_new_ConsPart->detProbData);
  __Pyx_DECREF(((PyObject *)__pyx_v_new_ConsPart->detProbData));
  __pyx_v_new_ConsPart->detProbData = __pyx_v_detProbData;

  /* "src/pygcgopt/partition.pxi":22
 *         new_ConsPart.delete_thisptr = False
 *         new_ConsPart.detProbData = detProbData
 *         return new_ConsPart             # <<<<<<<<<<<<<<
 * 
 *     # def addClass(ConsPart self, name, desc, CONS_DECOMPINFO decompInfo):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_new_ConsPart));
  __pyx_r = ((PyObject *)__pyx_v_new_ConsPart);
  goto __pyx_L0;

  /* "src/pygcgopt/partition.pxi":15
 * 
 *     @staticmethod
 *     cdef create(ConsPartition* thisptr, DetProbData detProbData):             # <<<<<<<<<<<<<<
 *         if thisptr == NULL:
 *             raise Warning("cannot create ConsPart with ConsPartition* == NULL")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.ConsPart.create", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_new_ConsPart);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/partition.pxi":30
 *     #     raise NotImplementedError()
 * 
 *     def assignConsToClass(ConsPart self, Constraint cons, int classindex):             # <<<<<<<<<<<<<<
 *         """assigns a constraint to a class.
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_8ConsPart_5assignConsToClass(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_8ConsPart_4assignConsToClass[] = "ConsPart.assignConsToClass(self, Constraint cons, int classindex)\nassigns a constraint to a class.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_8ConsPart_5assignConsToClass(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9pyscipopt_4scip_Constraint *__pyx_v_cons = 0;
  int __pyx_v_classindex;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("assignConsToClass (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cons,&__pyx_n_s_classindex,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cons)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_classindex)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("assignConsToClass", 1, 2, 2, 1); __PYX_ERR(1, 30, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "assignConsToClass") < 0)) __PYX_ERR(1, 30, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_cons = ((struct __pyx_obj_9pyscipopt_4scip_Constraint *)values[0]);
    __pyx_v_classindex = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_classindex == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 30, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("assignConsToClass", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 30, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.ConsPart.assignConsToClass", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_cons), __pyx_ptype_9pyscipopt_4scip_Constraint, 1, "cons", 0))) __PYX_ERR(1, 30, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8ConsPart_4assignConsToClass(((struct __pyx_obj_8pygcgopt_3gcg_ConsPart *)__pyx_v_self), __pyx_v_cons, __pyx_v_classindex);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_8ConsPart_4assignConsToClass(struct __pyx_obj_8pygcgopt_3gcg_ConsPart *__pyx_v_self, struct __pyx_obj_9pyscipopt_4scip_Constraint *__pyx_v_cons, int __pyx_v_classindex) {
  int __pyx_v_cpp_consindex;
  int __pyx_v_cpp_classindex;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assignConsToClass", 0);

  /* "src/pygcgopt/partition.pxi":33
 *         """assigns a constraint to a class.
 *         """
 *         cdef int cpp_consindex = self.detProbData.getIndexForCons(cons)             # <<<<<<<<<<<<<<
 *         cdef int cpp_classindex = classindex
 *         self.thisptr.assignConsToClass(cpp_consindex, cpp_classindex)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->detProbData), __pyx_n_s_getIndexForCons); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, ((PyObject *)__pyx_v_cons)) : __Pyx_PyObject_CallOneArg(__pyx_t_2, ((PyObject *)__pyx_v_cons));
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 33, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_cpp_consindex = __pyx_t_4;

  /* "src/pygcgopt/partition.pxi":34
 *         """
 *         cdef int cpp_consindex = self.detProbData.getIndexForCons(cons)
 *         cdef int cpp_classindex = classindex             # <<<<<<<<<<<<<<
 *         self.thisptr.assignConsToClass(cpp_consindex, cpp_classindex)
 * 
 */
  __pyx_v_cpp_classindex = __pyx_v_classindex;

  /* "src/pygcgopt/partition.pxi":35
 *         cdef int cpp_consindex = self.detProbData.getIndexForCons(cons)
 *         cdef int cpp_classindex = classindex
 *         self.thisptr.assignConsToClass(cpp_consindex, cpp_classindex)             # <<<<<<<<<<<<<<
 * 
 *     def getAllSubsets(ConsPart self, bool both, bool only_master, bool only_pricing):
 */
  try {
    __pyx_v_self->thisptr->assignConsToClass(__pyx_v_cpp_consindex, __pyx_v_cpp_classindex);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 35, __pyx_L1_error)
  }

  /* "src/pygcgopt/partition.pxi":30
 *     #     raise NotImplementedError()
 * 
 *     def assignConsToClass(ConsPart self, Constraint cons, int classindex):             # <<<<<<<<<<<<<<
 *         """assigns a constraint to a class.
 *         """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygcgopt.gcg.ConsPart.assignConsToClass", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/partition.pxi":37
 *         self.thisptr.assignConsToClass(cpp_consindex, cpp_classindex)
 * 
 *     def getAllSubsets(ConsPart self, bool both, bool only_master, bool only_pricing):             # <<<<<<<<<<<<<<
 *         """returns a vector containing all possible subsets of the chosen classindices.
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_8ConsPart_7getAllSubsets(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_8ConsPart_6getAllSubsets[] = "ConsPart.getAllSubsets(self, bool both, bool only_master, bool only_pricing)\nreturns a vector containing all possible subsets of the chosen classindices.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_8ConsPart_7getAllSubsets(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  bool __pyx_v_both;
  bool __pyx_v_only_master;
  bool __pyx_v_only_pricing;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getAllSubsets (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_both,&__pyx_n_s_only_master,&__pyx_n_s_only_pricing,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_both)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_only_master)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getAllSubsets", 1, 3, 3, 1); __PYX_ERR(1, 37, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_only_pricing)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getAllSubsets", 1, 3, 3, 2); __PYX_ERR(1, 37, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getAllSubsets") < 0)) __PYX_ERR(1, 37, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_both = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_both == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 37, __pyx_L3_error)
    __pyx_v_only_master = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_only_master == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 37, __pyx_L3_error)
    __pyx_v_only_pricing = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_only_pricing == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 37, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getAllSubsets", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 37, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.ConsPart.getAllSubsets", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8ConsPart_6getAllSubsets(((struct __pyx_obj_8pygcgopt_3gcg_ConsPart *)__pyx_v_self), __pyx_v_both, __pyx_v_only_master, __pyx_v_only_pricing);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_8ConsPart_6getAllSubsets(struct __pyx_obj_8pygcgopt_3gcg_ConsPart *__pyx_v_self, bool __pyx_v_both, bool __pyx_v_only_master, bool __pyx_v_only_pricing) {
  bool __pyx_v_cpp_both;
  bool __pyx_v_cpp_only_master;
  bool __pyx_v_cpp_only_pricing;
  std::vector<std::vector<int> >  __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<std::vector<int> >  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getAllSubsets", 0);

  /* "src/pygcgopt/partition.pxi":40
 *         """returns a vector containing all possible subsets of the chosen classindices.
 *         """
 *         cdef bool cpp_both = both             # <<<<<<<<<<<<<<
 *         cdef bool cpp_only_master = only_master
 *         cdef bool cpp_only_pricing = only_pricing
 */
  __pyx_v_cpp_both = __pyx_v_both;

  /* "src/pygcgopt/partition.pxi":41
 *         """
 *         cdef bool cpp_both = both
 *         cdef bool cpp_only_master = only_master             # <<<<<<<<<<<<<<
 *         cdef bool cpp_only_pricing = only_pricing
 *         cdef vector[vector[int]] result = self.thisptr.getAllSubsets(cpp_both, cpp_only_master, cpp_only_pricing)
 */
  __pyx_v_cpp_only_master = __pyx_v_only_master;

  /* "src/pygcgopt/partition.pxi":42
 *         cdef bool cpp_both = both
 *         cdef bool cpp_only_master = only_master
 *         cdef bool cpp_only_pricing = only_pricing             # <<<<<<<<<<<<<<
 *         cdef vector[vector[int]] result = self.thisptr.getAllSubsets(cpp_both, cpp_only_master, cpp_only_pricing)
 *         return result
 */
  __pyx_v_cpp_only_pricing = __pyx_v_only_pricing;

  /* "src/pygcgopt/partition.pxi":43
 *         cdef bool cpp_only_master = only_master
 *         cdef bool cpp_only_pricing = only_pricing
 *         cdef vector[vector[int]] result = self.thisptr.getAllSubsets(cpp_both, cpp_only_master, cpp_only_pricing)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getAllSubsets(__pyx_v_cpp_both, __pyx_v_cpp_only_master, __pyx_v_cpp_only_pricing);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 43, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/partition.pxi":44
 *         cdef bool cpp_only_pricing = only_pricing
 *         cdef vector[vector[int]] result = self.thisptr.getAllSubsets(cpp_both, cpp_only_master, cpp_only_pricing)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     # def getClassDecompInfo(ConsPart self, int classindex):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/partition.pxi":37
 *         self.thisptr.assignConsToClass(cpp_consindex, cpp_classindex)
 * 
 *     def getAllSubsets(ConsPart self, bool both, bool only_master, bool only_pricing):             # <<<<<<<<<<<<<<
 *         """returns a vector containing all possible subsets of the chosen classindices.
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.ConsPart.getAllSubsets", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/partition.pxi":53
 *     #     raise NotImplementedError()
 * 
 *     def getClassNameOfCons(ConsPart self, Constraint cons):             # <<<<<<<<<<<<<<
 *         """returns the name of the class a constraint is assigned to.
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_8ConsPart_9getClassNameOfCons(PyObject *__pyx_v_self, PyObject *__pyx_v_cons); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_8ConsPart_8getClassNameOfCons[] = "ConsPart.getClassNameOfCons(self, Constraint cons)\nreturns the name of the class a constraint is assigned to.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_8ConsPart_9getClassNameOfCons(PyObject *__pyx_v_self, PyObject *__pyx_v_cons) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getClassNameOfCons (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_cons), __pyx_ptype_9pyscipopt_4scip_Constraint, 1, "cons", 0))) __PYX_ERR(1, 53, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8ConsPart_8getClassNameOfCons(((struct __pyx_obj_8pygcgopt_3gcg_ConsPart *)__pyx_v_self), ((struct __pyx_obj_9pyscipopt_4scip_Constraint *)__pyx_v_cons));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_8ConsPart_8getClassNameOfCons(struct __pyx_obj_8pygcgopt_3gcg_ConsPart *__pyx_v_self, struct __pyx_obj_9pyscipopt_4scip_Constraint *__pyx_v_cons) {
  int __pyx_v_cpp_consindex;
  char const *__pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getClassNameOfCons", 0);

  /* "src/pygcgopt/partition.pxi":56
 *         """returns the name of the class a constraint is assigned to.
 *         """
 *         cdef int cpp_consindex = self.detProbData.getIndexForCons(cons)             # <<<<<<<<<<<<<<
 *         cdef const char * result = self.thisptr.getClassNameOfCons(cpp_consindex)
 *         return result.decode('utf-8')
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->detProbData), __pyx_n_s_getIndexForCons); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, ((PyObject *)__pyx_v_cons)) : __Pyx_PyObject_CallOneArg(__pyx_t_2, ((PyObject *)__pyx_v_cons));
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 56, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_cpp_consindex = __pyx_t_4;

  /* "src/pygcgopt/partition.pxi":57
 *         """
 *         cdef int cpp_consindex = self.detProbData.getIndexForCons(cons)
 *         cdef const char * result = self.thisptr.getClassNameOfCons(cpp_consindex)             # <<<<<<<<<<<<<<
 *         return result.decode('utf-8')
 * 
 */
  __pyx_v_result = __pyx_v_self->thisptr->getClassNameOfCons(__pyx_v_cpp_consindex);

  /* "src/pygcgopt/partition.pxi":58
 *         cdef int cpp_consindex = self.detProbData.getIndexForCons(cons)
 *         cdef const char * result = self.thisptr.getClassNameOfCons(cpp_consindex)
 *         return result.decode('utf-8')             # <<<<<<<<<<<<<<
 * 
 *     def getClassOfCons(ConsPart self, Constraint cons):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_decode_c_string(__pyx_v_result, 0, strlen(__pyx_v_result), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/partition.pxi":53
 *     #     raise NotImplementedError()
 * 
 *     def getClassNameOfCons(ConsPart self, Constraint cons):             # <<<<<<<<<<<<<<
 *         """returns the name of the class a constraint is assigned to.
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygcgopt.gcg.ConsPart.getClassNameOfCons", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/partition.pxi":60
 *         return result.decode('utf-8')
 * 
 *     def getClassOfCons(ConsPart self, Constraint cons):             # <<<<<<<<<<<<<<
 *         """returns the index of the class a constraint is assigned to.
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_8ConsPart_11getClassOfCons(PyObject *__pyx_v_self, PyObject *__pyx_v_cons); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_8ConsPart_10getClassOfCons[] = "ConsPart.getClassOfCons(self, Constraint cons)\nreturns the index of the class a constraint is assigned to.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_8ConsPart_11getClassOfCons(PyObject *__pyx_v_self, PyObject *__pyx_v_cons) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getClassOfCons (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_cons), __pyx_ptype_9pyscipopt_4scip_Constraint, 1, "cons", 0))) __PYX_ERR(1, 60, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8ConsPart_10getClassOfCons(((struct __pyx_obj_8pygcgopt_3gcg_ConsPart *)__pyx_v_self), ((struct __pyx_obj_9pyscipopt_4scip_Constraint *)__pyx_v_cons));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_8ConsPart_10getClassOfCons(struct __pyx_obj_8pygcgopt_3gcg_ConsPart *__pyx_v_self, struct __pyx_obj_9pyscipopt_4scip_Constraint *__pyx_v_cons) {
  int __pyx_v_cpp_consindex;
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getClassOfCons", 0);

  /* "src/pygcgopt/partition.pxi":63
 *         """returns the index of the class a constraint is assigned to.
 *         """
 *         cdef int cpp_consindex = self.detProbData.getIndexForCons(cons)             # <<<<<<<<<<<<<<
 *         cdef int result = self.thisptr.getClassOfCons(cpp_consindex)
 *         return result
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->detProbData), __pyx_n_s_getIndexForCons); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, ((PyObject *)__pyx_v_cons)) : __Pyx_PyObject_CallOneArg(__pyx_t_2, ((PyObject *)__pyx_v_cons));
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 63, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_cpp_consindex = __pyx_t_4;

  /* "src/pygcgopt/partition.pxi":64
 *         """
 *         cdef int cpp_consindex = self.detProbData.getIndexForCons(cons)
 *         cdef int result = self.thisptr.getClassOfCons(cpp_consindex)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_4 = __pyx_v_self->thisptr->getClassOfCons(__pyx_v_cpp_consindex);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 64, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_4;

  /* "src/pygcgopt/partition.pxi":65
 *         cdef int cpp_consindex = self.detProbData.getIndexForCons(cons)
 *         cdef int result = self.thisptr.getClassOfCons(cpp_consindex)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     # def getConssToClasses(ConsPart self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/partition.pxi":60
 *         return result.decode('utf-8')
 * 
 *     def getClassOfCons(ConsPart self, Constraint cons):             # <<<<<<<<<<<<<<
 *         """returns the index of the class a constraint is assigned to.
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygcgopt.gcg.ConsPart.getClassOfCons", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/partition.pxi":73
 *     #     raise NotImplementedError()
 * 
 *     def getNConss(ConsPart self):             # <<<<<<<<<<<<<<
 *         """returns the number of constraints.
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_8ConsPart_13getNConss(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_8ConsPart_12getNConss[] = "ConsPart.getNConss(self)\nreturns the number of constraints.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_8ConsPart_13getNConss(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNConss (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8ConsPart_12getNConss(((struct __pyx_obj_8pygcgopt_3gcg_ConsPart *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_8ConsPart_12getNConss(struct __pyx_obj_8pygcgopt_3gcg_ConsPart *__pyx_v_self) {
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNConss", 0);

  /* "src/pygcgopt/partition.pxi":76
 *         """returns the number of constraints.
 *         """
 *         cdef int result = self.thisptr.getNConss()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getNConss();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 76, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/partition.pxi":77
 *         """
 *         cdef int result = self.thisptr.getNConss()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getNConssOfClasses(ConsPart self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/partition.pxi":73
 *     #     raise NotImplementedError()
 * 
 *     def getNConss(ConsPart self):             # <<<<<<<<<<<<<<
 *         """returns the number of constraints.
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.ConsPart.getNConss", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/partition.pxi":79
 *         return result
 * 
 *     def getNConssOfClasses(ConsPart self):             # <<<<<<<<<<<<<<
 *         """returns a vector with the numbers of constraints that are assigned to the classes.
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_8ConsPart_15getNConssOfClasses(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_8ConsPart_14getNConssOfClasses[] = "ConsPart.getNConssOfClasses(self)\nreturns a vector with the numbers of constraints that are assigned to the classes.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_8ConsPart_15getNConssOfClasses(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNConssOfClasses (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8ConsPart_14getNConssOfClasses(((struct __pyx_obj_8pygcgopt_3gcg_ConsPart *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_8ConsPart_14getNConssOfClasses(struct __pyx_obj_8pygcgopt_3gcg_ConsPart *__pyx_v_self) {
  std::vector<int>  __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<int>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNConssOfClasses", 0);

  /* "src/pygcgopt/partition.pxi":82
 *         """returns a vector with the numbers of constraints that are assigned to the classes.
 *         """
 *         cdef vector[int] result = self.thisptr.getNConssOfClasses()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getNConssOfClasses();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 82, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/partition.pxi":83
 *         """
 *         cdef vector[int] result = self.thisptr.getNConssOfClasses()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def isConsClassified(ConsPart self, Constraint cons):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_vector_to_py_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/partition.pxi":79
 *         return result
 * 
 *     def getNConssOfClasses(ConsPart self):             # <<<<<<<<<<<<<<
 *         """returns a vector with the numbers of constraints that are assigned to the classes.
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.ConsPart.getNConssOfClasses", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/partition.pxi":85
 *         return result
 * 
 *     def isConsClassified(ConsPart self, Constraint cons):             # <<<<<<<<<<<<<<
 *         """returns whether a constraint is already assigned to a class.
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_8ConsPart_17isConsClassified(PyObject *__pyx_v_self, PyObject *__pyx_v_cons); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_8ConsPart_16isConsClassified[] = "ConsPart.isConsClassified(self, Constraint cons)\nreturns whether a constraint is already assigned to a class.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_8ConsPart_17isConsClassified(PyObject *__pyx_v_self, PyObject *__pyx_v_cons) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isConsClassified (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_cons), __pyx_ptype_9pyscipopt_4scip_Constraint, 1, "cons", 0))) __PYX_ERR(1, 85, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8ConsPart_16isConsClassified(((struct __pyx_obj_8pygcgopt_3gcg_ConsPart *)__pyx_v_self), ((struct __pyx_obj_9pyscipopt_4scip_Constraint *)__pyx_v_cons));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_8ConsPart_16isConsClassified(struct __pyx_obj_8pygcgopt_3gcg_ConsPart *__pyx_v_self, struct __pyx_obj_9pyscipopt_4scip_Constraint *__pyx_v_cons) {
  int __pyx_v_cpp_consindex;
  bool __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isConsClassified", 0);

  /* "src/pygcgopt/partition.pxi":88
 *         """returns whether a constraint is already assigned to a class.
 *         """
 *         cdef int cpp_consindex = self.detProbData.getIndexForCons(cons)             # <<<<<<<<<<<<<<
 *         cdef bool result = self.thisptr.isConsClassified(cpp_consindex)
 *         return result
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->detProbData), __pyx_n_s_getIndexForCons); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, ((PyObject *)__pyx_v_cons)) : __Pyx_PyObject_CallOneArg(__pyx_t_2, ((PyObject *)__pyx_v_cons));
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 88, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_cpp_consindex = __pyx_t_4;

  /* "src/pygcgopt/partition.pxi":89
 *         """
 *         cdef int cpp_consindex = self.detProbData.getIndexForCons(cons)
 *         cdef bool result = self.thisptr.isConsClassified(cpp_consindex)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_5 = __pyx_v_self->thisptr->isConsClassified(__pyx_v_cpp_consindex);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 89, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_5;

  /* "src/pygcgopt/partition.pxi":90
 *         cdef int cpp_consindex = self.detProbData.getIndexForCons(cons)
 *         cdef bool result = self.thisptr.isConsClassified(cpp_consindex)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def reduceClasses(ConsPart self, int maxNumberOfClasses):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/partition.pxi":85
 *         return result
 * 
 *     def isConsClassified(ConsPart self, Constraint cons):             # <<<<<<<<<<<<<<
 *         """returns whether a constraint is already assigned to a class.
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygcgopt.gcg.ConsPart.isConsClassified", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/partition.pxi":92
 *         return result
 * 
 *     def reduceClasses(ConsPart self, int maxNumberOfClasses):             # <<<<<<<<<<<<<<
 *         """returns partition with reduced number of classes
 *         if the current number of classes is greater than an upper bound
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_8ConsPart_19reduceClasses(PyObject *__pyx_v_self, PyObject *__pyx_arg_maxNumberOfClasses); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_8ConsPart_18reduceClasses[] = "ConsPart.reduceClasses(self, int maxNumberOfClasses)\nreturns partition with reduced number of classes\n        if the current number of classes is greater than an upper bound\n        and lower than 2*(upper bound) (returns NULL otherwise).\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_8ConsPart_19reduceClasses(PyObject *__pyx_v_self, PyObject *__pyx_arg_maxNumberOfClasses) {
  int __pyx_v_maxNumberOfClasses;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reduceClasses (wrapper)", 0);
  assert(__pyx_arg_maxNumberOfClasses); {
    __pyx_v_maxNumberOfClasses = __Pyx_PyInt_As_int(__pyx_arg_maxNumberOfClasses); if (unlikely((__pyx_v_maxNumberOfClasses == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 92, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.ConsPart.reduceClasses", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8ConsPart_18reduceClasses(((struct __pyx_obj_8pygcgopt_3gcg_ConsPart *)__pyx_v_self), ((int)__pyx_v_maxNumberOfClasses));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_8ConsPart_18reduceClasses(struct __pyx_obj_8pygcgopt_3gcg_ConsPart *__pyx_v_self, int __pyx_v_maxNumberOfClasses) {
  int __pyx_v_cpp_maxNumberOfClasses;
  gcg::ConsPartition *__pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  gcg::ConsPartition *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("reduceClasses", 0);

  /* "src/pygcgopt/partition.pxi":97
 *         and lower than 2*(upper bound) (returns NULL otherwise).
 *         """
 *         cdef int cpp_maxNumberOfClasses = maxNumberOfClasses             # <<<<<<<<<<<<<<
 *         cdef ConsPartition * result = self.thisptr.reduceClasses(cpp_maxNumberOfClasses)
 *         return ConsPart.create(result, self.detProbData)
 */
  __pyx_v_cpp_maxNumberOfClasses = __pyx_v_maxNumberOfClasses;

  /* "src/pygcgopt/partition.pxi":98
 *         """
 *         cdef int cpp_maxNumberOfClasses = maxNumberOfClasses
 *         cdef ConsPartition * result = self.thisptr.reduceClasses(cpp_maxNumberOfClasses)             # <<<<<<<<<<<<<<
 *         return ConsPart.create(result, self.detProbData)
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->reduceClasses(__pyx_v_cpp_maxNumberOfClasses);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 98, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/partition.pxi":99
 *         cdef int cpp_maxNumberOfClasses = maxNumberOfClasses
 *         cdef ConsPartition * result = self.thisptr.reduceClasses(cpp_maxNumberOfClasses)
 *         return ConsPart.create(result, self.detProbData)             # <<<<<<<<<<<<<<
 * 
 *     def getName(ConsPart self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = ((PyObject *)__pyx_v_self->detProbData);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = __pyx_f_8pygcgopt_3gcg_8ConsPart_create(__pyx_v_result, ((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/partition.pxi":92
 *         return result
 * 
 *     def reduceClasses(ConsPart self, int maxNumberOfClasses):             # <<<<<<<<<<<<<<
 *         """returns partition with reduced number of classes
 *         if the current number of classes is greater than an upper bound
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygcgopt.gcg.ConsPart.reduceClasses", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/partition.pxi":101
 *         return ConsPart.create(result, self.detProbData)
 * 
 *     def getName(ConsPart self):             # <<<<<<<<<<<<<<
 *         """returns the name of the partition"""
 *         return self.thisptr.getName().decode('utf-8')
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_8ConsPart_21getName(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_8ConsPart_20getName[] = "ConsPart.getName(self)\nreturns the name of the partition";
static PyObject *__pyx_pw_8pygcgopt_3gcg_8ConsPart_21getName(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getName (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8ConsPart_20getName(((struct __pyx_obj_8pygcgopt_3gcg_ConsPart *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_8ConsPart_20getName(struct __pyx_obj_8pygcgopt_3gcg_ConsPart *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getName", 0);

  /* "src/pygcgopt/partition.pxi":103
 *     def getName(ConsPart self):
 *         """returns the name of the partition"""
 *         return self.thisptr.getName().decode('utf-8')             # <<<<<<<<<<<<<<
 * 
 *     # def setClassDecompInfo(ConsPart self, int classindex, CONS_DECOMPINFO decompInfo):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getName();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 103, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_decode_c_string(__pyx_t_1, 0, strlen(__pyx_t_1), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/partition.pxi":101
 *         return ConsPart.create(result, self.detProbData)
 * 
 *     def getName(ConsPart self):             # <<<<<<<<<<<<<<
 *         """returns the name of the partition"""
 *         return self.thisptr.getName().decode('utf-8')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.ConsPart.getName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/partition.pxi":111
 *     #     raise NotImplementedError()
 * 
 *     def __repr__(ConsPart self):             # <<<<<<<<<<<<<<
 *         return f"<ConsPart: name={self.getName()}>"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_8ConsPart_23__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygcgopt_3gcg_8ConsPart_23__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8ConsPart_22__repr__(((struct __pyx_obj_8pygcgopt_3gcg_ConsPart *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_8ConsPart_22__repr__(struct __pyx_obj_8pygcgopt_3gcg_ConsPart *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "src/pygcgopt/partition.pxi":112
 * 
 *     def __repr__(ConsPart self):
 *         return f"<ConsPart: name={self.getName()}>"             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __Pyx_INCREF(__pyx_kp_u_ConsPart_name);
  __pyx_t_2 += 16;
  __Pyx_GIVEREF(__pyx_kp_u_ConsPart_name);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_ConsPart_name);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getName); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_kp_u__3);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__3);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u__3);
  __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/partition.pxi":111
 *     #     raise NotImplementedError()
 * 
 *     def __repr__(ConsPart self):             # <<<<<<<<<<<<<<
 *         return f"<ConsPart: name={self.getName()}>"
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pygcgopt.gcg.ConsPart.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_8ConsPart_25__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_8ConsPart_24__reduce_cython__[] = "ConsPart.__reduce_cython__(self)";
static PyObject *__pyx_pw_8pygcgopt_3gcg_8ConsPart_25__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8ConsPart_24__reduce_cython__(((struct __pyx_obj_8pygcgopt_3gcg_ConsPart *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_8ConsPart_24__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_ConsPart *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(4, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygcgopt.gcg.ConsPart.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_8ConsPart_27__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_8ConsPart_26__setstate_cython__[] = "ConsPart.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_8pygcgopt_3gcg_8ConsPart_27__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8ConsPart_26__setstate_cython__(((struct __pyx_obj_8pygcgopt_3gcg_ConsPart *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_8ConsPart_26__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_ConsPart *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(4, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygcgopt.gcg.ConsPart.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/partition.pxi":119
 *     cdef bool delete_thisptr
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 *         self.delete_thisptr = True
 */

/* Python wrapper */
static int __pyx_pw_8pygcgopt_3gcg_7VarPart_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pygcgopt_3gcg_7VarPart_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_7VarPart___cinit__(((struct __pyx_obj_8pygcgopt_3gcg_VarPart *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygcgopt_3gcg_7VarPart___cinit__(struct __pyx_obj_8pygcgopt_3gcg_VarPart *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "src/pygcgopt/partition.pxi":120
 * 
 *     def __cinit__(self):
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 *         self.delete_thisptr = True
 * 
 */
  __pyx_v_self->thisptr = NULL;

  /* "src/pygcgopt/partition.pxi":121
 *     def __cinit__(self):
 *         self.thisptr = NULL
 *         self.delete_thisptr = True             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->delete_thisptr = 1;

  /* "src/pygcgopt/partition.pxi":119
 *     cdef bool delete_thisptr
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 *         self.delete_thisptr = True
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/partition.pxi":123
 *         self.delete_thisptr = True
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.delete_thisptr and self.thisptr != NULL:
 *             del self.thisptr
 */

/* Python wrapper */
static void __pyx_pw_8pygcgopt_3gcg_7VarPart_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pygcgopt_3gcg_7VarPart_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pygcgopt_3gcg_7VarPart_2__dealloc__(((struct __pyx_obj_8pygcgopt_3gcg_VarPart *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pygcgopt_3gcg_7VarPart_2__dealloc__(struct __pyx_obj_8pygcgopt_3gcg_VarPart *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "src/pygcgopt/partition.pxi":124
 * 
 *     def __dealloc__(self):
 *         if self.delete_thisptr and self.thisptr != NULL:             # <<<<<<<<<<<<<<
 *             del self.thisptr
 * 
 */
  __pyx_t_2 = (__pyx_v_self->delete_thisptr != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_self->thisptr != NULL) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "src/pygcgopt/partition.pxi":125
 *     def __dealloc__(self):
 *         if self.delete_thisptr and self.thisptr != NULL:
 *             del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    delete __pyx_v_self->thisptr;

    /* "src/pygcgopt/partition.pxi":124
 * 
 *     def __dealloc__(self):
 *         if self.delete_thisptr and self.thisptr != NULL:             # <<<<<<<<<<<<<<
 *             del self.thisptr
 * 
 */
  }

  /* "src/pygcgopt/partition.pxi":123
 *         self.delete_thisptr = True
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.delete_thisptr and self.thisptr != NULL:
 *             del self.thisptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "src/pygcgopt/partition.pxi":128
 * 
 *     @staticmethod
 *     cdef create(VarPartition* thisptr):             # <<<<<<<<<<<<<<
 *         if thisptr == NULL:
 *             raise Warning("cannot create VarPart with VarPartition* == NULL")
 */

static PyObject *__pyx_f_8pygcgopt_3gcg_7VarPart_create(gcg::VarPartition *__pyx_v_thisptr) {
  struct __pyx_obj_8pygcgopt_3gcg_VarPart *__pyx_v_new_VarPart = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create", 0);

  /* "src/pygcgopt/partition.pxi":129
 *     @staticmethod
 *     cdef create(VarPartition* thisptr):
 *         if thisptr == NULL:             # <<<<<<<<<<<<<<
 *             raise Warning("cannot create VarPart with VarPartition* == NULL")
 *         new_VarPart = VarPart()
 */
  __pyx_t_1 = ((__pyx_v_thisptr == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "src/pygcgopt/partition.pxi":130
 *     cdef create(VarPartition* thisptr):
 *         if thisptr == NULL:
 *             raise Warning("cannot create VarPart with VarPartition* == NULL")             # <<<<<<<<<<<<<<
 *         new_VarPart = VarPart()
 *         new_VarPart.thisptr = thisptr
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_Warning, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 130, __pyx_L1_error)

    /* "src/pygcgopt/partition.pxi":129
 *     @staticmethod
 *     cdef create(VarPartition* thisptr):
 *         if thisptr == NULL:             # <<<<<<<<<<<<<<
 *             raise Warning("cannot create VarPart with VarPartition* == NULL")
 *         new_VarPart = VarPart()
 */
  }

  /* "src/pygcgopt/partition.pxi":131
 *         if thisptr == NULL:
 *             raise Warning("cannot create VarPart with VarPartition* == NULL")
 *         new_VarPart = VarPart()             # <<<<<<<<<<<<<<
 *         new_VarPart.thisptr = thisptr
 *         new_VarPart.delete_thisptr = False
 */
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygcgopt_3gcg_VarPart)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_new_VarPart = ((struct __pyx_obj_8pygcgopt_3gcg_VarPart *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "src/pygcgopt/partition.pxi":132
 *             raise Warning("cannot create VarPart with VarPartition* == NULL")
 *         new_VarPart = VarPart()
 *         new_VarPart.thisptr = thisptr             # <<<<<<<<<<<<<<
 *         new_VarPart.delete_thisptr = False
 *         return new_VarPart
 */
  __pyx_v_new_VarPart->thisptr = __pyx_v_thisptr;

  /* "src/pygcgopt/partition.pxi":133
 *         new_VarPart = VarPart()
 *         new_VarPart.thisptr = thisptr
 *         new_VarPart.delete_thisptr = False             # <<<<<<<<<<<<<<
 *         return new_VarPart
 * 
 */
  __pyx_v_new_VarPart->delete_thisptr = 0;

  /* "src/pygcgopt/partition.pxi":134
 *         new_VarPart.thisptr = thisptr
 *         new_VarPart.delete_thisptr = False
 *         return new_VarPart             # <<<<<<<<<<<<<<
 * 
 *     # def addClass(VarPart self, name, desc, VAR_DECOMPINFO decompInfo):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_new_VarPart));
  __pyx_r = ((PyObject *)__pyx_v_new_VarPart);
  goto __pyx_L0;

  /* "src/pygcgopt/partition.pxi":128
 * 
 *     @staticmethod
 *     cdef create(VarPartition* thisptr):             # <<<<<<<<<<<<<<
 *         if thisptr == NULL:
 *             raise Warning("cannot create VarPart with VarPartition* == NULL")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.VarPart.create", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_new_VarPart);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/partition.pxi":142
 *     #     raise NotImplementedError()
 * 
 *     def assignVarToClass(VarPart self, int varindex, int classindex):             # <<<<<<<<<<<<<<
 *         """assigns a variable to a class.
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_7VarPart_5assignVarToClass(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_7VarPart_4assignVarToClass[] = "VarPart.assignVarToClass(self, int varindex, int classindex)\nassigns a variable to a class.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_7VarPart_5assignVarToClass(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_varindex;
  int __pyx_v_classindex;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("assignVarToClass (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_varindex,&__pyx_n_s_classindex,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_varindex)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_classindex)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("assignVarToClass", 1, 2, 2, 1); __PYX_ERR(1, 142, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "assignVarToClass") < 0)) __PYX_ERR(1, 142, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_varindex = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_varindex == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 142, __pyx_L3_error)
    __pyx_v_classindex = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_classindex == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 142, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("assignVarToClass", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 142, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.VarPart.assignVarToClass", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_7VarPart_4assignVarToClass(((struct __pyx_obj_8pygcgopt_3gcg_VarPart *)__pyx_v_self), __pyx_v_varindex, __pyx_v_classindex);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_7VarPart_4assignVarToClass(struct __pyx_obj_8pygcgopt_3gcg_VarPart *__pyx_v_self, int __pyx_v_varindex, int __pyx_v_classindex) {
  int __pyx_v_cpp_varindex;
  int __pyx_v_cpp_classindex;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assignVarToClass", 0);

  /* "src/pygcgopt/partition.pxi":145
 *         """assigns a variable to a class.
 *         """
 *         cdef int cpp_varindex = varindex             # <<<<<<<<<<<<<<
 *         cdef int cpp_classindex = classindex
 *         self.thisptr.assignVarToClass(cpp_varindex, cpp_classindex)
 */
  __pyx_v_cpp_varindex = __pyx_v_varindex;

  /* "src/pygcgopt/partition.pxi":146
 *         """
 *         cdef int cpp_varindex = varindex
 *         cdef int cpp_classindex = classindex             # <<<<<<<<<<<<<<
 *         self.thisptr.assignVarToClass(cpp_varindex, cpp_classindex)
 * 
 */
  __pyx_v_cpp_classindex = __pyx_v_classindex;

  /* "src/pygcgopt/partition.pxi":147
 *         cdef int cpp_varindex = varindex
 *         cdef int cpp_classindex = classindex
 *         self.thisptr.assignVarToClass(cpp_varindex, cpp_classindex)             # <<<<<<<<<<<<<<
 * 
 *     def getAllSubsets(VarPart self, bool all, bool linking, bool master, bool block):
 */
  try {
    __pyx_v_self->thisptr->assignVarToClass(__pyx_v_cpp_varindex, __pyx_v_cpp_classindex);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 147, __pyx_L1_error)
  }

  /* "src/pygcgopt/partition.pxi":142
 *     #     raise NotImplementedError()
 * 
 *     def assignVarToClass(VarPart self, int varindex, int classindex):             # <<<<<<<<<<<<<<
 *         """assigns a variable to a class.
 *         """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.VarPart.assignVarToClass", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/partition.pxi":149
 *         self.thisptr.assignVarToClass(cpp_varindex, cpp_classindex)
 * 
 *     def getAllSubsets(VarPart self, bool all, bool linking, bool master, bool block):             # <<<<<<<<<<<<<<
 *         """returns a vector containing all possible subsets of the chosen classindices.
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_7VarPart_7getAllSubsets(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_7VarPart_6getAllSubsets[] = "VarPart.getAllSubsets(self, bool all, bool linking, bool master, bool block)\nreturns a vector containing all possible subsets of the chosen classindices.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_7VarPart_7getAllSubsets(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  bool __pyx_v_all;
  bool __pyx_v_linking;
  bool __pyx_v_master;
  bool __pyx_v_block;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getAllSubsets (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_all,&__pyx_n_s_linking,&__pyx_n_s_master,&__pyx_n_s_block,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_all)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_linking)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getAllSubsets", 1, 4, 4, 1); __PYX_ERR(1, 149, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_master)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getAllSubsets", 1, 4, 4, 2); __PYX_ERR(1, 149, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_block)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getAllSubsets", 1, 4, 4, 3); __PYX_ERR(1, 149, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getAllSubsets") < 0)) __PYX_ERR(1, 149, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_all = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_all == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 149, __pyx_L3_error)
    __pyx_v_linking = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_linking == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 149, __pyx_L3_error)
    __pyx_v_master = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_master == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 149, __pyx_L3_error)
    __pyx_v_block = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_block == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 149, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getAllSubsets", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 149, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.VarPart.getAllSubsets", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_7VarPart_6getAllSubsets(((struct __pyx_obj_8pygcgopt_3gcg_VarPart *)__pyx_v_self), __pyx_v_all, __pyx_v_linking, __pyx_v_master, __pyx_v_block);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_7VarPart_6getAllSubsets(struct __pyx_obj_8pygcgopt_3gcg_VarPart *__pyx_v_self, bool __pyx_v_all, bool __pyx_v_linking, bool __pyx_v_master, bool __pyx_v_block) {
  bool __pyx_v_cpp_all;
  bool __pyx_v_cpp_linking;
  bool __pyx_v_cpp_master;
  bool __pyx_v_cpp_block;
  std::vector<std::vector<int> >  __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<std::vector<int> >  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getAllSubsets", 0);

  /* "src/pygcgopt/partition.pxi":152
 *         """returns a vector containing all possible subsets of the chosen classindices.
 *         """
 *         cdef bool cpp_all = all             # <<<<<<<<<<<<<<
 *         cdef bool cpp_linking = linking
 *         cdef bool cpp_master = master
 */
  __pyx_v_cpp_all = __pyx_v_all;

  /* "src/pygcgopt/partition.pxi":153
 *         """
 *         cdef bool cpp_all = all
 *         cdef bool cpp_linking = linking             # <<<<<<<<<<<<<<
 *         cdef bool cpp_master = master
 *         cdef bool cpp_block = block
 */
  __pyx_v_cpp_linking = __pyx_v_linking;

  /* "src/pygcgopt/partition.pxi":154
 *         cdef bool cpp_all = all
 *         cdef bool cpp_linking = linking
 *         cdef bool cpp_master = master             # <<<<<<<<<<<<<<
 *         cdef bool cpp_block = block
 *         cdef vector[vector[int]] result = self.thisptr.getAllSubsets(cpp_all, cpp_linking, cpp_master, cpp_block)
 */
  __pyx_v_cpp_master = __pyx_v_master;

  /* "src/pygcgopt/partition.pxi":155
 *         cdef bool cpp_linking = linking
 *         cdef bool cpp_master = master
 *         cdef bool cpp_block = block             # <<<<<<<<<<<<<<
 *         cdef vector[vector[int]] result = self.thisptr.getAllSubsets(cpp_all, cpp_linking, cpp_master, cpp_block)
 *         return result
 */
  __pyx_v_cpp_block = __pyx_v_block;

  /* "src/pygcgopt/partition.pxi":156
 *         cdef bool cpp_master = master
 *         cdef bool cpp_block = block
 *         cdef vector[vector[int]] result = self.thisptr.getAllSubsets(cpp_all, cpp_linking, cpp_master, cpp_block)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getAllSubsets(__pyx_v_cpp_all, __pyx_v_cpp_linking, __pyx_v_cpp_master, __pyx_v_cpp_block);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 156, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/partition.pxi":157
 *         cdef bool cpp_block = block
 *         cdef vector[vector[int]] result = self.thisptr.getAllSubsets(cpp_all, cpp_linking, cpp_master, cpp_block)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     # def getClassDecompInfo(VarPart self, int classindex):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/partition.pxi":149
 *         self.thisptr.assignVarToClass(cpp_varindex, cpp_classindex)
 * 
 *     def getAllSubsets(VarPart self, bool all, bool linking, bool master, bool block):             # <<<<<<<<<<<<<<
 *         """returns a vector containing all possible subsets of the chosen classindices.
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.VarPart.getAllSubsets", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/partition.pxi":166
 *     #     raise NotImplementedError()
 * 
 *     def getClassNameOfVar(VarPart self, int varindex):             # <<<<<<<<<<<<<<
 *         """returns the name of the class a variable is assigned to.
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_7VarPart_9getClassNameOfVar(PyObject *__pyx_v_self, PyObject *__pyx_arg_varindex); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_7VarPart_8getClassNameOfVar[] = "VarPart.getClassNameOfVar(self, int varindex)\nreturns the name of the class a variable is assigned to.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_7VarPart_9getClassNameOfVar(PyObject *__pyx_v_self, PyObject *__pyx_arg_varindex) {
  int __pyx_v_varindex;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getClassNameOfVar (wrapper)", 0);
  assert(__pyx_arg_varindex); {
    __pyx_v_varindex = __Pyx_PyInt_As_int(__pyx_arg_varindex); if (unlikely((__pyx_v_varindex == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 166, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.VarPart.getClassNameOfVar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_7VarPart_8getClassNameOfVar(((struct __pyx_obj_8pygcgopt_3gcg_VarPart *)__pyx_v_self), ((int)__pyx_v_varindex));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_7VarPart_8getClassNameOfVar(struct __pyx_obj_8pygcgopt_3gcg_VarPart *__pyx_v_self, int __pyx_v_varindex) {
  int __pyx_v_cpp_varindex;
  char const *__pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getClassNameOfVar", 0);

  /* "src/pygcgopt/partition.pxi":169
 *         """returns the name of the class a variable is assigned to.
 *         """
 *         cdef int cpp_varindex = varindex             # <<<<<<<<<<<<<<
 *         cdef const char * result = self.thisptr.getClassNameOfVar(cpp_varindex)
 *         return result.decode('utf-8')
 */
  __pyx_v_cpp_varindex = __pyx_v_varindex;

  /* "src/pygcgopt/partition.pxi":170
 *         """
 *         cdef int cpp_varindex = varindex
 *         cdef const char * result = self.thisptr.getClassNameOfVar(cpp_varindex)             # <<<<<<<<<<<<<<
 *         return result.decode('utf-8')
 * 
 */
  __pyx_v_result = __pyx_v_self->thisptr->getClassNameOfVar(__pyx_v_cpp_varindex);

  /* "src/pygcgopt/partition.pxi":171
 *         cdef int cpp_varindex = varindex
 *         cdef const char * result = self.thisptr.getClassNameOfVar(cpp_varindex)
 *         return result.decode('utf-8')             # <<<<<<<<<<<<<<
 * 
 *     def getClassOfVar(VarPart self, int varindex):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_decode_c_string(__pyx_v_result, 0, strlen(__pyx_v_result), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/partition.pxi":166
 *     #     raise NotImplementedError()
 * 
 *     def getClassNameOfVar(VarPart self, int varindex):             # <<<<<<<<<<<<<<
 *         """returns the name of the class a variable is assigned to.
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygcgopt.gcg.VarPart.getClassNameOfVar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/partition.pxi":173
 *         return result.decode('utf-8')
 * 
 *     def getClassOfVar(VarPart self, int varindex):             # <<<<<<<<<<<<<<
 *         """returns the index of the class a variable is assigned to.
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_7VarPart_11getClassOfVar(PyObject *__pyx_v_self, PyObject *__pyx_arg_varindex); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_7VarPart_10getClassOfVar[] = "VarPart.getClassOfVar(self, int varindex)\nreturns the index of the class a variable is assigned to.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_7VarPart_11getClassOfVar(PyObject *__pyx_v_self, PyObject *__pyx_arg_varindex) {
  int __pyx_v_varindex;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getClassOfVar (wrapper)", 0);
  assert(__pyx_arg_varindex); {
    __pyx_v_varindex = __Pyx_PyInt_As_int(__pyx_arg_varindex); if (unlikely((__pyx_v_varindex == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 173, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.VarPart.getClassOfVar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_7VarPart_10getClassOfVar(((struct __pyx_obj_8pygcgopt_3gcg_VarPart *)__pyx_v_self), ((int)__pyx_v_varindex));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_7VarPart_10getClassOfVar(struct __pyx_obj_8pygcgopt_3gcg_VarPart *__pyx_v_self, int __pyx_v_varindex) {
  int __pyx_v_cpp_varindex;
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getClassOfVar", 0);

  /* "src/pygcgopt/partition.pxi":176
 *         """returns the index of the class a variable is assigned to.
 *         """
 *         cdef int cpp_varindex = varindex             # <<<<<<<<<<<<<<
 *         cdef int result = self.thisptr.getClassOfVar(cpp_varindex)
 *         return result
 */
  __pyx_v_cpp_varindex = __pyx_v_varindex;

  /* "src/pygcgopt/partition.pxi":177
 *         """
 *         cdef int cpp_varindex = varindex
 *         cdef int result = self.thisptr.getClassOfVar(cpp_varindex)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getClassOfVar(__pyx_v_cpp_varindex);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 177, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/partition.pxi":178
 *         cdef int cpp_varindex = varindex
 *         cdef int result = self.thisptr.getClassOfVar(cpp_varindex)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     # def getVarsToClasses(VarPart self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/partition.pxi":173
 *         return result.decode('utf-8')
 * 
 *     def getClassOfVar(VarPart self, int varindex):             # <<<<<<<<<<<<<<
 *         """returns the index of the class a variable is assigned to.
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.VarPart.getClassOfVar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/partition.pxi":186
 *     #     raise NotImplementedError()
 * 
 *     def getNVars(VarPart self):             # <<<<<<<<<<<<<<
 *         """returns the number of variables.
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_7VarPart_13getNVars(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_7VarPart_12getNVars[] = "VarPart.getNVars(self)\nreturns the number of variables.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_7VarPart_13getNVars(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNVars (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_7VarPart_12getNVars(((struct __pyx_obj_8pygcgopt_3gcg_VarPart *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_7VarPart_12getNVars(struct __pyx_obj_8pygcgopt_3gcg_VarPart *__pyx_v_self) {
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNVars", 0);

  /* "src/pygcgopt/partition.pxi":189
 *         """returns the number of variables.
 *         """
 *         cdef int result = self.thisptr.getNVars()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getNVars();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 189, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/partition.pxi":190
 *         """
 *         cdef int result = self.thisptr.getNVars()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getNVarsOfClasses(VarPart self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/partition.pxi":186
 *     #     raise NotImplementedError()
 * 
 *     def getNVars(VarPart self):             # <<<<<<<<<<<<<<
 *         """returns the number of variables.
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.VarPart.getNVars", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/partition.pxi":192
 *         return result
 * 
 *     def getNVarsOfClasses(VarPart self):             # <<<<<<<<<<<<<<
 *         """returns a vector with the numbers of variables that are assigned to the classes.
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_7VarPart_15getNVarsOfClasses(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_7VarPart_14getNVarsOfClasses[] = "VarPart.getNVarsOfClasses(self)\nreturns a vector with the numbers of variables that are assigned to the classes.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_7VarPart_15getNVarsOfClasses(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNVarsOfClasses (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_7VarPart_14getNVarsOfClasses(((struct __pyx_obj_8pygcgopt_3gcg_VarPart *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_7VarPart_14getNVarsOfClasses(struct __pyx_obj_8pygcgopt_3gcg_VarPart *__pyx_v_self) {
  std::vector<int>  __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<int>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNVarsOfClasses", 0);

  /* "src/pygcgopt/partition.pxi":195
 *         """returns a vector with the numbers of variables that are assigned to the classes.
 *         """
 *         cdef vector[int] result = self.thisptr.getNVarsOfClasses()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getNVarsOfClasses();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 195, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/partition.pxi":196
 *         """
 *         cdef vector[int] result = self.thisptr.getNVarsOfClasses()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def isVarClassified(VarPart self, int varindex):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_vector_to_py_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/partition.pxi":192
 *         return result
 * 
 *     def getNVarsOfClasses(VarPart self):             # <<<<<<<<<<<<<<
 *         """returns a vector with the numbers of variables that are assigned to the classes.
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.VarPart.getNVarsOfClasses", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/partition.pxi":198
 *         return result
 * 
 *     def isVarClassified(VarPart self, int varindex):             # <<<<<<<<<<<<<<
 *         """returns whether a variable is already assigned to a class.
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_7VarPart_17isVarClassified(PyObject *__pyx_v_self, PyObject *__pyx_arg_varindex); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_7VarPart_16isVarClassified[] = "VarPart.isVarClassified(self, int varindex)\nreturns whether a variable is already assigned to a class.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_7VarPart_17isVarClassified(PyObject *__pyx_v_self, PyObject *__pyx_arg_varindex) {
  int __pyx_v_varindex;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isVarClassified (wrapper)", 0);
  assert(__pyx_arg_varindex); {
    __pyx_v_varindex = __Pyx_PyInt_As_int(__pyx_arg_varindex); if (unlikely((__pyx_v_varindex == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 198, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.VarPart.isVarClassified", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_7VarPart_16isVarClassified(((struct __pyx_obj_8pygcgopt_3gcg_VarPart *)__pyx_v_self), ((int)__pyx_v_varindex));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_7VarPart_16isVarClassified(struct __pyx_obj_8pygcgopt_3gcg_VarPart *__pyx_v_self, int __pyx_v_varindex) {
  int __pyx_v_cpp_varindex;
  bool __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isVarClassified", 0);

  /* "src/pygcgopt/partition.pxi":201
 *         """returns whether a variable is already assigned to a class.
 *         """
 *         cdef int cpp_varindex = varindex             # <<<<<<<<<<<<<<
 *         cdef bool result = self.thisptr.isVarClassified(cpp_varindex)
 *         return result
 */
  __pyx_v_cpp_varindex = __pyx_v_varindex;

  /* "src/pygcgopt/partition.pxi":202
 *         """
 *         cdef int cpp_varindex = varindex
 *         cdef bool result = self.thisptr.isVarClassified(cpp_varindex)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->isVarClassified(__pyx_v_cpp_varindex);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 202, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/partition.pxi":203
 *         cdef int cpp_varindex = varindex
 *         cdef bool result = self.thisptr.isVarClassified(cpp_varindex)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def reduceClasses(VarPart self, int maxNumberOfClasses):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/partition.pxi":198
 *         return result
 * 
 *     def isVarClassified(VarPart self, int varindex):             # <<<<<<<<<<<<<<
 *         """returns whether a variable is already assigned to a class.
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.VarPart.isVarClassified", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/partition.pxi":205
 *         return result
 * 
 *     def reduceClasses(VarPart self, int maxNumberOfClasses):             # <<<<<<<<<<<<<<
 *         """returns partition with reduced number of classes
 *         if the current number of classes is greater than an upper bound
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_7VarPart_19reduceClasses(PyObject *__pyx_v_self, PyObject *__pyx_arg_maxNumberOfClasses); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_7VarPart_18reduceClasses[] = "VarPart.reduceClasses(self, int maxNumberOfClasses)\nreturns partition with reduced number of classes\n        if the current number of classes is greater than an upper bound\n        and lower than 2*(upper bound) (returns NULL otherwise).\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_7VarPart_19reduceClasses(PyObject *__pyx_v_self, PyObject *__pyx_arg_maxNumberOfClasses) {
  int __pyx_v_maxNumberOfClasses;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reduceClasses (wrapper)", 0);
  assert(__pyx_arg_maxNumberOfClasses); {
    __pyx_v_maxNumberOfClasses = __Pyx_PyInt_As_int(__pyx_arg_maxNumberOfClasses); if (unlikely((__pyx_v_maxNumberOfClasses == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 205, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.VarPart.reduceClasses", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_7VarPart_18reduceClasses(((struct __pyx_obj_8pygcgopt_3gcg_VarPart *)__pyx_v_self), ((int)__pyx_v_maxNumberOfClasses));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_7VarPart_18reduceClasses(struct __pyx_obj_8pygcgopt_3gcg_VarPart *__pyx_v_self, int __pyx_v_maxNumberOfClasses) {
  int __pyx_v_cpp_maxNumberOfClasses;
  gcg::VarPartition *__pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  gcg::VarPartition *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("reduceClasses", 0);

  /* "src/pygcgopt/partition.pxi":210
 *         and lower than 2*(upper bound) (returns NULL otherwise).
 *         """
 *         cdef int cpp_maxNumberOfClasses = maxNumberOfClasses             # <<<<<<<<<<<<<<
 *         cdef VarPartition * result = self.thisptr.reduceClasses(cpp_maxNumberOfClasses)
 *         return VarPart.create(result)
 */
  __pyx_v_cpp_maxNumberOfClasses = __pyx_v_maxNumberOfClasses;

  /* "src/pygcgopt/partition.pxi":211
 *         """
 *         cdef int cpp_maxNumberOfClasses = maxNumberOfClasses
 *         cdef VarPartition * result = self.thisptr.reduceClasses(cpp_maxNumberOfClasses)             # <<<<<<<<<<<<<<
 *         return VarPart.create(result)
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->reduceClasses(__pyx_v_cpp_maxNumberOfClasses);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 211, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/partition.pxi":212
 *         cdef int cpp_maxNumberOfClasses = maxNumberOfClasses
 *         cdef VarPartition * result = self.thisptr.reduceClasses(cpp_maxNumberOfClasses)
 *         return VarPart.create(result)             # <<<<<<<<<<<<<<
 * 
 *     # def setClassDecompInfo(VarPart self, int classindex, VAR_DECOMPINFO decompInfo):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_8pygcgopt_3gcg_7VarPart_create(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/partition.pxi":205
 *         return result
 * 
 *     def reduceClasses(VarPart self, int maxNumberOfClasses):             # <<<<<<<<<<<<<<
 *         """returns partition with reduced number of classes
 *         if the current number of classes is greater than an upper bound
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.VarPart.reduceClasses", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_7VarPart_21__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_7VarPart_20__reduce_cython__[] = "VarPart.__reduce_cython__(self)";
static PyObject *__pyx_pw_8pygcgopt_3gcg_7VarPart_21__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_7VarPart_20__reduce_cython__(((struct __pyx_obj_8pygcgopt_3gcg_VarPart *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_7VarPart_20__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_VarPart *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(4, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygcgopt.gcg.VarPart.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_7VarPart_23__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_7VarPart_22__setstate_cython__[] = "VarPart.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_8pygcgopt_3gcg_7VarPart_23__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_7VarPart_22__setstate_cython__(((struct __pyx_obj_8pygcgopt_3gcg_VarPart *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_7VarPart_22__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_VarPart *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(4, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygcgopt.gcg.VarPart.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":16
 *     cdef list py_block_id_map
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 *         self.delete_thisptr = True
 */

/* Python wrapper */
static int __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition___cinit__(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition___cinit__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "src/pygcgopt/decomposition.pxi":17
 * 
 *     def __cinit__(self):
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 *         self.delete_thisptr = True
 * 
 */
  __pyx_v_self->thisptr = NULL;

  /* "src/pygcgopt/decomposition.pxi":18
 *     def __cinit__(self):
 *         self.thisptr = NULL
 *         self.delete_thisptr = True             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->delete_thisptr = 1;

  /* "src/pygcgopt/decomposition.pxi":16
 *     cdef list py_block_id_map
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 *         self.delete_thisptr = True
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":20
 *         self.delete_thisptr = True
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.delete_thisptr and self.thisptr != NULL:
 *             del self.thisptr
 */

/* Python wrapper */
static void __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_2__dealloc__(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_2__dealloc__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "src/pygcgopt/decomposition.pxi":21
 * 
 *     def __dealloc__(self):
 *         if self.delete_thisptr and self.thisptr != NULL:             # <<<<<<<<<<<<<<
 *             del self.thisptr
 * 
 */
  __pyx_t_2 = (__pyx_v_self->delete_thisptr != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_self->thisptr != NULL) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "src/pygcgopt/decomposition.pxi":22
 *     def __dealloc__(self):
 *         if self.delete_thisptr and self.thisptr != NULL:
 *             del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    delete __pyx_v_self->thisptr;

    /* "src/pygcgopt/decomposition.pxi":21
 * 
 *     def __dealloc__(self):
 *         if self.delete_thisptr and self.thisptr != NULL:             # <<<<<<<<<<<<<<
 *             del self.thisptr
 * 
 */
  }

  /* "src/pygcgopt/decomposition.pxi":20
 *         self.delete_thisptr = True
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.delete_thisptr and self.thisptr != NULL:
 *             del self.thisptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "src/pygcgopt/decomposition.pxi":25
 * 
 *     @staticmethod
 *     cdef create(PARTIALDECOMP* thisptr):             # <<<<<<<<<<<<<<
 *         if thisptr == NULL:
 *             raise Warning("cannot create PartialDecomposition with PARTIALDECOMP* == NULL")
 */

static PyObject *__pyx_f_8pygcgopt_3gcg_20PartialDecomposition_create(gcg::PARTIALDECOMP *__pyx_v_thisptr) {
  struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_new_PartialDecomposition = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create", 0);

  /* "src/pygcgopt/decomposition.pxi":26
 *     @staticmethod
 *     cdef create(PARTIALDECOMP* thisptr):
 *         if thisptr == NULL:             # <<<<<<<<<<<<<<
 *             raise Warning("cannot create PartialDecomposition with PARTIALDECOMP* == NULL")
 *         new_PartialDecomposition = PartialDecomposition()
 */
  __pyx_t_1 = ((__pyx_v_thisptr == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "src/pygcgopt/decomposition.pxi":27
 *     cdef create(PARTIALDECOMP* thisptr):
 *         if thisptr == NULL:
 *             raise Warning("cannot create PartialDecomposition with PARTIALDECOMP* == NULL")             # <<<<<<<<<<<<<<
 *         new_PartialDecomposition = PartialDecomposition()
 *         new_PartialDecomposition.thisptr = thisptr
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_Warning, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 27, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(2, 27, __pyx_L1_error)

    /* "src/pygcgopt/decomposition.pxi":26
 *     @staticmethod
 *     cdef create(PARTIALDECOMP* thisptr):
 *         if thisptr == NULL:             # <<<<<<<<<<<<<<
 *             raise Warning("cannot create PartialDecomposition with PARTIALDECOMP* == NULL")
 *         new_PartialDecomposition = PartialDecomposition()
 */
  }

  /* "src/pygcgopt/decomposition.pxi":28
 *         if thisptr == NULL:
 *             raise Warning("cannot create PartialDecomposition with PARTIALDECOMP* == NULL")
 *         new_PartialDecomposition = PartialDecomposition()             # <<<<<<<<<<<<<<
 *         new_PartialDecomposition.thisptr = thisptr
 *         new_PartialDecomposition._visualizations = {}
 */
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygcgopt_3gcg_PartialDecomposition)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_new_PartialDecomposition = ((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "src/pygcgopt/decomposition.pxi":29
 *             raise Warning("cannot create PartialDecomposition with PARTIALDECOMP* == NULL")
 *         new_PartialDecomposition = PartialDecomposition()
 *         new_PartialDecomposition.thisptr = thisptr             # <<<<<<<<<<<<<<
 *         new_PartialDecomposition._visualizations = {}
 *         new_PartialDecomposition.py_block_id_map = []
 */
  __pyx_v_new_PartialDecomposition->thisptr = __pyx_v_thisptr;

  /* "src/pygcgopt/decomposition.pxi":30
 *         new_PartialDecomposition = PartialDecomposition()
 *         new_PartialDecomposition.thisptr = thisptr
 *         new_PartialDecomposition._visualizations = {}             # <<<<<<<<<<<<<<
 *         new_PartialDecomposition.py_block_id_map = []
 *         new_PartialDecomposition.delete_thisptr = False
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_new_PartialDecomposition->_visualizations);
  __Pyx_DECREF(__pyx_v_new_PartialDecomposition->_visualizations);
  __pyx_v_new_PartialDecomposition->_visualizations = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "src/pygcgopt/decomposition.pxi":31
 *         new_PartialDecomposition.thisptr = thisptr
 *         new_PartialDecomposition._visualizations = {}
 *         new_PartialDecomposition.py_block_id_map = []             # <<<<<<<<<<<<<<
 *         new_PartialDecomposition.delete_thisptr = False
 *         return new_PartialDecomposition
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_new_PartialDecomposition->py_block_id_map);
  __Pyx_DECREF(__pyx_v_new_PartialDecomposition->py_block_id_map);
  __pyx_v_new_PartialDecomposition->py_block_id_map = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "src/pygcgopt/decomposition.pxi":32
 *         new_PartialDecomposition._visualizations = {}
 *         new_PartialDecomposition.py_block_id_map = []
 *         new_PartialDecomposition.delete_thisptr = False             # <<<<<<<<<<<<<<
 *         return new_PartialDecomposition
 * 
 */
  __pyx_v_new_PartialDecomposition->delete_thisptr = 0;

  /* "src/pygcgopt/decomposition.pxi":33
 *         new_PartialDecomposition.py_block_id_map = []
 *         new_PartialDecomposition.delete_thisptr = False
 *         return new_PartialDecomposition             # <<<<<<<<<<<<<<
 * 
 *     # def __init__(PartialDecomposition self, SCIP * scip, bool originalProblem):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_new_PartialDecomposition));
  __pyx_r = ((PyObject *)__pyx_v_new_PartialDecomposition);
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":25
 * 
 *     @staticmethod
 *     cdef create(PARTIALDECOMP* thisptr):             # <<<<<<<<<<<<<<
 *         if thisptr == NULL:
 *             raise Warning("cannot create PartialDecomposition with PARTIALDECOMP* == NULL")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.create", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_new_PartialDecomposition);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":50
 *     #     self.thisptr = new PARTIALDECOMP(cpp_partialdecToCopy)
 * 
 *     def __copy__(self):             # <<<<<<<<<<<<<<
 *         return PartialDecomposition.create(new PARTIALDECOMP(self.thisptr))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_5__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_4__copy__[] = "PartialDecomposition.__copy__(self)";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_5__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__copy__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_4__copy__(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_4__copy__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__copy__", 0);

  /* "src/pygcgopt/decomposition.pxi":51
 * 
 *     def __copy__(self):
 *         return PartialDecomposition.create(new PARTIALDECOMP(self.thisptr))             # <<<<<<<<<<<<<<
 * 
 *     def copy(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pygcgopt_3gcg_20PartialDecomposition_create(new gcg::PARTIALDECOMP(__pyx_v_self->thisptr)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":50
 *     #     self.thisptr = new PARTIALDECOMP(cpp_partialdecToCopy)
 * 
 *     def __copy__(self):             # <<<<<<<<<<<<<<
 *         return PartialDecomposition.create(new PARTIALDECOMP(self.thisptr))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.__copy__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":53
 *         return PartialDecomposition.create(new PARTIALDECOMP(self.thisptr))
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         return copy(self)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_7copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_6copy[] = "PartialDecomposition.copy(self)";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_7copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_6copy(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_6copy(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy", 0);

  /* "src/pygcgopt/decomposition.pxi":54
 * 
 *     def copy(self):
 *         return copy(self)             # <<<<<<<<<<<<<<
 * 
 *     def fixConsToMaster(PartialDecomposition self, Constraint cons):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_copy); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, ((PyObject *)__pyx_v_self)) : __Pyx_PyObject_CallOneArg(__pyx_t_2, ((PyObject *)__pyx_v_self));
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":53
 *         return PartialDecomposition.create(new PARTIALDECOMP(self.thisptr))
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         return copy(self)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":56
 *         return copy(self)
 * 
 *     def fixConsToMaster(PartialDecomposition self, Constraint cons):             # <<<<<<<<<<<<<<
 *         """Fixes a Constraint to the master constraints.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_9fixConsToMaster(PyObject *__pyx_v_self, PyObject *__pyx_v_cons); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_8fixConsToMaster[] = "PartialDecomposition.fixConsToMaster(self, Constraint cons)\nFixes a Constraint to the master constraints.\n\n        :param cons: scip#Constraint to add\n        :type cons: Constraint\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_9fixConsToMaster(PyObject *__pyx_v_self, PyObject *__pyx_v_cons) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fixConsToMaster (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_cons), __pyx_ptype_9pyscipopt_4scip_Constraint, 1, "cons", 0))) __PYX_ERR(2, 56, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_8fixConsToMaster(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((struct __pyx_obj_9pyscipopt_4scip_Constraint *)__pyx_v_cons));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_8fixConsToMaster(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, struct __pyx_obj_9pyscipopt_4scip_Constraint *__pyx_v_cons) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fixConsToMaster", 0);

  /* "src/pygcgopt/decomposition.pxi":62
 *         :type cons: Constraint
 *         """
 *         self.thisptr.fixConsToMaster(cons.scip_cons)             # <<<<<<<<<<<<<<
 * 
 *     def fixConssToMaster(self, conss):
 */
  (void)(__pyx_v_self->thisptr->fixConsToMaster(__pyx_v_cons->scip_cons));

  /* "src/pygcgopt/decomposition.pxi":56
 *         return copy(self)
 * 
 *     def fixConsToMaster(PartialDecomposition self, Constraint cons):             # <<<<<<<<<<<<<<
 *         """Fixes a Constraint to the master constraints.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":64
 *         self.thisptr.fixConsToMaster(cons.scip_cons)
 * 
 *     def fixConssToMaster(self, conss):             # <<<<<<<<<<<<<<
 *         """Fixes all constraints to the master constraints.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_11fixConssToMaster(PyObject *__pyx_v_self, PyObject *__pyx_v_conss); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_10fixConssToMaster[] = "PartialDecomposition.fixConssToMaster(self, conss)\nFixes all constraints to the master constraints.\n\n        :param conss: An iterable of scip#Constraint objects\n        :type conss: An iterable of scip#Constraint objects\n        :raises TypeError: occurs if conss is not an Iterable\n        .. seealso:: * :meth:`fixConsToMaster`\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_11fixConssToMaster(PyObject *__pyx_v_self, PyObject *__pyx_v_conss) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fixConssToMaster (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_10fixConssToMaster(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((PyObject *)__pyx_v_conss));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_10fixConssToMaster(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_conss) {
  PyObject *__pyx_v_cons = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("fixConssToMaster", 0);

  /* "src/pygcgopt/decomposition.pxi":72
 *         .. seealso:: * :meth:`fixConsToMaster`
 *         """
 *         if not isinstance(conss, Iterable):             # <<<<<<<<<<<<<<
 *             raise TypeError("Expected iterable as first argument. Got '{}' instead.".format(type(conss)))
 *         for cons in conss:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Iterable); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_conss, __pyx_t_1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(2, 72, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = ((!(__pyx_t_2 != 0)) != 0);
  if (unlikely(__pyx_t_3)) {

    /* "src/pygcgopt/decomposition.pxi":73
 *         """
 *         if not isinstance(conss, Iterable):
 *             raise TypeError("Expected iterable as first argument. Got '{}' instead.".format(type(conss)))             # <<<<<<<<<<<<<<
 *         for cons in conss:
 *             self.fixConsToMaster(<Constraint?>cons)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Expected_iterable_as_first_argum, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 73, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, ((PyObject *)Py_TYPE(__pyx_v_conss))) : __Pyx_PyObject_CallOneArg(__pyx_t_4, ((PyObject *)Py_TYPE(__pyx_v_conss)));
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 73, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 73, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(2, 73, __pyx_L1_error)

    /* "src/pygcgopt/decomposition.pxi":72
 *         .. seealso:: * :meth:`fixConsToMaster`
 *         """
 *         if not isinstance(conss, Iterable):             # <<<<<<<<<<<<<<
 *             raise TypeError("Expected iterable as first argument. Got '{}' instead.".format(type(conss)))
 *         for cons in conss:
 */
  }

  /* "src/pygcgopt/decomposition.pxi":74
 *         if not isinstance(conss, Iterable):
 *             raise TypeError("Expected iterable as first argument. Got '{}' instead.".format(type(conss)))
 *         for cons in conss:             # <<<<<<<<<<<<<<
 *             self.fixConsToMaster(<Constraint?>cons)
 * 
 */
  if (likely(PyList_CheckExact(__pyx_v_conss)) || PyTuple_CheckExact(__pyx_v_conss)) {
    __pyx_t_4 = __pyx_v_conss; __Pyx_INCREF(__pyx_t_4); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_conss); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 74, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 74, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(2, 74, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 74, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(2, 74, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 74, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_7(__pyx_t_4);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(2, 74, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_cons, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "src/pygcgopt/decomposition.pxi":75
 *             raise TypeError("Expected iterable as first argument. Got '{}' instead.".format(type(conss)))
 *         for cons in conss:
 *             self.fixConsToMaster(<Constraint?>cons)             # <<<<<<<<<<<<<<
 * 
 *     def fixConsToBlockId(PartialDecomposition self, Constraint cons, int block_id):
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_fixConsToMaster); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (!(likely(__Pyx_TypeTest(__pyx_v_cons, __pyx_ptype_9pyscipopt_4scip_Constraint)))) __PYX_ERR(2, 75, __pyx_L1_error)
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_1 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_8, __pyx_v_cons) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_cons);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "src/pygcgopt/decomposition.pxi":74
 *         if not isinstance(conss, Iterable):
 *             raise TypeError("Expected iterable as first argument. Got '{}' instead.".format(type(conss)))
 *         for cons in conss:             # <<<<<<<<<<<<<<
 *             self.fixConsToMaster(<Constraint?>cons)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "src/pygcgopt/decomposition.pxi":64
 *         self.thisptr.fixConsToMaster(cons.scip_cons)
 * 
 *     def fixConssToMaster(self, conss):             # <<<<<<<<<<<<<<
 *         """Fixes all constraints to the master constraints.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.fixConssToMaster", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_cons);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":77
 *             self.fixConsToMaster(<Constraint?>cons)
 * 
 *     def fixConsToBlockId(PartialDecomposition self, Constraint cons, int block_id):             # <<<<<<<<<<<<<<
 *         """Adds a constraint to a block.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_13fixConsToBlockId(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_12fixConsToBlockId[] = "PartialDecomposition.fixConsToBlockId(self, Constraint cons, int block_id)\nAdds a constraint to a block.\n\n        :param cons: scip#Constraint to add\n        :type cons: Constraint\n        :param block_id: id of block to add.\n        :type block_id: int\n        :note: The passed ``block_id`` has to by of type integer and use the internal numbering of blocks. Before\n        calling this method, one has to ensure that the specified block exists. A more convenient alternative is\n        fixConsToBlock().\n\n        .. seealso:: * :meth:`addBlock`\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_13fixConsToBlockId(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9pyscipopt_4scip_Constraint *__pyx_v_cons = 0;
  int __pyx_v_block_id;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fixConsToBlockId (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cons,&__pyx_n_s_block_id,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cons)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_block_id)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fixConsToBlockId", 1, 2, 2, 1); __PYX_ERR(2, 77, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "fixConsToBlockId") < 0)) __PYX_ERR(2, 77, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_cons = ((struct __pyx_obj_9pyscipopt_4scip_Constraint *)values[0]);
    __pyx_v_block_id = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_block_id == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 77, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fixConsToBlockId", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 77, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.fixConsToBlockId", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_cons), __pyx_ptype_9pyscipopt_4scip_Constraint, 1, "cons", 0))) __PYX_ERR(2, 77, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_12fixConsToBlockId(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), __pyx_v_cons, __pyx_v_block_id);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_12fixConsToBlockId(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, struct __pyx_obj_9pyscipopt_4scip_Constraint *__pyx_v_cons, int __pyx_v_block_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fixConsToBlockId", 0);

  /* "src/pygcgopt/decomposition.pxi":90
 *         .. seealso:: * :meth:`addBlock`
 *         """
 *         self.thisptr.fixConsToBlock(cons.scip_cons, block_id)             # <<<<<<<<<<<<<<
 * 
 *     def fixConssToBlockId(self, conss, int block_id):
 */
  (void)(__pyx_v_self->thisptr->fixConsToBlock(__pyx_v_cons->scip_cons, __pyx_v_block_id));

  /* "src/pygcgopt/decomposition.pxi":77
 *             self.fixConsToMaster(<Constraint?>cons)
 * 
 *     def fixConsToBlockId(PartialDecomposition self, Constraint cons, int block_id):             # <<<<<<<<<<<<<<
 *         """Adds a constraint to a block.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":92
 *         self.thisptr.fixConsToBlock(cons.scip_cons, block_id)
 * 
 *     def fixConssToBlockId(self, conss, int block_id):             # <<<<<<<<<<<<<<
 *         """Adds all constraints to a block.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_15fixConssToBlockId(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_14fixConssToBlockId[] = "PartialDecomposition.fixConssToBlockId(self, conss, int block_id)\nAdds all constraints to a block.\n\n        :param conss: An iterable of scip#Constraint objects\n        :param block_id: id of block to add.\n        .. seealso:: * :meth:`fixConsToBlockId`\n                     * :meth:`fixConssToBlock`\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_15fixConssToBlockId(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_conss = 0;
  int __pyx_v_block_id;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fixConssToBlockId (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_conss,&__pyx_n_s_block_id,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_conss)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_block_id)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fixConssToBlockId", 1, 2, 2, 1); __PYX_ERR(2, 92, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "fixConssToBlockId") < 0)) __PYX_ERR(2, 92, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_conss = values[0];
    __pyx_v_block_id = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_block_id == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 92, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fixConssToBlockId", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 92, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.fixConssToBlockId", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_14fixConssToBlockId(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), __pyx_v_conss, __pyx_v_block_id);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_14fixConssToBlockId(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_conss, int __pyx_v_block_id) {
  PyObject *__pyx_v_cons = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("fixConssToBlockId", 0);

  /* "src/pygcgopt/decomposition.pxi":100
 *                      * :meth:`fixConssToBlock`
 *         """
 *         if not isinstance(conss, Iterable):             # <<<<<<<<<<<<<<
 *             raise TypeError("Expected iterable as first argument. Got '{}' instead.".format(type(conss)))
 *         for cons in conss:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Iterable); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_conss, __pyx_t_1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(2, 100, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = ((!(__pyx_t_2 != 0)) != 0);
  if (unlikely(__pyx_t_3)) {

    /* "src/pygcgopt/decomposition.pxi":101
 *         """
 *         if not isinstance(conss, Iterable):
 *             raise TypeError("Expected iterable as first argument. Got '{}' instead.".format(type(conss)))             # <<<<<<<<<<<<<<
 *         for cons in conss:
 *             self.fixConsToBlockId(<Constraint?>cons, block_id)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Expected_iterable_as_first_argum, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 101, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, ((PyObject *)Py_TYPE(__pyx_v_conss))) : __Pyx_PyObject_CallOneArg(__pyx_t_4, ((PyObject *)Py_TYPE(__pyx_v_conss)));
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 101, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 101, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(2, 101, __pyx_L1_error)

    /* "src/pygcgopt/decomposition.pxi":100
 *                      * :meth:`fixConssToBlock`
 *         """
 *         if not isinstance(conss, Iterable):             # <<<<<<<<<<<<<<
 *             raise TypeError("Expected iterable as first argument. Got '{}' instead.".format(type(conss)))
 *         for cons in conss:
 */
  }

  /* "src/pygcgopt/decomposition.pxi":102
 *         if not isinstance(conss, Iterable):
 *             raise TypeError("Expected iterable as first argument. Got '{}' instead.".format(type(conss)))
 *         for cons in conss:             # <<<<<<<<<<<<<<
 *             self.fixConsToBlockId(<Constraint?>cons, block_id)
 * 
 */
  if (likely(PyList_CheckExact(__pyx_v_conss)) || PyTuple_CheckExact(__pyx_v_conss)) {
    __pyx_t_4 = __pyx_v_conss; __Pyx_INCREF(__pyx_t_4); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_conss); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 102, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(2, 102, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 102, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(2, 102, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 102, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_7(__pyx_t_4);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(2, 102, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_cons, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "src/pygcgopt/decomposition.pxi":103
 *             raise TypeError("Expected iterable as first argument. Got '{}' instead.".format(type(conss)))
 *         for cons in conss:
 *             self.fixConsToBlockId(<Constraint?>cons, block_id)             # <<<<<<<<<<<<<<
 * 
 *     def fixConsToBlock(self, Constraint cons, object block):
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_fixConsToBlockId); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (!(likely(__Pyx_TypeTest(__pyx_v_cons, __pyx_ptype_9pyscipopt_4scip_Constraint)))) __PYX_ERR(2, 103, __pyx_L1_error)
    __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_block_id); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_10 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_v_cons, __pyx_t_8};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 103, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_v_cons, __pyx_t_8};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 103, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    {
      __pyx_t_11 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(2, 103, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      if (__pyx_t_9) {
        __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_9); __pyx_t_9 = NULL;
      }
      __Pyx_INCREF(((PyObject *)((struct __pyx_obj_9pyscipopt_4scip_Constraint *)__pyx_v_cons)));
      __Pyx_GIVEREF(__pyx_v_cons);
      PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_10, __pyx_v_cons);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_10, __pyx_t_8);
      __pyx_t_8 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 103, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "src/pygcgopt/decomposition.pxi":102
 *         if not isinstance(conss, Iterable):
 *             raise TypeError("Expected iterable as first argument. Got '{}' instead.".format(type(conss)))
 *         for cons in conss:             # <<<<<<<<<<<<<<
 *             self.fixConsToBlockId(<Constraint?>cons, block_id)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "src/pygcgopt/decomposition.pxi":92
 *         self.thisptr.fixConsToBlock(cons.scip_cons, block_id)
 * 
 *     def fixConssToBlockId(self, conss, int block_id):             # <<<<<<<<<<<<<<
 *         """Adds all constraints to a block.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.fixConssToBlockId", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_cons);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":105
 *             self.fixConsToBlockId(<Constraint?>cons, block_id)
 * 
 *     def fixConsToBlock(self, Constraint cons, object block):             # <<<<<<<<<<<<<<
 *         """Adds a constraint to a block.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_17fixConsToBlock(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_16fixConsToBlock[] = "PartialDecomposition.fixConsToBlock(self, Constraint cons, block)\nAdds a constraint to a block.\n\n        :param cons: scip#Constraint to add\n        :param block: identifier of block to add. Can be any hashable Python object.\n        :return: the internal block_id assigned to the block.\n\n        This method will automatically manage the blocks of the decomposition and create blocks if neccessary.\n        The passed ``block`` identifiers will be mapped to internal block ids.\n\n        To address the internal blocks directly, use :meth:`fixConsToBlockId`.\n\n        .. seealso:: * :meth:`fixConssToBlock`\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_17fixConsToBlock(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9pyscipopt_4scip_Constraint *__pyx_v_cons = 0;
  PyObject *__pyx_v_block = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fixConsToBlock (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cons,&__pyx_n_s_block,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cons)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_block)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fixConsToBlock", 1, 2, 2, 1); __PYX_ERR(2, 105, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "fixConsToBlock") < 0)) __PYX_ERR(2, 105, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_cons = ((struct __pyx_obj_9pyscipopt_4scip_Constraint *)values[0]);
    __pyx_v_block = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fixConsToBlock", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 105, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.fixConsToBlock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_cons), __pyx_ptype_9pyscipopt_4scip_Constraint, 1, "cons", 0))) __PYX_ERR(2, 105, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_16fixConsToBlock(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), __pyx_v_cons, __pyx_v_block);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_16fixConsToBlock(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, struct __pyx_obj_9pyscipopt_4scip_Constraint *__pyx_v_cons, PyObject *__pyx_v_block) {
  CYTHON_UNUSED PyObject *__pyx_v_i = NULL;
  int __pyx_v_block_id;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("fixConsToBlock", 0);

  /* "src/pygcgopt/decomposition.pxi":119
 *         .. seealso:: * :meth:`fixConssToBlock`
 *         """
 *         if block not in self.py_block_id_map:             # <<<<<<<<<<<<<<
 *             self.py_block_id_map.append(block)
 * 
 */
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_v_block, __pyx_v_self->py_block_id_map, Py_NE)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 119, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "src/pygcgopt/decomposition.pxi":120
 *         """
 *         if block not in self.py_block_id_map:
 *             self.py_block_id_map.append(block)             # <<<<<<<<<<<<<<
 * 
 *         # Extend the number of blocks if we do not have enough. Do not automatically shrink the block count to avoid
 */
    if (unlikely(__pyx_v_self->py_block_id_map == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
      __PYX_ERR(2, 120, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_self->py_block_id_map, __pyx_v_block); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(2, 120, __pyx_L1_error)

    /* "src/pygcgopt/decomposition.pxi":119
 *         .. seealso:: * :meth:`fixConssToBlock`
 *         """
 *         if block not in self.py_block_id_map:             # <<<<<<<<<<<<<<
 *             self.py_block_id_map.append(block)
 * 
 */
  }

  /* "src/pygcgopt/decomposition.pxi":124
 *         # Extend the number of blocks if we do not have enough. Do not automatically shrink the block count to avoid
 *         # interferance in case the user previously set a block count manually.
 *         if len(self.py_block_id_map) > self.getNBlocks():             # <<<<<<<<<<<<<<
 *             for i in range(len(self.py_block_id_map) - self.getNBlocks()):
 *                 self.addBlock()
 */
  __pyx_t_4 = __pyx_v_self->py_block_id_map;
  __Pyx_INCREF(__pyx_t_4);
  if (unlikely(__pyx_t_4 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(2, 124, __pyx_L1_error)
  }
  __pyx_t_5 = PyList_GET_SIZE(__pyx_t_4); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(2, 124, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNBlocks); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_6 = (__pyx_t_8) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_8) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyObject_RichCompare(__pyx_t_4, __pyx_t_6, Py_GT); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 124, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 124, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (__pyx_t_2) {

    /* "src/pygcgopt/decomposition.pxi":125
 *         # interferance in case the user previously set a block count manually.
 *         if len(self.py_block_id_map) > self.getNBlocks():
 *             for i in range(len(self.py_block_id_map) - self.getNBlocks()):             # <<<<<<<<<<<<<<
 *                 self.addBlock()
 * 
 */
    __pyx_t_7 = __pyx_v_self->py_block_id_map;
    __Pyx_INCREF(__pyx_t_7);
    if (unlikely(__pyx_t_7 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(2, 125, __pyx_L1_error)
    }
    __pyx_t_5 = PyList_GET_SIZE(__pyx_t_7); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(2, 125, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyInt_FromSsize_t(__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNBlocks); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_6 = (__pyx_t_8) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_8) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Subtract(__pyx_t_7, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (likely(PyList_CheckExact(__pyx_t_6)) || PyTuple_CheckExact(__pyx_t_6)) {
      __pyx_t_4 = __pyx_t_6; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
      __pyx_t_9 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 125, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_9 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 125, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    for (;;) {
      if (likely(!__pyx_t_9)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_6); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(2, 125, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 125, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        } else {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_6); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(2, 125, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 125, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        }
      } else {
        __pyx_t_6 = __pyx_t_9(__pyx_t_4);
        if (unlikely(!__pyx_t_6)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(2, 125, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_6);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "src/pygcgopt/decomposition.pxi":126
 *         if len(self.py_block_id_map) > self.getNBlocks():
 *             for i in range(len(self.py_block_id_map) - self.getNBlocks()):
 *                 self.addBlock()             # <<<<<<<<<<<<<<
 * 
 *         cdef int block_id = self.py_block_id_map.index(block)
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_addBlock); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 126, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_6 = (__pyx_t_8) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_8) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 126, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "src/pygcgopt/decomposition.pxi":125
 *         # interferance in case the user previously set a block count manually.
 *         if len(self.py_block_id_map) > self.getNBlocks():
 *             for i in range(len(self.py_block_id_map) - self.getNBlocks()):             # <<<<<<<<<<<<<<
 *                 self.addBlock()
 * 
 */
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "src/pygcgopt/decomposition.pxi":124
 *         # Extend the number of blocks if we do not have enough. Do not automatically shrink the block count to avoid
 *         # interferance in case the user previously set a block count manually.
 *         if len(self.py_block_id_map) > self.getNBlocks():             # <<<<<<<<<<<<<<
 *             for i in range(len(self.py_block_id_map) - self.getNBlocks()):
 *                 self.addBlock()
 */
  }

  /* "src/pygcgopt/decomposition.pxi":128
 *                 self.addBlock()
 * 
 *         cdef int block_id = self.py_block_id_map.index(block)             # <<<<<<<<<<<<<<
 *         self.fixConsToBlockId(cons, block_id)
 *         return block_id
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->py_block_id_map, __pyx_n_s_index); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_4 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_v_block) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_block);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 128, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_block_id = __pyx_t_10;

  /* "src/pygcgopt/decomposition.pxi":129
 * 
 *         cdef int block_id = self.py_block_id_map.index(block)
 *         self.fixConsToBlockId(cons, block_id)             # <<<<<<<<<<<<<<
 *         return block_id
 * 
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_fixConsToBlockId); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_block_id); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = NULL;
  __pyx_t_10 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_10 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, ((PyObject *)__pyx_v_cons), __pyx_t_7};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 129, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, ((PyObject *)__pyx_v_cons), __pyx_t_7};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 129, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  {
    __pyx_t_11 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(2, 129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_cons));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_cons));
    PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_10, ((PyObject *)__pyx_v_cons));
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_10, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_11, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "src/pygcgopt/decomposition.pxi":130
 *         cdef int block_id = self.py_block_id_map.index(block)
 *         self.fixConsToBlockId(cons, block_id)
 *         return block_id             # <<<<<<<<<<<<<<
 * 
 *     def fixConssToBlock(self, conss, object block):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_block_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":105
 *             self.fixConsToBlockId(<Constraint?>cons, block_id)
 * 
 *     def fixConsToBlock(self, Constraint cons, object block):             # <<<<<<<<<<<<<<
 *         """Adds a constraint to a block.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.fixConsToBlock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":132
 *         return block_id
 * 
 *     def fixConssToBlock(self, conss, object block):             # <<<<<<<<<<<<<<
 *         """Adds all constraints to a block.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_19fixConssToBlock(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_18fixConssToBlock[] = "PartialDecomposition.fixConssToBlock(self, conss, block)\nAdds all constraints to a block.\n\n        :param conss: An iterable of scip#Constraint objects\n        :param block: identifier of block to add. Can be any hashable Python object.\n        :return: the internal block_id assigned to the block.\n\n        .. seealso:: * :meth:`fixConsToBlock`\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_19fixConssToBlock(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_conss = 0;
  PyObject *__pyx_v_block = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fixConssToBlock (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_conss,&__pyx_n_s_block,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_conss)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_block)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fixConssToBlock", 1, 2, 2, 1); __PYX_ERR(2, 132, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "fixConssToBlock") < 0)) __PYX_ERR(2, 132, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_conss = values[0];
    __pyx_v_block = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fixConssToBlock", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 132, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.fixConssToBlock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_18fixConssToBlock(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), __pyx_v_conss, __pyx_v_block);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_18fixConssToBlock(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_conss, PyObject *__pyx_v_block) {
  int __pyx_v_block_id;
  PyObject *__pyx_v_cons = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("fixConssToBlock", 0);

  /* "src/pygcgopt/decomposition.pxi":141
 *         .. seealso:: * :meth:`fixConsToBlock`
 *         """
 *         if not isinstance(conss, Iterable):             # <<<<<<<<<<<<<<
 *             raise TypeError("Expected iterable as first argument. Got '{}' instead.".format(type(conss)))
 *         cdef int block_id
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Iterable); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_conss, __pyx_t_1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(2, 141, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = ((!(__pyx_t_2 != 0)) != 0);
  if (unlikely(__pyx_t_3)) {

    /* "src/pygcgopt/decomposition.pxi":142
 *         """
 *         if not isinstance(conss, Iterable):
 *             raise TypeError("Expected iterable as first argument. Got '{}' instead.".format(type(conss)))             # <<<<<<<<<<<<<<
 *         cdef int block_id
 *         for cons in conss:
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Expected_iterable_as_first_argum, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 142, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, ((PyObject *)Py_TYPE(__pyx_v_conss))) : __Pyx_PyObject_CallOneArg(__pyx_t_4, ((PyObject *)Py_TYPE(__pyx_v_conss)));
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 142, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 142, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(2, 142, __pyx_L1_error)

    /* "src/pygcgopt/decomposition.pxi":141
 *         .. seealso:: * :meth:`fixConsToBlock`
 *         """
 *         if not isinstance(conss, Iterable):             # <<<<<<<<<<<<<<
 *             raise TypeError("Expected iterable as first argument. Got '{}' instead.".format(type(conss)))
 *         cdef int block_id
 */
  }

  /* "src/pygcgopt/decomposition.pxi":144
 *             raise TypeError("Expected iterable as first argument. Got '{}' instead.".format(type(conss)))
 *         cdef int block_id
 *         for cons in conss:             # <<<<<<<<<<<<<<
 *             # block_id is the same for all blocks
 *             block_id = self.fixConsToBlock(<Constraint?>cons, block)
 */
  if (likely(PyList_CheckExact(__pyx_v_conss)) || PyTuple_CheckExact(__pyx_v_conss)) {
    __pyx_t_4 = __pyx_v_conss; __Pyx_INCREF(__pyx_t_4); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_conss); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 144, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 144, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(2, 144, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 144, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(2, 144, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 144, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_7(__pyx_t_4);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(2, 144, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_cons, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "src/pygcgopt/decomposition.pxi":146
 *         for cons in conss:
 *             # block_id is the same for all blocks
 *             block_id = self.fixConsToBlock(<Constraint?>cons, block)             # <<<<<<<<<<<<<<
 *         return block_id
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_fixConsToBlock); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (!(likely(__Pyx_TypeTest(__pyx_v_cons, __pyx_ptype_9pyscipopt_4scip_Constraint)))) __PYX_ERR(2, 146, __pyx_L1_error)
    __pyx_t_8 = NULL;
    __pyx_t_9 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_9 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_cons, __pyx_v_block};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 146, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_cons, __pyx_v_block};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 146, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_10 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 146, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      if (__pyx_t_8) {
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_8); __pyx_t_8 = NULL;
      }
      __Pyx_INCREF(((PyObject *)((struct __pyx_obj_9pyscipopt_4scip_Constraint *)__pyx_v_cons)));
      __Pyx_GIVEREF(__pyx_v_cons);
      PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_9, __pyx_v_cons);
      __Pyx_INCREF(__pyx_v_block);
      __Pyx_GIVEREF(__pyx_v_block);
      PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_9, __pyx_v_block);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 146, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 146, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_block_id = __pyx_t_9;

    /* "src/pygcgopt/decomposition.pxi":144
 *             raise TypeError("Expected iterable as first argument. Got '{}' instead.".format(type(conss)))
 *         cdef int block_id
 *         for cons in conss:             # <<<<<<<<<<<<<<
 *             # block_id is the same for all blocks
 *             block_id = self.fixConsToBlock(<Constraint?>cons, block)
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "src/pygcgopt/decomposition.pxi":147
 *             # block_id is the same for all blocks
 *             block_id = self.fixConsToBlock(<Constraint?>cons, block)
 *         return block_id             # <<<<<<<<<<<<<<
 * 
 *     def getOpenconss(PartialDecomposition self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_block_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":132
 *         return block_id
 * 
 *     def fixConssToBlock(self, conss, object block):             # <<<<<<<<<<<<<<
 *         """Adds all constraints to a block.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.fixConssToBlock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_cons);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":149
 *         return block_id
 * 
 *     def getOpenconss(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets a vector containing constraint ids not assigned yet as vector
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_21getOpenconss(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_20getOpenconss[] = "PartialDecomposition.getOpenconss(self)\nGets a vector containing constraint ids not assigned yet as vector\n\n        :return: returns a vector containing constraint ids not assigned yet as vector.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_21getOpenconss(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getOpenconss (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_20getOpenconss(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_20getOpenconss(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  std::vector<int>  __pyx_v_result;
  gcg::DETPROBDATA *__pyx_v_det_prob_data;
  int __pyx_7genexpr__pyx_v_consIndex;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<int>  __pyx_t_1;
  gcg::DETPROBDATA *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  std::vector<int> ::iterator __pyx_t_4;
  int __pyx_t_5;
  SCIP_CONS *__pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getOpenconss", 0);

  /* "src/pygcgopt/decomposition.pxi":154
 *         :return: returns a vector containing constraint ids not assigned yet as vector.
 *         """
 *         cdef vector[int] result = self.thisptr.getOpenconssVec()             # <<<<<<<<<<<<<<
 *         cdef DETPROBDATA * det_prob_data = self.thisptr.getDetprobdata()
 *         return [Constraint.create(det_prob_data.getCons(consIndex)) for consIndex in result]
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getOpenconssVec();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 154, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":155
 *         """
 *         cdef vector[int] result = self.thisptr.getOpenconssVec()
 *         cdef DETPROBDATA * det_prob_data = self.thisptr.getDetprobdata()             # <<<<<<<<<<<<<<
 *         return [Constraint.create(det_prob_data.getCons(consIndex)) for consIndex in result]
 * 
 */
  try {
    __pyx_t_2 = __pyx_v_self->thisptr->getDetprobdata();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 155, __pyx_L1_error)
  }
  __pyx_v_det_prob_data = __pyx_t_2;

  /* "src/pygcgopt/decomposition.pxi":156
 *         cdef vector[int] result = self.thisptr.getOpenconssVec()
 *         cdef DETPROBDATA * det_prob_data = self.thisptr.getDetprobdata()
 *         return [Constraint.create(det_prob_data.getCons(consIndex)) for consIndex in result]             # <<<<<<<<<<<<<<
 * 
 *     def setUsergiven(self, USERGIVEN value=COMPLETED_CONSTOMASTER):
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 156, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __pyx_v_result.begin();
    for (;;) {
      if (!(__pyx_t_4 != __pyx_v_result.end())) break;
      __pyx_t_5 = *__pyx_t_4;
      ++__pyx_t_4;
      __pyx_7genexpr__pyx_v_consIndex = __pyx_t_5;
      try {
        __pyx_t_6 = __pyx_v_det_prob_data->getCons(__pyx_7genexpr__pyx_v_consIndex);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(2, 156, __pyx_L1_error)
      }
      __pyx_t_7 = __pyx_vtabptr_9pyscipopt_4scip_Constraint->create(__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 156, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_7))) __PYX_ERR(2, 156, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  } /* exit inner scope */
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":149
 *         return block_id
 * 
 *     def getOpenconss(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets a vector containing constraint ids not assigned yet as vector
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getOpenconss", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":158
 *         return [Constraint.create(det_prob_data.getCons(consIndex)) for consIndex in result]
 * 
 *     def setUsergiven(self, USERGIVEN value=COMPLETED_CONSTOMASTER):             # <<<<<<<<<<<<<<
 *         self.thisptr.setUsergiven(value)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_23setUsergiven(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_22setUsergiven[] = "PartialDecomposition.setUsergiven(self, USERGIVEN value=COMPLETED_CONSTOMASTER)";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_23setUsergiven(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  gcg::USERGIVEN __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setUsergiven (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_value,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setUsergiven") < 0)) __PYX_ERR(2, 158, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_value = ((gcg::USERGIVEN)__Pyx_PyInt_As_gcg_3a__3a_USERGIVEN(values[0])); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 158, __pyx_L3_error)
    } else {
      __pyx_v_value = __pyx_k__10;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setUsergiven", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 158, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.setUsergiven", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_22setUsergiven(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_22setUsergiven(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, gcg::USERGIVEN __pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setUsergiven", 0);

  /* "src/pygcgopt/decomposition.pxi":159
 * 
 *     def setUsergiven(self, USERGIVEN value=COMPLETED_CONSTOMASTER):
 *         self.thisptr.setUsergiven(value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  try {
    __pyx_v_self->thisptr->setUsergiven(__pyx_v_value);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 159, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":158
 *         return [Constraint.create(det_prob_data.getCons(consIndex)) for consIndex in result]
 * 
 *     def setUsergiven(self, USERGIVEN value=COMPLETED_CONSTOMASTER):             # <<<<<<<<<<<<<<
 *         self.thisptr.setUsergiven(value)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.setUsergiven", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":162
 * 
 *     @property
 *     def classic_score(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getClassicScore()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_13classic_score_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_13classic_score_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_13classic_score___get__(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_13classic_score___get__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "src/pygcgopt/decomposition.pxi":163
 *     @property
 *     def classic_score(self):
 *         return self.thisptr.getClassicScore()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getClassicScore();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 163, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":162
 * 
 *     @property
 *     def classic_score(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getClassicScore()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.classic_score.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":166
 * 
 *     @property
 *     def border_area_score(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getBorderAreaScore()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_17border_area_score_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_17border_area_score_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_17border_area_score___get__(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_17border_area_score___get__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "src/pygcgopt/decomposition.pxi":167
 *     @property
 *     def border_area_score(self):
 *         return self.thisptr.getBorderAreaScore()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getBorderAreaScore();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 167, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":166
 * 
 *     @property
 *     def border_area_score(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getBorderAreaScore()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.border_area_score.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":170
 * 
 *     @property
 *     def max_white_score(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getMaxWhiteScore()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_15max_white_score_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_15max_white_score_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_15max_white_score___get__(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_15max_white_score___get__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "src/pygcgopt/decomposition.pxi":171
 *     @property
 *     def max_white_score(self):
 *         return self.thisptr.getMaxWhiteScore()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getMaxWhiteScore();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 171, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":170
 * 
 *     @property
 *     def max_white_score(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getMaxWhiteScore()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.max_white_score.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":174
 * 
 *     @property
 *     def max_for_white_score(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getMaxForWhiteScore()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_19max_for_white_score_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_19max_for_white_score_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_19max_for_white_score___get__(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_19max_for_white_score___get__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "src/pygcgopt/decomposition.pxi":175
 *     @property
 *     def max_for_white_score(self):
 *         return self.thisptr.getMaxForWhiteScore()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getMaxForWhiteScore();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 175, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":174
 * 
 *     @property
 *     def max_for_white_score(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getMaxForWhiteScore()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.max_for_white_score.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":178
 * 
 *     @property
 *     def set_part_for_white_score(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getSetPartForWhiteScore()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_24set_part_for_white_score_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_24set_part_for_white_score_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_24set_part_for_white_score___get__(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_24set_part_for_white_score___get__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "src/pygcgopt/decomposition.pxi":179
 *     @property
 *     def set_part_for_white_score(self):
 *         return self.thisptr.getSetPartForWhiteScore()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getSetPartForWhiteScore();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 179, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":178
 * 
 *     @property
 *     def set_part_for_white_score(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getSetPartForWhiteScore()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.set_part_for_white_score.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":182
 * 
 *     @property
 *     def max_for_white_agg_score(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getMaxForWhiteAggScore()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_23max_for_white_agg_score_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_23max_for_white_agg_score_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_23max_for_white_agg_score___get__(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_23max_for_white_agg_score___get__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "src/pygcgopt/decomposition.pxi":183
 *     @property
 *     def max_for_white_agg_score(self):
 *         return self.thisptr.getMaxForWhiteAggScore()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getMaxForWhiteAggScore();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 183, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":182
 * 
 *     @property
 *     def max_for_white_agg_score(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getMaxForWhiteAggScore()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.max_for_white_agg_score.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":186
 * 
 *     @property
 *     def set_part_for_white_agg_score(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getSetPartForWhiteAggScore()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_28set_part_for_white_agg_score_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_28set_part_for_white_agg_score_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_28set_part_for_white_agg_score___get__(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_28set_part_for_white_agg_score___get__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "src/pygcgopt/decomposition.pxi":187
 *     @property
 *     def set_part_for_white_agg_score(self):
 *         return self.thisptr.getSetPartForWhiteAggScore()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getSetPartForWhiteAggScore();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 187, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":186
 * 
 *     @property
 *     def set_part_for_white_agg_score(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getSetPartForWhiteAggScore()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.set_part_for_white_agg_score.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":190
 * 
 *     @property
 *     def benders_score(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getBendersScore()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_13benders_score_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_13benders_score_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_13benders_score___get__(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_13benders_score___get__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "src/pygcgopt/decomposition.pxi":191
 *     @property
 *     def benders_score(self):
 *         return self.thisptr.getBendersScore()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getBendersScore();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 191, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":190
 * 
 *     @property
 *     def benders_score(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getBendersScore()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.benders_score.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":194
 * 
 *     @property
 *     def strong_decomp_score(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getStrongDecompScore()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_19strong_decomp_score_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_19strong_decomp_score_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_19strong_decomp_score___get__(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_19strong_decomp_score___get__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "src/pygcgopt/decomposition.pxi":195
 *     @property
 *     def strong_decomp_score(self):
 *         return self.thisptr.getStrongDecompScore()             # <<<<<<<<<<<<<<
 * 
 *     # BEGIN AUTOGENERATED BLOCK
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getStrongDecompScore();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 195, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":194
 * 
 *     @property
 *     def strong_decomp_score(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getStrongDecompScore()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.strong_decomp_score.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":199
 *     # BEGIN AUTOGENERATED BLOCK
 * 
 *     def addBlock(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Adds a block
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_25addBlock(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_24addBlock[] = "PartialDecomposition.addBlock(self)\nAdds a block\n\n        :return: the number (id) of the new block\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_25addBlock(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addBlock (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_24addBlock(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_24addBlock(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addBlock", 0);

  /* "src/pygcgopt/decomposition.pxi":204
 *         :return: the number (id) of the new block
 *         """
 *         cdef int result = self.thisptr.addBlock()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->addBlock();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 204, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":205
 *         """
 *         cdef int result = self.thisptr.addBlock()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def addClockTime(PartialDecomposition self, double clocktime):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":199
 *     # BEGIN AUTOGENERATED BLOCK
 * 
 *     def addBlock(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Adds a block
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.addBlock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":207
 *         return result
 * 
 *     def addClockTime(PartialDecomposition self, double clocktime):             # <<<<<<<<<<<<<<
 *         """Adds detection time of one detector
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_27addClockTime(PyObject *__pyx_v_self, PyObject *__pyx_arg_clocktime); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_26addClockTime[] = "PartialDecomposition.addClockTime(self, double clocktime)\nAdds detection time of one detector\n\n        incorporates the needed time of some detector in the detector chain.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_27addClockTime(PyObject *__pyx_v_self, PyObject *__pyx_arg_clocktime) {
  double __pyx_v_clocktime;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addClockTime (wrapper)", 0);
  assert(__pyx_arg_clocktime); {
    __pyx_v_clocktime = __pyx_PyFloat_AsDouble(__pyx_arg_clocktime); if (unlikely((__pyx_v_clocktime == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 207, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.addClockTime", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_26addClockTime(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((double)__pyx_v_clocktime));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_26addClockTime(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, double __pyx_v_clocktime) {
  double __pyx_v_cpp_clocktime;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addClockTime", 0);

  /* "src/pygcgopt/decomposition.pxi":212
 *         incorporates the needed time of some detector in the detector chain.
 *         """
 *         cdef double cpp_clocktime = clocktime             # <<<<<<<<<<<<<<
 *         self.thisptr.addClockTime(cpp_clocktime)
 * 
 */
  __pyx_v_cpp_clocktime = __pyx_v_clocktime;

  /* "src/pygcgopt/decomposition.pxi":213
 *         """
 *         cdef double cpp_clocktime = clocktime
 *         self.thisptr.addClockTime(cpp_clocktime)             # <<<<<<<<<<<<<<
 * 
 *     def addDecChangesFromAncestor(PartialDecomposition self, PartialDecomposition ancestor):
 */
  try {
    __pyx_v_self->thisptr->addClockTime(__pyx_v_cpp_clocktime);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 213, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":207
 *         return result
 * 
 *     def addClockTime(PartialDecomposition self, double clocktime):             # <<<<<<<<<<<<<<
 *         """Adds detection time of one detector
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.addClockTime", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":215
 *         self.thisptr.addClockTime(cpp_clocktime)
 * 
 *     def addDecChangesFromAncestor(PartialDecomposition self, PartialDecomposition ancestor):             # <<<<<<<<<<<<<<
 *         """Adds the statistical differences to an ancestor
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_29addDecChangesFromAncestor(PyObject *__pyx_v_self, PyObject *__pyx_v_ancestor); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_28addDecChangesFromAncestor[] = "PartialDecomposition.addDecChangesFromAncestor(self, PartialDecomposition ancestor)\nAdds the statistical differences to an ancestor\n\n        incorporates the changes from ancestor partialdec into the statistical data structures.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_29addDecChangesFromAncestor(PyObject *__pyx_v_self, PyObject *__pyx_v_ancestor) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addDecChangesFromAncestor (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ancestor), __pyx_ptype_8pygcgopt_3gcg_PartialDecomposition, 1, "ancestor", 0))) __PYX_ERR(2, 215, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_28addDecChangesFromAncestor(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_ancestor));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_28addDecChangesFromAncestor(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_ancestor) {
  gcg::PARTIALDECOMP *__pyx_v_cpp_ancestor;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  gcg::PARTIALDECOMP *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addDecChangesFromAncestor", 0);

  /* "src/pygcgopt/decomposition.pxi":220
 *         incorporates the changes from ancestor partialdec into the statistical data structures.
 *         """
 *         cdef PARTIALDECOMP * cpp_ancestor = ancestor.thisptr             # <<<<<<<<<<<<<<
 *         self.thisptr.addDecChangesFromAncestor(cpp_ancestor)
 * 
 */
  __pyx_t_1 = __pyx_v_ancestor->thisptr;
  __pyx_v_cpp_ancestor = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":221
 *         """
 *         cdef PARTIALDECOMP * cpp_ancestor = ancestor.thisptr
 *         self.thisptr.addDecChangesFromAncestor(cpp_ancestor)             # <<<<<<<<<<<<<<
 * 
 *     def addDetectorChainInfo(PartialDecomposition self, decinfo):
 */
  try {
    __pyx_v_self->thisptr->addDecChangesFromAncestor(__pyx_v_cpp_ancestor);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 221, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":215
 *         self.thisptr.addClockTime(cpp_clocktime)
 * 
 *     def addDecChangesFromAncestor(PartialDecomposition self, PartialDecomposition ancestor):             # <<<<<<<<<<<<<<
 *         """Adds the statistical differences to an ancestor
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.addDecChangesFromAncestor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":223
 *         self.thisptr.addDecChangesFromAncestor(cpp_ancestor)
 * 
 *     def addDetectorChainInfo(PartialDecomposition self, decinfo):             # <<<<<<<<<<<<<<
 *         """Add information about the detector chain
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_31addDetectorChainInfo(PyObject *__pyx_v_self, PyObject *__pyx_v_decinfo); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_30addDetectorChainInfo[] = "PartialDecomposition.addDetectorChainInfo(self, decinfo)\nAdd information about the detector chain\n\n        adds a detectorchain information string to the corresponding vector\n        (that carries information for each detector call)\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_31addDetectorChainInfo(PyObject *__pyx_v_self, PyObject *__pyx_v_decinfo) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addDetectorChainInfo (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_30addDetectorChainInfo(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((PyObject *)__pyx_v_decinfo));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_30addDetectorChainInfo(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_decinfo) {
  PyObject *__pyx_v_c_decinfo = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addDetectorChainInfo", 0);

  /* "src/pygcgopt/decomposition.pxi":229
 *         (that carries information for each detector call)
 *         """
 *         c_decinfo = str_conversion(decinfo)             # <<<<<<<<<<<<<<
 *         self.thisptr.addDetectorChainInfo(c_decinfo)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_str_conversion); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_decinfo) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_decinfo);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_c_decinfo = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "src/pygcgopt/decomposition.pxi":230
 *         """
 *         c_decinfo = str_conversion(decinfo)
 *         self.thisptr.addDetectorChainInfo(c_decinfo)             # <<<<<<<<<<<<<<
 * 
 *     def addNNewBlocks(PartialDecomposition self, int nnewblocks):
 */
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_c_decinfo); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(2, 230, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->addDetectorChainInfo(__pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 230, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":223
 *         self.thisptr.addDecChangesFromAncestor(cpp_ancestor)
 * 
 *     def addDetectorChainInfo(PartialDecomposition self, decinfo):             # <<<<<<<<<<<<<<
 *         """Add information about the detector chain
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.addDetectorChainInfo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_c_decinfo);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":232
 *         self.thisptr.addDetectorChainInfo(c_decinfo)
 * 
 *     def addNNewBlocks(PartialDecomposition self, int nnewblocks):             # <<<<<<<<<<<<<<
 *         """Adds how many new blocks were introduced
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_33addNNewBlocks(PyObject *__pyx_v_self, PyObject *__pyx_arg_nnewblocks); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_32addNNewBlocks[] = "PartialDecomposition.addNNewBlocks(self, int nnewblocks)\nAdds how many new blocks were introduced\n\n        bookkeeping information: adds number of new blocks created by a detector added to detector chain.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_33addNNewBlocks(PyObject *__pyx_v_self, PyObject *__pyx_arg_nnewblocks) {
  int __pyx_v_nnewblocks;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addNNewBlocks (wrapper)", 0);
  assert(__pyx_arg_nnewblocks); {
    __pyx_v_nnewblocks = __Pyx_PyInt_As_int(__pyx_arg_nnewblocks); if (unlikely((__pyx_v_nnewblocks == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 232, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.addNNewBlocks", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_32addNNewBlocks(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((int)__pyx_v_nnewblocks));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_32addNNewBlocks(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_nnewblocks) {
  int __pyx_v_cpp_nnewblocks;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addNNewBlocks", 0);

  /* "src/pygcgopt/decomposition.pxi":237
 *         bookkeeping information: adds number of new blocks created by a detector added to detector chain.
 *         """
 *         cdef int cpp_nnewblocks = nnewblocks             # <<<<<<<<<<<<<<
 *         self.thisptr.addNNewBlocks(cpp_nnewblocks)
 * 
 */
  __pyx_v_cpp_nnewblocks = __pyx_v_nnewblocks;

  /* "src/pygcgopt/decomposition.pxi":238
 *         """
 *         cdef int cpp_nnewblocks = nnewblocks
 *         self.thisptr.addNNewBlocks(cpp_nnewblocks)             # <<<<<<<<<<<<<<
 * 
 *     def addPctConssFromFree(PartialDecomposition self, double pct):
 */
  try {
    __pyx_v_self->thisptr->addNNewBlocks(__pyx_v_cpp_nnewblocks);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 238, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":232
 *         self.thisptr.addDetectorChainInfo(c_decinfo)
 * 
 *     def addNNewBlocks(PartialDecomposition self, int nnewblocks):             # <<<<<<<<<<<<<<
 *         """Adds how many new blocks were introduced
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.addNNewBlocks", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":240
 *         self.thisptr.addNNewBlocks(cpp_nnewblocks)
 * 
 *     def addPctConssFromFree(PartialDecomposition self, double pct):             # <<<<<<<<<<<<<<
 *         """Adds percentage of closed constraints
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_35addPctConssFromFree(PyObject *__pyx_v_self, PyObject *__pyx_arg_pct); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_34addPctConssFromFree[] = "PartialDecomposition.addPctConssFromFree(self, double pct)\nAdds percentage of closed constraints\n\n        bookkeeping information: fraction of constraints that are not longer open for a detector added to detector chain.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_35addPctConssFromFree(PyObject *__pyx_v_self, PyObject *__pyx_arg_pct) {
  double __pyx_v_pct;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addPctConssFromFree (wrapper)", 0);
  assert(__pyx_arg_pct); {
    __pyx_v_pct = __pyx_PyFloat_AsDouble(__pyx_arg_pct); if (unlikely((__pyx_v_pct == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 240, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.addPctConssFromFree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_34addPctConssFromFree(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((double)__pyx_v_pct));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_34addPctConssFromFree(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, double __pyx_v_pct) {
  double __pyx_v_cpp_pct;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addPctConssFromFree", 0);

  /* "src/pygcgopt/decomposition.pxi":245
 *         bookkeeping information: fraction of constraints that are not longer open for a detector added to detector chain.
 *         """
 *         cdef double cpp_pct = pct             # <<<<<<<<<<<<<<
 *         self.thisptr.addPctConssFromFree(cpp_pct)
 * 
 */
  __pyx_v_cpp_pct = __pyx_v_pct;

  /* "src/pygcgopt/decomposition.pxi":246
 *         """
 *         cdef double cpp_pct = pct
 *         self.thisptr.addPctConssFromFree(cpp_pct)             # <<<<<<<<<<<<<<
 * 
 *     def addPctConssToBlock(PartialDecomposition self, double pct):
 */
  try {
    __pyx_v_self->thisptr->addPctConssFromFree(__pyx_v_cpp_pct);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 246, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":240
 *         self.thisptr.addNNewBlocks(cpp_nnewblocks)
 * 
 *     def addPctConssFromFree(PartialDecomposition self, double pct):             # <<<<<<<<<<<<<<
 *         """Adds percentage of closed constraints
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.addPctConssFromFree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":248
 *         self.thisptr.addPctConssFromFree(cpp_pct)
 * 
 *     def addPctConssToBlock(PartialDecomposition self, double pct):             # <<<<<<<<<<<<<<
 *         """Adds percentage of constraints assigned to blocks
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_37addPctConssToBlock(PyObject *__pyx_v_self, PyObject *__pyx_arg_pct); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_36addPctConssToBlock[] = "PartialDecomposition.addPctConssToBlock(self, double pct)\nAdds percentage of constraints assigned to blocks\n\n        bookkeeping information: adds fraction of constraints assigned to a block for a detector added to detector chain\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_37addPctConssToBlock(PyObject *__pyx_v_self, PyObject *__pyx_arg_pct) {
  double __pyx_v_pct;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addPctConssToBlock (wrapper)", 0);
  assert(__pyx_arg_pct); {
    __pyx_v_pct = __pyx_PyFloat_AsDouble(__pyx_arg_pct); if (unlikely((__pyx_v_pct == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 248, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.addPctConssToBlock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_36addPctConssToBlock(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((double)__pyx_v_pct));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_36addPctConssToBlock(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, double __pyx_v_pct) {
  double __pyx_v_cpp_pct;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addPctConssToBlock", 0);

  /* "src/pygcgopt/decomposition.pxi":253
 *         bookkeeping information: adds fraction of constraints assigned to a block for a detector added to detector chain
 *         """
 *         cdef double cpp_pct = pct             # <<<<<<<<<<<<<<
 *         self.thisptr.addPctConssToBlock(cpp_pct)
 * 
 */
  __pyx_v_cpp_pct = __pyx_v_pct;

  /* "src/pygcgopt/decomposition.pxi":254
 *         """
 *         cdef double cpp_pct = pct
 *         self.thisptr.addPctConssToBlock(cpp_pct)             # <<<<<<<<<<<<<<
 * 
 *     def addPctConssToBorder(PartialDecomposition self, double pct):
 */
  try {
    __pyx_v_self->thisptr->addPctConssToBlock(__pyx_v_cpp_pct);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 254, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":248
 *         self.thisptr.addPctConssFromFree(cpp_pct)
 * 
 *     def addPctConssToBlock(PartialDecomposition self, double pct):             # <<<<<<<<<<<<<<
 *         """Adds percentage of constraints assigned to blocks
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.addPctConssToBlock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":256
 *         self.thisptr.addPctConssToBlock(cpp_pct)
 * 
 *     def addPctConssToBorder(PartialDecomposition self, double pct):             # <<<<<<<<<<<<<<
 *         """Adds percentage of constraints assigned to border
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_39addPctConssToBorder(PyObject *__pyx_v_self, PyObject *__pyx_arg_pct); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_38addPctConssToBorder[] = "PartialDecomposition.addPctConssToBorder(self, double pct)\nAdds percentage of constraints assigned to border\n\n        bookkeeping information: adds fraction of constraints assigned to the border for a detector added to detector chain.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_39addPctConssToBorder(PyObject *__pyx_v_self, PyObject *__pyx_arg_pct) {
  double __pyx_v_pct;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addPctConssToBorder (wrapper)", 0);
  assert(__pyx_arg_pct); {
    __pyx_v_pct = __pyx_PyFloat_AsDouble(__pyx_arg_pct); if (unlikely((__pyx_v_pct == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 256, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.addPctConssToBorder", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_38addPctConssToBorder(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((double)__pyx_v_pct));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_38addPctConssToBorder(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, double __pyx_v_pct) {
  double __pyx_v_cpp_pct;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addPctConssToBorder", 0);

  /* "src/pygcgopt/decomposition.pxi":261
 *         bookkeeping information: adds fraction of constraints assigned to the border for a detector added to detector chain.
 *         """
 *         cdef double cpp_pct = pct             # <<<<<<<<<<<<<<
 *         self.thisptr.addPctConssToBorder(cpp_pct)
 * 
 */
  __pyx_v_cpp_pct = __pyx_v_pct;

  /* "src/pygcgopt/decomposition.pxi":262
 *         """
 *         cdef double cpp_pct = pct
 *         self.thisptr.addPctConssToBorder(cpp_pct)             # <<<<<<<<<<<<<<
 * 
 *     def addPctVarsFromFree(PartialDecomposition self, double pct):
 */
  try {
    __pyx_v_self->thisptr->addPctConssToBorder(__pyx_v_cpp_pct);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 262, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":256
 *         self.thisptr.addPctConssToBlock(cpp_pct)
 * 
 *     def addPctConssToBorder(PartialDecomposition self, double pct):             # <<<<<<<<<<<<<<
 *         """Adds percentage of constraints assigned to border
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.addPctConssToBorder", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":264
 *         self.thisptr.addPctConssToBorder(cpp_pct)
 * 
 *     def addPctVarsFromFree(PartialDecomposition self, double pct):             # <<<<<<<<<<<<<<
 *         """Adds percentage of closed variables
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_41addPctVarsFromFree(PyObject *__pyx_v_self, PyObject *__pyx_arg_pct); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_40addPctVarsFromFree[] = "PartialDecomposition.addPctVarsFromFree(self, double pct)\nAdds percentage of closed variables\n\n        bookkeeping information: adds fraction of variables that are not longer open for a detector added to detector chain.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_41addPctVarsFromFree(PyObject *__pyx_v_self, PyObject *__pyx_arg_pct) {
  double __pyx_v_pct;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addPctVarsFromFree (wrapper)", 0);
  assert(__pyx_arg_pct); {
    __pyx_v_pct = __pyx_PyFloat_AsDouble(__pyx_arg_pct); if (unlikely((__pyx_v_pct == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 264, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.addPctVarsFromFree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_40addPctVarsFromFree(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((double)__pyx_v_pct));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_40addPctVarsFromFree(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, double __pyx_v_pct) {
  double __pyx_v_cpp_pct;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addPctVarsFromFree", 0);

  /* "src/pygcgopt/decomposition.pxi":269
 *         bookkeeping information: adds fraction of variables that are not longer open for a detector added to detector chain.
 *         """
 *         cdef double cpp_pct = pct             # <<<<<<<<<<<<<<
 *         self.thisptr.addPctVarsFromFree(cpp_pct)
 * 
 */
  __pyx_v_cpp_pct = __pyx_v_pct;

  /* "src/pygcgopt/decomposition.pxi":270
 *         """
 *         cdef double cpp_pct = pct
 *         self.thisptr.addPctVarsFromFree(cpp_pct)             # <<<<<<<<<<<<<<
 * 
 *     def addPctVarsToBlock(PartialDecomposition self, double pct):
 */
  try {
    __pyx_v_self->thisptr->addPctVarsFromFree(__pyx_v_cpp_pct);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 270, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":264
 *         self.thisptr.addPctConssToBorder(cpp_pct)
 * 
 *     def addPctVarsFromFree(PartialDecomposition self, double pct):             # <<<<<<<<<<<<<<
 *         """Adds percentage of closed variables
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.addPctVarsFromFree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":272
 *         self.thisptr.addPctVarsFromFree(cpp_pct)
 * 
 *     def addPctVarsToBlock(PartialDecomposition self, double pct):             # <<<<<<<<<<<<<<
 *         """Adds percentage of variables assigned to blocks
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_43addPctVarsToBlock(PyObject *__pyx_v_self, PyObject *__pyx_arg_pct); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_42addPctVarsToBlock[] = "PartialDecomposition.addPctVarsToBlock(self, double pct)\nAdds percentage of variables assigned to blocks\n\n        bookkeeping information: adds fraction of variables assigned to a block for a detector added to detector chain\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_43addPctVarsToBlock(PyObject *__pyx_v_self, PyObject *__pyx_arg_pct) {
  double __pyx_v_pct;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addPctVarsToBlock (wrapper)", 0);
  assert(__pyx_arg_pct); {
    __pyx_v_pct = __pyx_PyFloat_AsDouble(__pyx_arg_pct); if (unlikely((__pyx_v_pct == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 272, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.addPctVarsToBlock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_42addPctVarsToBlock(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((double)__pyx_v_pct));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_42addPctVarsToBlock(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, double __pyx_v_pct) {
  double __pyx_v_cpp_pct;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addPctVarsToBlock", 0);

  /* "src/pygcgopt/decomposition.pxi":277
 *         bookkeeping information: adds fraction of variables assigned to a block for a detector added to detector chain
 *         """
 *         cdef double cpp_pct = pct             # <<<<<<<<<<<<<<
 *         self.thisptr.addPctVarsToBlock(cpp_pct)
 * 
 */
  __pyx_v_cpp_pct = __pyx_v_pct;

  /* "src/pygcgopt/decomposition.pxi":278
 *         """
 *         cdef double cpp_pct = pct
 *         self.thisptr.addPctVarsToBlock(cpp_pct)             # <<<<<<<<<<<<<<
 * 
 *     def addPctVarsToBorder(PartialDecomposition self, double pct):
 */
  try {
    __pyx_v_self->thisptr->addPctVarsToBlock(__pyx_v_cpp_pct);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 278, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":272
 *         self.thisptr.addPctVarsFromFree(cpp_pct)
 * 
 *     def addPctVarsToBlock(PartialDecomposition self, double pct):             # <<<<<<<<<<<<<<
 *         """Adds percentage of variables assigned to blocks
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.addPctVarsToBlock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":280
 *         self.thisptr.addPctVarsToBlock(cpp_pct)
 * 
 *     def addPctVarsToBorder(PartialDecomposition self, double pct):             # <<<<<<<<<<<<<<
 *         """Adds percentage of variables assigned to border
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_45addPctVarsToBorder(PyObject *__pyx_v_self, PyObject *__pyx_arg_pct); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_44addPctVarsToBorder[] = "PartialDecomposition.addPctVarsToBorder(self, double pct)\nAdds percentage of variables assigned to border\n\n        bookkeeping information: adds fraction of variables assigned to the border for a detector added to detector chain.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_45addPctVarsToBorder(PyObject *__pyx_v_self, PyObject *__pyx_arg_pct) {
  double __pyx_v_pct;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addPctVarsToBorder (wrapper)", 0);
  assert(__pyx_arg_pct); {
    __pyx_v_pct = __pyx_PyFloat_AsDouble(__pyx_arg_pct); if (unlikely((__pyx_v_pct == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 280, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.addPctVarsToBorder", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_44addPctVarsToBorder(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((double)__pyx_v_pct));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_44addPctVarsToBorder(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, double __pyx_v_pct) {
  double __pyx_v_cpp_pct;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addPctVarsToBorder", 0);

  /* "src/pygcgopt/decomposition.pxi":285
 *         bookkeeping information: adds fraction of variables assigned to the border for a detector added to detector chain.
 *         """
 *         cdef double cpp_pct = pct             # <<<<<<<<<<<<<<
 *         self.thisptr.addPctVarsToBorder(cpp_pct)
 * 
 */
  __pyx_v_cpp_pct = __pyx_v_pct;

  /* "src/pygcgopt/decomposition.pxi":286
 *         """
 *         cdef double cpp_pct = pct
 *         self.thisptr.addPctVarsToBorder(cpp_pct)             # <<<<<<<<<<<<<<
 * 
 *     def alreadyAssignedConssToBlocks(PartialDecomposition self):
 */
  try {
    __pyx_v_self->thisptr->addPctVarsToBorder(__pyx_v_cpp_pct);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 286, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":280
 *         self.thisptr.addPctVarsToBlock(cpp_pct)
 * 
 *     def addPctVarsToBorder(PartialDecomposition self, double pct):             # <<<<<<<<<<<<<<
 *         """Adds percentage of variables assigned to border
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.addPctVarsToBorder", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":288
 *         self.thisptr.addPctVarsToBorder(cpp_pct)
 * 
 *     def alreadyAssignedConssToBlocks(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Method to check if at least one constraint is assigned to some block
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_47alreadyAssignedConssToBlocks(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_46alreadyAssignedConssToBlocks[] = "PartialDecomposition.alreadyAssignedConssToBlocks(self)\nMethod to check if at least one constraint is assigned to some block\n\n        :return: True iff at least one constraint is assigned to a block\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_47alreadyAssignedConssToBlocks(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("alreadyAssignedConssToBlocks (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_46alreadyAssignedConssToBlocks(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_46alreadyAssignedConssToBlocks(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  bool __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("alreadyAssignedConssToBlocks", 0);

  /* "src/pygcgopt/decomposition.pxi":293
 *         :return: True iff at least one constraint is assigned to a block
 *         """
 *         cdef bool result = self.thisptr.alreadyAssignedConssToBlocks()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->alreadyAssignedConssToBlocks();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 293, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":294
 *         """
 *         cdef bool result = self.thisptr.alreadyAssignedConssToBlocks()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     # def assignBorderFromConstoblock(PartialDecomposition self, SCIP_HASHMAP * constoblock, int givenNBlocks):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":288
 *         self.thisptr.addPctVarsToBorder(cpp_pct)
 * 
 *     def alreadyAssignedConssToBlocks(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Method to check if at least one constraint is assigned to some block
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.alreadyAssignedConssToBlocks", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":308
 *     #     raise NotImplementedError()
 * 
 *     def assignCurrentStairlinking(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Assigns open vars to stairlinking if appropriate
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_49assignCurrentStairlinking(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_48assignCurrentStairlinking[] = "PartialDecomposition.assignCurrentStairlinking(self)\nAssigns open vars to stairlinking if appropriate\n\n        assigns open vars to stairlinking if they can be found in exactly two consecutive blocks\n\n        :return: True iff at least one stairlinkingvar was assigned.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_49assignCurrentStairlinking(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("assignCurrentStairlinking (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_48assignCurrentStairlinking(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_48assignCurrentStairlinking(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  bool __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assignCurrentStairlinking", 0);

  /* "src/pygcgopt/decomposition.pxi":315
 *         :return: True iff at least one stairlinkingvar was assigned.
 *         """
 *         cdef bool result = self.thisptr.assignCurrentStairlinking()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->assignCurrentStairlinking();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 315, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":316
 *         """
 *         cdef bool result = self.thisptr.assignCurrentStairlinking()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def assignOpenConssToMaster(PartialDecomposition self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":308
 *     #     raise NotImplementedError()
 * 
 *     def assignCurrentStairlinking(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Assigns open vars to stairlinking if appropriate
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.assignCurrentStairlinking", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":318
 *         return result
 * 
 *     def assignOpenConssToMaster(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Assigns open conss to master.
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_51assignOpenConssToMaster(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_50assignOpenConssToMaster[] = "PartialDecomposition.assignOpenConssToMaster(self)\nAssigns open conss to master.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_51assignOpenConssToMaster(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("assignOpenConssToMaster (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_50assignOpenConssToMaster(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_50assignOpenConssToMaster(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assignOpenConssToMaster", 0);

  /* "src/pygcgopt/decomposition.pxi":321
 *         """Assigns open conss to master.
 *         """
 *         self.thisptr.assignOpenConssToMaster()             # <<<<<<<<<<<<<<
 * 
 *     # def assignPartialdecFromConstoblock(PartialDecomposition self, SCIP_HASHMAP * constoblock, int additionalNBlocks):
 */
  try {
    __pyx_v_self->thisptr->assignOpenConssToMaster();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 321, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":318
 *         return result
 * 
 *     def assignOpenConssToMaster(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Assigns open conss to master.
 *         """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.assignOpenConssToMaster", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":336
 *     #     raise NotImplementedError()
 * 
 *     def assignPartialdecFromConstoblockVector(PartialDecomposition self, object constoblock, int additionalNBlocks):             # <<<<<<<<<<<<<<
 *         """assigns conss structure according to given vector
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_53assignPartialdecFromConstoblockVector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_52assignPartialdecFromConstoblockVector[] = "PartialDecomposition.assignPartialdecFromConstoblockVector(self, constoblock, int additionalNBlocks)\nassigns conss structure according to given vector\n\n        adds blocks and assigns open conss to a new block or to master\n        according to the cons assignment information given in constoblock vector\n\n        :return: scip return code\n        .. seealso::  * :meth:`assignPartialdecFromConstoblock()`\n        .. note:: master is indicated by assigning cons to index additionalNBlocks.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_53assignPartialdecFromConstoblockVector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_constoblock = 0;
  int __pyx_v_additionalNBlocks;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("assignPartialdecFromConstoblockVector (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_constoblock,&__pyx_n_s_additionalNBlocks,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_constoblock)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_additionalNBlocks)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("assignPartialdecFromConstoblockVector", 1, 2, 2, 1); __PYX_ERR(2, 336, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "assignPartialdecFromConstoblockVector") < 0)) __PYX_ERR(2, 336, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_constoblock = values[0];
    __pyx_v_additionalNBlocks = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_additionalNBlocks == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 336, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("assignPartialdecFromConstoblockVector", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 336, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.assignPartialdecFromConstoblockVector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_52assignPartialdecFromConstoblockVector(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), __pyx_v_constoblock, __pyx_v_additionalNBlocks);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_52assignPartialdecFromConstoblockVector(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_constoblock, int __pyx_v_additionalNBlocks) {
  CYTHON_UNUSED std::vector<int>  __pyx_v_cpp_constoblock;
  CYTHON_UNUSED int __pyx_v_cpp_additionalNBlocks;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<int>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assignPartialdecFromConstoblockVector", 0);

  /* "src/pygcgopt/decomposition.pxi":346
 *         .. note:: master is indicated by assigning cons to index additionalNBlocks.
 *         """
 *         cdef vector[int] cpp_constoblock = constoblock             # <<<<<<<<<<<<<<
 *         cdef int cpp_additionalNBlocks = additionalNBlocks
 *         # TODO implement function
 */
  __pyx_t_1 = __pyx_convert_vector_from_py_int(__pyx_v_constoblock); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 346, __pyx_L1_error)
  __pyx_v_cpp_constoblock = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":347
 *         """
 *         cdef vector[int] cpp_constoblock = constoblock
 *         cdef int cpp_additionalNBlocks = additionalNBlocks             # <<<<<<<<<<<<<<
 *         # TODO implement function
 *         raise NotImplementedError()
 */
  __pyx_v_cpp_additionalNBlocks = __pyx_v_additionalNBlocks;

  /* "src/pygcgopt/decomposition.pxi":349
 *         cdef int cpp_additionalNBlocks = additionalNBlocks
 *         # TODO implement function
 *         raise NotImplementedError()             # <<<<<<<<<<<<<<
 * 
 *     def assignSmallestComponentsButOneConssAdjacency(PartialDecomposition self):
 */
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_builtin_NotImplementedError); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_Raise(__pyx_t_2, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __PYX_ERR(2, 349, __pyx_L1_error)

  /* "src/pygcgopt/decomposition.pxi":336
 *     #     raise NotImplementedError()
 * 
 *     def assignPartialdecFromConstoblockVector(PartialDecomposition self, object constoblock, int additionalNBlocks):             # <<<<<<<<<<<<<<
 *         """assigns conss structure according to given vector
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.assignPartialdecFromConstoblockVector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":351
 *         raise NotImplementedError()
 * 
 *     def assignSmallestComponentsButOneConssAdjacency(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """computes components by connectedness of conss and vars
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_55assignSmallestComponentsButOneConssAdjacency(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_54assignSmallestComponentsButOneConssAdjacency[] = "PartialDecomposition.assignSmallestComponentsButOneConssAdjacency(self)\ncomputes components by connectedness of conss and vars\n\n        computes components corresponding to connectedness of conss and vars\n        and assigns them accordingly (all but one of largest components)\n\n        strategy: assigns all conss same block if they are connected\n        two constraints are adjacent if there is a common variable\n\n        .. note:: this relies on the consadjacency structure of the detprobdata\n        hence it cannot be applied in presence of linking variables.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_55assignSmallestComponentsButOneConssAdjacency(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("assignSmallestComponentsButOneConssAdjacency (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_54assignSmallestComponentsButOneConssAdjacency(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_54assignSmallestComponentsButOneConssAdjacency(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assignSmallestComponentsButOneConssAdjacency", 0);

  /* "src/pygcgopt/decomposition.pxi":363
 *         hence it cannot be applied in presence of linking variables.
 *         """
 *         self.thisptr.assignSmallestComponentsButOneConssAdjacency()             # <<<<<<<<<<<<<<
 * 
 *     def calcStairlinkingVars(PartialDecomposition self):
 */
  try {
    __pyx_v_self->thisptr->assignSmallestComponentsButOneConssAdjacency();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 363, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":351
 *         raise NotImplementedError()
 * 
 *     def assignSmallestComponentsButOneConssAdjacency(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """computes components by connectedness of conss and vars
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.assignSmallestComponentsButOneConssAdjacency", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":365
 *         self.thisptr.assignSmallestComponentsButOneConssAdjacency()
 * 
 *     def calcStairlinkingVars(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Reassigns linking vars to stairlinkingvars if possible
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_57calcStairlinkingVars(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_56calcStairlinkingVars[] = "PartialDecomposition.calcStairlinkingVars(self)\nReassigns linking vars to stairlinkingvars if possible\n\n        potentially reorders blocks for making a maximum number of linking vars stairlinking\n        if all vars that connect exactly two blocks have a staircase structure, all of them become stairlinkingvars\n        otherwise, the stairlinking assignment is done greedily\n        .. note:: precondition: partialdec does not have any stairlinking vars.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_57calcStairlinkingVars(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcStairlinkingVars (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_56calcStairlinkingVars(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_56calcStairlinkingVars(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calcStairlinkingVars", 0);

  /* "src/pygcgopt/decomposition.pxi":373
 *         .. note:: precondition: partialdec does not have any stairlinking vars.
 *         """
 *         self.thisptr.calcStairlinkingVars()             # <<<<<<<<<<<<<<
 * 
 *     def checkAllConssAssigned(PartialDecomposition self):
 */
  try {
    __pyx_v_self->thisptr->calcStairlinkingVars();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 373, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":365
 *         self.thisptr.assignSmallestComponentsButOneConssAdjacency()
 * 
 *     def calcStairlinkingVars(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Reassigns linking vars to stairlinkingvars if possible
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.calcStairlinkingVars", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":375
 *         self.thisptr.calcStairlinkingVars()
 * 
 *     def checkAllConssAssigned(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Checks if all conss are assigned
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_59checkAllConssAssigned(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_58checkAllConssAssigned[] = "PartialDecomposition.checkAllConssAssigned(self)\nChecks if all conss are assigned\n\n        returns True iff all constraints are assigned and deletes the vector open conss if so\n\n        :return: True iff all constraints are assigned\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_59checkAllConssAssigned(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("checkAllConssAssigned (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_58checkAllConssAssigned(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_58checkAllConssAssigned(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  bool __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("checkAllConssAssigned", 0);

  /* "src/pygcgopt/decomposition.pxi":382
 *         :return: True iff all constraints are assigned
 *         """
 *         cdef bool result = self.thisptr.checkAllConssAssigned()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->checkAllConssAssigned();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 382, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":383
 *         """
 *         cdef bool result = self.thisptr.checkAllConssAssigned()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def checkConsistency(PartialDecomposition self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":375
 *         self.thisptr.calcStairlinkingVars()
 * 
 *     def checkAllConssAssigned(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Checks if all conss are assigned
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.checkAllConssAssigned", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":385
 *         return result
 * 
 *     def checkConsistency(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Checks whether the assignments in the partialdec are consistent
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_61checkConsistency(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_60checkConsistency[] = "PartialDecomposition.checkConsistency(self)\nChecks whether the assignments in the partialdec are consistent\n\n        The following checks are performed:\n        - check if nblocks is set appropriately\n        - check for empty (row- and col-wise) blocks\n        - every variable is assigned at most once\n        - check if all not assigned variables are open vars\n        - check if all open vars are not assigned\n        - every constraint is assigned at most once\n        - check if all not assigned constraints are open cons\n        - check if all open conss are not assigned\n        - check if the data structures are sorted\n        - check if variables hitting a cons are either in the cons's block or border or still open\n\n        :return: True iff the partialdec seems to be consistent\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_61checkConsistency(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("checkConsistency (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_60checkConsistency(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_60checkConsistency(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  bool __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("checkConsistency", 0);

  /* "src/pygcgopt/decomposition.pxi":402
 *         :return: True iff the partialdec seems to be consistent
 *         """
 *         cdef bool result = self.thisptr.checkConsistency()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->checkConsistency();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 402, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":403
 *         """
 *         cdef bool result = self.thisptr.checkConsistency()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def complete(PartialDecomposition self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":385
 *         return result
 * 
 *     def checkConsistency(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Checks whether the assignments in the partialdec are consistent
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.checkConsistency", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":405
 *         return result
 * 
 *     def complete(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Assigns all open constraints and open variables trivially
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_63complete(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_62complete[] = "PartialDecomposition.complete(self)\nAssigns all open constraints and open variables trivially\n\n        strategy: assigns all open conss and vars to blocks if they can be refined there, otherwise to the master\n\n        :note: partialdecomps should usually be completed by a detector, only use this function if you know what you are doing.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_63complete(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("complete (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_62complete(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_62complete(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("complete", 0);

  /* "src/pygcgopt/decomposition.pxi":412
 *         :note: partialdecomps should usually be completed by a detector, only use this function if you know what you are doing.
 *         """
 *         self.thisptr.complete()             # <<<<<<<<<<<<<<
 * 
 *     def completeByConnected(PartialDecomposition self):
 */
  try {
    __pyx_v_self->thisptr->complete();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 412, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":405
 *         return result
 * 
 *     def complete(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Assigns all open constraints and open variables trivially
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.complete", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":414
 *         self.thisptr.complete()
 * 
 *     def completeByConnected(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Assigns all open constraints and open variables
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_65completeByConnected(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_64completeByConnected[] = "PartialDecomposition.completeByConnected(self)\nAssigns all open constraints and open variables\n\n        strategy: assigns all conss and vars to the same block if they are connected,\n        a cons and a var are adjacent if the var appears in the cons.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_65completeByConnected(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("completeByConnected (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_64completeByConnected(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_64completeByConnected(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("completeByConnected", 0);

  /* "src/pygcgopt/decomposition.pxi":420
 *         a cons and a var are adjacent if the var appears in the cons.
 *         """
 *         self.thisptr.completeByConnected()             # <<<<<<<<<<<<<<
 * 
 *     def completeByConnectedConssAdjacency(PartialDecomposition self):
 */
  try {
    __pyx_v_self->thisptr->completeByConnected();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 420, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":414
 *         self.thisptr.complete()
 * 
 *     def completeByConnected(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Assigns all open constraints and open variables
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.completeByConnected", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":422
 *         self.thisptr.completeByConnected()
 * 
 *     def completeByConnectedConssAdjacency(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Assigns all open constraints and open variables
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_67completeByConnectedConssAdjacency(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_66completeByConnectedConssAdjacency[] = "PartialDecomposition.completeByConnectedConssAdjacency(self)\nAssigns all open constraints and open variables\n\n        strategy: assigns all conss and vars to the same block if they are connected\n        a cons and a var are adjacent if the var appears in the cons\n        .. note:: this relies on the consadjacency structure of the detprobdata\n        hence it cannot be applied in presence of linking variables.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_67completeByConnectedConssAdjacency(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("completeByConnectedConssAdjacency (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_66completeByConnectedConssAdjacency(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_66completeByConnectedConssAdjacency(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("completeByConnectedConssAdjacency", 0);

  /* "src/pygcgopt/decomposition.pxi":430
 *         hence it cannot be applied in presence of linking variables.
 *         """
 *         self.thisptr.completeByConnectedConssAdjacency()             # <<<<<<<<<<<<<<
 * 
 *     def completeGreedily(PartialDecomposition self):
 */
  try {
    __pyx_v_self->thisptr->completeByConnectedConssAdjacency();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 430, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":422
 *         self.thisptr.completeByConnected()
 * 
 *     def completeByConnectedConssAdjacency(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Assigns all open constraints and open variables
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.completeByConnectedConssAdjacency", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":432
 *         self.thisptr.completeByConnectedConssAdjacency()
 * 
 *     def completeGreedily(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Assigns all open constraints and open variables
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_69completeGreedily(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_68completeGreedily[] = "PartialDecomposition.completeGreedily(self)\nAssigns all open constraints and open variables\n\n        strategy: assigns a cons (and related vars) to a new block if possible,\n        if not to an existing block if possible (by means of prior var assignments)\n        and finally to master, if there does not exist such a block.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_69completeGreedily(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("completeGreedily (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_68completeGreedily(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_68completeGreedily(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("completeGreedily", 0);

  /* "src/pygcgopt/decomposition.pxi":439
 *         and finally to master, if there does not exist such a block.
 *         """
 *         self.thisptr.completeGreedily()             # <<<<<<<<<<<<<<
 * 
 *     def removeMastercons(PartialDecomposition self, int consid):
 */
  try {
    __pyx_v_self->thisptr->completeGreedily();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 439, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":432
 *         self.thisptr.completeByConnectedConssAdjacency()
 * 
 *     def completeGreedily(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Assigns all open constraints and open variables
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.completeGreedily", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":441
 *         self.thisptr.completeGreedily()
 * 
 *     def removeMastercons(PartialDecomposition self, int consid):             # <<<<<<<<<<<<<<
 *         """Removes the given cons from master.
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_71removeMastercons(PyObject *__pyx_v_self, PyObject *__pyx_arg_consid); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_70removeMastercons[] = "PartialDecomposition.removeMastercons(self, int consid)\nRemoves the given cons from master.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_71removeMastercons(PyObject *__pyx_v_self, PyObject *__pyx_arg_consid) {
  int __pyx_v_consid;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("removeMastercons (wrapper)", 0);
  assert(__pyx_arg_consid); {
    __pyx_v_consid = __Pyx_PyInt_As_int(__pyx_arg_consid); if (unlikely((__pyx_v_consid == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 441, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.removeMastercons", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_70removeMastercons(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((int)__pyx_v_consid));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_70removeMastercons(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_consid) {
  int __pyx_v_cpp_consid;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("removeMastercons", 0);

  /* "src/pygcgopt/decomposition.pxi":444
 *         """Removes the given cons from master.
 *         """
 *         cdef int cpp_consid = consid             # <<<<<<<<<<<<<<
 *         self.thisptr.removeMastercons(cpp_consid)
 * 
 */
  __pyx_v_cpp_consid = __pyx_v_consid;

  /* "src/pygcgopt/decomposition.pxi":445
 *         """
 *         cdef int cpp_consid = consid
 *         self.thisptr.removeMastercons(cpp_consid)             # <<<<<<<<<<<<<<
 * 
 *     def considerImplicits(PartialDecomposition self):
 */
  try {
    __pyx_v_self->thisptr->removeMastercons(__pyx_v_cpp_consid);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 445, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":441
 *         self.thisptr.completeGreedily()
 * 
 *     def removeMastercons(PartialDecomposition self, int consid):             # <<<<<<<<<<<<<<
 *         """Removes the given cons from master.
 *         """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.removeMastercons", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":447
 *         self.thisptr.removeMastercons(cpp_consid)
 * 
 *     def considerImplicits(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Assigns every open cons/var.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_73considerImplicits(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_72considerImplicits[] = "PartialDecomposition.considerImplicits(self)\nAssigns every open cons/var.\n\n        Assignments happen as follows:\n        - to the respective block if it hits exactly one blockvar/blockcons and no open vars/conss\n        - to master/linking if it hits blockvars/blockconss assigned to different blocks\n        - and every cons to master that hits a master var\n        - and every var to master if it does not hit any blockcons and has no open cons\n        - leave the cons/variableopen if nothing from the above holds\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_73considerImplicits(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("considerImplicits (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_72considerImplicits(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_72considerImplicits(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("considerImplicits", 0);

  /* "src/pygcgopt/decomposition.pxi":457
 *         - leave the cons/variableopen if nothing from the above holds
 *         """
 *         self.thisptr.considerImplicits()             # <<<<<<<<<<<<<<
 * 
 *     def copyPartitionStatistics(PartialDecomposition self, PartialDecomposition otherpartialdec):
 */
  try {
    __pyx_v_self->thisptr->considerImplicits();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 457, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":447
 *         self.thisptr.removeMastercons(cpp_consid)
 * 
 *     def considerImplicits(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Assigns every open cons/var.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.considerImplicits", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":459
 *         self.thisptr.considerImplicits()
 * 
 *     def copyPartitionStatistics(PartialDecomposition self, PartialDecomposition otherpartialdec):             # <<<<<<<<<<<<<<
 *         """Copies the given partialdec's partition statistics
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_75copyPartitionStatistics(PyObject *__pyx_v_self, PyObject *__pyx_v_otherpartialdec); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_74copyPartitionStatistics[] = "PartialDecomposition.copyPartitionStatistics(self, PartialDecomposition otherpartialdec)\nCopies the given partialdec's partition statistics\n\n        :param otherpartialdec: partialdec whose partition statistics are to be copied.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_75copyPartitionStatistics(PyObject *__pyx_v_self, PyObject *__pyx_v_otherpartialdec) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copyPartitionStatistics (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_otherpartialdec), __pyx_ptype_8pygcgopt_3gcg_PartialDecomposition, 1, "otherpartialdec", 0))) __PYX_ERR(2, 459, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_74copyPartitionStatistics(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_otherpartialdec));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_74copyPartitionStatistics(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_otherpartialdec) {
  gcg::PARTIALDECOMP *__pyx_v_cpp_otherpartialdec;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  gcg::PARTIALDECOMP *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copyPartitionStatistics", 0);

  /* "src/pygcgopt/decomposition.pxi":464
 *         :param otherpartialdec: partialdec whose partition statistics are to be copied.
 *         """
 *         cdef PARTIALDECOMP * cpp_otherpartialdec = otherpartialdec.thisptr             # <<<<<<<<<<<<<<
 *         self.thisptr.copyPartitionStatistics(cpp_otherpartialdec)
 * 
 */
  __pyx_t_1 = __pyx_v_otherpartialdec->thisptr;
  __pyx_v_cpp_otherpartialdec = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":465
 *         """
 *         cdef PARTIALDECOMP * cpp_otherpartialdec = otherpartialdec.thisptr
 *         self.thisptr.copyPartitionStatistics(cpp_otherpartialdec)             # <<<<<<<<<<<<<<
 * 
 *     def deleteEmptyBlocks(PartialDecomposition self, bool variables):
 */
  try {
    __pyx_v_self->thisptr->copyPartitionStatistics(__pyx_v_cpp_otherpartialdec);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 465, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":459
 *         self.thisptr.considerImplicits()
 * 
 *     def copyPartitionStatistics(PartialDecomposition self, PartialDecomposition otherpartialdec):             # <<<<<<<<<<<<<<
 *         """Copies the given partialdec's partition statistics
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.copyPartitionStatistics", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":467
 *         self.thisptr.copyPartitionStatistics(cpp_otherpartialdec)
 * 
 *     def deleteEmptyBlocks(PartialDecomposition self, bool variables):             # <<<<<<<<<<<<<<
 *         """Deletes empty blocks and sets nblocks accordingly
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_77deleteEmptyBlocks(PyObject *__pyx_v_self, PyObject *__pyx_arg_variables); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_76deleteEmptyBlocks[] = "PartialDecomposition.deleteEmptyBlocks(self, bool variables)\nDeletes empty blocks and sets nblocks accordingly\n\n        A block is considered to be empty if no constraint is assigned to it,\n        variables in blocks with no constraints become open\n\n        :param variables: if True, then blocks with no constraints but at least one variable are considered to be nonempty.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_77deleteEmptyBlocks(PyObject *__pyx_v_self, PyObject *__pyx_arg_variables) {
  bool __pyx_v_variables;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("deleteEmptyBlocks (wrapper)", 0);
  assert(__pyx_arg_variables); {
    __pyx_v_variables = __Pyx_PyObject_IsTrue(__pyx_arg_variables); if (unlikely((__pyx_v_variables == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(2, 467, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.deleteEmptyBlocks", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_76deleteEmptyBlocks(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((bool)__pyx_v_variables));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_76deleteEmptyBlocks(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, bool __pyx_v_variables) {
  bool __pyx_v_cpp_variables;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("deleteEmptyBlocks", 0);

  /* "src/pygcgopt/decomposition.pxi":475
 *         :param variables: if True, then blocks with no constraints but at least one variable are considered to be nonempty.
 *         """
 *         cdef bool cpp_variables = variables             # <<<<<<<<<<<<<<
 *         self.thisptr.deleteEmptyBlocks(cpp_variables)
 * 
 */
  __pyx_v_cpp_variables = __pyx_v_variables;

  /* "src/pygcgopt/decomposition.pxi":476
 *         """
 *         cdef bool cpp_variables = variables
 *         self.thisptr.deleteEmptyBlocks(cpp_variables)             # <<<<<<<<<<<<<<
 * 
 *     def deleteOpencons(PartialDecomposition self, int opencons):
 */
  try {
    __pyx_v_self->thisptr->deleteEmptyBlocks(__pyx_v_cpp_variables);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 476, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":467
 *         self.thisptr.copyPartitionStatistics(cpp_otherpartialdec)
 * 
 *     def deleteEmptyBlocks(PartialDecomposition self, bool variables):             # <<<<<<<<<<<<<<
 *         """Deletes empty blocks and sets nblocks accordingly
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.deleteEmptyBlocks", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":478
 *         self.thisptr.deleteEmptyBlocks(cpp_variables)
 * 
 *     def deleteOpencons(PartialDecomposition self, int opencons):             # <<<<<<<<<<<<<<
 *         """Deletes a cons from list of open conss
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_79deleteOpencons(PyObject *__pyx_v_self, PyObject *__pyx_arg_opencons); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_78deleteOpencons[] = "PartialDecomposition.deleteOpencons(self, int opencons)\nDeletes a cons from list of open conss\n\n        :param opencons: id of the cons that is not considered open anymore.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_79deleteOpencons(PyObject *__pyx_v_self, PyObject *__pyx_arg_opencons) {
  int __pyx_v_opencons;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("deleteOpencons (wrapper)", 0);
  assert(__pyx_arg_opencons); {
    __pyx_v_opencons = __Pyx_PyInt_As_int(__pyx_arg_opencons); if (unlikely((__pyx_v_opencons == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 478, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.deleteOpencons", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_78deleteOpencons(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((int)__pyx_v_opencons));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_78deleteOpencons(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_opencons) {
  int __pyx_v_cpp_opencons;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("deleteOpencons", 0);

  /* "src/pygcgopt/decomposition.pxi":483
 *         :param opencons: id of the cons that is not considered open anymore.
 *         """
 *         cdef int cpp_opencons = opencons             # <<<<<<<<<<<<<<
 *         self.thisptr.deleteOpencons(cpp_opencons)
 * 
 */
  __pyx_v_cpp_opencons = __pyx_v_opencons;

  /* "src/pygcgopt/decomposition.pxi":484
 *         """
 *         cdef int cpp_opencons = opencons
 *         self.thisptr.deleteOpencons(cpp_opencons)             # <<<<<<<<<<<<<<
 * 
 *     def deleteOpenvar(PartialDecomposition self, int openvar):
 */
  try {
    __pyx_v_self->thisptr->deleteOpencons(__pyx_v_cpp_opencons);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 484, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":478
 *         self.thisptr.deleteEmptyBlocks(cpp_variables)
 * 
 *     def deleteOpencons(PartialDecomposition self, int opencons):             # <<<<<<<<<<<<<<
 *         """Deletes a cons from list of open conss
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.deleteOpencons", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":486
 *         self.thisptr.deleteOpencons(cpp_opencons)
 * 
 *     def deleteOpenvar(PartialDecomposition self, int openvar):             # <<<<<<<<<<<<<<
 *         """Deletes a var from the list of open vars
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_81deleteOpenvar(PyObject *__pyx_v_self, PyObject *__pyx_arg_openvar); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_80deleteOpenvar[] = "PartialDecomposition.deleteOpenvar(self, int openvar)\nDeletes a var from the list of open vars\n\n        :param openvar: id of the var that is not considered open anymore.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_81deleteOpenvar(PyObject *__pyx_v_self, PyObject *__pyx_arg_openvar) {
  int __pyx_v_openvar;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("deleteOpenvar (wrapper)", 0);
  assert(__pyx_arg_openvar); {
    __pyx_v_openvar = __Pyx_PyInt_As_int(__pyx_arg_openvar); if (unlikely((__pyx_v_openvar == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 486, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.deleteOpenvar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_80deleteOpenvar(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((int)__pyx_v_openvar));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_80deleteOpenvar(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_openvar) {
  int __pyx_v_cpp_openvar;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("deleteOpenvar", 0);

  /* "src/pygcgopt/decomposition.pxi":491
 *         :param openvar: id of the var that is not considered open anymore.
 *         """
 *         cdef int cpp_openvar = openvar             # <<<<<<<<<<<<<<
 *         self.thisptr.deleteOpenvar(cpp_openvar)
 * 
 */
  __pyx_v_cpp_openvar = __pyx_v_openvar;

  /* "src/pygcgopt/decomposition.pxi":492
 *         """
 *         cdef int cpp_openvar = openvar
 *         self.thisptr.deleteOpenvar(cpp_openvar)             # <<<<<<<<<<<<<<
 * 
 *     def displayInfo(PartialDecomposition self, int detailLevel):
 */
  try {
    __pyx_v_self->thisptr->deleteOpenvar(__pyx_v_cpp_openvar);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 492, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":486
 *         self.thisptr.deleteOpencons(cpp_opencons)
 * 
 *     def deleteOpenvar(PartialDecomposition self, int openvar):             # <<<<<<<<<<<<<<
 *         """Deletes a var from the list of open vars
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.deleteOpenvar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":494
 *         self.thisptr.deleteOpenvar(cpp_openvar)
 * 
 *     def displayInfo(PartialDecomposition self, int detailLevel):             # <<<<<<<<<<<<<<
 *         """displays the relevant information of the partialdec
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_83displayInfo(PyObject *__pyx_v_self, PyObject *__pyx_arg_detailLevel); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_82displayInfo[] = "PartialDecomposition.displayInfo(self, int detailLevel)\ndisplays the relevant information of the partialdec\n\n        :param detailLevel: pass a value that indicates how detailed the output should be:\n        0: brief overview\n        1: block and detector info\n        2: cons and var assignments.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_83displayInfo(PyObject *__pyx_v_self, PyObject *__pyx_arg_detailLevel) {
  int __pyx_v_detailLevel;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("displayInfo (wrapper)", 0);
  assert(__pyx_arg_detailLevel); {
    __pyx_v_detailLevel = __Pyx_PyInt_As_int(__pyx_arg_detailLevel); if (unlikely((__pyx_v_detailLevel == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 494, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.displayInfo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_82displayInfo(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((int)__pyx_v_detailLevel));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_82displayInfo(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_detailLevel) {
  int __pyx_v_cpp_detailLevel;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("displayInfo", 0);

  /* "src/pygcgopt/decomposition.pxi":502
 *         2: cons and var assignments.
 *         """
 *         cdef int cpp_detailLevel = detailLevel             # <<<<<<<<<<<<<<
 *         self.thisptr.displayInfo(cpp_detailLevel)
 * 
 */
  __pyx_v_cpp_detailLevel = __pyx_v_detailLevel;

  /* "src/pygcgopt/decomposition.pxi":503
 *         """
 *         cdef int cpp_detailLevel = detailLevel
 *         self.thisptr.displayInfo(cpp_detailLevel)             # <<<<<<<<<<<<<<
 * 
 *     # def filloutBorderFromConstoblock(PartialDecomposition self, SCIP_HASHMAP * constoblock, int givenNBlocks):
 */
  try {
    __pyx_v_self->thisptr->displayInfo(__pyx_v_cpp_detailLevel);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 503, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":494
 *         self.thisptr.deleteOpenvar(cpp_openvar)
 * 
 *     def displayInfo(PartialDecomposition self, int detailLevel):             # <<<<<<<<<<<<<<
 *         """displays the relevant information of the partialdec
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.displayInfo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":528
 *     #     raise NotImplementedError()
 * 
 *     def findVarsLinkingToMaster(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """reassigns linking variables to master if appropriate
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_85findVarsLinkingToMaster(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_84findVarsLinkingToMaster[] = "PartialDecomposition.findVarsLinkingToMaster(self)\nreassigns linking variables to master if appropriate\n\n        Variables are reassigned as master if the variable only hits master conss.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_85findVarsLinkingToMaster(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("findVarsLinkingToMaster (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_84findVarsLinkingToMaster(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_84findVarsLinkingToMaster(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("findVarsLinkingToMaster", 0);

  /* "src/pygcgopt/decomposition.pxi":533
 *         Variables are reassigned as master if the variable only hits master conss.
 *         """
 *         self.thisptr.findVarsLinkingToMaster()             # <<<<<<<<<<<<<<
 * 
 *     def findVarsLinkingToStairlinking(PartialDecomposition self):
 */
  try {
    __pyx_v_self->thisptr->findVarsLinkingToMaster();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 533, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":528
 *     #     raise NotImplementedError()
 * 
 *     def findVarsLinkingToMaster(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """reassigns linking variables to master if appropriate
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.findVarsLinkingToMaster", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":535
 *         self.thisptr.findVarsLinkingToMaster()
 * 
 *     def findVarsLinkingToStairlinking(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """reassigns variables classified as linking to stairlinking if appropriate
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_87findVarsLinkingToStairlinking(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_86findVarsLinkingToStairlinking[] = "PartialDecomposition.findVarsLinkingToStairlinking(self)\nreassigns variables classified as linking to stairlinking if appropriate\n\n        Variables are reassigned as master if the variable hits conss in exactly two consecutive\n        blocks.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_87findVarsLinkingToStairlinking(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("findVarsLinkingToStairlinking (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_86findVarsLinkingToStairlinking(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_86findVarsLinkingToStairlinking(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("findVarsLinkingToStairlinking", 0);

  /* "src/pygcgopt/decomposition.pxi":541
 *         blocks.
 *         """
 *         self.thisptr.findVarsLinkingToStairlinking()             # <<<<<<<<<<<<<<
 * 
 *     def getAncestorID(PartialDecomposition self, int ancestorindex):
 */
  try {
    __pyx_v_self->thisptr->findVarsLinkingToStairlinking();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 541, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":535
 *         self.thisptr.findVarsLinkingToMaster()
 * 
 *     def findVarsLinkingToStairlinking(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """reassigns variables classified as linking to stairlinking if appropriate
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.findVarsLinkingToStairlinking", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":543
 *         self.thisptr.findVarsLinkingToStairlinking()
 * 
 *     def getAncestorID(PartialDecomposition self, int ancestorindex):             # <<<<<<<<<<<<<<
 *         """gets partialdec id of given ancestor id
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_89getAncestorID(PyObject *__pyx_v_self, PyObject *__pyx_arg_ancestorindex); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_88getAncestorID[] = "PartialDecomposition.getAncestorID(self, int ancestorindex)\ngets partialdec id of given ancestor id\n\n        :return: partialdec id of given ancestor id.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_89getAncestorID(PyObject *__pyx_v_self, PyObject *__pyx_arg_ancestorindex) {
  int __pyx_v_ancestorindex;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getAncestorID (wrapper)", 0);
  assert(__pyx_arg_ancestorindex); {
    __pyx_v_ancestorindex = __Pyx_PyInt_As_int(__pyx_arg_ancestorindex); if (unlikely((__pyx_v_ancestorindex == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 543, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getAncestorID", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_88getAncestorID(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((int)__pyx_v_ancestorindex));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_88getAncestorID(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_ancestorindex) {
  int __pyx_v_cpp_ancestorindex;
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getAncestorID", 0);

  /* "src/pygcgopt/decomposition.pxi":548
 *         :return: partialdec id of given ancestor id.
 *         """
 *         cdef int cpp_ancestorindex = ancestorindex             # <<<<<<<<<<<<<<
 *         cdef int result = self.thisptr.getAncestorID(cpp_ancestorindex)
 *         return result
 */
  __pyx_v_cpp_ancestorindex = __pyx_v_ancestorindex;

  /* "src/pygcgopt/decomposition.pxi":549
 *         """
 *         cdef int cpp_ancestorindex = ancestorindex
 *         cdef int result = self.thisptr.getAncestorID(cpp_ancestorindex)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getAncestorID(__pyx_v_cpp_ancestorindex);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 549, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":550
 *         cdef int cpp_ancestorindex = ancestorindex
 *         cdef int result = self.thisptr.getAncestorID(cpp_ancestorindex)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getAncestorList(PartialDecomposition self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":543
 *         self.thisptr.findVarsLinkingToStairlinking()
 * 
 *     def getAncestorID(PartialDecomposition self, int ancestorindex):             # <<<<<<<<<<<<<<
 *         """gets partialdec id of given ancestor id
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getAncestorID", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":552
 *         return result
 * 
 *     def getAncestorList(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """get ancestor ids as vector
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_91getAncestorList(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_90getAncestorList[] = "PartialDecomposition.getAncestorList(self)\nget ancestor ids as vector\n\n        :return: vector of ids of all ancestors id.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_91getAncestorList(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getAncestorList (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_90getAncestorList(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_90getAncestorList(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  std::vector<int>  __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<int>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getAncestorList", 0);

  /* "src/pygcgopt/decomposition.pxi":557
 *         :return: vector of ids of all ancestors id.
 *         """
 *         cdef vector[int] result = self.thisptr.getAncestorList()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getAncestorList();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 557, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":558
 *         """
 *         cdef vector[int] result = self.thisptr.getAncestorList()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def setAncestorList(PartialDecomposition self, object newlist):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_vector_to_py_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":552
 *         return result
 * 
 *     def getAncestorList(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """get ancestor ids as vector
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getAncestorList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":560
 *         return result
 * 
 *     def setAncestorList(PartialDecomposition self, object newlist):             # <<<<<<<<<<<<<<
 *         """set ancestor list directly
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_93setAncestorList(PyObject *__pyx_v_self, PyObject *__pyx_v_newlist); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_92setAncestorList[] = "PartialDecomposition.setAncestorList(self, newlist)\nset ancestor list directly\n\n        :param newlist: new list of ancestor ids.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_93setAncestorList(PyObject *__pyx_v_self, PyObject *__pyx_v_newlist) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setAncestorList (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_92setAncestorList(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((PyObject *)__pyx_v_newlist));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_92setAncestorList(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_newlist) {
  std::vector<int>  __pyx_v_cpp_newlist;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<int>  __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setAncestorList", 0);

  /* "src/pygcgopt/decomposition.pxi":565
 *         :param newlist: new list of ancestor ids.
 *         """
 *         cdef vector[int] cpp_newlist = newlist             # <<<<<<<<<<<<<<
 *         self.thisptr.setAncestorList(cpp_newlist)
 * 
 */
  __pyx_t_1 = __pyx_convert_vector_from_py_int(__pyx_v_newlist); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 565, __pyx_L1_error)
  __pyx_v_cpp_newlist = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":566
 *         """
 *         cdef vector[int] cpp_newlist = newlist
 *         self.thisptr.setAncestorList(cpp_newlist)             # <<<<<<<<<<<<<<
 * 
 *     def removeAncestorID(PartialDecomposition self, int ancestorid):
 */
  try {
    __pyx_v_self->thisptr->setAncestorList(__pyx_v_cpp_newlist);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 566, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":560
 *         return result
 * 
 *     def setAncestorList(PartialDecomposition self, object newlist):             # <<<<<<<<<<<<<<
 *         """set ancestor list directly
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.setAncestorList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":568
 *         self.thisptr.setAncestorList(cpp_newlist)
 * 
 *     def removeAncestorID(PartialDecomposition self, int ancestorid):             # <<<<<<<<<<<<<<
 *         """removes ancestor id from list.
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_95removeAncestorID(PyObject *__pyx_v_self, PyObject *__pyx_arg_ancestorid); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_94removeAncestorID[] = "PartialDecomposition.removeAncestorID(self, int ancestorid)\nremoves ancestor id from list.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_95removeAncestorID(PyObject *__pyx_v_self, PyObject *__pyx_arg_ancestorid) {
  int __pyx_v_ancestorid;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("removeAncestorID (wrapper)", 0);
  assert(__pyx_arg_ancestorid); {
    __pyx_v_ancestorid = __Pyx_PyInt_As_int(__pyx_arg_ancestorid); if (unlikely((__pyx_v_ancestorid == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 568, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.removeAncestorID", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_94removeAncestorID(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((int)__pyx_v_ancestorid));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_94removeAncestorID(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_ancestorid) {
  int __pyx_v_cpp_ancestorid;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("removeAncestorID", 0);

  /* "src/pygcgopt/decomposition.pxi":571
 *         """removes ancestor id from list.
 *         """
 *         cdef int cpp_ancestorid = ancestorid             # <<<<<<<<<<<<<<
 *         self.thisptr.removeAncestorID(cpp_ancestorid)
 * 
 */
  __pyx_v_cpp_ancestorid = __pyx_v_ancestorid;

  /* "src/pygcgopt/decomposition.pxi":572
 *         """
 *         cdef int cpp_ancestorid = ancestorid
 *         self.thisptr.removeAncestorID(cpp_ancestorid)             # <<<<<<<<<<<<<<
 * 
 *     def addAncestorID(PartialDecomposition self, int ancestor):
 */
  try {
    __pyx_v_self->thisptr->removeAncestorID(__pyx_v_cpp_ancestorid);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 572, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":568
 *         self.thisptr.setAncestorList(cpp_newlist)
 * 
 *     def removeAncestorID(PartialDecomposition self, int ancestorid):             # <<<<<<<<<<<<<<
 *         """removes ancestor id from list.
 *         """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.removeAncestorID", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":574
 *         self.thisptr.removeAncestorID(cpp_ancestorid)
 * 
 *     def addAncestorID(PartialDecomposition self, int ancestor):             # <<<<<<<<<<<<<<
 *         """adds ancestor id to back of list
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_97addAncestorID(PyObject *__pyx_v_self, PyObject *__pyx_arg_ancestor); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_96addAncestorID[] = "PartialDecomposition.addAncestorID(self, int ancestor)\nadds ancestor id to back of list\n\n        :param ancestor: id of ancestor that is to be added.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_97addAncestorID(PyObject *__pyx_v_self, PyObject *__pyx_arg_ancestor) {
  int __pyx_v_ancestor;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addAncestorID (wrapper)", 0);
  assert(__pyx_arg_ancestor); {
    __pyx_v_ancestor = __Pyx_PyInt_As_int(__pyx_arg_ancestor); if (unlikely((__pyx_v_ancestor == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 574, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.addAncestorID", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_96addAncestorID(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((int)__pyx_v_ancestor));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_96addAncestorID(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_ancestor) {
  int __pyx_v_cpp_ancestor;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addAncestorID", 0);

  /* "src/pygcgopt/decomposition.pxi":579
 *         :param ancestor: id of ancestor that is to be added.
 *         """
 *         cdef int cpp_ancestor = ancestor             # <<<<<<<<<<<<<<
 *         self.thisptr.addAncestorID(cpp_ancestor)
 * 
 */
  __pyx_v_cpp_ancestor = __pyx_v_ancestor;

  /* "src/pygcgopt/decomposition.pxi":580
 *         """
 *         cdef int cpp_ancestor = ancestor
 *         self.thisptr.addAncestorID(cpp_ancestor)             # <<<<<<<<<<<<<<
 * 
 *     def getBlocksForRep(PartialDecomposition self, int repid):
 */
  try {
    __pyx_v_self->thisptr->addAncestorID(__pyx_v_cpp_ancestor);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 580, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":574
 *         self.thisptr.removeAncestorID(cpp_ancestorid)
 * 
 *     def addAncestorID(PartialDecomposition self, int ancestor):             # <<<<<<<<<<<<<<
 *         """adds ancestor id to back of list
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.addAncestorID", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":582
 *         self.thisptr.addAncestorID(cpp_ancestor)
 * 
 *     def getBlocksForRep(PartialDecomposition self, int repid):             # <<<<<<<<<<<<<<
 *         """get a vector of block ids that are identical to block with id repid
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_99getBlocksForRep(PyObject *__pyx_v_self, PyObject *__pyx_arg_repid); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_98getBlocksForRep[] = "PartialDecomposition.getBlocksForRep(self, int repid)\nget a vector of block ids that are identical to block with id repid\n\n        :param repid: id of the representative block\n        :return: vector of block ids that are identical to block with id repid.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_99getBlocksForRep(PyObject *__pyx_v_self, PyObject *__pyx_arg_repid) {
  int __pyx_v_repid;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getBlocksForRep (wrapper)", 0);
  assert(__pyx_arg_repid); {
    __pyx_v_repid = __Pyx_PyInt_As_int(__pyx_arg_repid); if (unlikely((__pyx_v_repid == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 582, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getBlocksForRep", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_98getBlocksForRep(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((int)__pyx_v_repid));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_98getBlocksForRep(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_repid) {
  int __pyx_v_cpp_repid;
  std::vector<int>  __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<int>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getBlocksForRep", 0);

  /* "src/pygcgopt/decomposition.pxi":588
 *         :return: vector of block ids that are identical to block with id repid.
 *         """
 *         cdef int cpp_repid = repid             # <<<<<<<<<<<<<<
 *         cdef vector[int] result = self.thisptr.getBlocksForRep(cpp_repid)
 *         return result
 */
  __pyx_v_cpp_repid = __pyx_v_repid;

  /* "src/pygcgopt/decomposition.pxi":589
 *         """
 *         cdef int cpp_repid = repid
 *         cdef vector[int] result = self.thisptr.getBlocksForRep(cpp_repid)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getBlocksForRep(__pyx_v_cpp_repid);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 589, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":590
 *         cdef int cpp_repid = repid
 *         cdef vector[int] result = self.thisptr.getBlocksForRep(cpp_repid)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getDetectorClockTime(PartialDecomposition self, int detectorchainindex):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_vector_to_py_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 590, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":582
 *         self.thisptr.addAncestorID(cpp_ancestor)
 * 
 *     def getBlocksForRep(PartialDecomposition self, int repid):             # <<<<<<<<<<<<<<
 *         """get a vector of block ids that are identical to block with id repid
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getBlocksForRep", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":592
 *         return result
 * 
 *     def getDetectorClockTime(PartialDecomposition self, int detectorchainindex):             # <<<<<<<<<<<<<<
 *         """returns the time that the detector related to the given detectorchainindex needed for detecting
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_101getDetectorClockTime(PyObject *__pyx_v_self, PyObject *__pyx_arg_detectorchainindex); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_100getDetectorClockTime[] = "PartialDecomposition.getDetectorClockTime(self, int detectorchainindex)\nreturns the time that the detector related to the given detectorchainindex needed for detecting\n\n        :return: the clock time for the corresponding detector in the chain.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_101getDetectorClockTime(PyObject *__pyx_v_self, PyObject *__pyx_arg_detectorchainindex) {
  int __pyx_v_detectorchainindex;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDetectorClockTime (wrapper)", 0);
  assert(__pyx_arg_detectorchainindex); {
    __pyx_v_detectorchainindex = __Pyx_PyInt_As_int(__pyx_arg_detectorchainindex); if (unlikely((__pyx_v_detectorchainindex == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 592, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getDetectorClockTime", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_100getDetectorClockTime(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((int)__pyx_v_detectorchainindex));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_100getDetectorClockTime(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_detectorchainindex) {
  int __pyx_v_cpp_detectorchainindex;
  double __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getDetectorClockTime", 0);

  /* "src/pygcgopt/decomposition.pxi":597
 *         :return: the clock time for the corresponding detector in the chain.
 *         """
 *         cdef int cpp_detectorchainindex = detectorchainindex             # <<<<<<<<<<<<<<
 *         cdef double result = self.thisptr.getDetectorClockTime(cpp_detectorchainindex)
 *         return result
 */
  __pyx_v_cpp_detectorchainindex = __pyx_v_detectorchainindex;

  /* "src/pygcgopt/decomposition.pxi":598
 *         """
 *         cdef int cpp_detectorchainindex = detectorchainindex
 *         cdef double result = self.thisptr.getDetectorClockTime(cpp_detectorchainindex)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getDetectorClockTime(__pyx_v_cpp_detectorchainindex);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 598, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":599
 *         cdef int cpp_detectorchainindex = detectorchainindex
 *         cdef double result = self.thisptr.getDetectorClockTime(cpp_detectorchainindex)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getDetectorClockTimes(PartialDecomposition self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":592
 *         return result
 * 
 *     def getDetectorClockTime(PartialDecomposition self, int detectorchainindex):             # <<<<<<<<<<<<<<
 *         """returns the time that the detector related to the given detectorchainindex needed for detecting
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getDetectorClockTime", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":601
 *         return result
 * 
 *     def getDetectorClockTimes(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """returns a vector of the clock times that each detector needed that was involved in this partialdec
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_103getDetectorClockTimes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_102getDetectorClockTimes[] = "PartialDecomposition.getDetectorClockTimes(self)\nreturns a vector of the clock times that each detector needed that was involved in this partialdec\n\n        :return: vector of the clock times.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_103getDetectorClockTimes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDetectorClockTimes (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_102getDetectorClockTimes(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_102getDetectorClockTimes(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  std::vector<double>  __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<double>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getDetectorClockTimes", 0);

  /* "src/pygcgopt/decomposition.pxi":606
 *         :return: vector of the clock times.
 *         """
 *         cdef vector[double] result = self.thisptr.getDetectorClockTimes()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getDetectorClockTimes();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 606, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":607
 *         """
 *         cdef vector[double] result = self.thisptr.getDetectorClockTimes()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getBlockConss(PartialDecomposition self, int block):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_vector_to_py_double(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":601
 *         return result
 * 
 *     def getDetectorClockTimes(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """returns a vector of the clock times that each detector needed that was involved in this partialdec
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getDetectorClockTimes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":609
 *         return result
 * 
 *     def getBlockConss(PartialDecomposition self, int block):             # <<<<<<<<<<<<<<
 *         """returns array containing constraints assigned to a block
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_105getBlockConss(PyObject *__pyx_v_self, PyObject *__pyx_arg_block); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_104getBlockConss[] = "PartialDecomposition.getBlockConss(self, int block)\nreturns array containing constraints assigned to a block\n\n        :param block: id of the block the constraint indices are returned\n        :return: array containing constraints assigned to a block.\n        .. note:: This calls the corresponding `getConssForBlock()` method. For consistancy, the method was renamed in the Python API.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_105getBlockConss(PyObject *__pyx_v_self, PyObject *__pyx_arg_block) {
  int __pyx_v_block;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getBlockConss (wrapper)", 0);
  assert(__pyx_arg_block); {
    __pyx_v_block = __Pyx_PyInt_As_int(__pyx_arg_block); if (unlikely((__pyx_v_block == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 609, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getBlockConss", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_104getBlockConss(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((int)__pyx_v_block));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_104getBlockConss(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_block) {
  int __pyx_v_cpp_block;
  std::vector<int>  __pyx_v_result;
  int __pyx_8genexpr1__pyx_v_c;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<int>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  std::vector<int> ::iterator __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getBlockConss", 0);

  /* "src/pygcgopt/decomposition.pxi":616
 *         .. note:: This calls the corresponding `getConssForBlock()` method. For consistancy, the method was renamed in the Python API.
 *         """
 *         cdef int cpp_block = block             # <<<<<<<<<<<<<<
 *         cdef vector[int] result = self.thisptr.getConssForBlock(cpp_block)
 *         return [self.getDetprobdata().getCons(c) for c in result]
 */
  __pyx_v_cpp_block = __pyx_v_block;

  /* "src/pygcgopt/decomposition.pxi":617
 *         """
 *         cdef int cpp_block = block
 *         cdef vector[int] result = self.thisptr.getConssForBlock(cpp_block)             # <<<<<<<<<<<<<<
 *         return [self.getDetprobdata().getCons(c) for c in result]
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getConssForBlock(__pyx_v_cpp_block);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 617, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":618
 *         cdef int cpp_block = block
 *         cdef vector[int] result = self.thisptr.getConssForBlock(cpp_block)
 *         return [self.getDetprobdata().getCons(c) for c in result]             # <<<<<<<<<<<<<<
 * 
 *     # def getDetectorchain(PartialDecomposition self):
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 618, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_v_result.begin();
    for (;;) {
      if (!(__pyx_t_3 != __pyx_v_result.end())) break;
      __pyx_t_4 = *__pyx_t_3;
      ++__pyx_t_3;
      __pyx_8genexpr1__pyx_v_c = __pyx_t_4;
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getDetprobdata); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 618, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_6 = (__pyx_t_8) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_8) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 618, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_getCons); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 618, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_8genexpr1__pyx_v_c); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 618, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_8 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_5 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 618, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_5))) __PYX_ERR(2, 618, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  } /* exit inner scope */
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":609
 *         return result
 * 
 *     def getBlockConss(PartialDecomposition self, int block):             # <<<<<<<<<<<<<<
 *         """returns array containing constraints assigned to a block
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getBlockConss", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":628
 *     #     return result
 * 
 *     def getFinishedByFinisher(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """returns True iff this partialdec was finished by finishPartialdec() method of a detector
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_107getFinishedByFinisher(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_106getFinishedByFinisher[] = "PartialDecomposition.getFinishedByFinisher(self)\nreturns True iff this partialdec was finished by finishPartialdec() method of a detector\n\n        :return: True iff this partialdec was finished by finishPartialdec() method of a detector.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_107getFinishedByFinisher(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getFinishedByFinisher (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_106getFinishedByFinisher(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_106getFinishedByFinisher(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  bool __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getFinishedByFinisher", 0);

  /* "src/pygcgopt/decomposition.pxi":633
 *         :return: True iff this partialdec was finished by finishPartialdec() method of a detector.
 *         """
 *         cdef bool result = self.thisptr.getFinishedByFinisher()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getFinishedByFinisher();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 633, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":634
 *         """
 *         cdef bool result = self.thisptr.getFinishedByFinisher()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getHashValue(PartialDecomposition self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":628
 *     #     return result
 * 
 *     def getFinishedByFinisher(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """returns True iff this partialdec was finished by finishPartialdec() method of a detector
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getFinishedByFinisher", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":636
 *         return result
 * 
 *     def getHashValue(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """returns the calculated hash value of this partialdec
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_109getHashValue(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_108getHashValue[] = "PartialDecomposition.getHashValue(self)\nreturns the calculated hash value of this partialdec\n\n        :return: the calculated hash value of this partialdec.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_109getHashValue(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getHashValue (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_108getHashValue(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_108getHashValue(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  unsigned long __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned long __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getHashValue", 0);

  /* "src/pygcgopt/decomposition.pxi":641
 *         :return: the calculated hash value of this partialdec.
 *         """
 *         cdef unsigned long result = self.thisptr.getHashValue()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getHashValue();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 641, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":642
 *         """
 *         cdef unsigned long result = self.thisptr.getHashValue()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getID(PartialDecomposition self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_long(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 642, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":636
 *         return result
 * 
 *     def getHashValue(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """returns the calculated hash value of this partialdec
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getHashValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":644
 *         return result
 * 
 *     def getID(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """returns the unique id of the partialdec
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_111getID(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_110getID[] = "PartialDecomposition.getID(self)\nreturns the unique id of the partialdec\n\n        :return: the unique id of the partialdec.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_111getID(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getID (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_110getID(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_110getID(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getID", 0);

  /* "src/pygcgopt/decomposition.pxi":649
 *         :return: the unique id of the partialdec.
 *         """
 *         cdef int result = self.thisptr.getID()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getID();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 649, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":650
 *         """
 *         cdef int result = self.thisptr.getID()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getLinkingvars(PartialDecomposition self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 650, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":644
 *         return result
 * 
 *     def getID(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """returns the unique id of the partialdec
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getID", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":652
 *         return result
 * 
 *     def getLinkingvars(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """returns array containing all linking vars indices
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_113getLinkingvars(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_112getLinkingvars[] = "PartialDecomposition.getLinkingvars(self)\nreturns array containing all linking vars indices\n\n        :return: vector containing all linking vars indices\n        .. note:: when accessed it is supposed to be sorted.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_113getLinkingvars(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getLinkingvars (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_112getLinkingvars(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_112getLinkingvars(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  std::vector<int>  __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<int>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getLinkingvars", 0);

  /* "src/pygcgopt/decomposition.pxi":658
 *         .. note:: when accessed it is supposed to be sorted.
 *         """
 *         cdef vector[int] result = self.thisptr.getLinkingvars()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getLinkingvars();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 658, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":659
 *         """
 *         cdef vector[int] result = self.thisptr.getLinkingvars()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getMasterconss(PartialDecomposition self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_vector_to_py_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 659, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":652
 *         return result
 * 
 *     def getLinkingvars(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """returns array containing all linking vars indices
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getLinkingvars", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":661
 *         return result
 * 
 *     def getMasterconss(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets array containing all master conss indices
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_115getMasterconss(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_114getMasterconss[] = "PartialDecomposition.getMasterconss(self)\nGets array containing all master conss indices\n\n        :return: array containing all master conss indices\n        .. note:: when accessed it is supposed to be sorted.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_115getMasterconss(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getMasterconss (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_114getMasterconss(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_114getMasterconss(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  std::vector<int>  __pyx_v_result;
  int __pyx_8genexpr2__pyx_v_c;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<int>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  std::vector<int> ::iterator __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getMasterconss", 0);

  /* "src/pygcgopt/decomposition.pxi":667
 *         .. note:: when accessed it is supposed to be sorted.
 *         """
 *         cdef vector[int] result = self.thisptr.getMasterconss()             # <<<<<<<<<<<<<<
 *         return [self.getDetprobdata().getCons(c) for c in result]
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getMasterconss();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 667, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":668
 *         """
 *         cdef vector[int] result = self.thisptr.getMasterconss()
 *         return [self.getDetprobdata().getCons(c) for c in result]             # <<<<<<<<<<<<<<
 * 
 *     def getMastervars(PartialDecomposition self):
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 668, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_v_result.begin();
    for (;;) {
      if (!(__pyx_t_3 != __pyx_v_result.end())) break;
      __pyx_t_4 = *__pyx_t_3;
      ++__pyx_t_3;
      __pyx_8genexpr2__pyx_v_c = __pyx_t_4;
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getDetprobdata); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 668, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_6 = (__pyx_t_8) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_8) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 668, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_getCons); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 668, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_8genexpr2__pyx_v_c); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 668, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_8 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_5 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 668, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_5))) __PYX_ERR(2, 668, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  } /* exit inner scope */
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":661
 *         return result
 * 
 *     def getMasterconss(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets array containing all master conss indices
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getMasterconss", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":670
 *         return [self.getDetprobdata().getCons(c) for c in result]
 * 
 *     def getMastervars(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets array containing all master vars indices
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_117getMastervars(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_116getMastervars[] = "PartialDecomposition.getMastervars(self)\nGets array containing all master vars indices\n\n        master vars hit only constraints in the master, aka static variables\n        :return: array containing all master vars indices.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_117getMastervars(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getMastervars (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_116getMastervars(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_116getMastervars(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  std::vector<int>  __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<int>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getMastervars", 0);

  /* "src/pygcgopt/decomposition.pxi":676
 *         :return: array containing all master vars indices.
 *         """
 *         cdef vector[int] result = self.thisptr.getMastervars()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getMastervars();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 676, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":677
 *         """
 *         cdef vector[int] result = self.thisptr.getMastervars()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getNCoeffsForBlock(PartialDecomposition self, int blockid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_vector_to_py_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 677, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":670
 *         return [self.getDetprobdata().getCons(c) for c in result]
 * 
 *     def getMastervars(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets array containing all master vars indices
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getMastervars", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":679
 *         return result
 * 
 *     def getNCoeffsForBlock(PartialDecomposition self, int blockid):             # <<<<<<<<<<<<<<
 *         """Gets the number of nonzero coeffs in a certain block
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_119getNCoeffsForBlock(PyObject *__pyx_v_self, PyObject *__pyx_arg_blockid); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_118getNCoeffsForBlock[] = "PartialDecomposition.getNCoeffsForBlock(self, int blockid)\nGets the number of nonzero coeffs in a certain block\n\n        :param blockid: of the block the number of nozerors are requested for\n        :return: number of nonzero coeffs in a certain block.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_119getNCoeffsForBlock(PyObject *__pyx_v_self, PyObject *__pyx_arg_blockid) {
  int __pyx_v_blockid;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNCoeffsForBlock (wrapper)", 0);
  assert(__pyx_arg_blockid); {
    __pyx_v_blockid = __Pyx_PyInt_As_int(__pyx_arg_blockid); if (unlikely((__pyx_v_blockid == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 679, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getNCoeffsForBlock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_118getNCoeffsForBlock(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((int)__pyx_v_blockid));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_118getNCoeffsForBlock(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_blockid) {
  int __pyx_v_cpp_blockid;
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNCoeffsForBlock", 0);

  /* "src/pygcgopt/decomposition.pxi":685
 *         :return: number of nonzero coeffs in a certain block.
 *         """
 *         cdef int cpp_blockid = blockid             # <<<<<<<<<<<<<<
 *         cdef int result = self.thisptr.getNCoeffsForBlock(cpp_blockid)
 *         return result
 */
  __pyx_v_cpp_blockid = __pyx_v_blockid;

  /* "src/pygcgopt/decomposition.pxi":686
 *         """
 *         cdef int cpp_blockid = blockid
 *         cdef int result = self.thisptr.getNCoeffsForBlock(cpp_blockid)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getNCoeffsForBlock(__pyx_v_cpp_blockid);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 686, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":687
 *         cdef int cpp_blockid = blockid
 *         cdef int result = self.thisptr.getNCoeffsForBlock(cpp_blockid)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getNCoeffsForMaster(PartialDecomposition self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 687, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":679
 *         return result
 * 
 *     def getNCoeffsForBlock(PartialDecomposition self, int blockid):             # <<<<<<<<<<<<<<
 *         """Gets the number of nonzero coeffs in a certain block
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getNCoeffsForBlock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":689
 *         return result
 * 
 *     def getNCoeffsForMaster(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """!Gets the number of nonzero coeffs in master
 *         :return: the number of nonzero coeffs in master.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_121getNCoeffsForMaster(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_120getNCoeffsForMaster[] = "PartialDecomposition.getNCoeffsForMaster(self)\n!Gets the number of nonzero coeffs in master\n        :return: the number of nonzero coeffs in master.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_121getNCoeffsForMaster(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNCoeffsForMaster (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_120getNCoeffsForMaster(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_120getNCoeffsForMaster(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNCoeffsForMaster", 0);

  /* "src/pygcgopt/decomposition.pxi":693
 *         :return: the number of nonzero coeffs in master.
 *         """
 *         cdef int result = self.thisptr.getNCoeffsForMaster()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getNCoeffsForMaster();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 693, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":694
 *         """
 *         cdef int result = self.thisptr.getNCoeffsForMaster()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     # def getScore(PartialDecomposition self, SCORETYPE type):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 694, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":689
 *         return result
 * 
 *     def getNCoeffsForMaster(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """!Gets the number of nonzero coeffs in master
 *         :return: the number of nonzero coeffs in master.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getNCoeffsForMaster", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":708
 *     #     raise NotImplementedError()
 * 
 *     def hasSetppccardMaster(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """checks if all master constraints set partitioning, set packing, set cover, or cardinality constraints
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_123hasSetppccardMaster(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_122hasSetppccardMaster[] = "PartialDecomposition.hasSetppccardMaster(self)\nchecks if all master constraints set partitioning, set packing, set cover, or cardinality constraints\n\n        :return: True iff all master constraints set partitioning, set packing, set cover, or cardinality constraints.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_123hasSetppccardMaster(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("hasSetppccardMaster (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_122hasSetppccardMaster(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_122hasSetppccardMaster(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  unsigned int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("hasSetppccardMaster", 0);

  /* "src/pygcgopt/decomposition.pxi":713
 *         :return: True iff all master constraints set partitioning, set packing, set cover, or cardinality constraints.
 *         """
 *         cdef unsigned int result = self.thisptr.hasSetppccardMaster()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->hasSetppccardMaster();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 713, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":714
 *         """
 *         cdef unsigned int result = self.thisptr.hasSetppccardMaster()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def hasSetppcMaster(PartialDecomposition self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":708
 *     #     raise NotImplementedError()
 * 
 *     def hasSetppccardMaster(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """checks if all master constraints set partitioning, set packing, set cover, or cardinality constraints
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.hasSetppccardMaster", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":716
 *         return result
 * 
 *     def hasSetppcMaster(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """checks iff all master constraints set partitioning, set packing, or set cover constraints
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_125hasSetppcMaster(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_124hasSetppcMaster[] = "PartialDecomposition.hasSetppcMaster(self)\nchecks iff all master constraints set partitioning, set packing, or set cover constraints\n\n        :return: True iff all master constraints set partitioning, set packing, or set cover.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_125hasSetppcMaster(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("hasSetppcMaster (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_124hasSetppcMaster(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_124hasSetppcMaster(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  unsigned int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("hasSetppcMaster", 0);

  /* "src/pygcgopt/decomposition.pxi":721
 *         :return: True iff all master constraints set partitioning, set packing, or set cover.
 *         """
 *         cdef unsigned int result = self.thisptr.hasSetppcMaster()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->hasSetppcMaster();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 721, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":722
 *         """
 *         cdef unsigned int result = self.thisptr.hasSetppcMaster()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def hasSetppMaster(PartialDecomposition self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 722, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":716
 *         return result
 * 
 *     def hasSetppcMaster(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """checks iff all master constraints set partitioning, set packing, or set cover constraints
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.hasSetppcMaster", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":724
 *         return result
 * 
 *     def hasSetppMaster(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """checks iff all master constraints set partitioning, or set packing constraints
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_127hasSetppMaster(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_126hasSetppMaster[] = "PartialDecomposition.hasSetppMaster(self)\nchecks iff all master constraints set partitioning, or set packing constraints\n\n        :return: True iff all master constraints set partitioning, or set packing constraints.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_127hasSetppMaster(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("hasSetppMaster (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_126hasSetppMaster(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_126hasSetppMaster(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  unsigned int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("hasSetppMaster", 0);

  /* "src/pygcgopt/decomposition.pxi":729
 *         :return: True iff all master constraints set partitioning, or set packing constraints.
 *         """
 *         cdef unsigned int result = self.thisptr.hasSetppMaster()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->hasSetppMaster();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 729, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":730
 *         """
 *         cdef unsigned int result = self.thisptr.hasSetppMaster()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getUsergiven(PartialDecomposition self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 730, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":724
 *         return result
 * 
 *     def hasSetppMaster(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """checks iff all master constraints set partitioning, or set packing constraints
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.hasSetppMaster", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":732
 *         return result
 * 
 *     def getUsergiven(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets the USERGIVEN status of this partialdecs
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_129getUsergiven(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_128getUsergiven[] = "PartialDecomposition.getUsergiven(self)\nGets the USERGIVEN status of this partialdecs\n\n        :return: the USERGIVEN status of this partialdecs\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_129getUsergiven(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getUsergiven (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_128getUsergiven(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_128getUsergiven(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getUsergiven", 0);

  /* "src/pygcgopt/decomposition.pxi":738
 *         """
 *         # TODO implement function
 *         raise NotImplementedError()             # <<<<<<<<<<<<<<
 * 
 *     def getNAncestors(PartialDecomposition self):
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_builtin_NotImplementedError); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 738, __pyx_L1_error)

  /* "src/pygcgopt/decomposition.pxi":732
 *         return result
 * 
 *     def getUsergiven(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets the USERGIVEN status of this partialdecs
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getUsergiven", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":740
 *         raise NotImplementedError()
 * 
 *     def getNAncestors(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets number of ancestor partialdecs
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_131getNAncestors(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_130getNAncestors[] = "PartialDecomposition.getNAncestors(self)\nGets number of ancestor partialdecs\n\n        :return: number of ancestor partialdecs.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_131getNAncestors(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNAncestors (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_130getNAncestors(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_130getNAncestors(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNAncestors", 0);

  /* "src/pygcgopt/decomposition.pxi":745
 *         :return: number of ancestor partialdecs.
 *         """
 *         cdef int result = self.thisptr.getNAncestors()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getNAncestors();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 745, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":746
 *         """
 *         cdef int result = self.thisptr.getNAncestors()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getNBlocks(PartialDecomposition self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 746, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":740
 *         raise NotImplementedError()
 * 
 *     def getNAncestors(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets number of ancestor partialdecs
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getNAncestors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":748
 *         return result
 * 
 *     def getNBlocks(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets the number of blocks
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_133getNBlocks(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_132getNBlocks[] = "PartialDecomposition.getNBlocks(self)\nGets the number of blocks\n\n        :return: number of blocks.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_133getNBlocks(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNBlocks (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_132getNBlocks(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_132getNBlocks(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNBlocks", 0);

  /* "src/pygcgopt/decomposition.pxi":753
 *         :return: number of blocks.
 *         """
 *         cdef int result = self.thisptr.getNBlocks()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getNBlocks();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 753, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":754
 *         """
 *         cdef int result = self.thisptr.getNBlocks()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getNConss(PartialDecomposition self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 754, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":748
 *         return result
 * 
 *     def getNBlocks(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets the number of blocks
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getNBlocks", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":756
 *         return result
 * 
 *     def getNConss(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets the number of constraints
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_135getNConss(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_134getNConss[] = "PartialDecomposition.getNConss(self)\nGets the number of constraints\n\n        :return: number of constraints.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_135getNConss(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNConss (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_134getNConss(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_134getNConss(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNConss", 0);

  /* "src/pygcgopt/decomposition.pxi":761
 *         :return: number of constraints.
 *         """
 *         cdef int result = self.thisptr.getNConss()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getNConss();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 761, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":762
 *         """
 *         cdef int result = self.thisptr.getNConss()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getNConssForBlock(PartialDecomposition self, int block):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 762, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":756
 *         return result
 * 
 *     def getNConss(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets the number of constraints
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getNConss", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":764
 *         return result
 * 
 *     def getNConssForBlock(PartialDecomposition self, int block):             # <<<<<<<<<<<<<<
 *         """Gets size of the vector containing conss assigned to a block
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_137getNConssForBlock(PyObject *__pyx_v_self, PyObject *__pyx_arg_block); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_136getNConssForBlock[] = "PartialDecomposition.getNConssForBlock(self, int block)\nGets size of the vector containing conss assigned to a block\n\n        :param block: id of the block the number of constraints is asked for\n        :return: size of the vector containing conss assigned to a block.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_137getNConssForBlock(PyObject *__pyx_v_self, PyObject *__pyx_arg_block) {
  int __pyx_v_block;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNConssForBlock (wrapper)", 0);
  assert(__pyx_arg_block); {
    __pyx_v_block = __Pyx_PyInt_As_int(__pyx_arg_block); if (unlikely((__pyx_v_block == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 764, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getNConssForBlock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_136getNConssForBlock(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((int)__pyx_v_block));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_136getNConssForBlock(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_block) {
  int __pyx_v_cpp_block;
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNConssForBlock", 0);

  /* "src/pygcgopt/decomposition.pxi":770
 *         :return: size of the vector containing conss assigned to a block.
 *         """
 *         cdef int cpp_block = block             # <<<<<<<<<<<<<<
 *         cdef int result = self.thisptr.getNConssForBlock(cpp_block)
 *         return result
 */
  __pyx_v_cpp_block = __pyx_v_block;

  /* "src/pygcgopt/decomposition.pxi":771
 *         """
 *         cdef int cpp_block = block
 *         cdef int result = self.thisptr.getNConssForBlock(cpp_block)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getNConssForBlock(__pyx_v_cpp_block);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 771, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":772
 *         cdef int cpp_block = block
 *         cdef int result = self.thisptr.getNConssForBlock(cpp_block)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getDetectorchainInfo(PartialDecomposition self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 772, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":764
 *         return result
 * 
 *     def getNConssForBlock(PartialDecomposition self, int block):             # <<<<<<<<<<<<<<
 *         """Gets size of the vector containing conss assigned to a block
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getNConssForBlock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":774
 *         return result
 * 
 *     def getDetectorchainInfo(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets the detectorchain info vector
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_139getDetectorchainInfo(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_138getDetectorchainInfo[] = "PartialDecomposition.getDetectorchainInfo(self)\nGets the detectorchain info vector\n\n        :return: detectorchain info vector.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_139getDetectorchainInfo(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDetectorchainInfo (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_138getDetectorchainInfo(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_138getDetectorchainInfo(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  std::vector<std::string>  __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<std::string>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getDetectorchainInfo", 0);

  /* "src/pygcgopt/decomposition.pxi":779
 *         :return: detectorchain info vector.
 *         """
 *         cdef vector[string] result = self.thisptr.getDetectorchainInfo()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getDetectorchainInfo();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 779, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":780
 *         """
 *         cdef vector[string] result = self.thisptr.getDetectorchainInfo()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getNDetectors(PartialDecomposition self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":774
 *         return result
 * 
 *     def getDetectorchainInfo(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets the detectorchain info vector
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getDetectorchainInfo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":782
 *         return result
 * 
 *     def getNDetectors(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets the number of detectors the partialdec is propagated by
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_141getNDetectors(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_140getNDetectors[] = "PartialDecomposition.getNDetectors(self)\nGets the number of detectors the partialdec is propagated by\n\n        :return: number of detectors the partialdec is propagated by.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_141getNDetectors(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNDetectors (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_140getNDetectors(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_140getNDetectors(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNDetectors", 0);

  /* "src/pygcgopt/decomposition.pxi":787
 *         :return: number of detectors the partialdec is propagated by.
 *         """
 *         cdef int result = self.thisptr.getNDetectors()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getNDetectors();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 787, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":788
 *         """
 *         cdef int result = self.thisptr.getNDetectors()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getNLinkingvars(PartialDecomposition self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 788, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":782
 *         return result
 * 
 *     def getNDetectors(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets the number of detectors the partialdec is propagated by
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getNDetectors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":790
 *         return result
 * 
 *     def getNLinkingvars(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets size of the vector containing linking vars
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_143getNLinkingvars(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_142getNLinkingvars[] = "PartialDecomposition.getNLinkingvars(self)\nGets size of the vector containing linking vars\n\n        :return: size of the vector containing linking vars.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_143getNLinkingvars(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNLinkingvars (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_142getNLinkingvars(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_142getNLinkingvars(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNLinkingvars", 0);

  /* "src/pygcgopt/decomposition.pxi":795
 *         :return: size of the vector containing linking vars.
 *         """
 *         cdef int result = self.thisptr.getNLinkingvars()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getNLinkingvars();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 795, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":796
 *         """
 *         cdef int result = self.thisptr.getNLinkingvars()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getNMasterconss(PartialDecomposition self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":790
 *         return result
 * 
 *     def getNLinkingvars(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets size of the vector containing linking vars
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getNLinkingvars", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":798
 *         return result
 * 
 *     def getNMasterconss(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets size of the vector containing master conss
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_145getNMasterconss(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_144getNMasterconss[] = "PartialDecomposition.getNMasterconss(self)\nGets size of the vector containing master conss\n\n        :return: size of the vector containing master conss.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_145getNMasterconss(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNMasterconss (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_144getNMasterconss(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_144getNMasterconss(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNMasterconss", 0);

  /* "src/pygcgopt/decomposition.pxi":803
 *         :return: size of the vector containing master conss.
 *         """
 *         cdef int result = self.thisptr.getNMasterconss()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getNMasterconss();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 803, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":804
 *         """
 *         cdef int result = self.thisptr.getNMasterconss()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getNMastervars(PartialDecomposition self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":798
 *         return result
 * 
 *     def getNMasterconss(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets size of the vector containing master conss
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getNMasterconss", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":806
 *         return result
 * 
 *     def getNMastervars(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets size of the vector containing master vars
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_147getNMastervars(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_146getNMastervars[] = "PartialDecomposition.getNMastervars(self)\nGets size of the vector containing master vars\n\n        master vars hit only constraints in the master\n        :return: size of the vector containing master vars.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_147getNMastervars(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNMastervars (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_146getNMastervars(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_146getNMastervars(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNMastervars", 0);

  /* "src/pygcgopt/decomposition.pxi":812
 *         :return: size of the vector containing master vars.
 *         """
 *         cdef int result = self.thisptr.getNMastervars()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getNMastervars();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 812, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":813
 *         """
 *         cdef int result = self.thisptr.getNMastervars()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getNNewBlocks(PartialDecomposition self, int detectorchainindex):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 813, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":806
 *         return result
 * 
 *     def getNMastervars(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets size of the vector containing master vars
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getNMastervars", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":815
 *         return result
 * 
 *     def getNNewBlocks(PartialDecomposition self, int detectorchainindex):             # <<<<<<<<<<<<<<
 *         """Gets number of blocks a detector added
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_149getNNewBlocks(PyObject *__pyx_v_self, PyObject *__pyx_arg_detectorchainindex); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_148getNNewBlocks[] = "PartialDecomposition.getNNewBlocks(self, int detectorchainindex)\nGets number of blocks a detector added\n\n        :return: number of blocks a detector added.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_149getNNewBlocks(PyObject *__pyx_v_self, PyObject *__pyx_arg_detectorchainindex) {
  int __pyx_v_detectorchainindex;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNNewBlocks (wrapper)", 0);
  assert(__pyx_arg_detectorchainindex); {
    __pyx_v_detectorchainindex = __Pyx_PyInt_As_int(__pyx_arg_detectorchainindex); if (unlikely((__pyx_v_detectorchainindex == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 815, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getNNewBlocks", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_148getNNewBlocks(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((int)__pyx_v_detectorchainindex));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_148getNNewBlocks(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_detectorchainindex) {
  int __pyx_v_cpp_detectorchainindex;
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNNewBlocks", 0);

  /* "src/pygcgopt/decomposition.pxi":820
 *         :return: number of blocks a detector added.
 *         """
 *         cdef int cpp_detectorchainindex = detectorchainindex             # <<<<<<<<<<<<<<
 *         cdef int result = self.thisptr.getNNewBlocks(cpp_detectorchainindex)
 *         return result
 */
  __pyx_v_cpp_detectorchainindex = __pyx_v_detectorchainindex;

  /* "src/pygcgopt/decomposition.pxi":821
 *         """
 *         cdef int cpp_detectorchainindex = detectorchainindex
 *         cdef int result = self.thisptr.getNNewBlocks(cpp_detectorchainindex)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getNNewBlocks(__pyx_v_cpp_detectorchainindex);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 821, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":822
 *         cdef int cpp_detectorchainindex = detectorchainindex
 *         cdef int result = self.thisptr.getNNewBlocks(cpp_detectorchainindex)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getNNewBlocksVector(PartialDecomposition self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 822, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":815
 *         return result
 * 
 *     def getNNewBlocks(PartialDecomposition self, int detectorchainindex):             # <<<<<<<<<<<<<<
 *         """Gets number of blocks a detector added
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getNNewBlocks", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":824
 *         return result
 * 
 *     def getNNewBlocksVector(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """gets number of blocks the detectors in the detectorchain added
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_151getNNewBlocksVector(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_150getNNewBlocksVector[] = "PartialDecomposition.getNNewBlocksVector(self)\ngets number of blocks the detectors in the detectorchain added\n\n        :return: number of blocks the detectors in the detectorchain added.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_151getNNewBlocksVector(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNNewBlocksVector (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_150getNNewBlocksVector(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_150getNNewBlocksVector(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  std::vector<int>  __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<int>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNNewBlocksVector", 0);

  /* "src/pygcgopt/decomposition.pxi":829
 *         :return: number of blocks the detectors in the detectorchain added.
 *         """
 *         cdef vector[int] result = self.thisptr.getNNewBlocksVector()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getNNewBlocksVector();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 829, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":830
 *         """
 *         cdef vector[int] result = self.thisptr.getNNewBlocksVector()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getNTotalStairlinkingvars(PartialDecomposition self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_vector_to_py_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 830, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":824
 *         return result
 * 
 *     def getNNewBlocksVector(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """gets number of blocks the detectors in the detectorchain added
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getNNewBlocksVector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":832
 *         return result
 * 
 *     def getNTotalStairlinkingvars(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets total number of stairlinking vars
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_153getNTotalStairlinkingvars(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_152getNTotalStairlinkingvars[] = "PartialDecomposition.getNTotalStairlinkingvars(self)\nGets total number of stairlinking vars\n\n        :return: total number of stairlinking vars.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_153getNTotalStairlinkingvars(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNTotalStairlinkingvars (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_152getNTotalStairlinkingvars(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_152getNTotalStairlinkingvars(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNTotalStairlinkingvars", 0);

  /* "src/pygcgopt/decomposition.pxi":837
 *         :return: total number of stairlinking vars.
 *         """
 *         cdef int result = self.thisptr.getNTotalStairlinkingvars()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getNTotalStairlinkingvars();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 837, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":838
 *         """
 *         cdef int result = self.thisptr.getNTotalStairlinkingvars()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getNOpenconss(PartialDecomposition self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 838, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":832
 *         return result
 * 
 *     def getNTotalStairlinkingvars(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets total number of stairlinking vars
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getNTotalStairlinkingvars", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":840
 *         return result
 * 
 *     def getNOpenconss(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets size of vector containing constraints not assigned yet
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_155getNOpenconss(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_154getNOpenconss[] = "PartialDecomposition.getNOpenconss(self)\nGets size of vector containing constraints not assigned yet\n\n        :return: returns size of vector containing constraints not assigned yet.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_155getNOpenconss(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNOpenconss (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_154getNOpenconss(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_154getNOpenconss(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNOpenconss", 0);

  /* "src/pygcgopt/decomposition.pxi":845
 *         :return: returns size of vector containing constraints not assigned yet.
 *         """
 *         cdef int result = self.thisptr.getNOpenconss()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getNOpenconss();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 845, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":846
 *         """
 *         cdef int result = self.thisptr.getNOpenconss()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getNOpenvars(PartialDecomposition self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":840
 *         return result
 * 
 *     def getNOpenconss(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets size of vector containing constraints not assigned yet
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getNOpenconss", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":848
 *         return result
 * 
 *     def getNOpenvars(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets size of vector containing variables not assigned yet
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_157getNOpenvars(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_156getNOpenvars[] = "PartialDecomposition.getNOpenvars(self)\nGets size of vector containing variables not assigned yet\n\n        :return: size of vector containing variables not assigned yet.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_157getNOpenvars(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNOpenvars (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_156getNOpenvars(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_156getNOpenvars(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNOpenvars", 0);

  /* "src/pygcgopt/decomposition.pxi":853
 *         :return: size of vector containing variables not assigned yet.
 *         """
 *         cdef int result = self.thisptr.getNOpenvars()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getNOpenvars();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 853, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":854
 *         """
 *         cdef int result = self.thisptr.getNOpenvars()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getNReps(PartialDecomposition self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 854, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":848
 *         return result
 * 
 *     def getNOpenvars(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets size of vector containing variables not assigned yet
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getNOpenvars", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":856
 *         return result
 * 
 *     def getNReps(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets the number of blockrepresentatives
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_159getNReps(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_158getNReps[] = "PartialDecomposition.getNReps(self)\nGets the number of blockrepresentatives\n\n        :return: the number of blockrepresentatives.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_159getNReps(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNReps (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_158getNReps(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_158getNReps(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNReps", 0);

  /* "src/pygcgopt/decomposition.pxi":861
 *         :return: the number of blockrepresentatives.
 *         """
 *         cdef int result = self.thisptr.getNReps()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getNReps();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 861, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":862
 *         """
 *         cdef int result = self.thisptr.getNReps()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getNStairlinkingvars(PartialDecomposition self, int block):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 862, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":856
 *         return result
 * 
 *     def getNReps(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets the number of blockrepresentatives
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getNReps", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":864
 *         return result
 * 
 *     def getNStairlinkingvars(PartialDecomposition self, int block):             # <<<<<<<<<<<<<<
 *         """Gets size of the vector containing stairlinking vars
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_161getNStairlinkingvars(PyObject *__pyx_v_self, PyObject *__pyx_arg_block); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_160getNStairlinkingvars[] = "PartialDecomposition.getNStairlinkingvars(self, int block)\nGets size of the vector containing stairlinking vars\n\n        :param block: id of the block the size of the stairlinking vector is asked for\n        :return: size of the vector containing stairlinking vars.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_161getNStairlinkingvars(PyObject *__pyx_v_self, PyObject *__pyx_arg_block) {
  int __pyx_v_block;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNStairlinkingvars (wrapper)", 0);
  assert(__pyx_arg_block); {
    __pyx_v_block = __Pyx_PyInt_As_int(__pyx_arg_block); if (unlikely((__pyx_v_block == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 864, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getNStairlinkingvars", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_160getNStairlinkingvars(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((int)__pyx_v_block));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_160getNStairlinkingvars(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_block) {
  int __pyx_v_cpp_block;
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNStairlinkingvars", 0);

  /* "src/pygcgopt/decomposition.pxi":870
 *         :return: size of the vector containing stairlinking vars.
 *         """
 *         cdef int cpp_block = block             # <<<<<<<<<<<<<<
 *         cdef int result = self.thisptr.getNStairlinkingvars(cpp_block)
 *         return result
 */
  __pyx_v_cpp_block = __pyx_v_block;

  /* "src/pygcgopt/decomposition.pxi":871
 *         """
 *         cdef int cpp_block = block
 *         cdef int result = self.thisptr.getNStairlinkingvars(cpp_block)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getNStairlinkingvars(__pyx_v_cpp_block);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 871, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":872
 *         cdef int cpp_block = block
 *         cdef int result = self.thisptr.getNStairlinkingvars(cpp_block)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getNVars(PartialDecomposition self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 872, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":864
 *         return result
 * 
 *     def getNStairlinkingvars(PartialDecomposition self, int block):             # <<<<<<<<<<<<<<
 *         """Gets size of the vector containing stairlinking vars
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getNStairlinkingvars", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":874
 *         return result
 * 
 *     def getNVars(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets number of vars
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_163getNVars(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_162getNVars[] = "PartialDecomposition.getNVars(self)\nGets number of vars\n\n        :return: number of vars.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_163getNVars(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNVars (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_162getNVars(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_162getNVars(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNVars", 0);

  /* "src/pygcgopt/decomposition.pxi":879
 *         :return: number of vars.
 *         """
 *         cdef int result = self.thisptr.getNVars()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getNVars();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 879, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":880
 *         """
 *         cdef int result = self.thisptr.getNVars()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getNVarsForBlock(PartialDecomposition self, int block):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 880, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":874
 *         return result
 * 
 *     def getNVars(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets number of vars
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getNVars", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":882
 *         return result
 * 
 *     def getNVarsForBlock(PartialDecomposition self, int block):             # <<<<<<<<<<<<<<
 *         """Gets size of the vector containing vars assigned to a block
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_165getNVarsForBlock(PyObject *__pyx_v_self, PyObject *__pyx_arg_block); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_164getNVarsForBlock[] = "PartialDecomposition.getNVarsForBlock(self, int block)\nGets size of the vector containing vars assigned to a block\n\n        :param block: id of the block the number of variables is asked for\n        :return: size of the vector containing vars assigned to a block.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_165getNVarsForBlock(PyObject *__pyx_v_self, PyObject *__pyx_arg_block) {
  int __pyx_v_block;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNVarsForBlock (wrapper)", 0);
  assert(__pyx_arg_block); {
    __pyx_v_block = __Pyx_PyInt_As_int(__pyx_arg_block); if (unlikely((__pyx_v_block == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 882, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getNVarsForBlock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_164getNVarsForBlock(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((int)__pyx_v_block));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_164getNVarsForBlock(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_block) {
  int __pyx_v_cpp_block;
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNVarsForBlock", 0);

  /* "src/pygcgopt/decomposition.pxi":888
 *         :return: size of the vector containing vars assigned to a block.
 *         """
 *         cdef int cpp_block = block             # <<<<<<<<<<<<<<
 *         cdef int result = self.thisptr.getNVarsForBlock(cpp_block)
 *         return result
 */
  __pyx_v_cpp_block = __pyx_v_block;

  /* "src/pygcgopt/decomposition.pxi":889
 *         """
 *         cdef int cpp_block = block
 *         cdef int result = self.thisptr.getNVarsForBlock(cpp_block)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getNVarsForBlock(__pyx_v_cpp_block);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 889, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":890
 *         cdef int cpp_block = block
 *         cdef int result = self.thisptr.getNVarsForBlock(cpp_block)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getNVarsForBlocks(PartialDecomposition self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 890, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":882
 *         return result
 * 
 *     def getNVarsForBlock(PartialDecomposition self, int block):             # <<<<<<<<<<<<<<
 *         """Gets size of the vector containing vars assigned to a block
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getNVarsForBlock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":892
 *         return result
 * 
 *     def getNVarsForBlocks(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets overall number of vars assigned to a block
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_167getNVarsForBlocks(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_166getNVarsForBlocks[] = "PartialDecomposition.getNVarsForBlocks(self)\nGets overall number of vars assigned to a block\n\n        :return: number of vars that are assigned to any block.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_167getNVarsForBlocks(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNVarsForBlocks (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_166getNVarsForBlocks(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_166getNVarsForBlocks(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNVarsForBlocks", 0);

  /* "src/pygcgopt/decomposition.pxi":897
 *         :return: number of vars that are assigned to any block.
 *         """
 *         cdef int result = self.thisptr.getNVarsForBlocks()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getNVarsForBlocks();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 897, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":898
 *         """
 *         cdef int result = self.thisptr.getNVarsForBlocks()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     # def getOpenconss(PartialDecomposition self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 898, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":892
 *         return result
 * 
 *     def getNVarsForBlocks(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets overall number of vars assigned to a block
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getNVarsForBlocks", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":908
 *     #     raise NotImplementedError()
 * 
 *     def getOpenconssVec(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets a vector containing constraint ids not assigned yet as vector
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_169getOpenconssVec(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_168getOpenconssVec[] = "PartialDecomposition.getOpenconssVec(self)\nGets a vector containing constraint ids not assigned yet as vector\n\n        :return: returns a vector containing constraint ids not assigned yet as vector.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_169getOpenconssVec(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getOpenconssVec (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_168getOpenconssVec(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_168getOpenconssVec(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  std::vector<int>  __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<int>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getOpenconssVec", 0);

  /* "src/pygcgopt/decomposition.pxi":913
 *         :return: returns a vector containing constraint ids not assigned yet as vector.
 *         """
 *         cdef vector[int] result = self.thisptr.getOpenconssVec()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getOpenconssVec();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 913, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":914
 *         """
 *         cdef vector[int] result = self.thisptr.getOpenconssVec()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getOpenvars(PartialDecomposition self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_vector_to_py_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 914, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":908
 *     #     raise NotImplementedError()
 * 
 *     def getOpenconssVec(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets a vector containing constraint ids not assigned yet as vector
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getOpenconssVec", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":916
 *         return result
 * 
 *     def getOpenvars(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets array containing variables not assigned yet
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_171getOpenvars(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_170getOpenvars[] = "PartialDecomposition.getOpenvars(self)\nGets array containing variables not assigned yet\n\n        :return: returns array containing variables not assigned yet.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_171getOpenvars(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getOpenvars (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_170getOpenvars(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_170getOpenvars(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getOpenvars", 0);

  /* "src/pygcgopt/decomposition.pxi":922
 *         """
 *         # TODO implement function
 *         raise NotImplementedError()             # <<<<<<<<<<<<<<
 * 
 *     def getOpenvarsVec(PartialDecomposition self):
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_builtin_NotImplementedError); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 922, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 922, __pyx_L1_error)

  /* "src/pygcgopt/decomposition.pxi":916
 *         return result
 * 
 *     def getOpenvars(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets array containing variables not assigned yet
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getOpenvars", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":924
 *         raise NotImplementedError()
 * 
 *     def getOpenvarsVec(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """!Gets array containing variables not assigned yet as vector
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_173getOpenvarsVec(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_172getOpenvarsVec[] = "PartialDecomposition.getOpenvarsVec(self)\n!Gets array containing variables not assigned yet as vector\n\n        :return: array containing variables not assigned yet as vector.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_173getOpenvarsVec(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getOpenvarsVec (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_172getOpenvarsVec(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_172getOpenvarsVec(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  std::vector<int>  __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<int>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getOpenvarsVec", 0);

  /* "src/pygcgopt/decomposition.pxi":929
 *         :return: array containing variables not assigned yet as vector.
 *         """
 *         cdef vector[int] result = self.thisptr.getOpenvarsVec()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getOpenvarsVec();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 929, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":930
 *         """
 *         cdef vector[int] result = self.thisptr.getOpenvarsVec()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getPctVarsToBorder(PartialDecomposition self, int detectorchainindex):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_vector_to_py_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 930, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":924
 *         raise NotImplementedError()
 * 
 *     def getOpenvarsVec(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """!Gets array containing variables not assigned yet as vector
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getOpenvarsVec", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":932
 *         return result
 * 
 *     def getPctVarsToBorder(PartialDecomposition self, int detectorchainindex):             # <<<<<<<<<<<<<<
 *         """Gets fraction of variables assigned to the border for a detector
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_175getPctVarsToBorder(PyObject *__pyx_v_self, PyObject *__pyx_arg_detectorchainindex); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_174getPctVarsToBorder[] = "PartialDecomposition.getPctVarsToBorder(self, int detectorchainindex)\nGets fraction of variables assigned to the border for a detector\n\n        :return: fraction of variables assigned to the border for a detector.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_175getPctVarsToBorder(PyObject *__pyx_v_self, PyObject *__pyx_arg_detectorchainindex) {
  int __pyx_v_detectorchainindex;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPctVarsToBorder (wrapper)", 0);
  assert(__pyx_arg_detectorchainindex); {
    __pyx_v_detectorchainindex = __Pyx_PyInt_As_int(__pyx_arg_detectorchainindex); if (unlikely((__pyx_v_detectorchainindex == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 932, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getPctVarsToBorder", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_174getPctVarsToBorder(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((int)__pyx_v_detectorchainindex));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_174getPctVarsToBorder(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_detectorchainindex) {
  int __pyx_v_cpp_detectorchainindex;
  double __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPctVarsToBorder", 0);

  /* "src/pygcgopt/decomposition.pxi":937
 *         :return: fraction of variables assigned to the border for a detector.
 *         """
 *         cdef int cpp_detectorchainindex = detectorchainindex             # <<<<<<<<<<<<<<
 *         cdef double result = self.thisptr.getPctVarsToBorder(cpp_detectorchainindex)
 *         return result
 */
  __pyx_v_cpp_detectorchainindex = __pyx_v_detectorchainindex;

  /* "src/pygcgopt/decomposition.pxi":938
 *         """
 *         cdef int cpp_detectorchainindex = detectorchainindex
 *         cdef double result = self.thisptr.getPctVarsToBorder(cpp_detectorchainindex)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getPctVarsToBorder(__pyx_v_cpp_detectorchainindex);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 938, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":939
 *         cdef int cpp_detectorchainindex = detectorchainindex
 *         cdef double result = self.thisptr.getPctVarsToBorder(cpp_detectorchainindex)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getPctVarsToBorderVector(PartialDecomposition self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 939, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":932
 *         return result
 * 
 *     def getPctVarsToBorder(PartialDecomposition self, int detectorchainindex):             # <<<<<<<<<<<<<<
 *         """Gets fraction of variables assigned to the border for a detector
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getPctVarsToBorder", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":941
 *         return result
 * 
 *     def getPctVarsToBorderVector(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets fraction of variables assigned to the border for detectors in detectorchain
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_177getPctVarsToBorderVector(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_176getPctVarsToBorderVector[] = "PartialDecomposition.getPctVarsToBorderVector(self)\nGets fraction of variables assigned to the border for detectors in detectorchain\n\n        :return: vector of fractions of variables assigned to the border for detectors in detectorchain.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_177getPctVarsToBorderVector(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPctVarsToBorderVector (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_176getPctVarsToBorderVector(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_176getPctVarsToBorderVector(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  std::vector<double>  __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<double>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPctVarsToBorderVector", 0);

  /* "src/pygcgopt/decomposition.pxi":946
 *         :return: vector of fractions of variables assigned to the border for detectors in detectorchain.
 *         """
 *         cdef vector[double] result = self.thisptr.getPctVarsToBorderVector()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getPctVarsToBorderVector();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 946, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":947
 *         """
 *         cdef vector[double] result = self.thisptr.getPctVarsToBorderVector()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getPctVarsToBlock(PartialDecomposition self, int detectorchainindex):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_vector_to_py_double(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 947, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":941
 *         return result
 * 
 *     def getPctVarsToBorderVector(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets fraction of variables assigned to the border for detectors in detectorchain
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getPctVarsToBorderVector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":949
 *         return result
 * 
 *     def getPctVarsToBlock(PartialDecomposition self, int detectorchainindex):             # <<<<<<<<<<<<<<
 *         """Gets fraction of variables assigned to a block for a detector
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_179getPctVarsToBlock(PyObject *__pyx_v_self, PyObject *__pyx_arg_detectorchainindex); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_178getPctVarsToBlock[] = "PartialDecomposition.getPctVarsToBlock(self, int detectorchainindex)\nGets fraction of variables assigned to a block for a detector\n\n        :return: fraction of variables assigned to a block for a detector.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_179getPctVarsToBlock(PyObject *__pyx_v_self, PyObject *__pyx_arg_detectorchainindex) {
  int __pyx_v_detectorchainindex;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPctVarsToBlock (wrapper)", 0);
  assert(__pyx_arg_detectorchainindex); {
    __pyx_v_detectorchainindex = __Pyx_PyInt_As_int(__pyx_arg_detectorchainindex); if (unlikely((__pyx_v_detectorchainindex == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 949, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getPctVarsToBlock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_178getPctVarsToBlock(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((int)__pyx_v_detectorchainindex));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_178getPctVarsToBlock(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_detectorchainindex) {
  int __pyx_v_cpp_detectorchainindex;
  double __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPctVarsToBlock", 0);

  /* "src/pygcgopt/decomposition.pxi":954
 *         :return: fraction of variables assigned to a block for a detector.
 *         """
 *         cdef int cpp_detectorchainindex = detectorchainindex             # <<<<<<<<<<<<<<
 *         cdef double result = self.thisptr.getPctVarsToBlock(cpp_detectorchainindex)
 *         return result
 */
  __pyx_v_cpp_detectorchainindex = __pyx_v_detectorchainindex;

  /* "src/pygcgopt/decomposition.pxi":955
 *         """
 *         cdef int cpp_detectorchainindex = detectorchainindex
 *         cdef double result = self.thisptr.getPctVarsToBlock(cpp_detectorchainindex)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getPctVarsToBlock(__pyx_v_cpp_detectorchainindex);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 955, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":956
 *         cdef int cpp_detectorchainindex = detectorchainindex
 *         cdef double result = self.thisptr.getPctVarsToBlock(cpp_detectorchainindex)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getPctVarsToBlockVector(PartialDecomposition self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 956, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":949
 *         return result
 * 
 *     def getPctVarsToBlock(PartialDecomposition self, int detectorchainindex):             # <<<<<<<<<<<<<<
 *         """Gets fraction of variables assigned to a block for a detector
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getPctVarsToBlock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":958
 *         return result
 * 
 *     def getPctVarsToBlockVector(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """returns fraction of variables assigned to a block for detectors in detectorchain
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_181getPctVarsToBlockVector(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_180getPctVarsToBlockVector[] = "PartialDecomposition.getPctVarsToBlockVector(self)\nreturns fraction of variables assigned to a block for detectors in detectorchain\n\n        :return: vector of fractions of variables assigned to a block for detectors in detectorchain.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_181getPctVarsToBlockVector(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPctVarsToBlockVector (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_180getPctVarsToBlockVector(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_180getPctVarsToBlockVector(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  std::vector<double>  __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<double>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPctVarsToBlockVector", 0);

  /* "src/pygcgopt/decomposition.pxi":963
 *         :return: vector of fractions of variables assigned to a block for detectors in detectorchain.
 *         """
 *         cdef vector[double] result = self.thisptr.getPctVarsToBlockVector()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getPctVarsToBlockVector();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 963, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":964
 *         """
 *         cdef vector[double] result = self.thisptr.getPctVarsToBlockVector()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getPctVarsFromFree(PartialDecomposition self, int detectorchainindex):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_vector_to_py_double(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 964, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":958
 *         return result
 * 
 *     def getPctVarsToBlockVector(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """returns fraction of variables assigned to a block for detectors in detectorchain
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getPctVarsToBlockVector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":966
 *         return result
 * 
 *     def getPctVarsFromFree(PartialDecomposition self, int detectorchainindex):             # <<<<<<<<<<<<<<
 *         """Gets fraction of variables that are not longer open for a detector
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_183getPctVarsFromFree(PyObject *__pyx_v_self, PyObject *__pyx_arg_detectorchainindex); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_182getPctVarsFromFree[] = "PartialDecomposition.getPctVarsFromFree(self, int detectorchainindex)\nGets fraction of variables that are not longer open for a detector\n\n        :return: index of the detector in the detectorchain.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_183getPctVarsFromFree(PyObject *__pyx_v_self, PyObject *__pyx_arg_detectorchainindex) {
  int __pyx_v_detectorchainindex;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPctVarsFromFree (wrapper)", 0);
  assert(__pyx_arg_detectorchainindex); {
    __pyx_v_detectorchainindex = __Pyx_PyInt_As_int(__pyx_arg_detectorchainindex); if (unlikely((__pyx_v_detectorchainindex == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 966, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getPctVarsFromFree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_182getPctVarsFromFree(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((int)__pyx_v_detectorchainindex));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_182getPctVarsFromFree(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_detectorchainindex) {
  int __pyx_v_cpp_detectorchainindex;
  double __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPctVarsFromFree", 0);

  /* "src/pygcgopt/decomposition.pxi":971
 *         :return: index of the detector in the detectorchain.
 *         """
 *         cdef int cpp_detectorchainindex = detectorchainindex             # <<<<<<<<<<<<<<
 *         cdef double result = self.thisptr.getPctVarsFromFree(cpp_detectorchainindex)
 *         return result
 */
  __pyx_v_cpp_detectorchainindex = __pyx_v_detectorchainindex;

  /* "src/pygcgopt/decomposition.pxi":972
 *         """
 *         cdef int cpp_detectorchainindex = detectorchainindex
 *         cdef double result = self.thisptr.getPctVarsFromFree(cpp_detectorchainindex)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getPctVarsFromFree(__pyx_v_cpp_detectorchainindex);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 972, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":973
 *         cdef int cpp_detectorchainindex = detectorchainindex
 *         cdef double result = self.thisptr.getPctVarsFromFree(cpp_detectorchainindex)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getPctVarsFromFreeVector(PartialDecomposition self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 973, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":966
 *         return result
 * 
 *     def getPctVarsFromFree(PartialDecomposition self, int detectorchainindex):             # <<<<<<<<<<<<<<
 *         """Gets fraction of variables that are not longer open for a detector
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getPctVarsFromFree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":975
 *         return result
 * 
 *     def getPctVarsFromFreeVector(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets fraction of variables that are not longer open for detectors in detectorchain
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_185getPctVarsFromFreeVector(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_184getPctVarsFromFreeVector[] = "PartialDecomposition.getPctVarsFromFreeVector(self)\nGets fraction of variables that are not longer open for detectors in detectorchain\n\n        :return: vector or fractions of variables that are not longer open for detectors in detectorchain.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_185getPctVarsFromFreeVector(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPctVarsFromFreeVector (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_184getPctVarsFromFreeVector(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_184getPctVarsFromFreeVector(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  std::vector<double>  __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<double>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPctVarsFromFreeVector", 0);

  /* "src/pygcgopt/decomposition.pxi":980
 *         :return: vector or fractions of variables that are not longer open for detectors in detectorchain.
 *         """
 *         cdef vector[double] result = self.thisptr.getPctVarsFromFreeVector()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getPctVarsFromFreeVector();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 980, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":981
 *         """
 *         cdef vector[double] result = self.thisptr.getPctVarsFromFreeVector()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getPctConssToBorder(PartialDecomposition self, int detectorchainindex):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_vector_to_py_double(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 981, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":975
 *         return result
 * 
 *     def getPctVarsFromFreeVector(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets fraction of variables that are not longer open for detectors in detectorchain
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getPctVarsFromFreeVector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":983
 *         return result
 * 
 *     def getPctConssToBorder(PartialDecomposition self, int detectorchainindex):             # <<<<<<<<<<<<<<
 *         """Gets fraction of constraints assigned to the border for a detector
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_187getPctConssToBorder(PyObject *__pyx_v_self, PyObject *__pyx_arg_detectorchainindex); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_186getPctConssToBorder[] = "PartialDecomposition.getPctConssToBorder(self, int detectorchainindex)\nGets fraction of constraints assigned to the border for a detector\n\n        :return: returns fraction of constraints assigned to the border for a detector\n        /\n        /**.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_187getPctConssToBorder(PyObject *__pyx_v_self, PyObject *__pyx_arg_detectorchainindex) {
  int __pyx_v_detectorchainindex;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPctConssToBorder (wrapper)", 0);
  assert(__pyx_arg_detectorchainindex); {
    __pyx_v_detectorchainindex = __Pyx_PyInt_As_int(__pyx_arg_detectorchainindex); if (unlikely((__pyx_v_detectorchainindex == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 983, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getPctConssToBorder", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_186getPctConssToBorder(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((int)__pyx_v_detectorchainindex));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_186getPctConssToBorder(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_detectorchainindex) {
  int __pyx_v_cpp_detectorchainindex;
  double __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPctConssToBorder", 0);

  /* "src/pygcgopt/decomposition.pxi":990
 *         /[inserted by cython to avoid comment start]**.
 *         """
 *         cdef int cpp_detectorchainindex = detectorchainindex             # <<<<<<<<<<<<<<
 *         cdef double result = self.thisptr.getPctConssToBorder(cpp_detectorchainindex)
 *         return result
 */
  __pyx_v_cpp_detectorchainindex = __pyx_v_detectorchainindex;

  /* "src/pygcgopt/decomposition.pxi":991
 *         """
 *         cdef int cpp_detectorchainindex = detectorchainindex
 *         cdef double result = self.thisptr.getPctConssToBorder(cpp_detectorchainindex)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getPctConssToBorder(__pyx_v_cpp_detectorchainindex);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 991, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":992
 *         cdef int cpp_detectorchainindex = detectorchainindex
 *         cdef double result = self.thisptr.getPctConssToBorder(cpp_detectorchainindex)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getPctConssToBorderVector(PartialDecomposition self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 992, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":983
 *         return result
 * 
 *     def getPctConssToBorder(PartialDecomposition self, int detectorchainindex):             # <<<<<<<<<<<<<<
 *         """Gets fraction of constraints assigned to the border for a detector
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getPctConssToBorder", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":994
 *         return result
 * 
 *     def getPctConssToBorderVector(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets fraction of constraints assigned to the border for detectors in detectorchain
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_189getPctConssToBorderVector(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_188getPctConssToBorderVector[] = "PartialDecomposition.getPctConssToBorderVector(self)\nGets fraction of constraints assigned to the border for detectors in detectorchain\n\n        :return: vector of fractions of constraints assigned to the border for detectors in detectorchain.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_189getPctConssToBorderVector(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPctConssToBorderVector (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_188getPctConssToBorderVector(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_188getPctConssToBorderVector(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  std::vector<double>  __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<double>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPctConssToBorderVector", 0);

  /* "src/pygcgopt/decomposition.pxi":999
 *         :return: vector of fractions of constraints assigned to the border for detectors in detectorchain.
 *         """
 *         cdef vector[double] result = self.thisptr.getPctConssToBorderVector()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getPctConssToBorderVector();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 999, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":1000
 *         """
 *         cdef vector[double] result = self.thisptr.getPctConssToBorderVector()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getPctConssToBlock(PartialDecomposition self, int detectorchainindex):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_vector_to_py_double(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1000, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":994
 *         return result
 * 
 *     def getPctConssToBorderVector(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets fraction of constraints assigned to the border for detectors in detectorchain
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getPctConssToBorderVector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1002
 *         return result
 * 
 *     def getPctConssToBlock(PartialDecomposition self, int detectorchainindex):             # <<<<<<<<<<<<<<
 *         """Gets fraction of constraints assigned to a block for a detector
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_191getPctConssToBlock(PyObject *__pyx_v_self, PyObject *__pyx_arg_detectorchainindex); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_190getPctConssToBlock[] = "PartialDecomposition.getPctConssToBlock(self, int detectorchainindex)\nGets fraction of constraints assigned to a block for a detector\n\n        :return: fraction of constraints assigned to a block for a detector.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_191getPctConssToBlock(PyObject *__pyx_v_self, PyObject *__pyx_arg_detectorchainindex) {
  int __pyx_v_detectorchainindex;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPctConssToBlock (wrapper)", 0);
  assert(__pyx_arg_detectorchainindex); {
    __pyx_v_detectorchainindex = __Pyx_PyInt_As_int(__pyx_arg_detectorchainindex); if (unlikely((__pyx_v_detectorchainindex == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 1002, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getPctConssToBlock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_190getPctConssToBlock(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((int)__pyx_v_detectorchainindex));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_190getPctConssToBlock(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_detectorchainindex) {
  int __pyx_v_cpp_detectorchainindex;
  double __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPctConssToBlock", 0);

  /* "src/pygcgopt/decomposition.pxi":1007
 *         :return: fraction of constraints assigned to a block for a detector.
 *         """
 *         cdef int cpp_detectorchainindex = detectorchainindex             # <<<<<<<<<<<<<<
 *         cdef double result = self.thisptr.getPctConssToBlock(cpp_detectorchainindex)
 *         return result
 */
  __pyx_v_cpp_detectorchainindex = __pyx_v_detectorchainindex;

  /* "src/pygcgopt/decomposition.pxi":1008
 *         """
 *         cdef int cpp_detectorchainindex = detectorchainindex
 *         cdef double result = self.thisptr.getPctConssToBlock(cpp_detectorchainindex)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getPctConssToBlock(__pyx_v_cpp_detectorchainindex);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1008, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":1009
 *         cdef int cpp_detectorchainindex = detectorchainindex
 *         cdef double result = self.thisptr.getPctConssToBlock(cpp_detectorchainindex)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getPctConssToBlockVector(PartialDecomposition self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1009, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":1002
 *         return result
 * 
 *     def getPctConssToBlock(PartialDecomposition self, int detectorchainindex):             # <<<<<<<<<<<<<<
 *         """Gets fraction of constraints assigned to a block for a detector
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getPctConssToBlock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1011
 *         return result
 * 
 *     def getPctConssToBlockVector(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets fraction of constraints assigned to a block for detectors in detectorchain
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_193getPctConssToBlockVector(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_192getPctConssToBlockVector[] = "PartialDecomposition.getPctConssToBlockVector(self)\nGets fraction of constraints assigned to a block for detectors in detectorchain\n\n        :return: vector of fractions of constraints assigned to a block for detectors in detectorchain.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_193getPctConssToBlockVector(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPctConssToBlockVector (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_192getPctConssToBlockVector(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_192getPctConssToBlockVector(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  std::vector<double>  __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<double>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPctConssToBlockVector", 0);

  /* "src/pygcgopt/decomposition.pxi":1016
 *         :return: vector of fractions of constraints assigned to a block for detectors in detectorchain.
 *         """
 *         cdef vector[double] result = self.thisptr.getPctConssToBlockVector()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getPctConssToBlockVector();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1016, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":1017
 *         """
 *         cdef vector[double] result = self.thisptr.getPctConssToBlockVector()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getPctConssFromFree(PartialDecomposition self, int detectorchainindex):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_vector_to_py_double(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1017, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":1011
 *         return result
 * 
 *     def getPctConssToBlockVector(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets fraction of constraints assigned to a block for detectors in detectorchain
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getPctConssToBlockVector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1019
 *         return result
 * 
 *     def getPctConssFromFree(PartialDecomposition self, int detectorchainindex):             # <<<<<<<<<<<<<<
 *         """Gets fraction of constraints that are not longer open for a detector
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_195getPctConssFromFree(PyObject *__pyx_v_self, PyObject *__pyx_arg_detectorchainindex); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_194getPctConssFromFree[] = "PartialDecomposition.getPctConssFromFree(self, int detectorchainindex)\nGets fraction of constraints that are not longer open for a detector\n\n        :return: fraction of constraints that are not longer open for a detector.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_195getPctConssFromFree(PyObject *__pyx_v_self, PyObject *__pyx_arg_detectorchainindex) {
  int __pyx_v_detectorchainindex;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPctConssFromFree (wrapper)", 0);
  assert(__pyx_arg_detectorchainindex); {
    __pyx_v_detectorchainindex = __Pyx_PyInt_As_int(__pyx_arg_detectorchainindex); if (unlikely((__pyx_v_detectorchainindex == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 1019, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getPctConssFromFree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_194getPctConssFromFree(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((int)__pyx_v_detectorchainindex));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_194getPctConssFromFree(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_detectorchainindex) {
  int __pyx_v_cpp_detectorchainindex;
  double __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPctConssFromFree", 0);

  /* "src/pygcgopt/decomposition.pxi":1024
 *         :return: fraction of constraints that are not longer open for a detector.
 *         """
 *         cdef int cpp_detectorchainindex = detectorchainindex             # <<<<<<<<<<<<<<
 *         cdef double result = self.thisptr.getPctConssFromFree(cpp_detectorchainindex)
 *         return result
 */
  __pyx_v_cpp_detectorchainindex = __pyx_v_detectorchainindex;

  /* "src/pygcgopt/decomposition.pxi":1025
 *         """
 *         cdef int cpp_detectorchainindex = detectorchainindex
 *         cdef double result = self.thisptr.getPctConssFromFree(cpp_detectorchainindex)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getPctConssFromFree(__pyx_v_cpp_detectorchainindex);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1025, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":1026
 *         cdef int cpp_detectorchainindex = detectorchainindex
 *         cdef double result = self.thisptr.getPctConssFromFree(cpp_detectorchainindex)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getPctConssFromFreeVector(PartialDecomposition self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1026, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":1019
 *         return result
 * 
 *     def getPctConssFromFree(PartialDecomposition self, int detectorchainindex):             # <<<<<<<<<<<<<<
 *         """Gets fraction of constraints that are not longer open for a detector
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getPctConssFromFree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1028
 *         return result
 * 
 *     def getPctConssFromFreeVector(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets fraction of constraints that are not longer open for detectors in detectorchain
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_197getPctConssFromFreeVector(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_196getPctConssFromFreeVector[] = "PartialDecomposition.getPctConssFromFreeVector(self)\nGets fraction of constraints that are not longer open for detectors in detectorchain\n\n        :return: vector of fractions of constraints that are not longer open for detectors in detectorchain.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_197getPctConssFromFreeVector(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPctConssFromFreeVector (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_196getPctConssFromFreeVector(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_196getPctConssFromFreeVector(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  std::vector<double>  __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<double>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPctConssFromFreeVector", 0);

  /* "src/pygcgopt/decomposition.pxi":1033
 *         :return: vector of fractions of constraints that are not longer open for detectors in detectorchain.
 *         """
 *         cdef vector[double] result = self.thisptr.getPctConssFromFreeVector()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getPctConssFromFreeVector();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1033, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":1034
 *         """
 *         cdef vector[double] result = self.thisptr.getPctConssFromFreeVector()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getRepForBlock(PartialDecomposition self, int blockid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_vector_to_py_double(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1034, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":1028
 *         return result
 * 
 *     def getPctConssFromFreeVector(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets fraction of constraints that are not longer open for detectors in detectorchain
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getPctConssFromFreeVector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1036
 *         return result
 * 
 *     def getRepForBlock(PartialDecomposition self, int blockid):             # <<<<<<<<<<<<<<
 *         """Gets index of the representative block for a block, this might be blockid itself
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_199getRepForBlock(PyObject *__pyx_v_self, PyObject *__pyx_arg_blockid); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_198getRepForBlock[] = "PartialDecomposition.getRepForBlock(self, int blockid)\nGets index of the representative block for a block, this might be blockid itself\n\n        :param blockid: id of the block the representative is asked for\n        :return: index of the representative block for a block, this might be blockid itself.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_199getRepForBlock(PyObject *__pyx_v_self, PyObject *__pyx_arg_blockid) {
  int __pyx_v_blockid;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getRepForBlock (wrapper)", 0);
  assert(__pyx_arg_blockid); {
    __pyx_v_blockid = __Pyx_PyInt_As_int(__pyx_arg_blockid); if (unlikely((__pyx_v_blockid == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 1036, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getRepForBlock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_198getRepForBlock(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((int)__pyx_v_blockid));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_198getRepForBlock(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_blockid) {
  int __pyx_v_cpp_blockid;
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getRepForBlock", 0);

  /* "src/pygcgopt/decomposition.pxi":1042
 *         :return: index of the representative block for a block, this might be blockid itself.
 *         """
 *         cdef int cpp_blockid = blockid             # <<<<<<<<<<<<<<
 *         cdef int result = self.thisptr.getRepForBlock(cpp_blockid)
 *         return result
 */
  __pyx_v_cpp_blockid = __pyx_v_blockid;

  /* "src/pygcgopt/decomposition.pxi":1043
 *         """
 *         cdef int cpp_blockid = blockid
 *         cdef int result = self.thisptr.getRepForBlock(cpp_blockid)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getRepForBlock(__pyx_v_cpp_blockid);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1043, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":1044
 *         cdef int cpp_blockid = blockid
 *         cdef int result = self.thisptr.getRepForBlock(cpp_blockid)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getRepVarmap(PartialDecomposition self, int repid, int blockrepid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":1036
 *         return result
 * 
 *     def getRepForBlock(PartialDecomposition self, int blockid):             # <<<<<<<<<<<<<<
 *         """Gets index of the representative block for a block, this might be blockid itself
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getRepForBlock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1046
 *         return result
 * 
 *     def getRepVarmap(PartialDecomposition self, int repid, int blockrepid):             # <<<<<<<<<<<<<<
 *         """Gets the represenation varmap
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_201getRepVarmap(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_200getRepVarmap[] = "PartialDecomposition.getRepVarmap(self, int repid, int blockrepid)\nGets the represenation varmap\n\n        Var map is vector for represenative repid and the blockrepid-th block that is represented by repid\n\n        :param repid: id of representative\n        :param blockrepid: id of block\n        :return: the represenation varmap as vector for represenative repid and the blockrepid-th block that is represented by repid.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_201getRepVarmap(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_repid;
  int __pyx_v_blockrepid;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getRepVarmap (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_repid,&__pyx_n_s_blockrepid,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_repid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_blockrepid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getRepVarmap", 1, 2, 2, 1); __PYX_ERR(2, 1046, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getRepVarmap") < 0)) __PYX_ERR(2, 1046, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_repid = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_repid == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 1046, __pyx_L3_error)
    __pyx_v_blockrepid = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_blockrepid == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 1046, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getRepVarmap", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 1046, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getRepVarmap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_200getRepVarmap(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), __pyx_v_repid, __pyx_v_blockrepid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_200getRepVarmap(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_repid, int __pyx_v_blockrepid) {
  int __pyx_v_cpp_repid;
  int __pyx_v_cpp_blockrepid;
  std::vector<int>  __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<int>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getRepVarmap", 0);

  /* "src/pygcgopt/decomposition.pxi":1055
 *         :return: the represenation varmap as vector for represenative repid and the blockrepid-th block that is represented by repid.
 *         """
 *         cdef int cpp_repid = repid             # <<<<<<<<<<<<<<
 *         cdef int cpp_blockrepid = blockrepid
 *         cdef vector[int] result = self.thisptr.getRepVarmap(cpp_repid, cpp_blockrepid)
 */
  __pyx_v_cpp_repid = __pyx_v_repid;

  /* "src/pygcgopt/decomposition.pxi":1056
 *         """
 *         cdef int cpp_repid = repid
 *         cdef int cpp_blockrepid = blockrepid             # <<<<<<<<<<<<<<
 *         cdef vector[int] result = self.thisptr.getRepVarmap(cpp_repid, cpp_blockrepid)
 *         return result
 */
  __pyx_v_cpp_blockrepid = __pyx_v_blockrepid;

  /* "src/pygcgopt/decomposition.pxi":1057
 *         cdef int cpp_repid = repid
 *         cdef int cpp_blockrepid = blockrepid
 *         cdef vector[int] result = self.thisptr.getRepVarmap(cpp_repid, cpp_blockrepid)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getRepVarmap(__pyx_v_cpp_repid, __pyx_v_cpp_blockrepid);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1057, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":1058
 *         cdef int cpp_blockrepid = blockrepid
 *         cdef vector[int] result = self.thisptr.getRepVarmap(cpp_repid, cpp_blockrepid)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getDetprobdata(PartialDecomposition self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_vector_to_py_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1058, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":1046
 *         return result
 * 
 *     def getRepVarmap(PartialDecomposition self, int repid, int blockrepid):             # <<<<<<<<<<<<<<
 *         """Gets the represenation varmap
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getRepVarmap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1060
 *         return result
 * 
 *     def getDetprobdata(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets the corresponding detprobdata
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_203getDetprobdata(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_202getDetprobdata[] = "PartialDecomposition.getDetprobdata(self)\nGets the corresponding detprobdata\n\n        :return: corresponding detprobdata.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_203getDetprobdata(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDetprobdata (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_202getDetprobdata(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_202getDetprobdata(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  gcg::DETPROBDATA *__pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  gcg::DETPROBDATA *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getDetprobdata", 0);

  /* "src/pygcgopt/decomposition.pxi":1065
 *         :return: corresponding detprobdata.
 *         """
 *         cdef DETPROBDATA * result = self.thisptr.getDetprobdata()             # <<<<<<<<<<<<<<
 *         return DetProbData.create(result)
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getDetprobdata();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1065, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":1066
 *         """
 *         cdef DETPROBDATA * result = self.thisptr.getDetprobdata()
 *         return DetProbData.create(result)             # <<<<<<<<<<<<<<
 * 
 *     def getStairlinkingvars(PartialDecomposition self, int block):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_8pygcgopt_3gcg_11DetProbData_create(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1066, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":1060
 *         return result
 * 
 *     def getDetprobdata(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets the corresponding detprobdata
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getDetprobdata", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1068
 *         return DetProbData.create(result)
 * 
 *     def getStairlinkingvars(PartialDecomposition self, int block):             # <<<<<<<<<<<<<<
 *         """Gets array containing stairlinking vars,
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_205getStairlinkingvars(PyObject *__pyx_v_self, PyObject *__pyx_arg_block); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_204getStairlinkingvars[] = "PartialDecomposition.getStairlinkingvars(self, int block)\nGets array containing stairlinking vars,\n\n        .. note:: if a stairlinking variable links block i and i+1 it is only stored in vector of block i\n        :param block: id of the block the stairlinking variable varctor is asked for\n        :return: array containing stairlinking vars,.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_205getStairlinkingvars(PyObject *__pyx_v_self, PyObject *__pyx_arg_block) {
  int __pyx_v_block;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getStairlinkingvars (wrapper)", 0);
  assert(__pyx_arg_block); {
    __pyx_v_block = __Pyx_PyInt_As_int(__pyx_arg_block); if (unlikely((__pyx_v_block == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 1068, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getStairlinkingvars", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_204getStairlinkingvars(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((int)__pyx_v_block));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_204getStairlinkingvars(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_block) {
  CYTHON_UNUSED int __pyx_v_cpp_block;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getStairlinkingvars", 0);

  /* "src/pygcgopt/decomposition.pxi":1075
 *         :return: array containing stairlinking vars,.
 *         """
 *         cdef int cpp_block = block             # <<<<<<<<<<<<<<
 *         # TODO implement function
 *         raise NotImplementedError()
 */
  __pyx_v_cpp_block = __pyx_v_block;

  /* "src/pygcgopt/decomposition.pxi":1077
 *         cdef int cpp_block = block
 *         # TODO implement function
 *         raise NotImplementedError()             # <<<<<<<<<<<<<<
 * 
 *     def getVarsForBlock(PartialDecomposition self, int block):
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_builtin_NotImplementedError); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1077, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 1077, __pyx_L1_error)

  /* "src/pygcgopt/decomposition.pxi":1068
 *         return DetProbData.create(result)
 * 
 *     def getStairlinkingvars(PartialDecomposition self, int block):             # <<<<<<<<<<<<<<
 *         """Gets array containing stairlinking vars,
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getStairlinkingvars", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1079
 *         raise NotImplementedError()
 * 
 *     def getVarsForBlock(PartialDecomposition self, int block):             # <<<<<<<<<<<<<<
 *         """Gets array containing vars of a block
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_207getVarsForBlock(PyObject *__pyx_v_self, PyObject *__pyx_arg_block); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_206getVarsForBlock[] = "PartialDecomposition.getVarsForBlock(self, int block)\nGets array containing vars of a block\n\n        :param block: id of the block the vars are requested for\n        :return: returns array containing vars of a block.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_207getVarsForBlock(PyObject *__pyx_v_self, PyObject *__pyx_arg_block) {
  int __pyx_v_block;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getVarsForBlock (wrapper)", 0);
  assert(__pyx_arg_block); {
    __pyx_v_block = __Pyx_PyInt_As_int(__pyx_arg_block); if (unlikely((__pyx_v_block == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 1079, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getVarsForBlock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_206getVarsForBlock(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((int)__pyx_v_block));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_206getVarsForBlock(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_block) {
  int __pyx_v_cpp_block;
  std::vector<int>  __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<int>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getVarsForBlock", 0);

  /* "src/pygcgopt/decomposition.pxi":1085
 *         :return: returns array containing vars of a block.
 *         """
 *         cdef int cpp_block = block             # <<<<<<<<<<<<<<
 *         cdef vector[int] result = self.thisptr.getVarsForBlock(cpp_block)
 *         return result
 */
  __pyx_v_cpp_block = __pyx_v_block;

  /* "src/pygcgopt/decomposition.pxi":1086
 *         """
 *         cdef int cpp_block = block
 *         cdef vector[int] result = self.thisptr.getVarsForBlock(cpp_block)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getVarsForBlock(__pyx_v_cpp_block);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1086, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":1087
 *         cdef int cpp_block = block
 *         cdef vector[int] result = self.thisptr.getVarsForBlock(cpp_block)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getVarProbindexForBlock(PartialDecomposition self, int varid, int block):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_vector_to_py_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1087, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":1079
 *         raise NotImplementedError()
 * 
 *     def getVarsForBlock(PartialDecomposition self, int block):             # <<<<<<<<<<<<<<
 *         """Gets array containing vars of a block
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getVarsForBlock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1089
 *         return result
 * 
 *     def getVarProbindexForBlock(PartialDecomposition self, int varid, int block):             # <<<<<<<<<<<<<<
 *         """ Gets index in variables array of a block for a variable
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_209getVarProbindexForBlock(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_208getVarProbindexForBlock[] = "PartialDecomposition.getVarProbindexForBlock(self, int varid, int block)\n Gets index in variables array of a block for a variable\n\n        :param varid: the id of the variable the index\n        :param block: the corresponding block id\n        :return:  returns index in variables array of a block for a variable.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_209getVarProbindexForBlock(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_varid;
  int __pyx_v_block;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getVarProbindexForBlock (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_varid,&__pyx_n_s_block,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_varid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_block)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getVarProbindexForBlock", 1, 2, 2, 1); __PYX_ERR(2, 1089, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getVarProbindexForBlock") < 0)) __PYX_ERR(2, 1089, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_varid = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_varid == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 1089, __pyx_L3_error)
    __pyx_v_block = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_block == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 1089, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getVarProbindexForBlock", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 1089, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getVarProbindexForBlock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_208getVarProbindexForBlock(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), __pyx_v_varid, __pyx_v_block);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_208getVarProbindexForBlock(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_varid, int __pyx_v_block) {
  int __pyx_v_cpp_varid;
  int __pyx_v_cpp_block;
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getVarProbindexForBlock", 0);

  /* "src/pygcgopt/decomposition.pxi":1096
 *         :return:  returns index in variables array of a block for a variable.
 *         """
 *         cdef int cpp_varid = varid             # <<<<<<<<<<<<<<
 *         cdef int cpp_block = block
 *         cdef int result = self.thisptr.getVarProbindexForBlock(cpp_varid, cpp_block)
 */
  __pyx_v_cpp_varid = __pyx_v_varid;

  /* "src/pygcgopt/decomposition.pxi":1097
 *         """
 *         cdef int cpp_varid = varid
 *         cdef int cpp_block = block             # <<<<<<<<<<<<<<
 *         cdef int result = self.thisptr.getVarProbindexForBlock(cpp_varid, cpp_block)
 *         return result
 */
  __pyx_v_cpp_block = __pyx_v_block;

  /* "src/pygcgopt/decomposition.pxi":1098
 *         cdef int cpp_varid = varid
 *         cdef int cpp_block = block
 *         cdef int result = self.thisptr.getVarProbindexForBlock(cpp_varid, cpp_block)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getVarProbindexForBlock(__pyx_v_cpp_varid, __pyx_v_cpp_block);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1098, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":1099
 *         cdef int cpp_block = block
 *         cdef int result = self.thisptr.getVarProbindexForBlock(cpp_varid, cpp_block)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def isComplete(PartialDecomposition self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1099, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":1089
 *         return result
 * 
 *     def getVarProbindexForBlock(PartialDecomposition self, int varid, int block):             # <<<<<<<<<<<<<<
 *         """ Gets index in variables array of a block for a variable
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getVarProbindexForBlock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1101
 *         return result
 * 
 *     def isComplete(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets whether this partialdec is complete, i.e. it has no more open constraints and variables
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_211isComplete(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_210isComplete[] = "PartialDecomposition.isComplete(self)\nGets whether this partialdec is complete, i.e. it has no more open constraints and variables\n\n        :return: True iff this partialdec is complete\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_211isComplete(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isComplete (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_210isComplete(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_210isComplete(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  bool __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isComplete", 0);

  /* "src/pygcgopt/decomposition.pxi":1106
 *         :return: True iff this partialdec is complete
 *         """
 *         cdef bool result = self.thisptr.isComplete()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->isComplete();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1106, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":1107
 *         """
 *         cdef bool result = self.thisptr.isComplete()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def isConsMastercons(PartialDecomposition self, int cons):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":1101
 *         return result
 * 
 *     def isComplete(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets whether this partialdec is complete, i.e. it has no more open constraints and variables
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.isComplete", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1109
 *         return result
 * 
 *     def isConsMastercons(PartialDecomposition self, int cons):             # <<<<<<<<<<<<<<
 *         """Gets whether the cons is a master cons
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_213isConsMastercons(PyObject *__pyx_v_self, PyObject *__pyx_arg_cons); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_212isConsMastercons[] = "PartialDecomposition.isConsMastercons(self, int cons)\nGets whether the cons is a master cons\n\n        :param cons: id of ccons to check if it is master constraint\n        :return: True iff the cons is a master cons.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_213isConsMastercons(PyObject *__pyx_v_self, PyObject *__pyx_arg_cons) {
  int __pyx_v_cons;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isConsMastercons (wrapper)", 0);
  assert(__pyx_arg_cons); {
    __pyx_v_cons = __Pyx_PyInt_As_int(__pyx_arg_cons); if (unlikely((__pyx_v_cons == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 1109, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.isConsMastercons", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_212isConsMastercons(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((int)__pyx_v_cons));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_212isConsMastercons(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_cons) {
  int __pyx_v_cpp_cons;
  bool __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isConsMastercons", 0);

  /* "src/pygcgopt/decomposition.pxi":1115
 *         :return: True iff the cons is a master cons.
 *         """
 *         cdef int cpp_cons = cons             # <<<<<<<<<<<<<<
 *         cdef bool result = self.thisptr.isConsMastercons(cpp_cons)
 *         return result
 */
  __pyx_v_cpp_cons = __pyx_v_cons;

  /* "src/pygcgopt/decomposition.pxi":1116
 *         """
 *         cdef int cpp_cons = cons
 *         cdef bool result = self.thisptr.isConsMastercons(cpp_cons)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->isConsMastercons(__pyx_v_cpp_cons);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1116, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":1117
 *         cdef int cpp_cons = cons
 *         cdef bool result = self.thisptr.isConsMastercons(cpp_cons)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def isConsOpencons(PartialDecomposition self, int cons):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":1109
 *         return result
 * 
 *     def isConsMastercons(PartialDecomposition self, int cons):             # <<<<<<<<<<<<<<
 *         """Gets whether the cons is a master cons
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.isConsMastercons", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1119
 *         return result
 * 
 *     def isConsOpencons(PartialDecomposition self, int cons):             # <<<<<<<<<<<<<<
 *         """Gets whether the cons is an open cons
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_215isConsOpencons(PyObject *__pyx_v_self, PyObject *__pyx_arg_cons); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_214isConsOpencons[] = "PartialDecomposition.isConsOpencons(self, int cons)\nGets whether the cons is an open cons\n\n        :param cons: id of cons to check\n        :return: True iff the cons is an open cons.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_215isConsOpencons(PyObject *__pyx_v_self, PyObject *__pyx_arg_cons) {
  int __pyx_v_cons;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isConsOpencons (wrapper)", 0);
  assert(__pyx_arg_cons); {
    __pyx_v_cons = __Pyx_PyInt_As_int(__pyx_arg_cons); if (unlikely((__pyx_v_cons == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 1119, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.isConsOpencons", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_214isConsOpencons(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((int)__pyx_v_cons));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_214isConsOpencons(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_cons) {
  int __pyx_v_cpp_cons;
  bool __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isConsOpencons", 0);

  /* "src/pygcgopt/decomposition.pxi":1125
 *         :return: True iff the cons is an open cons.
 *         """
 *         cdef int cpp_cons = cons             # <<<<<<<<<<<<<<
 *         cdef bool result = self.thisptr.isConsOpencons(cpp_cons)
 *         return result
 */
  __pyx_v_cpp_cons = __pyx_v_cons;

  /* "src/pygcgopt/decomposition.pxi":1126
 *         """
 *         cdef int cpp_cons = cons
 *         cdef bool result = self.thisptr.isConsOpencons(cpp_cons)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->isConsOpencons(__pyx_v_cpp_cons);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1126, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":1127
 *         cdef int cpp_cons = cons
 *         cdef bool result = self.thisptr.isConsOpencons(cpp_cons)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def isAssignedToOrigProb(PartialDecomposition self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":1119
 *         return result
 * 
 *     def isConsOpencons(PartialDecomposition self, int cons):             # <<<<<<<<<<<<<<
 *         """Gets whether the cons is an open cons
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.isConsOpencons", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1129
 *         return result
 * 
 *     def isAssignedToOrigProb(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets whether the partialdec is from the presolved problem
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_217isAssignedToOrigProb(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_216isAssignedToOrigProb[] = "PartialDecomposition.isAssignedToOrigProb(self)\nGets whether the partialdec is from the presolved problem\n\n        :return: True iff the partialdec is from the presolved problem.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_217isAssignedToOrigProb(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isAssignedToOrigProb (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_216isAssignedToOrigProb(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_216isAssignedToOrigProb(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  bool __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isAssignedToOrigProb", 0);

  /* "src/pygcgopt/decomposition.pxi":1134
 *         :return: True iff the partialdec is from the presolved problem.
 *         """
 *         cdef bool result = self.thisptr.isAssignedToOrigProb()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->isAssignedToOrigProb();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1134, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":1135
 *         """
 *         cdef bool result = self.thisptr.isAssignedToOrigProb()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":1129
 *         return result
 * 
 *     def isAssignedToOrigProb(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets whether the partialdec is from the presolved problem
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.isAssignedToOrigProb", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1138
 * 
 *     @property
 *     def isSelected(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """!Gets whether the partialdec is currently selected in explore menue
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_10isSelected_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_10isSelected_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_10isSelected___get__(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_10isSelected___get__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  bool __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "src/pygcgopt/decomposition.pxi":1143
 *         :return: True iff the partialdec is currently selected in explore menue.
 *         """
 *         cdef bool result = self.thisptr.isSelected()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->isSelected();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1143, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":1144
 *         """
 *         cdef bool result = self.thisptr.isSelected()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @isSelected.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":1138
 * 
 *     @property
 *     def isSelected(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """!Gets whether the partialdec is currently selected in explore menue
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.isSelected.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1147
 * 
 *     @isSelected.setter
 *     def isSelected(PartialDecomposition self, bool selected):             # <<<<<<<<<<<<<<
 *         """set the selection status of this partialdecs
 * 
 */

/* Python wrapper */
static int __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_10isSelected_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_selected); /*proto*/
static int __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_10isSelected_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_selected) {
  bool __pyx_v_selected;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_selected); {
    __pyx_v_selected = __Pyx_PyObject_IsTrue(__pyx_arg_selected); if (unlikely((__pyx_v_selected == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(2, 1147, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.isSelected.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_10isSelected_2__set__(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((bool)__pyx_v_selected));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_10isSelected_2__set__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, bool __pyx_v_selected) {
  bool __pyx_v_cpp_selected;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "src/pygcgopt/decomposition.pxi":1152
 *         :param selected: whether the partialdec is selected.
 *         """
 *         cdef bool cpp_selected = selected             # <<<<<<<<<<<<<<
 *         self.thisptr.setSelected(cpp_selected)
 * 
 */
  __pyx_v_cpp_selected = __pyx_v_selected;

  /* "src/pygcgopt/decomposition.pxi":1153
 *         """
 *         cdef bool cpp_selected = selected
 *         self.thisptr.setSelected(cpp_selected)             # <<<<<<<<<<<<<<
 * 
 *     # def isEqual(PartialDecomposition self, PartialDecomposition otherpartialdec, unsigned int * isequal, bool sortpartialdecs):
 */
  try {
    __pyx_v_self->thisptr->setSelected(__pyx_v_cpp_selected);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1153, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":1147
 * 
 *     @isSelected.setter
 *     def isSelected(PartialDecomposition self, bool selected):             # <<<<<<<<<<<<<<
 *         """set the selection status of this partialdecs
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.isSelected.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1172
 *     #     raise NotImplementedError()
 * 
 *     def isTrivial(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets whether this partialdec is considered to be trivial
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_219isTrivial(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_218isTrivial[] = "PartialDecomposition.isTrivial(self)\nGets whether this partialdec is considered to be trivial\n\n        PARTIALDECOMP is considered trivial if all conss are in one block, all conss are in border,\n        all variables linking or mastervars, or all constraints and variables are open\n        :return: True iff this partialdec is considered to be trivial.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_219isTrivial(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isTrivial (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_218isTrivial(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_218isTrivial(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  bool __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isTrivial", 0);

  /* "src/pygcgopt/decomposition.pxi":1179
 *         :return: True iff this partialdec is considered to be trivial.
 *         """
 *         cdef bool result = self.thisptr.isTrivial()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->isTrivial();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1179, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":1180
 *         """
 *         cdef bool result = self.thisptr.isTrivial()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def isVarBlockvarOfBlock(PartialDecomposition self, int var, int block):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":1172
 *     #     raise NotImplementedError()
 * 
 *     def isTrivial(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Gets whether this partialdec is considered to be trivial
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.isTrivial", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1182
 *         return result
 * 
 *     def isVarBlockvarOfBlock(PartialDecomposition self, int var, int block):             # <<<<<<<<<<<<<<
 *         """Checks whether the var is assigned to the block
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_221isVarBlockvarOfBlock(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_220isVarBlockvarOfBlock[] = "PartialDecomposition.isVarBlockvarOfBlock(self, int var, int block)\nChecks whether the var is assigned to the block\n\n        :param var: id of var to check\n        :param block: id of block to check\n        :return: True iff the var is assigned to the block.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_221isVarBlockvarOfBlock(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_var;
  int __pyx_v_block;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isVarBlockvarOfBlock (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_var,&__pyx_n_s_block,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_var)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_block)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("isVarBlockvarOfBlock", 1, 2, 2, 1); __PYX_ERR(2, 1182, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "isVarBlockvarOfBlock") < 0)) __PYX_ERR(2, 1182, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_var = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_var == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 1182, __pyx_L3_error)
    __pyx_v_block = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_block == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 1182, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isVarBlockvarOfBlock", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 1182, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.isVarBlockvarOfBlock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_220isVarBlockvarOfBlock(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), __pyx_v_var, __pyx_v_block);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_220isVarBlockvarOfBlock(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_var, int __pyx_v_block) {
  int __pyx_v_cpp_var;
  int __pyx_v_cpp_block;
  bool __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isVarBlockvarOfBlock", 0);

  /* "src/pygcgopt/decomposition.pxi":1189
 *         :return: True iff the var is assigned to the block.
 *         """
 *         cdef int cpp_var = var             # <<<<<<<<<<<<<<
 *         cdef int cpp_block = block
 *         cdef bool result = self.thisptr.isVarBlockvarOfBlock(cpp_var, cpp_block)
 */
  __pyx_v_cpp_var = __pyx_v_var;

  /* "src/pygcgopt/decomposition.pxi":1190
 *         """
 *         cdef int cpp_var = var
 *         cdef int cpp_block = block             # <<<<<<<<<<<<<<
 *         cdef bool result = self.thisptr.isVarBlockvarOfBlock(cpp_var, cpp_block)
 *         return result
 */
  __pyx_v_cpp_block = __pyx_v_block;

  /* "src/pygcgopt/decomposition.pxi":1191
 *         cdef int cpp_var = var
 *         cdef int cpp_block = block
 *         cdef bool result = self.thisptr.isVarBlockvarOfBlock(cpp_var, cpp_block)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->isVarBlockvarOfBlock(__pyx_v_cpp_var, __pyx_v_cpp_block);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1191, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":1192
 *         cdef int cpp_block = block
 *         cdef bool result = self.thisptr.isVarBlockvarOfBlock(cpp_var, cpp_block)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def isVarLinkingvar(PartialDecomposition self, int var):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":1182
 *         return result
 * 
 *     def isVarBlockvarOfBlock(PartialDecomposition self, int var, int block):             # <<<<<<<<<<<<<<
 *         """Checks whether the var is assigned to the block
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.isVarBlockvarOfBlock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1194
 *         return result
 * 
 *     def isVarLinkingvar(PartialDecomposition self, int var):             # <<<<<<<<<<<<<<
 *         """Checks whether the var is a linking var
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_223isVarLinkingvar(PyObject *__pyx_v_self, PyObject *__pyx_arg_var); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_222isVarLinkingvar[] = "PartialDecomposition.isVarLinkingvar(self, int var)\nChecks whether the var is a linking var\n\n        :param var: id of var to check\n        :return: True iff the var is a linking var.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_223isVarLinkingvar(PyObject *__pyx_v_self, PyObject *__pyx_arg_var) {
  int __pyx_v_var;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isVarLinkingvar (wrapper)", 0);
  assert(__pyx_arg_var); {
    __pyx_v_var = __Pyx_PyInt_As_int(__pyx_arg_var); if (unlikely((__pyx_v_var == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 1194, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.isVarLinkingvar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_222isVarLinkingvar(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((int)__pyx_v_var));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_222isVarLinkingvar(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_var) {
  int __pyx_v_cpp_var;
  bool __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isVarLinkingvar", 0);

  /* "src/pygcgopt/decomposition.pxi":1200
 *         :return: True iff the var is a linking var.
 *         """
 *         cdef int cpp_var = var             # <<<<<<<<<<<<<<
 *         cdef bool result = self.thisptr.isVarLinkingvar(cpp_var)
 *         return result
 */
  __pyx_v_cpp_var = __pyx_v_var;

  /* "src/pygcgopt/decomposition.pxi":1201
 *         """
 *         cdef int cpp_var = var
 *         cdef bool result = self.thisptr.isVarLinkingvar(cpp_var)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->isVarLinkingvar(__pyx_v_cpp_var);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1201, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":1202
 *         cdef int cpp_var = var
 *         cdef bool result = self.thisptr.isVarLinkingvar(cpp_var)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def isVarMastervar(PartialDecomposition self, int var):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":1194
 *         return result
 * 
 *     def isVarLinkingvar(PartialDecomposition self, int var):             # <<<<<<<<<<<<<<
 *         """Checks whether the var is a linking var
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.isVarLinkingvar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1204
 *         return result
 * 
 *     def isVarMastervar(PartialDecomposition self, int var):             # <<<<<<<<<<<<<<
 *         """Checks whether the var is a master var
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_225isVarMastervar(PyObject *__pyx_v_self, PyObject *__pyx_arg_var); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_224isVarMastervar[] = "PartialDecomposition.isVarMastervar(self, int var)\nChecks whether the var is a master var\n\n        :param var: id of var to check\n        :return: True iff the var is a master var.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_225isVarMastervar(PyObject *__pyx_v_self, PyObject *__pyx_arg_var) {
  int __pyx_v_var;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isVarMastervar (wrapper)", 0);
  assert(__pyx_arg_var); {
    __pyx_v_var = __Pyx_PyInt_As_int(__pyx_arg_var); if (unlikely((__pyx_v_var == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 1204, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.isVarMastervar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_224isVarMastervar(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((int)__pyx_v_var));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_224isVarMastervar(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_var) {
  int __pyx_v_cpp_var;
  bool __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isVarMastervar", 0);

  /* "src/pygcgopt/decomposition.pxi":1210
 *         :return: True iff the var is a master var.
 *         """
 *         cdef int cpp_var = var             # <<<<<<<<<<<<<<
 *         cdef bool result = self.thisptr.isVarMastervar(cpp_var)
 *         return result
 */
  __pyx_v_cpp_var = __pyx_v_var;

  /* "src/pygcgopt/decomposition.pxi":1211
 *         """
 *         cdef int cpp_var = var
 *         cdef bool result = self.thisptr.isVarMastervar(cpp_var)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->isVarMastervar(__pyx_v_cpp_var);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1211, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":1212
 *         cdef int cpp_var = var
 *         cdef bool result = self.thisptr.isVarMastervar(cpp_var)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def isVarOpenvar(PartialDecomposition self, int var):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":1204
 *         return result
 * 
 *     def isVarMastervar(PartialDecomposition self, int var):             # <<<<<<<<<<<<<<
 *         """Checks whether the var is a master var
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.isVarMastervar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1214
 *         return result
 * 
 *     def isVarOpenvar(PartialDecomposition self, int var):             # <<<<<<<<<<<<<<
 *         """Checks whether the var is an open var
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_227isVarOpenvar(PyObject *__pyx_v_self, PyObject *__pyx_arg_var); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_226isVarOpenvar[] = "PartialDecomposition.isVarOpenvar(self, int var)\nChecks whether the var is an open var\n\n        :param var: id of var to check\n        :return: True iff the var is an open var\n        /\n        /**.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_227isVarOpenvar(PyObject *__pyx_v_self, PyObject *__pyx_arg_var) {
  int __pyx_v_var;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isVarOpenvar (wrapper)", 0);
  assert(__pyx_arg_var); {
    __pyx_v_var = __Pyx_PyInt_As_int(__pyx_arg_var); if (unlikely((__pyx_v_var == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 1214, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.isVarOpenvar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_226isVarOpenvar(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((int)__pyx_v_var));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_226isVarOpenvar(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_var) {
  int __pyx_v_cpp_var;
  bool __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isVarOpenvar", 0);

  /* "src/pygcgopt/decomposition.pxi":1222
 *         /[inserted by cython to avoid comment start]**.
 *         """
 *         cdef int cpp_var = var             # <<<<<<<<<<<<<<
 *         cdef bool result = self.thisptr.isVarOpenvar(cpp_var)
 *         return result
 */
  __pyx_v_cpp_var = __pyx_v_var;

  /* "src/pygcgopt/decomposition.pxi":1223
 *         """
 *         cdef int cpp_var = var
 *         cdef bool result = self.thisptr.isVarOpenvar(cpp_var)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->isVarOpenvar(__pyx_v_cpp_var);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1223, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":1224
 *         cdef int cpp_var = var
 *         cdef bool result = self.thisptr.isVarOpenvar(cpp_var)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def isVarStairlinkingvar(PartialDecomposition self, int var):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":1214
 *         return result
 * 
 *     def isVarOpenvar(PartialDecomposition self, int var):             # <<<<<<<<<<<<<<
 *         """Checks whether the var is an open var
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.isVarOpenvar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1226
 *         return result
 * 
 *     def isVarStairlinkingvar(PartialDecomposition self, int var):             # <<<<<<<<<<<<<<
 *         """Checks whether the var is a stairlinking var
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_229isVarStairlinkingvar(PyObject *__pyx_v_self, PyObject *__pyx_arg_var); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_228isVarStairlinkingvar[] = "PartialDecomposition.isVarStairlinkingvar(self, int var)\nChecks whether the var is a stairlinking var\n\n        :param var: id of var to check\n        :return: True iff the var is a stairlinking var.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_229isVarStairlinkingvar(PyObject *__pyx_v_self, PyObject *__pyx_arg_var) {
  int __pyx_v_var;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isVarStairlinkingvar (wrapper)", 0);
  assert(__pyx_arg_var); {
    __pyx_v_var = __Pyx_PyInt_As_int(__pyx_arg_var); if (unlikely((__pyx_v_var == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 1226, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.isVarStairlinkingvar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_228isVarStairlinkingvar(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((int)__pyx_v_var));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_228isVarStairlinkingvar(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_var) {
  int __pyx_v_cpp_var;
  bool __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isVarStairlinkingvar", 0);

  /* "src/pygcgopt/decomposition.pxi":1232
 *         :return: True iff the var is a stairlinking var.
 *         """
 *         cdef int cpp_var = var             # <<<<<<<<<<<<<<
 *         cdef bool result = self.thisptr.isVarStairlinkingvar(cpp_var)
 *         return result
 */
  __pyx_v_cpp_var = __pyx_v_var;

  /* "src/pygcgopt/decomposition.pxi":1233
 *         """
 *         cdef int cpp_var = var
 *         cdef bool result = self.thisptr.isVarStairlinkingvar(cpp_var)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->isVarStairlinkingvar(__pyx_v_cpp_var);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1233, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":1234
 *         cdef int cpp_var = var
 *         cdef bool result = self.thisptr.isVarStairlinkingvar(cpp_var)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def isVarStairlinkingvarOfBlock(PartialDecomposition self, int var, int block):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":1226
 *         return result
 * 
 *     def isVarStairlinkingvar(PartialDecomposition self, int var):             # <<<<<<<<<<<<<<
 *         """Checks whether the var is a stairlinking var
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.isVarStairlinkingvar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1236
 *         return result
 * 
 *     def isVarStairlinkingvarOfBlock(PartialDecomposition self, int var, int block):             # <<<<<<<<<<<<<<
 *         """Checks whether the var is a stairlinkingvar of a specified block
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_231isVarStairlinkingvarOfBlock(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_230isVarStairlinkingvarOfBlock[] = "PartialDecomposition.isVarStairlinkingvarOfBlock(self, int var, int block)\nChecks whether the var is a stairlinkingvar of a specified block\n\n        :param var: id of var to check if it is a stairlinking variable hitting specified block\n        :param block: id of block to check\n        :return: True iff the var is a stairlinkingvar of a specified block.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_231isVarStairlinkingvarOfBlock(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_var;
  int __pyx_v_block;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isVarStairlinkingvarOfBlock (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_var,&__pyx_n_s_block,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_var)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_block)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("isVarStairlinkingvarOfBlock", 1, 2, 2, 1); __PYX_ERR(2, 1236, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "isVarStairlinkingvarOfBlock") < 0)) __PYX_ERR(2, 1236, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_var = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_var == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 1236, __pyx_L3_error)
    __pyx_v_block = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_block == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 1236, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isVarStairlinkingvarOfBlock", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 1236, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.isVarStairlinkingvarOfBlock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_230isVarStairlinkingvarOfBlock(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), __pyx_v_var, __pyx_v_block);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_230isVarStairlinkingvarOfBlock(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_var, int __pyx_v_block) {
  int __pyx_v_cpp_var;
  int __pyx_v_cpp_block;
  bool __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isVarStairlinkingvarOfBlock", 0);

  /* "src/pygcgopt/decomposition.pxi":1243
 *         :return: True iff the var is a stairlinkingvar of a specified block.
 *         """
 *         cdef int cpp_var = var             # <<<<<<<<<<<<<<
 *         cdef int cpp_block = block
 *         cdef bool result = self.thisptr.isVarStairlinkingvarOfBlock(cpp_var, cpp_block)
 */
  __pyx_v_cpp_var = __pyx_v_var;

  /* "src/pygcgopt/decomposition.pxi":1244
 *         """
 *         cdef int cpp_var = var
 *         cdef int cpp_block = block             # <<<<<<<<<<<<<<
 *         cdef bool result = self.thisptr.isVarStairlinkingvarOfBlock(cpp_var, cpp_block)
 *         return result
 */
  __pyx_v_cpp_block = __pyx_v_block;

  /* "src/pygcgopt/decomposition.pxi":1245
 *         cdef int cpp_var = var
 *         cdef int cpp_block = block
 *         cdef bool result = self.thisptr.isVarStairlinkingvarOfBlock(cpp_var, cpp_block)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->isVarStairlinkingvarOfBlock(__pyx_v_cpp_var, __pyx_v_cpp_block);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1245, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":1246
 *         cdef int cpp_block = block
 *         cdef bool result = self.thisptr.isVarStairlinkingvarOfBlock(cpp_var, cpp_block)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     # def printPartitionInformation(PartialDecomposition self, SCIP * givenscip, FILE * file):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":1236
 *         return result
 * 
 *     def isVarStairlinkingvarOfBlock(PartialDecomposition self, int var, int block):             # <<<<<<<<<<<<<<
 *         """Checks whether the var is a stairlinkingvar of a specified block
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.isVarStairlinkingvarOfBlock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1257
 *     #     raise NotImplementedError()
 * 
 *     def refineToBlocks(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """refine partialdec with focus on blocks
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_233refineToBlocks(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_232refineToBlocks[] = "PartialDecomposition.refineToBlocks(self)\nrefine partialdec with focus on blocks\n\n        strategy: assigns open conss and vars if they can be found in blocks\n        (without respect to open vars and conss  see assignHittingOpenconss(), see assignHittingOpenvars())\n        .. note:: partialdec might be not complete.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_233refineToBlocks(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("refineToBlocks (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_232refineToBlocks(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_232refineToBlocks(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("refineToBlocks", 0);

  /* "src/pygcgopt/decomposition.pxi":1264
 *         .. note:: partialdec might be not complete.
 *         """
 *         self.thisptr.refineToBlocks()             # <<<<<<<<<<<<<<
 * 
 *     def refineToMaster(PartialDecomposition self):
 */
  try {
    __pyx_v_self->thisptr->refineToBlocks();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1264, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":1257
 *     #     raise NotImplementedError()
 * 
 *     def refineToBlocks(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """refine partialdec with focus on blocks
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.refineToBlocks", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1266
 *         self.thisptr.refineToBlocks()
 * 
 *     def refineToMaster(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """refine partialdec with focus on master
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_235refineToMaster(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_234refineToMaster[] = "PartialDecomposition.refineToMaster(self)\nrefine partialdec with focus on master\n\n        strategy: do obvious ( see considerImplicits()) assignments and\n        assign other conss and vars to master if possible (see assignOpenPartialHittingToMaster()).\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_235refineToMaster(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("refineToMaster (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_234refineToMaster(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_234refineToMaster(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("refineToMaster", 0);

  /* "src/pygcgopt/decomposition.pxi":1272
 *         assign other conss and vars to master if possible (see assignOpenPartialHittingToMaster()).
 *         """
 *         self.thisptr.refineToMaster()             # <<<<<<<<<<<<<<
 * 
 *     def setConsPartitionStatistics(PartialDecomposition self, int detectorchainindex, ConsPart partition, object consclassesmaster):
 */
  try {
    __pyx_v_self->thisptr->refineToMaster();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1272, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":1266
 *         self.thisptr.refineToBlocks()
 * 
 *     def refineToMaster(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """refine partialdec with focus on master
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.refineToMaster", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1274
 *         self.thisptr.refineToMaster()
 * 
 *     def setConsPartitionStatistics(PartialDecomposition self, int detectorchainindex, ConsPart partition, object consclassesmaster):             # <<<<<<<<<<<<<<
 *         """registers statistics for a used conspartition.
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_237setConsPartitionStatistics(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_236setConsPartitionStatistics[] = "PartialDecomposition.setConsPartitionStatistics(self, int detectorchainindex, ConsPart partition, consclassesmaster)\nregisters statistics for a used conspartition.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_237setConsPartitionStatistics(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_detectorchainindex;
  struct __pyx_obj_8pygcgopt_3gcg_ConsPart *__pyx_v_partition = 0;
  PyObject *__pyx_v_consclassesmaster = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setConsPartitionStatistics (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_detectorchainindex,&__pyx_n_s_partition,&__pyx_n_s_consclassesmaster,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_detectorchainindex)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_partition)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setConsPartitionStatistics", 1, 3, 3, 1); __PYX_ERR(2, 1274, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_consclassesmaster)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setConsPartitionStatistics", 1, 3, 3, 2); __PYX_ERR(2, 1274, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setConsPartitionStatistics") < 0)) __PYX_ERR(2, 1274, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_detectorchainindex = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_detectorchainindex == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 1274, __pyx_L3_error)
    __pyx_v_partition = ((struct __pyx_obj_8pygcgopt_3gcg_ConsPart *)values[1]);
    __pyx_v_consclassesmaster = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setConsPartitionStatistics", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 1274, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.setConsPartitionStatistics", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_partition), __pyx_ptype_8pygcgopt_3gcg_ConsPart, 1, "partition", 0))) __PYX_ERR(2, 1274, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_236setConsPartitionStatistics(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), __pyx_v_detectorchainindex, __pyx_v_partition, __pyx_v_consclassesmaster);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_236setConsPartitionStatistics(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_detectorchainindex, struct __pyx_obj_8pygcgopt_3gcg_ConsPart *__pyx_v_partition, PyObject *__pyx_v_consclassesmaster) {
  int __pyx_v_cpp_detectorchainindex;
  gcg::ConsPartition *__pyx_v_cpp_partition;
  std::vector<int>  __pyx_v_cpp_consclassesmaster;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  gcg::ConsPartition *__pyx_t_1;
  std::vector<int>  __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setConsPartitionStatistics", 0);

  /* "src/pygcgopt/decomposition.pxi":1277
 *         """registers statistics for a used conspartition.
 *         """
 *         cdef int cpp_detectorchainindex = detectorchainindex             # <<<<<<<<<<<<<<
 *         cdef ConsPartition * cpp_partition = partition.thisptr
 *         cdef vector[int] cpp_consclassesmaster = consclassesmaster
 */
  __pyx_v_cpp_detectorchainindex = __pyx_v_detectorchainindex;

  /* "src/pygcgopt/decomposition.pxi":1278
 *         """
 *         cdef int cpp_detectorchainindex = detectorchainindex
 *         cdef ConsPartition * cpp_partition = partition.thisptr             # <<<<<<<<<<<<<<
 *         cdef vector[int] cpp_consclassesmaster = consclassesmaster
 *         self.thisptr.setConsPartitionStatistics(cpp_detectorchainindex, cpp_partition, cpp_consclassesmaster)
 */
  __pyx_t_1 = __pyx_v_partition->thisptr;
  __pyx_v_cpp_partition = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":1279
 *         cdef int cpp_detectorchainindex = detectorchainindex
 *         cdef ConsPartition * cpp_partition = partition.thisptr
 *         cdef vector[int] cpp_consclassesmaster = consclassesmaster             # <<<<<<<<<<<<<<
 *         self.thisptr.setConsPartitionStatistics(cpp_detectorchainindex, cpp_partition, cpp_consclassesmaster)
 * 
 */
  __pyx_t_2 = __pyx_convert_vector_from_py_int(__pyx_v_consclassesmaster); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 1279, __pyx_L1_error)
  __pyx_v_cpp_consclassesmaster = __pyx_t_2;

  /* "src/pygcgopt/decomposition.pxi":1280
 *         cdef ConsPartition * cpp_partition = partition.thisptr
 *         cdef vector[int] cpp_consclassesmaster = consclassesmaster
 *         self.thisptr.setConsPartitionStatistics(cpp_detectorchainindex, cpp_partition, cpp_consclassesmaster)             # <<<<<<<<<<<<<<
 * 
 *     def setConsToBlock(PartialDecomposition self, int consToBlock, int block):
 */
  try {
    __pyx_v_self->thisptr->setConsPartitionStatistics(__pyx_v_cpp_detectorchainindex, __pyx_v_cpp_partition, __pyx_v_cpp_consclassesmaster);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1280, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":1274
 *         self.thisptr.refineToMaster()
 * 
 *     def setConsPartitionStatistics(PartialDecomposition self, int detectorchainindex, ConsPart partition, object consclassesmaster):             # <<<<<<<<<<<<<<
 *         """registers statistics for a used conspartition.
 *         """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.setConsPartitionStatistics", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1282
 *         self.thisptr.setConsPartitionStatistics(cpp_detectorchainindex, cpp_partition, cpp_consclassesmaster)
 * 
 *     def setConsToBlock(PartialDecomposition self, int consToBlock, int block):             # <<<<<<<<<<<<<<
 *         """adds a constraint to a block, does not delete this cons from list of open conss
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_239setConsToBlock(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_238setConsToBlock[] = "PartialDecomposition.setConsToBlock(self, int consToBlock, int block)\nadds a constraint to a block, does not delete this cons from list of open conss\n\n        :param consToBlock: id of cons to add\n        :param block: id of block to add.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_239setConsToBlock(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_consToBlock;
  int __pyx_v_block;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setConsToBlock (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_consToBlock,&__pyx_n_s_block,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_consToBlock)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_block)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setConsToBlock", 1, 2, 2, 1); __PYX_ERR(2, 1282, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setConsToBlock") < 0)) __PYX_ERR(2, 1282, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_consToBlock = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_consToBlock == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 1282, __pyx_L3_error)
    __pyx_v_block = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_block == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 1282, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setConsToBlock", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 1282, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.setConsToBlock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_238setConsToBlock(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), __pyx_v_consToBlock, __pyx_v_block);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_238setConsToBlock(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_consToBlock, int __pyx_v_block) {
  int __pyx_v_cpp_consToBlock;
  int __pyx_v_cpp_block;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setConsToBlock", 0);

  /* "src/pygcgopt/decomposition.pxi":1288
 *         :param block: id of block to add.
 *         """
 *         cdef int cpp_consToBlock = consToBlock             # <<<<<<<<<<<<<<
 *         cdef int cpp_block = block
 *         self.thisptr.setConsToBlock(cpp_consToBlock, cpp_block)
 */
  __pyx_v_cpp_consToBlock = __pyx_v_consToBlock;

  /* "src/pygcgopt/decomposition.pxi":1289
 *         """
 *         cdef int cpp_consToBlock = consToBlock
 *         cdef int cpp_block = block             # <<<<<<<<<<<<<<
 *         self.thisptr.setConsToBlock(cpp_consToBlock, cpp_block)
 * 
 */
  __pyx_v_cpp_block = __pyx_v_block;

  /* "src/pygcgopt/decomposition.pxi":1290
 *         cdef int cpp_consToBlock = consToBlock
 *         cdef int cpp_block = block
 *         self.thisptr.setConsToBlock(cpp_consToBlock, cpp_block)             # <<<<<<<<<<<<<<
 * 
 *     # def fixConsToBlock(PartialDecomposition self, int cons, int block):
 */
  try {
    __pyx_v_self->thisptr->setConsToBlock(__pyx_v_cpp_consToBlock, __pyx_v_cpp_block);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1290, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":1282
 *         self.thisptr.setConsPartitionStatistics(cpp_detectorchainindex, cpp_partition, cpp_consclassesmaster)
 * 
 *     def setConsToBlock(PartialDecomposition self, int consToBlock, int block):             # <<<<<<<<<<<<<<
 *         """adds a constraint to a block, does not delete this cons from list of open conss
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.setConsToBlock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1302
 *     #     self.thisptr.fixConsToBlock(cpp_cons, cpp_block)
 * 
 *     def setConsToMaster(PartialDecomposition self, int consToMaster):             # <<<<<<<<<<<<<<
 *         """adds a constraint to the master constraints, does not delete this cons from list of open conss
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_241setConsToMaster(PyObject *__pyx_v_self, PyObject *__pyx_arg_consToMaster); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_240setConsToMaster[] = "PartialDecomposition.setConsToMaster(self, int consToMaster)\nadds a constraint to the master constraints, does not delete this cons from list of open conss\n\n        :param consToMaster: id of cons to add.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_241setConsToMaster(PyObject *__pyx_v_self, PyObject *__pyx_arg_consToMaster) {
  int __pyx_v_consToMaster;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setConsToMaster (wrapper)", 0);
  assert(__pyx_arg_consToMaster); {
    __pyx_v_consToMaster = __Pyx_PyInt_As_int(__pyx_arg_consToMaster); if (unlikely((__pyx_v_consToMaster == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 1302, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.setConsToMaster", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_240setConsToMaster(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((int)__pyx_v_consToMaster));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_240setConsToMaster(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_consToMaster) {
  int __pyx_v_cpp_consToMaster;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setConsToMaster", 0);

  /* "src/pygcgopt/decomposition.pxi":1307
 *         :param consToMaster: id of cons to add.
 *         """
 *         cdef int cpp_consToMaster = consToMaster             # <<<<<<<<<<<<<<
 *         self.thisptr.setConsToMaster(cpp_consToMaster)
 * 
 */
  __pyx_v_cpp_consToMaster = __pyx_v_consToMaster;

  /* "src/pygcgopt/decomposition.pxi":1308
 *         """
 *         cdef int cpp_consToMaster = consToMaster
 *         self.thisptr.setConsToMaster(cpp_consToMaster)             # <<<<<<<<<<<<<<
 * 
 *     # def fixConsToMaster(PartialDecomposition self, int cons):
 */
  try {
    __pyx_v_self->thisptr->setConsToMaster(__pyx_v_cpp_consToMaster);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1308, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":1302
 *     #     self.thisptr.fixConsToBlock(cpp_cons, cpp_block)
 * 
 *     def setConsToMaster(PartialDecomposition self, int consToMaster):             # <<<<<<<<<<<<<<
 *         """adds a constraint to the master constraints, does not delete this cons from list of open conss
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.setConsToMaster", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1352
 *     #     raise NotImplementedError()
 * 
 *     def setFinishedByFinisher(PartialDecomposition self, bool finished):             # <<<<<<<<<<<<<<
 *         """sets whether this partialdec was finished by a finishing detector
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_243setFinishedByFinisher(PyObject *__pyx_v_self, PyObject *__pyx_arg_finished); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_242setFinishedByFinisher[] = "PartialDecomposition.setFinishedByFinisher(self, bool finished)\nsets whether this partialdec was finished by a finishing detector\n\n        :param finished: is this partialdecs finished by a finishing detector.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_243setFinishedByFinisher(PyObject *__pyx_v_self, PyObject *__pyx_arg_finished) {
  bool __pyx_v_finished;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setFinishedByFinisher (wrapper)", 0);
  assert(__pyx_arg_finished); {
    __pyx_v_finished = __Pyx_PyObject_IsTrue(__pyx_arg_finished); if (unlikely((__pyx_v_finished == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(2, 1352, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.setFinishedByFinisher", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_242setFinishedByFinisher(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((bool)__pyx_v_finished));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_242setFinishedByFinisher(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, bool __pyx_v_finished) {
  bool __pyx_v_cpp_finished;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setFinishedByFinisher", 0);

  /* "src/pygcgopt/decomposition.pxi":1357
 *         :param finished: is this partialdecs finished by a finishing detector.
 *         """
 *         cdef bool cpp_finished = finished             # <<<<<<<<<<<<<<
 *         self.thisptr.setFinishedByFinisher(cpp_finished)
 * 
 */
  __pyx_v_cpp_finished = __pyx_v_finished;

  /* "src/pygcgopt/decomposition.pxi":1358
 *         """
 *         cdef bool cpp_finished = finished
 *         self.thisptr.setFinishedByFinisher(cpp_finished)             # <<<<<<<<<<<<<<
 * 
 *     def setFinishedByFinisherOrig(PartialDecomposition self, bool finished):
 */
  try {
    __pyx_v_self->thisptr->setFinishedByFinisher(__pyx_v_cpp_finished);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1358, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":1352
 *     #     raise NotImplementedError()
 * 
 *     def setFinishedByFinisher(PartialDecomposition self, bool finished):             # <<<<<<<<<<<<<<
 *         """sets whether this partialdec was finished by a finishing detector
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.setFinishedByFinisher", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1360
 *         self.thisptr.setFinishedByFinisher(cpp_finished)
 * 
 *     def setFinishedByFinisherOrig(PartialDecomposition self, bool finished):             # <<<<<<<<<<<<<<
 *         """sets whether this partialdec was finished by a finishing detector in the original problem (in case this partialdec was translated)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_245setFinishedByFinisherOrig(PyObject *__pyx_v_self, PyObject *__pyx_arg_finished); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_244setFinishedByFinisherOrig[] = "PartialDecomposition.setFinishedByFinisherOrig(self, bool finished)\nsets whether this partialdec was finished by a finishing detector in the original problem (in case this partialdec was translated)\n\n        :param finished: was this partialdecs finished by a finishing detector in orig.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_245setFinishedByFinisherOrig(PyObject *__pyx_v_self, PyObject *__pyx_arg_finished) {
  bool __pyx_v_finished;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setFinishedByFinisherOrig (wrapper)", 0);
  assert(__pyx_arg_finished); {
    __pyx_v_finished = __Pyx_PyObject_IsTrue(__pyx_arg_finished); if (unlikely((__pyx_v_finished == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(2, 1360, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.setFinishedByFinisherOrig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_244setFinishedByFinisherOrig(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((bool)__pyx_v_finished));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_244setFinishedByFinisherOrig(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, bool __pyx_v_finished) {
  bool __pyx_v_cpp_finished;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setFinishedByFinisherOrig", 0);

  /* "src/pygcgopt/decomposition.pxi":1365
 *         :param finished: was this partialdecs finished by a finishing detector in orig.
 *         """
 *         cdef bool cpp_finished = finished             # <<<<<<<<<<<<<<
 *         self.thisptr.setFinishedByFinisherOrig(cpp_finished)
 * 
 */
  __pyx_v_cpp_finished = __pyx_v_finished;

  /* "src/pygcgopt/decomposition.pxi":1366
 *         """
 *         cdef bool cpp_finished = finished
 *         self.thisptr.setFinishedByFinisherOrig(cpp_finished)             # <<<<<<<<<<<<<<
 * 
 *     def setNBlocks(PartialDecomposition self, int nblocks):
 */
  try {
    __pyx_v_self->thisptr->setFinishedByFinisherOrig(__pyx_v_cpp_finished);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1366, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":1360
 *         self.thisptr.setFinishedByFinisher(cpp_finished)
 * 
 *     def setFinishedByFinisherOrig(PartialDecomposition self, bool finished):             # <<<<<<<<<<<<<<
 *         """sets whether this partialdec was finished by a finishing detector in the original problem (in case this partialdec was translated)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.setFinishedByFinisherOrig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1368
 *         self.thisptr.setFinishedByFinisherOrig(cpp_finished)
 * 
 *     def setNBlocks(PartialDecomposition self, int nblocks):             # <<<<<<<<<<<<<<
 *         """sets number of blocks, only increasing number allowed
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_247setNBlocks(PyObject *__pyx_v_self, PyObject *__pyx_arg_nblocks); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_246setNBlocks[] = "PartialDecomposition.setNBlocks(self, int nblocks)\nsets number of blocks, only increasing number allowed\n\n        :param nblocks: new number of blocks.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_247setNBlocks(PyObject *__pyx_v_self, PyObject *__pyx_arg_nblocks) {
  int __pyx_v_nblocks;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setNBlocks (wrapper)", 0);
  assert(__pyx_arg_nblocks); {
    __pyx_v_nblocks = __Pyx_PyInt_As_int(__pyx_arg_nblocks); if (unlikely((__pyx_v_nblocks == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 1368, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.setNBlocks", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_246setNBlocks(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((int)__pyx_v_nblocks));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_246setNBlocks(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_nblocks) {
  int __pyx_v_cpp_nblocks;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setNBlocks", 0);

  /* "src/pygcgopt/decomposition.pxi":1373
 *         :param nblocks: new number of blocks.
 *         """
 *         cdef int cpp_nblocks = nblocks             # <<<<<<<<<<<<<<
 *         self.thisptr.setNBlocks(cpp_nblocks)
 * 
 */
  __pyx_v_cpp_nblocks = __pyx_v_nblocks;

  /* "src/pygcgopt/decomposition.pxi":1374
 *         """
 *         cdef int cpp_nblocks = nblocks
 *         self.thisptr.setNBlocks(cpp_nblocks)             # <<<<<<<<<<<<<<
 * 
 *     def setStemsFromOrig(PartialDecomposition self, bool fromorig):
 */
  try {
    __pyx_v_self->thisptr->setNBlocks(__pyx_v_cpp_nblocks);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1374, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":1368
 *         self.thisptr.setFinishedByFinisherOrig(cpp_finished)
 * 
 *     def setNBlocks(PartialDecomposition self, int nblocks):             # <<<<<<<<<<<<<<
 *         """sets number of blocks, only increasing number allowed
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.setNBlocks", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1376
 *         self.thisptr.setNBlocks(cpp_nblocks)
 * 
 *     def setStemsFromOrig(PartialDecomposition self, bool fromorig):             # <<<<<<<<<<<<<<
 *         """sets whether this partialdec stems from an orig problem partialdec
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_249setStemsFromOrig(PyObject *__pyx_v_self, PyObject *__pyx_arg_fromorig); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_248setStemsFromOrig[] = "PartialDecomposition.setStemsFromOrig(self, bool fromorig)\nsets whether this partialdec stems from an orig problem partialdec\n\n        :param fromorig: has this partialdec ancestors from the orig problem.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_249setStemsFromOrig(PyObject *__pyx_v_self, PyObject *__pyx_arg_fromorig) {
  bool __pyx_v_fromorig;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setStemsFromOrig (wrapper)", 0);
  assert(__pyx_arg_fromorig); {
    __pyx_v_fromorig = __Pyx_PyObject_IsTrue(__pyx_arg_fromorig); if (unlikely((__pyx_v_fromorig == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(2, 1376, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.setStemsFromOrig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_248setStemsFromOrig(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((bool)__pyx_v_fromorig));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_248setStemsFromOrig(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, bool __pyx_v_fromorig) {
  bool __pyx_v_cpp_fromorig;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setStemsFromOrig", 0);

  /* "src/pygcgopt/decomposition.pxi":1381
 *         :param fromorig: has this partialdec ancestors from the orig problem.
 *         """
 *         cdef bool cpp_fromorig = fromorig             # <<<<<<<<<<<<<<
 *         self.thisptr.setStemsFromOrig(cpp_fromorig)
 * 
 */
  __pyx_v_cpp_fromorig = __pyx_v_fromorig;

  /* "src/pygcgopt/decomposition.pxi":1382
 *         """
 *         cdef bool cpp_fromorig = fromorig
 *         self.thisptr.setStemsFromOrig(cpp_fromorig)             # <<<<<<<<<<<<<<
 * 
 *     # def setUsergiven(PartialDecomposition self, cpp.USERGIVEN usergiven):
 */
  try {
    __pyx_v_self->thisptr->setStemsFromOrig(__pyx_v_cpp_fromorig);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1382, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":1376
 *         self.thisptr.setNBlocks(cpp_nblocks)
 * 
 *     def setStemsFromOrig(PartialDecomposition self, bool fromorig):             # <<<<<<<<<<<<<<
 *         """sets whether this partialdec stems from an orig problem partialdec
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.setStemsFromOrig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1391
 *     #     self.thisptr.setUsergiven(usergiven)
 * 
 *     def setVarPartitionStatistics(PartialDecomposition self, int detectorchainindex, VarPart partition, object varclasseslinking, object varclassesmaster):             # <<<<<<<<<<<<<<
 *         """registers statistics for a used varpartition.
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_251setVarPartitionStatistics(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_250setVarPartitionStatistics[] = "PartialDecomposition.setVarPartitionStatistics(self, int detectorchainindex, VarPart partition, varclasseslinking, varclassesmaster)\nregisters statistics for a used varpartition.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_251setVarPartitionStatistics(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_detectorchainindex;
  struct __pyx_obj_8pygcgopt_3gcg_VarPart *__pyx_v_partition = 0;
  PyObject *__pyx_v_varclasseslinking = 0;
  PyObject *__pyx_v_varclassesmaster = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setVarPartitionStatistics (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_detectorchainindex,&__pyx_n_s_partition,&__pyx_n_s_varclasseslinking,&__pyx_n_s_varclassesmaster,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_detectorchainindex)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_partition)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setVarPartitionStatistics", 1, 4, 4, 1); __PYX_ERR(2, 1391, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_varclasseslinking)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setVarPartitionStatistics", 1, 4, 4, 2); __PYX_ERR(2, 1391, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_varclassesmaster)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setVarPartitionStatistics", 1, 4, 4, 3); __PYX_ERR(2, 1391, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setVarPartitionStatistics") < 0)) __PYX_ERR(2, 1391, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_detectorchainindex = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_detectorchainindex == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 1391, __pyx_L3_error)
    __pyx_v_partition = ((struct __pyx_obj_8pygcgopt_3gcg_VarPart *)values[1]);
    __pyx_v_varclasseslinking = values[2];
    __pyx_v_varclassesmaster = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setVarPartitionStatistics", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 1391, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.setVarPartitionStatistics", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_partition), __pyx_ptype_8pygcgopt_3gcg_VarPart, 1, "partition", 0))) __PYX_ERR(2, 1391, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_250setVarPartitionStatistics(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), __pyx_v_detectorchainindex, __pyx_v_partition, __pyx_v_varclasseslinking, __pyx_v_varclassesmaster);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_250setVarPartitionStatistics(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_detectorchainindex, struct __pyx_obj_8pygcgopt_3gcg_VarPart *__pyx_v_partition, PyObject *__pyx_v_varclasseslinking, PyObject *__pyx_v_varclassesmaster) {
  int __pyx_v_cpp_detectorchainindex;
  gcg::VarPartition *__pyx_v_cpp_partition;
  std::vector<int>  __pyx_v_cpp_varclasseslinking;
  std::vector<int>  __pyx_v_cpp_varclassesmaster;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  gcg::VarPartition *__pyx_t_1;
  std::vector<int>  __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setVarPartitionStatistics", 0);

  /* "src/pygcgopt/decomposition.pxi":1394
 *         """registers statistics for a used varpartition.
 *         """
 *         cdef int cpp_detectorchainindex = detectorchainindex             # <<<<<<<<<<<<<<
 *         cdef VarPartition * cpp_partition = partition.thisptr
 *         cdef vector[int] cpp_varclasseslinking = varclasseslinking
 */
  __pyx_v_cpp_detectorchainindex = __pyx_v_detectorchainindex;

  /* "src/pygcgopt/decomposition.pxi":1395
 *         """
 *         cdef int cpp_detectorchainindex = detectorchainindex
 *         cdef VarPartition * cpp_partition = partition.thisptr             # <<<<<<<<<<<<<<
 *         cdef vector[int] cpp_varclasseslinking = varclasseslinking
 *         cdef vector[int] cpp_varclassesmaster = varclassesmaster
 */
  __pyx_t_1 = __pyx_v_partition->thisptr;
  __pyx_v_cpp_partition = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":1396
 *         cdef int cpp_detectorchainindex = detectorchainindex
 *         cdef VarPartition * cpp_partition = partition.thisptr
 *         cdef vector[int] cpp_varclasseslinking = varclasseslinking             # <<<<<<<<<<<<<<
 *         cdef vector[int] cpp_varclassesmaster = varclassesmaster
 *         self.thisptr.setVarPartitionStatistics(cpp_detectorchainindex, cpp_partition, cpp_varclasseslinking, cpp_varclassesmaster)
 */
  __pyx_t_2 = __pyx_convert_vector_from_py_int(__pyx_v_varclasseslinking); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 1396, __pyx_L1_error)
  __pyx_v_cpp_varclasseslinking = __pyx_t_2;

  /* "src/pygcgopt/decomposition.pxi":1397
 *         cdef VarPartition * cpp_partition = partition.thisptr
 *         cdef vector[int] cpp_varclasseslinking = varclasseslinking
 *         cdef vector[int] cpp_varclassesmaster = varclassesmaster             # <<<<<<<<<<<<<<
 *         self.thisptr.setVarPartitionStatistics(cpp_detectorchainindex, cpp_partition, cpp_varclasseslinking, cpp_varclassesmaster)
 * 
 */
  __pyx_t_2 = __pyx_convert_vector_from_py_int(__pyx_v_varclassesmaster); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 1397, __pyx_L1_error)
  __pyx_v_cpp_varclassesmaster = __pyx_t_2;

  /* "src/pygcgopt/decomposition.pxi":1398
 *         cdef vector[int] cpp_varclasseslinking = varclasseslinking
 *         cdef vector[int] cpp_varclassesmaster = varclassesmaster
 *         self.thisptr.setVarPartitionStatistics(cpp_detectorchainindex, cpp_partition, cpp_varclasseslinking, cpp_varclassesmaster)             # <<<<<<<<<<<<<<
 * 
 *     def setVarToBlock(PartialDecomposition self, int varToBlock, int block):
 */
  try {
    __pyx_v_self->thisptr->setVarPartitionStatistics(__pyx_v_cpp_detectorchainindex, __pyx_v_cpp_partition, __pyx_v_cpp_varclasseslinking, __pyx_v_cpp_varclassesmaster);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1398, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":1391
 *     #     self.thisptr.setUsergiven(usergiven)
 * 
 *     def setVarPartitionStatistics(PartialDecomposition self, int detectorchainindex, VarPart partition, object varclasseslinking, object varclassesmaster):             # <<<<<<<<<<<<<<
 *         """registers statistics for a used varpartition.
 *         """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.setVarPartitionStatistics", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1400
 *         self.thisptr.setVarPartitionStatistics(cpp_detectorchainindex, cpp_partition, cpp_varclasseslinking, cpp_varclassesmaster)
 * 
 *     def setVarToBlock(PartialDecomposition self, int varToBlock, int block):             # <<<<<<<<<<<<<<
 *         """adds a variable to the linking variables, does not delete this var from list of open vars
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_253setVarToBlock(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_252setVarToBlock[] = "PartialDecomposition.setVarToBlock(self, int varToBlock, int block)\nadds a variable to the linking variables, does not delete this var from list of open vars\n\n        :param varToBlock: id of var to be added\n        :param block: id of block to be added.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_253setVarToBlock(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_varToBlock;
  int __pyx_v_block;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setVarToBlock (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_varToBlock,&__pyx_n_s_block,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_varToBlock)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_block)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setVarToBlock", 1, 2, 2, 1); __PYX_ERR(2, 1400, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setVarToBlock") < 0)) __PYX_ERR(2, 1400, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_varToBlock = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_varToBlock == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 1400, __pyx_L3_error)
    __pyx_v_block = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_block == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 1400, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setVarToBlock", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 1400, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.setVarToBlock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_252setVarToBlock(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), __pyx_v_varToBlock, __pyx_v_block);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_252setVarToBlock(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_varToBlock, int __pyx_v_block) {
  int __pyx_v_cpp_varToBlock;
  int __pyx_v_cpp_block;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setVarToBlock", 0);

  /* "src/pygcgopt/decomposition.pxi":1406
 *         :param block: id of block to be added.
 *         """
 *         cdef int cpp_varToBlock = varToBlock             # <<<<<<<<<<<<<<
 *         cdef int cpp_block = block
 *         self.thisptr.setVarToBlock(cpp_varToBlock, cpp_block)
 */
  __pyx_v_cpp_varToBlock = __pyx_v_varToBlock;

  /* "src/pygcgopt/decomposition.pxi":1407
 *         """
 *         cdef int cpp_varToBlock = varToBlock
 *         cdef int cpp_block = block             # <<<<<<<<<<<<<<
 *         self.thisptr.setVarToBlock(cpp_varToBlock, cpp_block)
 * 
 */
  __pyx_v_cpp_block = __pyx_v_block;

  /* "src/pygcgopt/decomposition.pxi":1408
 *         cdef int cpp_varToBlock = varToBlock
 *         cdef int cpp_block = block
 *         self.thisptr.setVarToBlock(cpp_varToBlock, cpp_block)             # <<<<<<<<<<<<<<
 * 
 *     def fixVarToBlock(PartialDecomposition self, int var, int block):
 */
  try {
    __pyx_v_self->thisptr->setVarToBlock(__pyx_v_cpp_varToBlock, __pyx_v_cpp_block);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1408, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":1400
 *         self.thisptr.setVarPartitionStatistics(cpp_detectorchainindex, cpp_partition, cpp_varclasseslinking, cpp_varclassesmaster)
 * 
 *     def setVarToBlock(PartialDecomposition self, int varToBlock, int block):             # <<<<<<<<<<<<<<
 *         """adds a variable to the linking variables, does not delete this var from list of open vars
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.setVarToBlock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1410
 *         self.thisptr.setVarToBlock(cpp_varToBlock, cpp_block)
 * 
 *     def fixVarToBlock(PartialDecomposition self, int var, int block):             # <<<<<<<<<<<<<<
 *         """adds a variable to the linking variables
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_255fixVarToBlock(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_254fixVarToBlock[] = "PartialDecomposition.fixVarToBlock(self, int var, int block)\nadds a variable to the linking variables\n\n        :param var: id of var to be added\n        :param block: id of block to be added.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_255fixVarToBlock(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_var;
  int __pyx_v_block;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fixVarToBlock (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_var,&__pyx_n_s_block,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_var)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_block)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fixVarToBlock", 1, 2, 2, 1); __PYX_ERR(2, 1410, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "fixVarToBlock") < 0)) __PYX_ERR(2, 1410, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_var = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_var == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 1410, __pyx_L3_error)
    __pyx_v_block = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_block == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 1410, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fixVarToBlock", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 1410, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.fixVarToBlock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_254fixVarToBlock(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), __pyx_v_var, __pyx_v_block);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_254fixVarToBlock(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_var, int __pyx_v_block) {
  int __pyx_v_cpp_var;
  int __pyx_v_cpp_block;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("fixVarToBlock", 0);

  /* "src/pygcgopt/decomposition.pxi":1416
 *         :param block: id of block to be added.
 *         """
 *         cdef int cpp_var = var             # <<<<<<<<<<<<<<
 *         cdef int cpp_block = block
 *         self.thisptr.fixVarToBlock(cpp_var, cpp_block)
 */
  __pyx_v_cpp_var = __pyx_v_var;

  /* "src/pygcgopt/decomposition.pxi":1417
 *         """
 *         cdef int cpp_var = var
 *         cdef int cpp_block = block             # <<<<<<<<<<<<<<
 *         self.thisptr.fixVarToBlock(cpp_var, cpp_block)
 * 
 */
  __pyx_v_cpp_block = __pyx_v_block;

  /* "src/pygcgopt/decomposition.pxi":1418
 *         cdef int cpp_var = var
 *         cdef int cpp_block = block
 *         self.thisptr.fixVarToBlock(cpp_var, cpp_block)             # <<<<<<<<<<<<<<
 * 
 *     def setVarToLinking(PartialDecomposition self, int varToLinking):
 */
  try {
    __pyx_v_self->thisptr->fixVarToBlock(__pyx_v_cpp_var, __pyx_v_cpp_block);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1418, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":1410
 *         self.thisptr.setVarToBlock(cpp_varToBlock, cpp_block)
 * 
 *     def fixVarToBlock(PartialDecomposition self, int var, int block):             # <<<<<<<<<<<<<<
 *         """adds a variable to the linking variables
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.fixVarToBlock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1420
 *         self.thisptr.fixVarToBlock(cpp_var, cpp_block)
 * 
 *     def setVarToLinking(PartialDecomposition self, int varToLinking):             # <<<<<<<<<<<<<<
 *         """adds a variable to the linking variables, does not delete this var from list of open vars
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_257setVarToLinking(PyObject *__pyx_v_self, PyObject *__pyx_arg_varToLinking); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_256setVarToLinking[] = "PartialDecomposition.setVarToLinking(self, int varToLinking)\nadds a variable to the linking variables, does not delete this var from list of open vars\n\n        :param varToLinking: var to be set to linking.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_257setVarToLinking(PyObject *__pyx_v_self, PyObject *__pyx_arg_varToLinking) {
  int __pyx_v_varToLinking;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setVarToLinking (wrapper)", 0);
  assert(__pyx_arg_varToLinking); {
    __pyx_v_varToLinking = __Pyx_PyInt_As_int(__pyx_arg_varToLinking); if (unlikely((__pyx_v_varToLinking == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 1420, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.setVarToLinking", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_256setVarToLinking(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((int)__pyx_v_varToLinking));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_256setVarToLinking(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_varToLinking) {
  int __pyx_v_cpp_varToLinking;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setVarToLinking", 0);

  /* "src/pygcgopt/decomposition.pxi":1425
 *         :param varToLinking: var to be set to linking.
 *         """
 *         cdef int cpp_varToLinking = varToLinking             # <<<<<<<<<<<<<<
 *         self.thisptr.setVarToLinking(cpp_varToLinking)
 * 
 */
  __pyx_v_cpp_varToLinking = __pyx_v_varToLinking;

  /* "src/pygcgopt/decomposition.pxi":1426
 *         """
 *         cdef int cpp_varToLinking = varToLinking
 *         self.thisptr.setVarToLinking(cpp_varToLinking)             # <<<<<<<<<<<<<<
 * 
 *     def fixVarToLinking(PartialDecomposition self, int var):
 */
  try {
    __pyx_v_self->thisptr->setVarToLinking(__pyx_v_cpp_varToLinking);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1426, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":1420
 *         self.thisptr.fixVarToBlock(cpp_var, cpp_block)
 * 
 *     def setVarToLinking(PartialDecomposition self, int varToLinking):             # <<<<<<<<<<<<<<
 *         """adds a variable to the linking variables, does not delete this var from list of open vars
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.setVarToLinking", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1428
 *         self.thisptr.setVarToLinking(cpp_varToLinking)
 * 
 *     def fixVarToLinking(PartialDecomposition self, int var):             # <<<<<<<<<<<<<<
 *         """adds a variable to the linking variables
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_259fixVarToLinking(PyObject *__pyx_v_self, PyObject *__pyx_arg_var); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_258fixVarToLinking[] = "PartialDecomposition.fixVarToLinking(self, int var)\nadds a variable to the linking variables\n\n        :param var: var to be set to linking.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_259fixVarToLinking(PyObject *__pyx_v_self, PyObject *__pyx_arg_var) {
  int __pyx_v_var;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fixVarToLinking (wrapper)", 0);
  assert(__pyx_arg_var); {
    __pyx_v_var = __Pyx_PyInt_As_int(__pyx_arg_var); if (unlikely((__pyx_v_var == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 1428, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.fixVarToLinking", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_258fixVarToLinking(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((int)__pyx_v_var));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_258fixVarToLinking(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_var) {
  int __pyx_v_cpp_var;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("fixVarToLinking", 0);

  /* "src/pygcgopt/decomposition.pxi":1433
 *         :param var: var to be set to linking.
 *         """
 *         cdef int cpp_var = var             # <<<<<<<<<<<<<<
 *         self.thisptr.fixVarToLinking(cpp_var)
 * 
 */
  __pyx_v_cpp_var = __pyx_v_var;

  /* "src/pygcgopt/decomposition.pxi":1434
 *         """
 *         cdef int cpp_var = var
 *         self.thisptr.fixVarToLinking(cpp_var)             # <<<<<<<<<<<<<<
 * 
 *     def setVarToMaster(PartialDecomposition self, int varToMaster):
 */
  try {
    __pyx_v_self->thisptr->fixVarToLinking(__pyx_v_cpp_var);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1434, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":1428
 *         self.thisptr.setVarToLinking(cpp_varToLinking)
 * 
 *     def fixVarToLinking(PartialDecomposition self, int var):             # <<<<<<<<<<<<<<
 *         """adds a variable to the linking variables
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.fixVarToLinking", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1436
 *         self.thisptr.fixVarToLinking(cpp_var)
 * 
 *     def setVarToMaster(PartialDecomposition self, int varToMaster):             # <<<<<<<<<<<<<<
 *         """adds a variable to the master variables, does not delete this var from list of open vars
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_261setVarToMaster(PyObject *__pyx_v_self, PyObject *__pyx_arg_varToMaster); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_260setVarToMaster[] = "PartialDecomposition.setVarToMaster(self, int varToMaster)\nadds a variable to the master variables, does not delete this var from list of open vars\n\n        master variables hit only constraints in the master.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_261setVarToMaster(PyObject *__pyx_v_self, PyObject *__pyx_arg_varToMaster) {
  int __pyx_v_varToMaster;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setVarToMaster (wrapper)", 0);
  assert(__pyx_arg_varToMaster); {
    __pyx_v_varToMaster = __Pyx_PyInt_As_int(__pyx_arg_varToMaster); if (unlikely((__pyx_v_varToMaster == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 1436, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.setVarToMaster", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_260setVarToMaster(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((int)__pyx_v_varToMaster));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_260setVarToMaster(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_varToMaster) {
  int __pyx_v_cpp_varToMaster;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setVarToMaster", 0);

  /* "src/pygcgopt/decomposition.pxi":1441
 *         master variables hit only constraints in the master.
 *         """
 *         cdef int cpp_varToMaster = varToMaster             # <<<<<<<<<<<<<<
 *         self.thisptr.setVarToMaster(cpp_varToMaster)
 * 
 */
  __pyx_v_cpp_varToMaster = __pyx_v_varToMaster;

  /* "src/pygcgopt/decomposition.pxi":1442
 *         """
 *         cdef int cpp_varToMaster = varToMaster
 *         self.thisptr.setVarToMaster(cpp_varToMaster)             # <<<<<<<<<<<<<<
 * 
 *     def fixVarToMaster(PartialDecomposition self, int var):
 */
  try {
    __pyx_v_self->thisptr->setVarToMaster(__pyx_v_cpp_varToMaster);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1442, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":1436
 *         self.thisptr.fixVarToLinking(cpp_var)
 * 
 *     def setVarToMaster(PartialDecomposition self, int varToMaster):             # <<<<<<<<<<<<<<
 *         """adds a variable to the master variables, does not delete this var from list of open vars
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.setVarToMaster", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1444
 *         self.thisptr.setVarToMaster(cpp_varToMaster)
 * 
 *     def fixVarToMaster(PartialDecomposition self, int var):             # <<<<<<<<<<<<<<
 *         """adds a variable to the master variables
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_263fixVarToMaster(PyObject *__pyx_v_self, PyObject *__pyx_arg_var); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_262fixVarToMaster[] = "PartialDecomposition.fixVarToMaster(self, int var)\nadds a variable to the master variables\n\n        master variables hit only constraints in the master.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_263fixVarToMaster(PyObject *__pyx_v_self, PyObject *__pyx_arg_var) {
  int __pyx_v_var;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fixVarToMaster (wrapper)", 0);
  assert(__pyx_arg_var); {
    __pyx_v_var = __Pyx_PyInt_As_int(__pyx_arg_var); if (unlikely((__pyx_v_var == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 1444, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.fixVarToMaster", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_262fixVarToMaster(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((int)__pyx_v_var));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_262fixVarToMaster(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_var) {
  int __pyx_v_cpp_var;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("fixVarToMaster", 0);

  /* "src/pygcgopt/decomposition.pxi":1449
 *         master variables hit only constraints in the master.
 *         """
 *         cdef int cpp_var = var             # <<<<<<<<<<<<<<
 *         self.thisptr.fixVarToMaster(cpp_var)
 * 
 */
  __pyx_v_cpp_var = __pyx_v_var;

  /* "src/pygcgopt/decomposition.pxi":1450
 *         """
 *         cdef int cpp_var = var
 *         self.thisptr.fixVarToMaster(cpp_var)             # <<<<<<<<<<<<<<
 * 
 *     def setVarToStairlinking(PartialDecomposition self, int varToStairLinking, int block1, int block2):
 */
  try {
    __pyx_v_self->thisptr->fixVarToMaster(__pyx_v_cpp_var);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1450, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":1444
 *         self.thisptr.setVarToMaster(cpp_varToMaster)
 * 
 *     def fixVarToMaster(PartialDecomposition self, int var):             # <<<<<<<<<<<<<<
 *         """adds a variable to the master variables
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.fixVarToMaster", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1452
 *         self.thisptr.fixVarToMaster(cpp_var)
 * 
 *     def setVarToStairlinking(PartialDecomposition self, int varToStairLinking, int block1, int block2):             # <<<<<<<<<<<<<<
 *         """adds a variable to the stairlinking variables, does not delete this var from list of open vars
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_265setVarToStairlinking(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_264setVarToStairlinking[] = "PartialDecomposition.setVarToStairlinking(self, int varToStairLinking, int block1, int block2)\nadds a variable to the stairlinking variables, does not delete this var from list of open vars\n\n        :param varToStairLinking: id of variable to be added\n        :param block1: id of block one\n        :param block2: id of block two\n        .. note:: stairlinking variables are only registered in block with smaller index.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_265setVarToStairlinking(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_varToStairLinking;
  int __pyx_v_block1;
  int __pyx_v_block2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setVarToStairlinking (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_varToStairLinking,&__pyx_n_s_block1,&__pyx_n_s_block2,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_varToStairLinking)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_block1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setVarToStairlinking", 1, 3, 3, 1); __PYX_ERR(2, 1452, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_block2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setVarToStairlinking", 1, 3, 3, 2); __PYX_ERR(2, 1452, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setVarToStairlinking") < 0)) __PYX_ERR(2, 1452, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_varToStairLinking = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_varToStairLinking == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 1452, __pyx_L3_error)
    __pyx_v_block1 = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_block1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 1452, __pyx_L3_error)
    __pyx_v_block2 = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_block2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 1452, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setVarToStairlinking", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 1452, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.setVarToStairlinking", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_264setVarToStairlinking(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), __pyx_v_varToStairLinking, __pyx_v_block1, __pyx_v_block2);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_264setVarToStairlinking(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_varToStairLinking, int __pyx_v_block1, int __pyx_v_block2) {
  int __pyx_v_cpp_varToStairLinking;
  int __pyx_v_cpp_block1;
  int __pyx_v_cpp_block2;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setVarToStairlinking", 0);

  /* "src/pygcgopt/decomposition.pxi":1460
 *         .. note:: stairlinking variables are only registered in block with smaller index.
 *         """
 *         cdef int cpp_varToStairLinking = varToStairLinking             # <<<<<<<<<<<<<<
 *         cdef int cpp_block1 = block1
 *         cdef int cpp_block2 = block2
 */
  __pyx_v_cpp_varToStairLinking = __pyx_v_varToStairLinking;

  /* "src/pygcgopt/decomposition.pxi":1461
 *         """
 *         cdef int cpp_varToStairLinking = varToStairLinking
 *         cdef int cpp_block1 = block1             # <<<<<<<<<<<<<<
 *         cdef int cpp_block2 = block2
 *         self.thisptr.setVarToStairlinking(cpp_varToStairLinking, cpp_block1, cpp_block2)
 */
  __pyx_v_cpp_block1 = __pyx_v_block1;

  /* "src/pygcgopt/decomposition.pxi":1462
 *         cdef int cpp_varToStairLinking = varToStairLinking
 *         cdef int cpp_block1 = block1
 *         cdef int cpp_block2 = block2             # <<<<<<<<<<<<<<
 *         self.thisptr.setVarToStairlinking(cpp_varToStairLinking, cpp_block1, cpp_block2)
 * 
 */
  __pyx_v_cpp_block2 = __pyx_v_block2;

  /* "src/pygcgopt/decomposition.pxi":1463
 *         cdef int cpp_block1 = block1
 *         cdef int cpp_block2 = block2
 *         self.thisptr.setVarToStairlinking(cpp_varToStairLinking, cpp_block1, cpp_block2)             # <<<<<<<<<<<<<<
 * 
 *     def fixVarToStairlinking(PartialDecomposition self, int var, int firstblock):
 */
  try {
    __pyx_v_self->thisptr->setVarToStairlinking(__pyx_v_cpp_varToStairLinking, __pyx_v_cpp_block1, __pyx_v_cpp_block2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1463, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":1452
 *         self.thisptr.fixVarToMaster(cpp_var)
 * 
 *     def setVarToStairlinking(PartialDecomposition self, int varToStairLinking, int block1, int block2):             # <<<<<<<<<<<<<<
 *         """adds a variable to the stairlinking variables, does not delete this var from list of open vars
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.setVarToStairlinking", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1465
 *         self.thisptr.setVarToStairlinking(cpp_varToStairLinking, cpp_block1, cpp_block2)
 * 
 *     def fixVarToStairlinking(PartialDecomposition self, int var, int firstblock):             # <<<<<<<<<<<<<<
 *         """adds a variable to the stairlinking variables
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_267fixVarToStairlinking(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_266fixVarToStairlinking[] = "PartialDecomposition.fixVarToStairlinking(self, int var, int firstblock)\nadds a variable to the stairlinking variables\n\n        :param var: id of variable to be added\n        :param firstblock: stairlinking variables hit exactly two consecutive blocks, this is the index of the first of these blocks\n        .. note:: stairlinking variables are only registered in block with smaller index.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_267fixVarToStairlinking(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_var;
  int __pyx_v_firstblock;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fixVarToStairlinking (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_var,&__pyx_n_s_firstblock,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_var)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_firstblock)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fixVarToStairlinking", 1, 2, 2, 1); __PYX_ERR(2, 1465, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "fixVarToStairlinking") < 0)) __PYX_ERR(2, 1465, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_var = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_var == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 1465, __pyx_L3_error)
    __pyx_v_firstblock = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_firstblock == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 1465, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fixVarToStairlinking", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 1465, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.fixVarToStairlinking", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_266fixVarToStairlinking(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), __pyx_v_var, __pyx_v_firstblock);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_266fixVarToStairlinking(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_var, int __pyx_v_firstblock) {
  int __pyx_v_cpp_var;
  int __pyx_v_cpp_firstblock;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("fixVarToStairlinking", 0);

  /* "src/pygcgopt/decomposition.pxi":1472
 *         .. note:: stairlinking variables are only registered in block with smaller index.
 *         """
 *         cdef int cpp_var = var             # <<<<<<<<<<<<<<
 *         cdef int cpp_firstblock = firstblock
 *         self.thisptr.fixVarToStairlinking(cpp_var, cpp_firstblock)
 */
  __pyx_v_cpp_var = __pyx_v_var;

  /* "src/pygcgopt/decomposition.pxi":1473
 *         """
 *         cdef int cpp_var = var
 *         cdef int cpp_firstblock = firstblock             # <<<<<<<<<<<<<<
 *         self.thisptr.fixVarToStairlinking(cpp_var, cpp_firstblock)
 * 
 */
  __pyx_v_cpp_firstblock = __pyx_v_firstblock;

  /* "src/pygcgopt/decomposition.pxi":1474
 *         cdef int cpp_var = var
 *         cdef int cpp_firstblock = firstblock
 *         self.thisptr.fixVarToStairlinking(cpp_var, cpp_firstblock)             # <<<<<<<<<<<<<<
 * 
 *     def fixConsToBlockByName(PartialDecomposition self, consname, int blockid):
 */
  try {
    __pyx_v_self->thisptr->fixVarToStairlinking(__pyx_v_cpp_var, __pyx_v_cpp_firstblock);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1474, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":1465
 *         self.thisptr.setVarToStairlinking(cpp_varToStairLinking, cpp_block1, cpp_block2)
 * 
 *     def fixVarToStairlinking(PartialDecomposition self, int var, int firstblock):             # <<<<<<<<<<<<<<
 *         """adds a variable to the stairlinking variables
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.fixVarToStairlinking", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1476
 *         self.thisptr.fixVarToStairlinking(cpp_var, cpp_firstblock)
 * 
 *     def fixConsToBlockByName(PartialDecomposition self, consname, int blockid):             # <<<<<<<<<<<<<<
 *         """assigns a constraint by name to a block
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_269fixConsToBlockByName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_268fixConsToBlockByName[] = "PartialDecomposition.fixConsToBlockByName(self, consname, int blockid)\nassigns a constraint by name to a block\n\n        .. seealso:: * :meth:`fixConsToBlock`\n        :return: True iff successful.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_269fixConsToBlockByName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_consname = 0;
  int __pyx_v_blockid;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fixConsToBlockByName (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_consname,&__pyx_n_s_blockid,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_consname)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_blockid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fixConsToBlockByName", 1, 2, 2, 1); __PYX_ERR(2, 1476, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "fixConsToBlockByName") < 0)) __PYX_ERR(2, 1476, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_consname = values[0];
    __pyx_v_blockid = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_blockid == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 1476, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fixConsToBlockByName", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 1476, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.fixConsToBlockByName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_268fixConsToBlockByName(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), __pyx_v_consname, __pyx_v_blockid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_268fixConsToBlockByName(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_consname, int __pyx_v_blockid) {
  PyObject *__pyx_v_c_consname = NULL;
  int __pyx_v_cpp_blockid;
  bool __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("fixConsToBlockByName", 0);

  /* "src/pygcgopt/decomposition.pxi":1482
 *         :return: True iff successful.
 *         """
 *         c_consname = str_conversion(consname)             # <<<<<<<<<<<<<<
 *         cdef int cpp_blockid = blockid
 *         cdef bool result = self.thisptr.fixConsToBlockByName(c_consname, cpp_blockid)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_str_conversion); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_consname) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_consname);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_c_consname = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "src/pygcgopt/decomposition.pxi":1483
 *         """
 *         c_consname = str_conversion(consname)
 *         cdef int cpp_blockid = blockid             # <<<<<<<<<<<<<<
 *         cdef bool result = self.thisptr.fixConsToBlockByName(c_consname, cpp_blockid)
 *         return result
 */
  __pyx_v_cpp_blockid = __pyx_v_blockid;

  /* "src/pygcgopt/decomposition.pxi":1484
 *         c_consname = str_conversion(consname)
 *         cdef int cpp_blockid = blockid
 *         cdef bool result = self.thisptr.fixConsToBlockByName(c_consname, cpp_blockid)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_c_consname); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(2, 1484, __pyx_L1_error)
  try {
    __pyx_t_5 = __pyx_v_self->thisptr->fixConsToBlockByName(__pyx_t_4, __pyx_v_cpp_blockid);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1484, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_5;

  /* "src/pygcgopt/decomposition.pxi":1485
 *         cdef int cpp_blockid = blockid
 *         cdef bool result = self.thisptr.fixConsToBlockByName(c_consname, cpp_blockid)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def fixVarToBlockByName(PartialDecomposition self, varname, int blockid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":1476
 *         self.thisptr.fixVarToStairlinking(cpp_var, cpp_firstblock)
 * 
 *     def fixConsToBlockByName(PartialDecomposition self, consname, int blockid):             # <<<<<<<<<<<<<<
 *         """assigns a constraint by name to a block
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.fixConsToBlockByName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_c_consname);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1487
 *         return result
 * 
 *     def fixVarToBlockByName(PartialDecomposition self, varname, int blockid):             # <<<<<<<<<<<<<<
 *         """assigns a variable by name to a block
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_271fixVarToBlockByName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_270fixVarToBlockByName[] = "PartialDecomposition.fixVarToBlockByName(self, varname, int blockid)\nassigns a variable by name to a block\n\n        .. seealso:: * :meth:`fixVarToBlock`\n        :return: True iff successful.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_271fixVarToBlockByName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_varname = 0;
  int __pyx_v_blockid;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fixVarToBlockByName (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_varname,&__pyx_n_s_blockid,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_varname)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_blockid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fixVarToBlockByName", 1, 2, 2, 1); __PYX_ERR(2, 1487, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "fixVarToBlockByName") < 0)) __PYX_ERR(2, 1487, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_varname = values[0];
    __pyx_v_blockid = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_blockid == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 1487, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fixVarToBlockByName", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 1487, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.fixVarToBlockByName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_270fixVarToBlockByName(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), __pyx_v_varname, __pyx_v_blockid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_270fixVarToBlockByName(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_varname, int __pyx_v_blockid) {
  PyObject *__pyx_v_c_varname = NULL;
  int __pyx_v_cpp_blockid;
  bool __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("fixVarToBlockByName", 0);

  /* "src/pygcgopt/decomposition.pxi":1493
 *         :return: True iff successful.
 *         """
 *         c_varname = str_conversion(varname)             # <<<<<<<<<<<<<<
 *         cdef int cpp_blockid = blockid
 *         cdef bool result = self.thisptr.fixVarToBlockByName(c_varname, cpp_blockid)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_str_conversion); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_varname) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_varname);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_c_varname = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "src/pygcgopt/decomposition.pxi":1494
 *         """
 *         c_varname = str_conversion(varname)
 *         cdef int cpp_blockid = blockid             # <<<<<<<<<<<<<<
 *         cdef bool result = self.thisptr.fixVarToBlockByName(c_varname, cpp_blockid)
 *         return result
 */
  __pyx_v_cpp_blockid = __pyx_v_blockid;

  /* "src/pygcgopt/decomposition.pxi":1495
 *         c_varname = str_conversion(varname)
 *         cdef int cpp_blockid = blockid
 *         cdef bool result = self.thisptr.fixVarToBlockByName(c_varname, cpp_blockid)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_c_varname); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(2, 1495, __pyx_L1_error)
  try {
    __pyx_t_5 = __pyx_v_self->thisptr->fixVarToBlockByName(__pyx_t_4, __pyx_v_cpp_blockid);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1495, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_5;

  /* "src/pygcgopt/decomposition.pxi":1496
 *         cdef int cpp_blockid = blockid
 *         cdef bool result = self.thisptr.fixVarToBlockByName(c_varname, cpp_blockid)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def fixConsToMasterByName(PartialDecomposition self, consname):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":1487
 *         return result
 * 
 *     def fixVarToBlockByName(PartialDecomposition self, varname, int blockid):             # <<<<<<<<<<<<<<
 *         """assigns a variable by name to a block
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.fixVarToBlockByName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_c_varname);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1498
 *         return result
 * 
 *     def fixConsToMasterByName(PartialDecomposition self, consname):             # <<<<<<<<<<<<<<
 *         """assgins a constraint by name as master
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_273fixConsToMasterByName(PyObject *__pyx_v_self, PyObject *__pyx_v_consname); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_272fixConsToMasterByName[] = "PartialDecomposition.fixConsToMasterByName(self, consname)\nassgins a constraint by name as master\n\n        .. seealso:: * :meth:`fixConsToMaster`\n        :return: True iff successful.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_273fixConsToMasterByName(PyObject *__pyx_v_self, PyObject *__pyx_v_consname) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fixConsToMasterByName (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_272fixConsToMasterByName(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((PyObject *)__pyx_v_consname));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_272fixConsToMasterByName(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_consname) {
  PyObject *__pyx_v_c_consname = NULL;
  bool __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("fixConsToMasterByName", 0);

  /* "src/pygcgopt/decomposition.pxi":1504
 *         :return: True iff successful.
 *         """
 *         c_consname = str_conversion(consname)             # <<<<<<<<<<<<<<
 *         cdef bool result = self.thisptr.fixConsToMasterByName(c_consname)
 *         return result
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_str_conversion); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_consname) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_consname);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_c_consname = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "src/pygcgopt/decomposition.pxi":1505
 *         """
 *         c_consname = str_conversion(consname)
 *         cdef bool result = self.thisptr.fixConsToMasterByName(c_consname)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_c_consname); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(2, 1505, __pyx_L1_error)
  try {
    __pyx_t_5 = __pyx_v_self->thisptr->fixConsToMasterByName(__pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1505, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_5;

  /* "src/pygcgopt/decomposition.pxi":1506
 *         c_consname = str_conversion(consname)
 *         cdef bool result = self.thisptr.fixConsToMasterByName(c_consname)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def fixVarToMasterByName(PartialDecomposition self, varname):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":1498
 *         return result
 * 
 *     def fixConsToMasterByName(PartialDecomposition self, consname):             # <<<<<<<<<<<<<<
 *         """assgins a constraint by name as master
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.fixConsToMasterByName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_c_consname);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1508
 *         return result
 * 
 *     def fixVarToMasterByName(PartialDecomposition self, varname):             # <<<<<<<<<<<<<<
 *         """assigns a variable with given name as master
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_275fixVarToMasterByName(PyObject *__pyx_v_self, PyObject *__pyx_v_varname); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_274fixVarToMasterByName[] = "PartialDecomposition.fixVarToMasterByName(self, varname)\nassigns a variable with given name as master\n\n        .. seealso:: * :meth:`fixVarToMaster`\n        :return: True iff successful.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_275fixVarToMasterByName(PyObject *__pyx_v_self, PyObject *__pyx_v_varname) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fixVarToMasterByName (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_274fixVarToMasterByName(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((PyObject *)__pyx_v_varname));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_274fixVarToMasterByName(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_varname) {
  PyObject *__pyx_v_c_varname = NULL;
  bool __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("fixVarToMasterByName", 0);

  /* "src/pygcgopt/decomposition.pxi":1514
 *         :return: True iff successful.
 *         """
 *         c_varname = str_conversion(varname)             # <<<<<<<<<<<<<<
 *         cdef bool result = self.thisptr.fixVarToMasterByName(c_varname)
 *         return result
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_str_conversion); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_varname) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_varname);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_c_varname = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "src/pygcgopt/decomposition.pxi":1515
 *         """
 *         c_varname = str_conversion(varname)
 *         cdef bool result = self.thisptr.fixVarToMasterByName(c_varname)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_c_varname); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(2, 1515, __pyx_L1_error)
  try {
    __pyx_t_5 = __pyx_v_self->thisptr->fixVarToMasterByName(__pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1515, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_5;

  /* "src/pygcgopt/decomposition.pxi":1516
 *         c_varname = str_conversion(varname)
 *         cdef bool result = self.thisptr.fixVarToMasterByName(c_varname)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def fixVarToLinkingByName(PartialDecomposition self, varname):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":1508
 *         return result
 * 
 *     def fixVarToMasterByName(PartialDecomposition self, varname):             # <<<<<<<<<<<<<<
 *         """assigns a variable with given name as master
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.fixVarToMasterByName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_c_varname);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1518
 *         return result
 * 
 *     def fixVarToLinkingByName(PartialDecomposition self, varname):             # <<<<<<<<<<<<<<
 *         """assigns a variable by name to the linking variables
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_277fixVarToLinkingByName(PyObject *__pyx_v_self, PyObject *__pyx_v_varname); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_276fixVarToLinkingByName[] = "PartialDecomposition.fixVarToLinkingByName(self, varname)\nassigns a variable by name to the linking variables\n\n        .. seealso:: * :meth:`fixVarToLinking`\n        :return: True iff successful.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_277fixVarToLinkingByName(PyObject *__pyx_v_self, PyObject *__pyx_v_varname) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fixVarToLinkingByName (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_276fixVarToLinkingByName(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((PyObject *)__pyx_v_varname));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_276fixVarToLinkingByName(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_varname) {
  PyObject *__pyx_v_c_varname = NULL;
  bool __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("fixVarToLinkingByName", 0);

  /* "src/pygcgopt/decomposition.pxi":1524
 *         :return: True iff successful.
 *         """
 *         c_varname = str_conversion(varname)             # <<<<<<<<<<<<<<
 *         cdef bool result = self.thisptr.fixVarToLinkingByName(c_varname)
 *         return result
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_str_conversion); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_varname) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_varname);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_c_varname = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "src/pygcgopt/decomposition.pxi":1525
 *         """
 *         c_varname = str_conversion(varname)
 *         cdef bool result = self.thisptr.fixVarToLinkingByName(c_varname)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_c_varname); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(2, 1525, __pyx_L1_error)
  try {
    __pyx_t_5 = __pyx_v_self->thisptr->fixVarToLinkingByName(__pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1525, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_5;

  /* "src/pygcgopt/decomposition.pxi":1526
 *         c_varname = str_conversion(varname)
 *         cdef bool result = self.thisptr.fixVarToLinkingByName(c_varname)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def showVisualization(PartialDecomposition self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1526, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":1518
 *         return result
 * 
 *     def fixVarToLinkingByName(PartialDecomposition self, varname):             # <<<<<<<<<<<<<<
 *         """assigns a variable by name to the linking variables
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.fixVarToLinkingByName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_c_varname);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1528
 *         return result
 * 
 *     def showVisualization(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """generates and opens a gp visualization of the partialdec
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_279showVisualization(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_278showVisualization[] = "PartialDecomposition.showVisualization(self)\ngenerates and opens a gp visualization of the partialdec\n\n        .. note:: linux only.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_279showVisualization(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("showVisualization (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_278showVisualization(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_278showVisualization(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("showVisualization", 0);

  /* "src/pygcgopt/decomposition.pxi":1533
 *         .. note:: linux only.
 *         """
 *         self.thisptr.showVisualization()             # <<<<<<<<<<<<<<
 * 
 *     # def generateVisualization(PartialDecomposition self, filename, outname, GP_OUTPUT_FORMAT outputformat):
 */
  try {
    __pyx_v_self->thisptr->showVisualization();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1533, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":1528
 *         return result
 * 
 *     def showVisualization(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """generates and opens a gp visualization of the partialdec
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.showVisualization", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1560
 *     #     raise NotImplementedError()
 * 
 *     def shouldCompletedByConsToMaster(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Checks whether this partialdec is a userpartialdec that should be completed
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_281shouldCompletedByConsToMaster(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_280shouldCompletedByConsToMaster[] = "PartialDecomposition.shouldCompletedByConsToMaster(self)\nChecks whether this partialdec is a userpartialdec that should be completed\n\n        the completion should be done by setting unspecified constraints to master\n        :return: True iff this partialdec is a userpartialdec that should be completed.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_281shouldCompletedByConsToMaster(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("shouldCompletedByConsToMaster (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_280shouldCompletedByConsToMaster(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_280shouldCompletedByConsToMaster(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  unsigned int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("shouldCompletedByConsToMaster", 0);

  /* "src/pygcgopt/decomposition.pxi":1566
 *         :return: True iff this partialdec is a userpartialdec that should be completed.
 *         """
 *         cdef unsigned int result = self.thisptr.shouldCompletedByConsToMaster()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->shouldCompletedByConsToMaster();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1566, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":1567
 *         """
 *         cdef unsigned int result = self.thisptr.shouldCompletedByConsToMaster()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def sort(PartialDecomposition self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":1560
 *     #     raise NotImplementedError()
 * 
 *     def shouldCompletedByConsToMaster(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Checks whether this partialdec is a userpartialdec that should be completed
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.shouldCompletedByConsToMaster", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1569
 *         return result
 * 
 *     def sort(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """sorts the vars and conss data structures by their indices
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_283sort(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_282sort[] = "PartialDecomposition.sort(self)\nsorts the vars and conss data structures by their indices\n\n        :return: True if the internal order of variables or constraints changed.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_283sort(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sort (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_282sort(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_282sort(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  bool __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sort", 0);

  /* "src/pygcgopt/decomposition.pxi":1574
 *         :return: True if the internal order of variables or constraints changed.
 *         """
 *         cdef bool result = self.thisptr.sort()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->sort();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1574, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":1575
 *         """
 *         cdef bool result = self.thisptr.sort()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def setPctConssToBlockVector(PartialDecomposition self, object newvector):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1575, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":1569
 *         return result
 * 
 *     def sort(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """sorts the vars and conss data structures by their indices
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.sort", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1577
 *         return result
 * 
 *     def setPctConssToBlockVector(PartialDecomposition self, object newvector):             # <<<<<<<<<<<<<<
 *         """set statistical vector of fractions of constraints set to blocks per involved detector
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_285setPctConssToBlockVector(PyObject *__pyx_v_self, PyObject *__pyx_v_newvector); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_284setPctConssToBlockVector[] = "PartialDecomposition.setPctConssToBlockVector(self, newvector)\nset statistical vector of fractions of constraints set to blocks per involved detector\n\n        :param newvector: vector of fractions of constraints set to blocks per involved detector.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_285setPctConssToBlockVector(PyObject *__pyx_v_self, PyObject *__pyx_v_newvector) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setPctConssToBlockVector (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_284setPctConssToBlockVector(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((PyObject *)__pyx_v_newvector));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_284setPctConssToBlockVector(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_newvector) {
  std::vector<double>  __pyx_v_cpp_newvector;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<double>  __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setPctConssToBlockVector", 0);

  /* "src/pygcgopt/decomposition.pxi":1582
 *         :param newvector: vector of fractions of constraints set to blocks per involved detector.
 *         """
 *         cdef vector[double] cpp_newvector = newvector             # <<<<<<<<<<<<<<
 *         self.thisptr.setPctConssToBlockVector(cpp_newvector)
 * 
 */
  __pyx_t_1 = __pyx_convert_vector_from_py_double(__pyx_v_newvector); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 1582, __pyx_L1_error)
  __pyx_v_cpp_newvector = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":1583
 *         """
 *         cdef vector[double] cpp_newvector = newvector
 *         self.thisptr.setPctConssToBlockVector(cpp_newvector)             # <<<<<<<<<<<<<<
 * 
 *     def setPctConssFromFreeVector(PartialDecomposition self, object newvector):
 */
  try {
    __pyx_v_self->thisptr->setPctConssToBlockVector(__pyx_v_cpp_newvector);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1583, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":1577
 *         return result
 * 
 *     def setPctConssToBlockVector(PartialDecomposition self, object newvector):             # <<<<<<<<<<<<<<
 *         """set statistical vector of fractions of constraints set to blocks per involved detector
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.setPctConssToBlockVector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1585
 *         self.thisptr.setPctConssToBlockVector(cpp_newvector)
 * 
 *     def setPctConssFromFreeVector(PartialDecomposition self, object newvector):             # <<<<<<<<<<<<<<
 *         """set statistical vector of fractions of constraints that are not longer open per involved detector
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_287setPctConssFromFreeVector(PyObject *__pyx_v_self, PyObject *__pyx_v_newvector); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_286setPctConssFromFreeVector[] = "PartialDecomposition.setPctConssFromFreeVector(self, newvector)\nset statistical vector of fractions of constraints that are not longer open per involved detector\n\n        :param newvector: vector of fractions of constraints that are not longer open per involved detector.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_287setPctConssFromFreeVector(PyObject *__pyx_v_self, PyObject *__pyx_v_newvector) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setPctConssFromFreeVector (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_286setPctConssFromFreeVector(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((PyObject *)__pyx_v_newvector));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_286setPctConssFromFreeVector(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_newvector) {
  std::vector<double>  __pyx_v_cpp_newvector;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<double>  __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setPctConssFromFreeVector", 0);

  /* "src/pygcgopt/decomposition.pxi":1590
 *         :param newvector: vector of fractions of constraints that are not longer open per involved detector.
 *         """
 *         cdef vector[double] cpp_newvector = newvector             # <<<<<<<<<<<<<<
 *         self.thisptr.setPctConssFromFreeVector(cpp_newvector)
 * 
 */
  __pyx_t_1 = __pyx_convert_vector_from_py_double(__pyx_v_newvector); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 1590, __pyx_L1_error)
  __pyx_v_cpp_newvector = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":1591
 *         """
 *         cdef vector[double] cpp_newvector = newvector
 *         self.thisptr.setPctConssFromFreeVector(cpp_newvector)             # <<<<<<<<<<<<<<
 * 
 *     def setPctConssToBorderVector(PartialDecomposition self, object newvector):
 */
  try {
    __pyx_v_self->thisptr->setPctConssFromFreeVector(__pyx_v_cpp_newvector);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1591, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":1585
 *         self.thisptr.setPctConssToBlockVector(cpp_newvector)
 * 
 *     def setPctConssFromFreeVector(PartialDecomposition self, object newvector):             # <<<<<<<<<<<<<<
 *         """set statistical vector of fractions of constraints that are not longer open per involved detector
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.setPctConssFromFreeVector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1593
 *         self.thisptr.setPctConssFromFreeVector(cpp_newvector)
 * 
 *     def setPctConssToBorderVector(PartialDecomposition self, object newvector):             # <<<<<<<<<<<<<<
 *         """set statistical vector of fractions of constraints assigned to the border per involved detector
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_289setPctConssToBorderVector(PyObject *__pyx_v_self, PyObject *__pyx_v_newvector); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_288setPctConssToBorderVector[] = "PartialDecomposition.setPctConssToBorderVector(self, newvector)\nset statistical vector of fractions of constraints assigned to the border per involved detector\n\n        :param newvector: vector of fractions of constraints assigned to the border per involved detector.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_289setPctConssToBorderVector(PyObject *__pyx_v_self, PyObject *__pyx_v_newvector) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setPctConssToBorderVector (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_288setPctConssToBorderVector(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((PyObject *)__pyx_v_newvector));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_288setPctConssToBorderVector(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_newvector) {
  std::vector<double>  __pyx_v_cpp_newvector;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<double>  __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setPctConssToBorderVector", 0);

  /* "src/pygcgopt/decomposition.pxi":1598
 *         :param newvector: vector of fractions of constraints assigned to the border per involved detector.
 *         """
 *         cdef vector[double] cpp_newvector = newvector             # <<<<<<<<<<<<<<
 *         self.thisptr.setPctConssToBorderVector(cpp_newvector)
 * 
 */
  __pyx_t_1 = __pyx_convert_vector_from_py_double(__pyx_v_newvector); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 1598, __pyx_L1_error)
  __pyx_v_cpp_newvector = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":1599
 *         """
 *         cdef vector[double] cpp_newvector = newvector
 *         self.thisptr.setPctConssToBorderVector(cpp_newvector)             # <<<<<<<<<<<<<<
 * 
 *     def setPctVarsToBorderVector(PartialDecomposition self, object newvector):
 */
  try {
    __pyx_v_self->thisptr->setPctConssToBorderVector(__pyx_v_cpp_newvector);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1599, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":1593
 *         self.thisptr.setPctConssFromFreeVector(cpp_newvector)
 * 
 *     def setPctConssToBorderVector(PartialDecomposition self, object newvector):             # <<<<<<<<<<<<<<
 *         """set statistical vector of fractions of constraints assigned to the border per involved detector
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.setPctConssToBorderVector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1601
 *         self.thisptr.setPctConssToBorderVector(cpp_newvector)
 * 
 *     def setPctVarsToBorderVector(PartialDecomposition self, object newvector):             # <<<<<<<<<<<<<<
 *         """set statistical vector of fraction of variables assigned to the border per involved detector
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_291setPctVarsToBorderVector(PyObject *__pyx_v_self, PyObject *__pyx_v_newvector); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_290setPctVarsToBorderVector[] = "PartialDecomposition.setPctVarsToBorderVector(self, newvector)\nset statistical vector of fraction of variables assigned to the border per involved detector\n\n        :param newvector: vector of fractions of variables assigned to the border per involved detector.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_291setPctVarsToBorderVector(PyObject *__pyx_v_self, PyObject *__pyx_v_newvector) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setPctVarsToBorderVector (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_290setPctVarsToBorderVector(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((PyObject *)__pyx_v_newvector));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_290setPctVarsToBorderVector(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_newvector) {
  std::vector<double>  __pyx_v_cpp_newvector;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<double>  __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setPctVarsToBorderVector", 0);

  /* "src/pygcgopt/decomposition.pxi":1606
 *         :param newvector: vector of fractions of variables assigned to the border per involved detector.
 *         """
 *         cdef vector[double] cpp_newvector = newvector             # <<<<<<<<<<<<<<
 *         self.thisptr.setPctVarsToBorderVector(cpp_newvector)
 * 
 */
  __pyx_t_1 = __pyx_convert_vector_from_py_double(__pyx_v_newvector); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 1606, __pyx_L1_error)
  __pyx_v_cpp_newvector = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":1607
 *         """
 *         cdef vector[double] cpp_newvector = newvector
 *         self.thisptr.setPctVarsToBorderVector(cpp_newvector)             # <<<<<<<<<<<<<<
 * 
 *     def setPctVarsToBlockVector(PartialDecomposition self, object newvector):
 */
  try {
    __pyx_v_self->thisptr->setPctVarsToBorderVector(__pyx_v_cpp_newvector);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1607, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":1601
 *         self.thisptr.setPctConssToBorderVector(cpp_newvector)
 * 
 *     def setPctVarsToBorderVector(PartialDecomposition self, object newvector):             # <<<<<<<<<<<<<<
 *         """set statistical vector of fraction of variables assigned to the border per involved detector
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.setPctVarsToBorderVector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1609
 *         self.thisptr.setPctVarsToBorderVector(cpp_newvector)
 * 
 *     def setPctVarsToBlockVector(PartialDecomposition self, object newvector):             # <<<<<<<<<<<<<<
 *         """set statistical vector of fractions of variables assigned to a block per involved detector
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_293setPctVarsToBlockVector(PyObject *__pyx_v_self, PyObject *__pyx_v_newvector); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_292setPctVarsToBlockVector[] = "PartialDecomposition.setPctVarsToBlockVector(self, newvector)\nset statistical vector of fractions of variables assigned to a block per involved detector\n\n        :param newvector: vector of fractions of variables assigned to a block per involved detector.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_293setPctVarsToBlockVector(PyObject *__pyx_v_self, PyObject *__pyx_v_newvector) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setPctVarsToBlockVector (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_292setPctVarsToBlockVector(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((PyObject *)__pyx_v_newvector));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_292setPctVarsToBlockVector(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_newvector) {
  std::vector<double>  __pyx_v_cpp_newvector;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<double>  __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setPctVarsToBlockVector", 0);

  /* "src/pygcgopt/decomposition.pxi":1614
 *         :param newvector: vector of fractions of variables assigned to a block per involved detector.
 *         """
 *         cdef vector[double] cpp_newvector = newvector             # <<<<<<<<<<<<<<
 *         self.thisptr.setPctVarsToBlockVector(cpp_newvector)
 * 
 */
  __pyx_t_1 = __pyx_convert_vector_from_py_double(__pyx_v_newvector); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 1614, __pyx_L1_error)
  __pyx_v_cpp_newvector = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":1615
 *         """
 *         cdef vector[double] cpp_newvector = newvector
 *         self.thisptr.setPctVarsToBlockVector(cpp_newvector)             # <<<<<<<<<<<<<<
 * 
 *     def setPctVarsFromFreeVector(PartialDecomposition self, object newvector):
 */
  try {
    __pyx_v_self->thisptr->setPctVarsToBlockVector(__pyx_v_cpp_newvector);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1615, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":1609
 *         self.thisptr.setPctVarsToBorderVector(cpp_newvector)
 * 
 *     def setPctVarsToBlockVector(PartialDecomposition self, object newvector):             # <<<<<<<<<<<<<<
 *         """set statistical vector of fractions of variables assigned to a block per involved detector
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.setPctVarsToBlockVector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1617
 *         self.thisptr.setPctVarsToBlockVector(cpp_newvector)
 * 
 *     def setPctVarsFromFreeVector(PartialDecomposition self, object newvector):             # <<<<<<<<<<<<<<
 *         """set statistical vector of variables that are not longer open per involved detector
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_295setPctVarsFromFreeVector(PyObject *__pyx_v_self, PyObject *__pyx_v_newvector); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_294setPctVarsFromFreeVector[] = "PartialDecomposition.setPctVarsFromFreeVector(self, newvector)\nset statistical vector of variables that are not longer open per involved detector\n\n        :param newvector: vector of fractions of variables that are not longer open per involved detector.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_295setPctVarsFromFreeVector(PyObject *__pyx_v_self, PyObject *__pyx_v_newvector) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setPctVarsFromFreeVector (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_294setPctVarsFromFreeVector(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((PyObject *)__pyx_v_newvector));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_294setPctVarsFromFreeVector(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_newvector) {
  std::vector<double>  __pyx_v_cpp_newvector;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<double>  __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setPctVarsFromFreeVector", 0);

  /* "src/pygcgopt/decomposition.pxi":1622
 *         :param newvector: vector of fractions of variables that are not longer open per involved detector.
 *         """
 *         cdef vector[double] cpp_newvector = newvector             # <<<<<<<<<<<<<<
 *         self.thisptr.setPctVarsFromFreeVector(cpp_newvector)
 * 
 */
  __pyx_t_1 = __pyx_convert_vector_from_py_double(__pyx_v_newvector); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 1622, __pyx_L1_error)
  __pyx_v_cpp_newvector = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":1623
 *         """
 *         cdef vector[double] cpp_newvector = newvector
 *         self.thisptr.setPctVarsFromFreeVector(cpp_newvector)             # <<<<<<<<<<<<<<
 * 
 *     def setDetectorClockTimes(PartialDecomposition self, object newvector):
 */
  try {
    __pyx_v_self->thisptr->setPctVarsFromFreeVector(__pyx_v_cpp_newvector);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1623, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":1617
 *         self.thisptr.setPctVarsToBlockVector(cpp_newvector)
 * 
 *     def setPctVarsFromFreeVector(PartialDecomposition self, object newvector):             # <<<<<<<<<<<<<<
 *         """set statistical vector of variables that are not longer open per involved detector
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.setPctVarsFromFreeVector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1625
 *         self.thisptr.setPctVarsFromFreeVector(cpp_newvector)
 * 
 *     def setDetectorClockTimes(PartialDecomposition self, object newvector):             # <<<<<<<<<<<<<<
 *         """set statistical vector of the times that the detectors needed for detecting per involved detector
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_297setDetectorClockTimes(PyObject *__pyx_v_self, PyObject *__pyx_v_newvector); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_296setDetectorClockTimes[] = "PartialDecomposition.setDetectorClockTimes(self, newvector)\nset statistical vector of the times that the detectors needed for detecting per involved detector\n\n        :param newvector: vector of the times that the detectors needed for detecting per involved detector.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_297setDetectorClockTimes(PyObject *__pyx_v_self, PyObject *__pyx_v_newvector) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setDetectorClockTimes (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_296setDetectorClockTimes(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((PyObject *)__pyx_v_newvector));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_296setDetectorClockTimes(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_newvector) {
  std::vector<double>  __pyx_v_cpp_newvector;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<double>  __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setDetectorClockTimes", 0);

  /* "src/pygcgopt/decomposition.pxi":1630
 *         :param newvector: vector of the times that the detectors needed for detecting per involved detector.
 *         """
 *         cdef vector[double] cpp_newvector = newvector             # <<<<<<<<<<<<<<
 *         self.thisptr.setDetectorClockTimes(cpp_newvector)
 * 
 */
  __pyx_t_1 = __pyx_convert_vector_from_py_double(__pyx_v_newvector); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 1630, __pyx_L1_error)
  __pyx_v_cpp_newvector = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":1631
 *         """
 *         cdef vector[double] cpp_newvector = newvector
 *         self.thisptr.setDetectorClockTimes(cpp_newvector)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  try {
    __pyx_v_self->thisptr->setDetectorClockTimes(__pyx_v_cpp_newvector);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1631, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":1625
 *         self.thisptr.setPctVarsFromFreeVector(cpp_newvector)
 * 
 *     def setDetectorClockTimes(PartialDecomposition self, object newvector):             # <<<<<<<<<<<<<<
 *         """set statistical vector of the times that the detectors needed for detecting per involved detector
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.setDetectorClockTimes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1634
 * 
 *     @property
 *     def classicScore(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """gets the classic score
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_12classicScore_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_12classicScore_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_12classicScore___get__(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_12classicScore___get__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  double __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "src/pygcgopt/decomposition.pxi":1640
 *         :return: border area score.
 *         """
 *         cdef double result = self.thisptr.getClassicScore()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getClassicScore();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1640, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":1641
 *         """
 *         cdef double result = self.thisptr.getClassicScore()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @classicScore.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1641, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":1634
 * 
 *     @property
 *     def classicScore(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """gets the classic score
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.classicScore.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1644
 * 
 *     @classicScore.setter
 *     def classicScore(PartialDecomposition self, double score):             # <<<<<<<<<<<<<<
 *         """set the classic score.
 *         """
 */

/* Python wrapper */
static int __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_12classicScore_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_score); /*proto*/
static int __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_12classicScore_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_score) {
  double __pyx_v_score;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_score); {
    __pyx_v_score = __pyx_PyFloat_AsDouble(__pyx_arg_score); if (unlikely((__pyx_v_score == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 1644, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.classicScore.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_12classicScore_2__set__(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((double)__pyx_v_score));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_12classicScore_2__set__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, double __pyx_v_score) {
  double __pyx_v_cpp_score;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "src/pygcgopt/decomposition.pxi":1647
 *         """set the classic score.
 *         """
 *         cdef double cpp_score = score             # <<<<<<<<<<<<<<
 *         self.thisptr.setClassicScore(cpp_score)
 * 
 */
  __pyx_v_cpp_score = __pyx_v_score;

  /* "src/pygcgopt/decomposition.pxi":1648
 *         """
 *         cdef double cpp_score = score
 *         self.thisptr.setClassicScore(cpp_score)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  try {
    __pyx_v_self->thisptr->setClassicScore(__pyx_v_cpp_score);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1648, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":1644
 * 
 *     @classicScore.setter
 *     def classicScore(PartialDecomposition self, double score):             # <<<<<<<<<<<<<<
 *         """set the classic score.
 *         """
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.classicScore.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1651
 * 
 *     @property
 *     def borderAreaScore(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """gets the border area score
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_15borderAreaScore_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_15borderAreaScore_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_15borderAreaScore___get__(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_15borderAreaScore___get__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  double __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "src/pygcgopt/decomposition.pxi":1657
 *         :return: border area score.
 *         """
 *         cdef double result = self.thisptr.getBorderAreaScore()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getBorderAreaScore();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1657, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":1658
 *         """
 *         cdef double result = self.thisptr.getBorderAreaScore()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @borderAreaScore.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":1651
 * 
 *     @property
 *     def borderAreaScore(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """gets the border area score
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.borderAreaScore.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1661
 * 
 *     @borderAreaScore.setter
 *     def borderAreaScore(PartialDecomposition self, double score):             # <<<<<<<<<<<<<<
 *         """set the border area score.
 *         """
 */

/* Python wrapper */
static int __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_15borderAreaScore_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_score); /*proto*/
static int __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_15borderAreaScore_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_score) {
  double __pyx_v_score;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_score); {
    __pyx_v_score = __pyx_PyFloat_AsDouble(__pyx_arg_score); if (unlikely((__pyx_v_score == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 1661, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.borderAreaScore.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_15borderAreaScore_2__set__(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((double)__pyx_v_score));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_15borderAreaScore_2__set__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, double __pyx_v_score) {
  double __pyx_v_cpp_score;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "src/pygcgopt/decomposition.pxi":1664
 *         """set the border area score.
 *         """
 *         cdef double cpp_score = score             # <<<<<<<<<<<<<<
 *         self.thisptr.setBorderAreaScore(cpp_score)
 * 
 */
  __pyx_v_cpp_score = __pyx_v_score;

  /* "src/pygcgopt/decomposition.pxi":1665
 *         """
 *         cdef double cpp_score = score
 *         self.thisptr.setBorderAreaScore(cpp_score)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  try {
    __pyx_v_self->thisptr->setBorderAreaScore(__pyx_v_cpp_score);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1665, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":1661
 * 
 *     @borderAreaScore.setter
 *     def borderAreaScore(PartialDecomposition self, double score):             # <<<<<<<<<<<<<<
 *         """set the border area score.
 *         """
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.borderAreaScore.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1668
 * 
 *     @property
 *     def maxWhiteScore(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """gets the maximum white area score
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_13maxWhiteScore_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_13maxWhiteScore_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_13maxWhiteScore___get__(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_13maxWhiteScore___get__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  double __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "src/pygcgopt/decomposition.pxi":1675
 *         :return: maximum  white area score
 *         """
 *         cdef double result = self.thisptr.getMaxWhiteScore()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getMaxWhiteScore();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1675, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":1676
 *         """
 *         cdef double result = self.thisptr.getMaxWhiteScore()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @maxWhiteScore.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":1668
 * 
 *     @property
 *     def maxWhiteScore(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """gets the maximum white area score
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.maxWhiteScore.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1679
 * 
 *     @maxWhiteScore.setter
 *     def maxWhiteScore(PartialDecomposition self, double score):             # <<<<<<<<<<<<<<
 *         """set the maximum white area score.
 *         """
 */

/* Python wrapper */
static int __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_13maxWhiteScore_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_score); /*proto*/
static int __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_13maxWhiteScore_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_score) {
  double __pyx_v_score;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_score); {
    __pyx_v_score = __pyx_PyFloat_AsDouble(__pyx_arg_score); if (unlikely((__pyx_v_score == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 1679, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.maxWhiteScore.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_13maxWhiteScore_2__set__(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((double)__pyx_v_score));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_13maxWhiteScore_2__set__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, double __pyx_v_score) {
  double __pyx_v_cpp_score;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "src/pygcgopt/decomposition.pxi":1682
 *         """set the maximum white area score.
 *         """
 *         cdef double cpp_score = score             # <<<<<<<<<<<<<<
 *         self.thisptr.setMaxWhiteScore(cpp_score)
 * 
 */
  __pyx_v_cpp_score = __pyx_v_score;

  /* "src/pygcgopt/decomposition.pxi":1683
 *         """
 *         cdef double cpp_score = score
 *         self.thisptr.setMaxWhiteScore(cpp_score)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  try {
    __pyx_v_self->thisptr->setMaxWhiteScore(__pyx_v_cpp_score);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1683, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":1679
 * 
 *     @maxWhiteScore.setter
 *     def maxWhiteScore(PartialDecomposition self, double score):             # <<<<<<<<<<<<<<
 *         """set the maximum white area score.
 *         """
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.maxWhiteScore.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1686
 * 
 *     @property
 *     def maxForWhiteScore(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """gets the maximum foreseeing white area score
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_16maxForWhiteScore_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_16maxForWhiteScore_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_16maxForWhiteScore___get__(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_16maxForWhiteScore___get__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  double __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "src/pygcgopt/decomposition.pxi":1692
 *         :return: maximum foreseeing white area score
 *         """
 *         cdef double result = self.thisptr.getMaxForWhiteScore()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getMaxForWhiteScore();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1692, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":1693
 *         """
 *         cdef double result = self.thisptr.getMaxForWhiteScore()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @maxForWhiteScore.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1693, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":1686
 * 
 *     @property
 *     def maxForWhiteScore(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """gets the maximum foreseeing white area score
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.maxForWhiteScore.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1696
 * 
 *     @maxForWhiteScore.setter
 *     def maxForWhiteScore(PartialDecomposition self, double score):             # <<<<<<<<<<<<<<
 *         """set the maximum foreseeing white area score.
 *         """
 */

/* Python wrapper */
static int __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_16maxForWhiteScore_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_score); /*proto*/
static int __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_16maxForWhiteScore_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_score) {
  double __pyx_v_score;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_score); {
    __pyx_v_score = __pyx_PyFloat_AsDouble(__pyx_arg_score); if (unlikely((__pyx_v_score == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 1696, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.maxForWhiteScore.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_16maxForWhiteScore_2__set__(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((double)__pyx_v_score));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_16maxForWhiteScore_2__set__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, double __pyx_v_score) {
  double __pyx_v_cpp_score;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "src/pygcgopt/decomposition.pxi":1699
 *         """set the maximum foreseeing white area score.
 *         """
 *         cdef double cpp_score = score             # <<<<<<<<<<<<<<
 *         self.thisptr.setMaxForWhiteScore(cpp_score)
 * 
 */
  __pyx_v_cpp_score = __pyx_v_score;

  /* "src/pygcgopt/decomposition.pxi":1700
 *         """
 *         cdef double cpp_score = score
 *         self.thisptr.setMaxForWhiteScore(cpp_score)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  try {
    __pyx_v_self->thisptr->setMaxForWhiteScore(__pyx_v_cpp_score);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1700, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":1696
 * 
 *     @maxForWhiteScore.setter
 *     def maxForWhiteScore(PartialDecomposition self, double score):             # <<<<<<<<<<<<<<
 *         """set the maximum foreseeing white area score.
 *         """
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.maxForWhiteScore.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1703
 * 
 *     @property
 *     def partForWhiteScore(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """gets the setpartitioning maximum foreseeing white area score
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_17partForWhiteScore_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_17partForWhiteScore_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_17partForWhiteScore___get__(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_17partForWhiteScore___get__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  double __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "src/pygcgopt/decomposition.pxi":1709
 *         :return: setpartitioning maximum foreseeing white area score
 *         """
 *         cdef double result = self.thisptr.getSetPartForWhiteScore()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getSetPartForWhiteScore();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1709, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":1710
 *         """
 *         cdef double result = self.thisptr.getSetPartForWhiteScore()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @partForWhiteScore.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":1703
 * 
 *     @property
 *     def partForWhiteScore(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """gets the setpartitioning maximum foreseeing white area score
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.partForWhiteScore.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1713
 * 
 *     @partForWhiteScore.setter
 *     def partForWhiteScore(PartialDecomposition self, double score):             # <<<<<<<<<<<<<<
 *         """set the setpartitioning maximum foreseeing white area score.
 *         """
 */

/* Python wrapper */
static int __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_17partForWhiteScore_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_score); /*proto*/
static int __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_17partForWhiteScore_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_score) {
  double __pyx_v_score;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_score); {
    __pyx_v_score = __pyx_PyFloat_AsDouble(__pyx_arg_score); if (unlikely((__pyx_v_score == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 1713, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.partForWhiteScore.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_17partForWhiteScore_2__set__(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((double)__pyx_v_score));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_17partForWhiteScore_2__set__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, double __pyx_v_score) {
  double __pyx_v_cpp_score;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "src/pygcgopt/decomposition.pxi":1716
 *         """set the setpartitioning maximum foreseeing white area score.
 *         """
 *         cdef double cpp_score = score             # <<<<<<<<<<<<<<
 *         self.thisptr.setSetPartForWhiteScore(cpp_score)
 * 
 */
  __pyx_v_cpp_score = __pyx_v_score;

  /* "src/pygcgopt/decomposition.pxi":1717
 *         """
 *         cdef double cpp_score = score
 *         self.thisptr.setSetPartForWhiteScore(cpp_score)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  try {
    __pyx_v_self->thisptr->setSetPartForWhiteScore(__pyx_v_cpp_score);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1717, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":1713
 * 
 *     @partForWhiteScore.setter
 *     def partForWhiteScore(PartialDecomposition self, double score):             # <<<<<<<<<<<<<<
 *         """set the setpartitioning maximum foreseeing white area score.
 *         """
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.partForWhiteScore.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1720
 * 
 *     @property
 *     def maxForWhiteAggScore(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """gets the maximum foreseeing white area score with respect to aggregatable blocks
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_19maxForWhiteAggScore_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_19maxForWhiteAggScore_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_19maxForWhiteAggScore___get__(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_19maxForWhiteAggScore___get__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  double __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "src/pygcgopt/decomposition.pxi":1726
 *         :return: maximum foreseeing white area score with respect to aggregatable blocks
 *         """
 *         cdef double result = self.thisptr.getMaxForWhiteAggScore()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getMaxForWhiteAggScore();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1726, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":1727
 *         """
 *         cdef double result = self.thisptr.getMaxForWhiteAggScore()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @maxForWhiteAggScore.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":1720
 * 
 *     @property
 *     def maxForWhiteAggScore(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """gets the maximum foreseeing white area score with respect to aggregatable blocks
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.maxForWhiteAggScore.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1730
 * 
 *     @maxForWhiteAggScore.setter
 *     def maxForWhiteAggScore(PartialDecomposition self, double score):             # <<<<<<<<<<<<<<
 *         """set the maximum foreseeing white area score with respect to aggregatable blocks.
 *         """
 */

/* Python wrapper */
static int __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_19maxForWhiteAggScore_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_score); /*proto*/
static int __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_19maxForWhiteAggScore_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_score) {
  double __pyx_v_score;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_score); {
    __pyx_v_score = __pyx_PyFloat_AsDouble(__pyx_arg_score); if (unlikely((__pyx_v_score == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 1730, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.maxForWhiteAggScore.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_19maxForWhiteAggScore_2__set__(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((double)__pyx_v_score));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_19maxForWhiteAggScore_2__set__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, double __pyx_v_score) {
  double __pyx_v_cpp_score;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "src/pygcgopt/decomposition.pxi":1733
 *         """set the maximum foreseeing white area score with respect to aggregatable blocks.
 *         """
 *         cdef double cpp_score = score             # <<<<<<<<<<<<<<
 *         self.thisptr.setMaxForWhiteAggScore(cpp_score)
 * 
 */
  __pyx_v_cpp_score = __pyx_v_score;

  /* "src/pygcgopt/decomposition.pxi":1734
 *         """
 *         cdef double cpp_score = score
 *         self.thisptr.setMaxForWhiteAggScore(cpp_score)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  try {
    __pyx_v_self->thisptr->setMaxForWhiteAggScore(__pyx_v_cpp_score);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1734, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":1730
 * 
 *     @maxForWhiteAggScore.setter
 *     def maxForWhiteAggScore(PartialDecomposition self, double score):             # <<<<<<<<<<<<<<
 *         """set the maximum foreseeing white area score with respect to aggregatable blocks.
 *         """
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.maxForWhiteAggScore.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1737
 * 
 *     @property
 *     def partForWhiteAggScore(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """gets the setpartitioning maximum foreseeing white area score with respect to aggregateable
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_20partForWhiteAggScore_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_20partForWhiteAggScore_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_20partForWhiteAggScore___get__(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_20partForWhiteAggScore___get__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  double __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "src/pygcgopt/decomposition.pxi":1743
 *         :return: setpartitioning maximum foreseeing white area score with respect to aggregateable.
 *         """
 *         cdef double result = self.thisptr.getSetPartForWhiteAggScore()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getSetPartForWhiteAggScore();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1743, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":1744
 *         """
 *         cdef double result = self.thisptr.getSetPartForWhiteAggScore()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @partForWhiteAggScore.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1744, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":1737
 * 
 *     @property
 *     def partForWhiteAggScore(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """gets the setpartitioning maximum foreseeing white area score with respect to aggregateable
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.partForWhiteAggScore.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1747
 * 
 *     @partForWhiteAggScore.setter
 *     def partForWhiteAggScore(PartialDecomposition self, double score):             # <<<<<<<<<<<<<<
 *         """set the setpartitioning maximum foreseeing white area score with respect to aggregateable.
 *         """
 */

/* Python wrapper */
static int __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_20partForWhiteAggScore_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_score); /*proto*/
static int __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_20partForWhiteAggScore_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_score) {
  double __pyx_v_score;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_score); {
    __pyx_v_score = __pyx_PyFloat_AsDouble(__pyx_arg_score); if (unlikely((__pyx_v_score == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 1747, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.partForWhiteAggScore.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_20partForWhiteAggScore_2__set__(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((double)__pyx_v_score));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_20partForWhiteAggScore_2__set__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, double __pyx_v_score) {
  double __pyx_v_cpp_score;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "src/pygcgopt/decomposition.pxi":1750
 *         """set the setpartitioning maximum foreseeing white area score with respect to aggregateable.
 *         """
 *         cdef double cpp_score = score             # <<<<<<<<<<<<<<
 *         self.thisptr.setSetPartForWhiteAggScore(cpp_score)
 * 
 */
  __pyx_v_cpp_score = __pyx_v_score;

  /* "src/pygcgopt/decomposition.pxi":1751
 *         """
 *         cdef double cpp_score = score
 *         self.thisptr.setSetPartForWhiteAggScore(cpp_score)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  try {
    __pyx_v_self->thisptr->setSetPartForWhiteAggScore(__pyx_v_cpp_score);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1751, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":1747
 * 
 *     @partForWhiteAggScore.setter
 *     def partForWhiteAggScore(PartialDecomposition self, double score):             # <<<<<<<<<<<<<<
 *         """set the setpartitioning maximum foreseeing white area score with respect to aggregateable.
 *         """
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.partForWhiteAggScore.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1754
 * 
 *     @property
 *     def bendersScore(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """gets the benders score
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_12bendersScore_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_12bendersScore_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_12bendersScore___get__(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_12bendersScore___get__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  double __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "src/pygcgopt/decomposition.pxi":1760
 *         :return: benders score.
 *         """
 *         cdef double result = self.thisptr.getBendersScore()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getBendersScore();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1760, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":1761
 *         """
 *         cdef double result = self.thisptr.getBendersScore()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @bendersScore.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1761, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":1754
 * 
 *     @property
 *     def bendersScore(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """gets the benders score
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.bendersScore.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1764
 * 
 *     @bendersScore.setter
 *     def bendersScore(PartialDecomposition self, double score):             # <<<<<<<<<<<<<<
 *         """set the benders score.
 *         """
 */

/* Python wrapper */
static int __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_12bendersScore_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_score); /*proto*/
static int __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_12bendersScore_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_score) {
  double __pyx_v_score;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_score); {
    __pyx_v_score = __pyx_PyFloat_AsDouble(__pyx_arg_score); if (unlikely((__pyx_v_score == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 1764, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.bendersScore.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_12bendersScore_2__set__(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((double)__pyx_v_score));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_12bendersScore_2__set__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, double __pyx_v_score) {
  double __pyx_v_cpp_score;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "src/pygcgopt/decomposition.pxi":1767
 *         """set the benders score.
 *         """
 *         cdef double cpp_score = score             # <<<<<<<<<<<<<<
 *         self.thisptr.setBendersScore(cpp_score)
 * 
 */
  __pyx_v_cpp_score = __pyx_v_score;

  /* "src/pygcgopt/decomposition.pxi":1768
 *         """
 *         cdef double cpp_score = score
 *         self.thisptr.setBendersScore(cpp_score)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  try {
    __pyx_v_self->thisptr->setBendersScore(__pyx_v_cpp_score);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1768, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":1764
 * 
 *     @bendersScore.setter
 *     def bendersScore(PartialDecomposition self, double score):             # <<<<<<<<<<<<<<
 *         """set the benders score.
 *         """
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.bendersScore.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1771
 * 
 *     @property
 *     def strongDecompScore(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """gets the strong decomposition score
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_17strongDecompScore_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_17strongDecompScore_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_17strongDecompScore___get__(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_17strongDecompScore___get__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  double __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "src/pygcgopt/decomposition.pxi":1777
 *         :return: strong decomposition score.
 *         """
 *         cdef double result = self.thisptr.getStrongDecompScore()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getStrongDecompScore();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1777, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":1778
 *         """
 *         cdef double result = self.thisptr.getStrongDecompScore()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @strongDecompScore.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1778, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":1771
 * 
 *     @property
 *     def strongDecompScore(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """gets the strong decomposition score
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.strongDecompScore.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1781
 * 
 *     @strongDecompScore.setter
 *     def strongDecompScore(PartialDecomposition self, double score):             # <<<<<<<<<<<<<<
 *         """set the strong decomposition score.
 *         """
 */

/* Python wrapper */
static int __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_17strongDecompScore_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_score); /*proto*/
static int __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_17strongDecompScore_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_score) {
  double __pyx_v_score;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_score); {
    __pyx_v_score = __pyx_PyFloat_AsDouble(__pyx_arg_score); if (unlikely((__pyx_v_score == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 1781, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.strongDecompScore.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_17strongDecompScore_2__set__(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((double)__pyx_v_score));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_17strongDecompScore_2__set__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, double __pyx_v_score) {
  double __pyx_v_cpp_score;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "src/pygcgopt/decomposition.pxi":1784
 *         """set the strong decomposition score.
 *         """
 *         cdef double cpp_score = score             # <<<<<<<<<<<<<<
 *         self.thisptr.setStrongDecompScore(cpp_score)
 * 
 */
  __pyx_v_cpp_score = __pyx_v_score;

  /* "src/pygcgopt/decomposition.pxi":1785
 *         """
 *         cdef double cpp_score = score
 *         self.thisptr.setStrongDecompScore(cpp_score)             # <<<<<<<<<<<<<<
 * 
 *     def prepare(PartialDecomposition self):
 */
  try {
    __pyx_v_self->thisptr->setStrongDecompScore(__pyx_v_cpp_score);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1785, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":1781
 * 
 *     @strongDecompScore.setter
 *     def strongDecompScore(PartialDecomposition self, double score):             # <<<<<<<<<<<<<<
 *         """set the strong decomposition score.
 *         """
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.strongDecompScore.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1787
 *         self.thisptr.setStrongDecompScore(cpp_score)
 * 
 *     def prepare(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """sorts the partialdec and calculates a its implicit assignments, hashvalue and evaluation
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_299prepare(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_298prepare[] = "PartialDecomposition.prepare(self)\nsorts the partialdec and calculates a its implicit assignments, hashvalue and evaluation\n\n        :return: SCIP_OKAY if the result is consistent, SCIP_ERROR if there was an inconsistency.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_299prepare(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prepare (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_298prepare(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_298prepare(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("prepare", 0);

  /* "src/pygcgopt/decomposition.pxi":1792
 *         :return: SCIP_OKAY if the result is consistent, SCIP_ERROR if there was an inconsistency.
 *         """
 *         self.thisptr.prepare()             # <<<<<<<<<<<<<<
 * 
 *     def aggInfoCalculated(PartialDecomposition self):
 */
  try {
    __pyx_v_self->thisptr->prepare();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1792, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":1787
 *         self.thisptr.setStrongDecompScore(cpp_score)
 * 
 *     def prepare(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """sorts the partialdec and calculates a its implicit assignments, hashvalue and evaluation
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.prepare", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1794
 *         self.thisptr.prepare()
 * 
 *     def aggInfoCalculated(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Checks if the aggregation information was already calculated
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_301aggInfoCalculated(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_300aggInfoCalculated[] = "PartialDecomposition.aggInfoCalculated(self)\nChecks if the aggregation information was already calculated\n\n        :return: True iff the aggregation information was already calculated.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_301aggInfoCalculated(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("aggInfoCalculated (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_300aggInfoCalculated(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_300aggInfoCalculated(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  bool __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("aggInfoCalculated", 0);

  /* "src/pygcgopt/decomposition.pxi":1799
 *         :return: True iff the aggregation information was already calculated.
 *         """
 *         cdef bool result = self.thisptr.aggInfoCalculated()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->aggInfoCalculated();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1799, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":1800
 *         """
 *         cdef bool result = self.thisptr.aggInfoCalculated()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def calcAggregationInformation(PartialDecomposition self, bool ignoreDetectionLimits):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1800, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":1794
 *         self.thisptr.prepare()
 * 
 *     def aggInfoCalculated(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         """Checks if the aggregation information was already calculated
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.aggInfoCalculated", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1802
 *         return result
 * 
 *     def calcAggregationInformation(PartialDecomposition self, bool ignoreDetectionLimits):             # <<<<<<<<<<<<<<
 *         """computes if aggregation of sub problems is possible
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_303calcAggregationInformation(PyObject *__pyx_v_self, PyObject *__pyx_arg_ignoreDetectionLimits); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_302calcAggregationInformation[] = "PartialDecomposition.calcAggregationInformation(self, bool ignoreDetectionLimits)\ncomputes if aggregation of sub problems is possible\n\n        checks if aggregation of sub problems is possible and stores the corresponding aggregation information\n\n        :param ignoreDetectionLimits: Set to True if computation should ignore detection limits.\n\n        This parameter is ignored if the patched bliss version is not present.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_303calcAggregationInformation(PyObject *__pyx_v_self, PyObject *__pyx_arg_ignoreDetectionLimits) {
  bool __pyx_v_ignoreDetectionLimits;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcAggregationInformation (wrapper)", 0);
  assert(__pyx_arg_ignoreDetectionLimits); {
    __pyx_v_ignoreDetectionLimits = __Pyx_PyObject_IsTrue(__pyx_arg_ignoreDetectionLimits); if (unlikely((__pyx_v_ignoreDetectionLimits == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(2, 1802, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.calcAggregationInformation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_302calcAggregationInformation(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((bool)__pyx_v_ignoreDetectionLimits));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_302calcAggregationInformation(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, bool __pyx_v_ignoreDetectionLimits) {
  bool __pyx_v_cpp_ignoreDetectionLimits;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calcAggregationInformation", 0);

  /* "src/pygcgopt/decomposition.pxi":1811
 *         This parameter is ignored if the patched bliss version is not present.
 *         """
 *         cdef bool cpp_ignoreDetectionLimits = ignoreDetectionLimits             # <<<<<<<<<<<<<<
 *         self.thisptr.calcAggregationInformation(cpp_ignoreDetectionLimits)
 * 
 */
  __pyx_v_cpp_ignoreDetectionLimits = __pyx_v_ignoreDetectionLimits;

  /* "src/pygcgopt/decomposition.pxi":1812
 *         """
 *         cdef bool cpp_ignoreDetectionLimits = ignoreDetectionLimits
 *         self.thisptr.calcAggregationInformation(cpp_ignoreDetectionLimits)             # <<<<<<<<<<<<<<
 * 
 *     def getConssForBlocks(PartialDecomposition self):
 */
  try {
    __pyx_v_self->thisptr->calcAggregationInformation(__pyx_v_cpp_ignoreDetectionLimits);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1812, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":1802
 *         return result
 * 
 *     def calcAggregationInformation(PartialDecomposition self, bool ignoreDetectionLimits):             # <<<<<<<<<<<<<<
 *         """computes if aggregation of sub problems is possible
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.calcAggregationInformation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1814
 *         self.thisptr.calcAggregationInformation(cpp_ignoreDetectionLimits)
 * 
 *     def getConssForBlocks(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[int]] result = self.thisptr.getConssForBlocks()
 *         return result
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_305getConssForBlocks(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_304getConssForBlocks[] = "PartialDecomposition.getConssForBlocks(self)";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_305getConssForBlocks(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getConssForBlocks (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_304getConssForBlocks(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_304getConssForBlocks(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  std::vector<std::vector<int> >  __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<std::vector<int> >  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getConssForBlocks", 0);

  /* "src/pygcgopt/decomposition.pxi":1815
 * 
 *     def getConssForBlocks(PartialDecomposition self):
 *         cdef vector[vector[int]] result = self.thisptr.getConssForBlocks()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getConssForBlocks();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1815, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":1816
 *     def getConssForBlocks(PartialDecomposition self):
 *         cdef vector[vector[int]] result = self.thisptr.getConssForBlocks()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getTranslatedpartialdecid(PartialDecomposition self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1816, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":1814
 *         self.thisptr.calcAggregationInformation(cpp_ignoreDetectionLimits)
 * 
 *     def getConssForBlocks(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[int]] result = self.thisptr.getConssForBlocks()
 *         return result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getConssForBlocks", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1818
 *         return result
 * 
 *     def getTranslatedpartialdecid(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         cdef int result = self.thisptr.getTranslatedpartialdecid()
 *         return result
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_307getTranslatedpartialdecid(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_306getTranslatedpartialdecid[] = "PartialDecomposition.getTranslatedpartialdecid(self)";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_307getTranslatedpartialdecid(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getTranslatedpartialdecid (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_306getTranslatedpartialdecid(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_306getTranslatedpartialdecid(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getTranslatedpartialdecid", 0);

  /* "src/pygcgopt/decomposition.pxi":1819
 * 
 *     def getTranslatedpartialdecid(PartialDecomposition self):
 *         cdef int result = self.thisptr.getTranslatedpartialdecid()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getTranslatedpartialdecid();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1819, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":1820
 *     def getTranslatedpartialdecid(PartialDecomposition self):
 *         cdef int result = self.thisptr.getTranslatedpartialdecid()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def setTranslatedpartialdecid(PartialDecomposition self, int decid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1820, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":1818
 *         return result
 * 
 *     def getTranslatedpartialdecid(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         cdef int result = self.thisptr.getTranslatedpartialdecid()
 *         return result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getTranslatedpartialdecid", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1822
 *         return result
 * 
 *     def setTranslatedpartialdecid(PartialDecomposition self, int decid):             # <<<<<<<<<<<<<<
 *         cdef int cpp_decid = decid
 *         self.thisptr.setTranslatedpartialdecid(cpp_decid)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_309setTranslatedpartialdecid(PyObject *__pyx_v_self, PyObject *__pyx_arg_decid); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_308setTranslatedpartialdecid[] = "PartialDecomposition.setTranslatedpartialdecid(self, int decid)";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_309setTranslatedpartialdecid(PyObject *__pyx_v_self, PyObject *__pyx_arg_decid) {
  int __pyx_v_decid;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setTranslatedpartialdecid (wrapper)", 0);
  assert(__pyx_arg_decid); {
    __pyx_v_decid = __Pyx_PyInt_As_int(__pyx_arg_decid); if (unlikely((__pyx_v_decid == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 1822, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.setTranslatedpartialdecid", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_308setTranslatedpartialdecid(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((int)__pyx_v_decid));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_308setTranslatedpartialdecid(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, int __pyx_v_decid) {
  int __pyx_v_cpp_decid;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setTranslatedpartialdecid", 0);

  /* "src/pygcgopt/decomposition.pxi":1823
 * 
 *     def setTranslatedpartialdecid(PartialDecomposition self, int decid):
 *         cdef int cpp_decid = decid             # <<<<<<<<<<<<<<
 *         self.thisptr.setTranslatedpartialdecid(cpp_decid)
 * 
 */
  __pyx_v_cpp_decid = __pyx_v_decid;

  /* "src/pygcgopt/decomposition.pxi":1824
 *     def setTranslatedpartialdecid(PartialDecomposition self, int decid):
 *         cdef int cpp_decid = decid
 *         self.thisptr.setTranslatedpartialdecid(cpp_decid)             # <<<<<<<<<<<<<<
 * 
 *     def buildDecChainString(PartialDecomposition self, buffer):
 */
  try {
    __pyx_v_self->thisptr->setTranslatedpartialdecid(__pyx_v_cpp_decid);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1824, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":1822
 *         return result
 * 
 *     def setTranslatedpartialdecid(PartialDecomposition self, int decid):             # <<<<<<<<<<<<<<
 *         cdef int cpp_decid = decid
 *         self.thisptr.setTranslatedpartialdecid(cpp_decid)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.setTranslatedpartialdecid", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1826
 *         self.thisptr.setTranslatedpartialdecid(cpp_decid)
 * 
 *     def buildDecChainString(PartialDecomposition self, buffer):             # <<<<<<<<<<<<<<
 *         """creates a detector chain short string for this partialdec, is built from detector chain.
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_311buildDecChainString(PyObject *__pyx_v_self, PyObject *__pyx_v_buffer); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_310buildDecChainString[] = "PartialDecomposition.buildDecChainString(self, buffer)\ncreates a detector chain short string for this partialdec, is built from detector chain.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_311buildDecChainString(PyObject *__pyx_v_self, PyObject *__pyx_v_buffer) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("buildDecChainString (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_310buildDecChainString(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((PyObject *)__pyx_v_buffer));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_310buildDecChainString(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_buffer) {
  PyObject *__pyx_v_c_buffer = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("buildDecChainString", 0);

  /* "src/pygcgopt/decomposition.pxi":1829
 *         """creates a detector chain short string for this partialdec, is built from detector chain.
 *         """
 *         c_buffer = str_conversion(buffer)             # <<<<<<<<<<<<<<
 *         self.thisptr.buildDecChainString(c_buffer)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_str_conversion); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1829, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_buffer) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_buffer);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1829, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_c_buffer = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "src/pygcgopt/decomposition.pxi":1830
 *         """
 *         c_buffer = str_conversion(buffer)
 *         self.thisptr.buildDecChainString(c_buffer)             # <<<<<<<<<<<<<<
 * 
 *     # END AUTOGENERATED BLOCK
 */
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_c_buffer); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(2, 1830, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->buildDecChainString(__pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1830, __pyx_L1_error)
  }

  /* "src/pygcgopt/decomposition.pxi":1826
 *         self.thisptr.setTranslatedpartialdecid(cpp_decid)
 * 
 *     def buildDecChainString(PartialDecomposition self, buffer):             # <<<<<<<<<<<<<<
 *         """creates a detector chain short string for this partialdec, is built from detector chain.
 *         """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.buildDecChainString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_c_buffer);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1833
 * 
 *     # END AUTOGENERATED BLOCK
 *     def getVisuName(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         output = self.thisptr.getVisualizationName().decode('UTF-8')
 *         return output
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_313getVisuName(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_312getVisuName[] = "PartialDecomposition.getVisuName(self)";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_313getVisuName(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getVisuName (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_312getVisuName(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_312getVisuName(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  PyObject *__pyx_v_output = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getVisuName", 0);

  /* "src/pygcgopt/decomposition.pxi":1834
 *     # END AUTOGENERATED BLOCK
 *     def getVisuName(PartialDecomposition self):
 *         output = self.thisptr.getVisualizationName().decode('UTF-8')             # <<<<<<<<<<<<<<
 *         return output
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getVisualizationName();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1834, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_decode_cpp_string(__pyx_t_1, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_output = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "src/pygcgopt/decomposition.pxi":1835
 *     def getVisuName(PartialDecomposition self):
 *         output = self.thisptr.getVisualizationName().decode('UTF-8')
 *         return output             # <<<<<<<<<<<<<<
 * 
 *     def matrix(PartialDecomposition self, obj=False, bcoef=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_output);
  __pyx_r = __pyx_v_output;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":1833
 * 
 *     # END AUTOGENERATED BLOCK
 *     def getVisuName(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         output = self.thisptr.getVisualizationName().decode('UTF-8')
 *         return output
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.getVisuName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_output);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1837
 *         return output
 * 
 *     def matrix(PartialDecomposition self, obj=False, bcoef=False):             # <<<<<<<<<<<<<<
 *         cdef map[pair[int, int], double] mat = self.thisptr.writeNonzeroMatrix()
 *         dictionary = <dict>mat
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_315matrix(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_314matrix[] = "PartialDecomposition.matrix(self, obj=False, bcoef=False)";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_315matrix(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_obj = 0;
  PyObject *__pyx_v_bcoef = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("matrix (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_bcoef,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_False);
    values[1] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_obj);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bcoef);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "matrix") < 0)) __PYX_ERR(2, 1837, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_obj = values[0];
    __pyx_v_bcoef = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("matrix", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 1837, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.matrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_314matrix(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), __pyx_v_obj, __pyx_v_bcoef);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_314matrix(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_bcoef) {
  std::map<std::pair<int,int> ,double>  __pyx_v_mat;
  PyObject *__pyx_v_dictionary = NULL;
  PyObject *__pyx_v_X = NULL;
  PyObject *__pyx_v_Y = NULL;
  PyObject *__pyx_v_vals = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::map<std::pair<int,int> ,double>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("matrix", 0);

  /* "src/pygcgopt/decomposition.pxi":1838
 * 
 *     def matrix(PartialDecomposition self, obj=False, bcoef=False):
 *         cdef map[pair[int, int], double] mat = self.thisptr.writeNonzeroMatrix()             # <<<<<<<<<<<<<<
 *         dictionary = <dict>mat
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->writeNonzeroMatrix();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1838, __pyx_L1_error)
  }
  __pyx_v_mat = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":1839
 *     def matrix(PartialDecomposition self, obj=False, bcoef=False):
 *         cdef map[pair[int, int], double] mat = self.thisptr.writeNonzeroMatrix()
 *         dictionary = <dict>mat             # <<<<<<<<<<<<<<
 * 
 *         X = list()
 */
  __pyx_t_2 = __pyx_convert_map_to_py_std_3a__3a_pair_3c_int_2c_int_3e_______double(__pyx_v_mat); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(PyDict_CheckExact(__pyx_t_2))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(2, 1839, __pyx_L1_error)
  __pyx_t_3 = __pyx_t_2;
  __Pyx_INCREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_dictionary = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "src/pygcgopt/decomposition.pxi":1841
 *         dictionary = <dict>mat
 * 
 *         X = list()             # <<<<<<<<<<<<<<
 *         Y = list()
 *         vals = list()
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_X = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "src/pygcgopt/decomposition.pxi":1842
 * 
 *         X = list()
 *         Y = list()             # <<<<<<<<<<<<<<
 *         vals = list()
 *         for key, value in dictionary.items():
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_Y = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "src/pygcgopt/decomposition.pxi":1843
 *         X = list()
 *         Y = list()
 *         vals = list()             # <<<<<<<<<<<<<<
 *         for key, value in dictionary.items():
 *             if obj == True and bcoef == True:
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1843, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_vals = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "src/pygcgopt/decomposition.pxi":1844
 *         Y = list()
 *         vals = list()
 *         for key, value in dictionary.items():             # <<<<<<<<<<<<<<
 *             if obj == True and bcoef == True:
 *                 X.append(key[0])
 */
  __pyx_t_4 = 0;
  if (unlikely(__pyx_v_dictionary == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(2, 1844, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_dict_iterator(__pyx_v_dictionary, 1, __pyx_n_s_items, (&__pyx_t_5), (&__pyx_t_6)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __pyx_t_3 = __pyx_t_2;
  __pyx_t_2 = 0;
  while (1) {
    __pyx_t_8 = __Pyx_dict_iter_next(__pyx_t_3, __pyx_t_5, &__pyx_t_4, &__pyx_t_2, &__pyx_t_7, NULL, __pyx_t_6);
    if (unlikely(__pyx_t_8 == 0)) break;
    if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(2, 1844, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_2);
    __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "src/pygcgopt/decomposition.pxi":1845
 *         vals = list()
 *         for key, value in dictionary.items():
 *             if obj == True and bcoef == True:             # <<<<<<<<<<<<<<
 *                 X.append(key[0])
 *                 Y.append(key[1])
 */
    __pyx_t_7 = PyObject_RichCompare(__pyx_v_obj, Py_True, Py_EQ); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 1845, __pyx_L1_error)
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(2, 1845, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_10) {
    } else {
      __pyx_t_9 = __pyx_t_10;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_7 = PyObject_RichCompare(__pyx_v_bcoef, Py_True, Py_EQ); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 1845, __pyx_L1_error)
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(2, 1845, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_9 = __pyx_t_10;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_9) {

      /* "src/pygcgopt/decomposition.pxi":1846
 *         for key, value in dictionary.items():
 *             if obj == True and bcoef == True:
 *                 X.append(key[0])             # <<<<<<<<<<<<<<
 *                 Y.append(key[1])
 *                 vals.append(value)
 */
      __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_key, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 1846, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_X, __pyx_t_7); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(2, 1846, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "src/pygcgopt/decomposition.pxi":1847
 *             if obj == True and bcoef == True:
 *                 X.append(key[0])
 *                 Y.append(key[1])             # <<<<<<<<<<<<<<
 *                 vals.append(value)
 *             elif bcoef == True and obj == False:
 */
      __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_key, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 1847, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_Y, __pyx_t_7); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(2, 1847, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "src/pygcgopt/decomposition.pxi":1848
 *                 X.append(key[0])
 *                 Y.append(key[1])
 *                 vals.append(value)             # <<<<<<<<<<<<<<
 *             elif bcoef == True and obj == False:
 *                 if key[0] != -1:
 */
      __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_vals, __pyx_v_value); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(2, 1848, __pyx_L1_error)

      /* "src/pygcgopt/decomposition.pxi":1845
 *         vals = list()
 *         for key, value in dictionary.items():
 *             if obj == True and bcoef == True:             # <<<<<<<<<<<<<<
 *                 X.append(key[0])
 *                 Y.append(key[1])
 */
      goto __pyx_L5;
    }

    /* "src/pygcgopt/decomposition.pxi":1849
 *                 Y.append(key[1])
 *                 vals.append(value)
 *             elif bcoef == True and obj == False:             # <<<<<<<<<<<<<<
 *                 if key[0] != -1:
 *                     X.append(key[0])
 */
    __pyx_t_7 = PyObject_RichCompare(__pyx_v_bcoef, Py_True, Py_EQ); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 1849, __pyx_L1_error)
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(2, 1849, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_10) {
    } else {
      __pyx_t_9 = __pyx_t_10;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_7 = PyObject_RichCompare(__pyx_v_obj, Py_False, Py_EQ); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 1849, __pyx_L1_error)
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(2, 1849, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_9 = __pyx_t_10;
    __pyx_L8_bool_binop_done:;
    if (__pyx_t_9) {

      /* "src/pygcgopt/decomposition.pxi":1850
 *                 vals.append(value)
 *             elif bcoef == True and obj == False:
 *                 if key[0] != -1:             # <<<<<<<<<<<<<<
 *                     X.append(key[0])
 *                     Y.append(key[1])
 */
      __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_key, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 1850, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_2 = __Pyx_PyInt_NeObjC(__pyx_t_7, __pyx_int_neg_1, -1L, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1850, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(2, 1850, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__pyx_t_9) {

        /* "src/pygcgopt/decomposition.pxi":1851
 *             elif bcoef == True and obj == False:
 *                 if key[0] != -1:
 *                     X.append(key[0])             # <<<<<<<<<<<<<<
 *                     Y.append(key[1])
 *                     vals.append(value)
 */
        __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_key, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1851, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_X, __pyx_t_2); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(2, 1851, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "src/pygcgopt/decomposition.pxi":1852
 *                 if key[0] != -1:
 *                     X.append(key[0])
 *                     Y.append(key[1])             # <<<<<<<<<<<<<<
 *                     vals.append(value)
 *             elif obj == True and bcoef == False:
 */
        __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_key, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1852, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_Y, __pyx_t_2); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(2, 1852, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "src/pygcgopt/decomposition.pxi":1853
 *                     X.append(key[0])
 *                     Y.append(key[1])
 *                     vals.append(value)             # <<<<<<<<<<<<<<
 *             elif obj == True and bcoef == False:
 *                 if key[1] != self.getNVars() and key[1] != -1:
 */
        __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_vals, __pyx_v_value); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(2, 1853, __pyx_L1_error)

        /* "src/pygcgopt/decomposition.pxi":1850
 *                 vals.append(value)
 *             elif bcoef == True and obj == False:
 *                 if key[0] != -1:             # <<<<<<<<<<<<<<
 *                     X.append(key[0])
 *                     Y.append(key[1])
 */
      }

      /* "src/pygcgopt/decomposition.pxi":1849
 *                 Y.append(key[1])
 *                 vals.append(value)
 *             elif bcoef == True and obj == False:             # <<<<<<<<<<<<<<
 *                 if key[0] != -1:
 *                     X.append(key[0])
 */
      goto __pyx_L5;
    }

    /* "src/pygcgopt/decomposition.pxi":1854
 *                     Y.append(key[1])
 *                     vals.append(value)
 *             elif obj == True and bcoef == False:             # <<<<<<<<<<<<<<
 *                 if key[1] != self.getNVars() and key[1] != -1:
 *                     X.append(key[0])
 */
    __pyx_t_2 = PyObject_RichCompare(__pyx_v_obj, Py_True, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1854, __pyx_L1_error)
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(2, 1854, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_10) {
    } else {
      __pyx_t_9 = __pyx_t_10;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = PyObject_RichCompare(__pyx_v_bcoef, Py_False, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1854, __pyx_L1_error)
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(2, 1854, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_9 = __pyx_t_10;
    __pyx_L11_bool_binop_done:;
    if (__pyx_t_9) {

      /* "src/pygcgopt/decomposition.pxi":1855
 *                     vals.append(value)
 *             elif obj == True and bcoef == False:
 *                 if key[1] != self.getNVars() and key[1] != -1:             # <<<<<<<<<<<<<<
 *                     X.append(key[0])
 *                     Y.append(key[1])
 */
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_key, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1855, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_12 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNVars); if (unlikely(!__pyx_t_12)) __PYX_ERR(2, 1855, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_13 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_12))) {
        __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_12);
        if (likely(__pyx_t_13)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
          __Pyx_INCREF(__pyx_t_13);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_12, function);
        }
      }
      __pyx_t_7 = (__pyx_t_13) ? __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_t_13) : __Pyx_PyObject_CallNoArg(__pyx_t_12);
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 1855, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_12 = PyObject_RichCompare(__pyx_t_2, __pyx_t_7, Py_NE); __Pyx_XGOTREF(__pyx_t_12); if (unlikely(!__pyx_t_12)) __PYX_ERR(2, 1855, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_12); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(2, 1855, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      if (__pyx_t_10) {
      } else {
        __pyx_t_9 = __pyx_t_10;
        goto __pyx_L14_bool_binop_done;
      }
      __pyx_t_12 = __Pyx_GetItemInt(__pyx_v_key, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_12)) __PYX_ERR(2, 1855, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_7 = __Pyx_PyInt_NeObjC(__pyx_t_12, __pyx_int_neg_1, -1L, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 1855, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(2, 1855, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_9 = __pyx_t_10;
      __pyx_L14_bool_binop_done:;
      if (__pyx_t_9) {

        /* "src/pygcgopt/decomposition.pxi":1856
 *             elif obj == True and bcoef == False:
 *                 if key[1] != self.getNVars() and key[1] != -1:
 *                     X.append(key[0])             # <<<<<<<<<<<<<<
 *                     Y.append(key[1])
 *                     vals.append(value)
 */
        __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_key, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 1856, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_X, __pyx_t_7); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(2, 1856, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "src/pygcgopt/decomposition.pxi":1857
 *                 if key[1] != self.getNVars() and key[1] != -1:
 *                     X.append(key[0])
 *                     Y.append(key[1])             # <<<<<<<<<<<<<<
 *                     vals.append(value)
 *             else:
 */
        __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_key, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 1857, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_Y, __pyx_t_7); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(2, 1857, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "src/pygcgopt/decomposition.pxi":1858
 *                     X.append(key[0])
 *                     Y.append(key[1])
 *                     vals.append(value)             # <<<<<<<<<<<<<<
 *             else:
 *                 if key[0] != -1 and key[1] != self.getNVars() and key[1] != -1:
 */
        __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_vals, __pyx_v_value); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(2, 1858, __pyx_L1_error)

        /* "src/pygcgopt/decomposition.pxi":1855
 *                     vals.append(value)
 *             elif obj == True and bcoef == False:
 *                 if key[1] != self.getNVars() and key[1] != -1:             # <<<<<<<<<<<<<<
 *                     X.append(key[0])
 *                     Y.append(key[1])
 */
      }

      /* "src/pygcgopt/decomposition.pxi":1854
 *                     Y.append(key[1])
 *                     vals.append(value)
 *             elif obj == True and bcoef == False:             # <<<<<<<<<<<<<<
 *                 if key[1] != self.getNVars() and key[1] != -1:
 *                     X.append(key[0])
 */
      goto __pyx_L5;
    }

    /* "src/pygcgopt/decomposition.pxi":1860
 *                     vals.append(value)
 *             else:
 *                 if key[0] != -1 and key[1] != self.getNVars() and key[1] != -1:             # <<<<<<<<<<<<<<
 *                     X.append(key[0])
 *                     Y.append(key[1])
 */
    /*else*/ {
      __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_key, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 1860, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_12 = __Pyx_PyInt_NeObjC(__pyx_t_7, __pyx_int_neg_1, -1L, 0); if (unlikely(!__pyx_t_12)) __PYX_ERR(2, 1860, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_12); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(2, 1860, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      if (__pyx_t_10) {
      } else {
        __pyx_t_9 = __pyx_t_10;
        goto __pyx_L17_bool_binop_done;
      }
      __pyx_t_12 = __Pyx_GetItemInt(__pyx_v_key, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_12)) __PYX_ERR(2, 1860, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNVars); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1860, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_13 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_13)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_13);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      __pyx_t_7 = (__pyx_t_13) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_13) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 1860, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyObject_RichCompare(__pyx_t_12, __pyx_t_7, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1860, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(2, 1860, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__pyx_t_10) {
      } else {
        __pyx_t_9 = __pyx_t_10;
        goto __pyx_L17_bool_binop_done;
      }
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_key, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1860, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = __Pyx_PyInt_NeObjC(__pyx_t_2, __pyx_int_neg_1, -1L, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 1860, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(2, 1860, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_9 = __pyx_t_10;
      __pyx_L17_bool_binop_done:;
      if (__pyx_t_9) {

        /* "src/pygcgopt/decomposition.pxi":1861
 *             else:
 *                 if key[0] != -1 and key[1] != self.getNVars() and key[1] != -1:
 *                     X.append(key[0])             # <<<<<<<<<<<<<<
 *                     Y.append(key[1])
 *                     vals.append(value)
 */
        __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_key, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 1861, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_X, __pyx_t_7); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(2, 1861, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "src/pygcgopt/decomposition.pxi":1862
 *                 if key[0] != -1 and key[1] != self.getNVars() and key[1] != -1:
 *                     X.append(key[0])
 *                     Y.append(key[1])             # <<<<<<<<<<<<<<
 *                     vals.append(value)
 *         return X, Y, vals
 */
        __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_key, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 1862, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_Y, __pyx_t_7); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(2, 1862, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "src/pygcgopt/decomposition.pxi":1863
 *                     X.append(key[0])
 *                     Y.append(key[1])
 *                     vals.append(value)             # <<<<<<<<<<<<<<
 *         return X, Y, vals
 * 
 */
        __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_vals, __pyx_v_value); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(2, 1863, __pyx_L1_error)

        /* "src/pygcgopt/decomposition.pxi":1860
 *                     vals.append(value)
 *             else:
 *                 if key[0] != -1 and key[1] != self.getNVars() and key[1] != -1:             # <<<<<<<<<<<<<<
 *                     X.append(key[0])
 *                     Y.append(key[1])
 */
      }
    }
    __pyx_L5:;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/pygcgopt/decomposition.pxi":1864
 *                     Y.append(key[1])
 *                     vals.append(value)
 *         return X, Y, vals             # <<<<<<<<<<<<<<
 * 
 *     def uniqueMatrixValues(PartialDecomposition self, obj=False, bcoef=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1864, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_X);
  __Pyx_GIVEREF(__pyx_v_X);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_X);
  __Pyx_INCREF(__pyx_v_Y);
  __Pyx_GIVEREF(__pyx_v_Y);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_Y);
  __Pyx_INCREF(__pyx_v_vals);
  __Pyx_GIVEREF(__pyx_v_vals);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_vals);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":1837
 *         return output
 * 
 *     def matrix(PartialDecomposition self, obj=False, bcoef=False):             # <<<<<<<<<<<<<<
 *         cdef map[pair[int, int], double] mat = self.thisptr.writeNonzeroMatrix()
 *         dictionary = <dict>mat
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.matrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_dictionary);
  __Pyx_XDECREF(__pyx_v_X);
  __Pyx_XDECREF(__pyx_v_Y);
  __Pyx_XDECREF(__pyx_v_vals);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1866
 *         return X, Y, vals
 * 
 *     def uniqueMatrixValues(PartialDecomposition self, obj=False, bcoef=False):             # <<<<<<<<<<<<<<
 *         _, _, matrix = self.matrix(obj=obj, bcoef=bcoef)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_317uniqueMatrixValues(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_316uniqueMatrixValues[] = "PartialDecomposition.uniqueMatrixValues(self, obj=False, bcoef=False)";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_317uniqueMatrixValues(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_obj = 0;
  PyObject *__pyx_v_bcoef = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("uniqueMatrixValues (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_bcoef,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_False);
    values[1] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_obj);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bcoef);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "uniqueMatrixValues") < 0)) __PYX_ERR(2, 1866, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_obj = values[0];
    __pyx_v_bcoef = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("uniqueMatrixValues", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 1866, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.uniqueMatrixValues", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_316uniqueMatrixValues(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), __pyx_v_obj, __pyx_v_bcoef);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_316uniqueMatrixValues(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_bcoef) {
  CYTHON_UNUSED PyObject *__pyx_v__ = NULL;
  PyObject *__pyx_v_matrix = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("uniqueMatrixValues", 0);

  /* "src/pygcgopt/decomposition.pxi":1867
 * 
 *     def uniqueMatrixValues(PartialDecomposition self, obj=False, bcoef=False):
 *         _, _, matrix = self.matrix(obj=obj, bcoef=bcoef)             # <<<<<<<<<<<<<<
 * 
 *         return set(matrix)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_matrix); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1867, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1867, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_obj, __pyx_v_obj) < 0) __PYX_ERR(2, 1867, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_bcoef, __pyx_v_bcoef) < 0) __PYX_ERR(2, 1867, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1867, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
    PyObject* sequence = __pyx_t_3;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(2, 1867, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_1 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1867, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1867, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 1867, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_5 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 1867, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_1 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 2; __pyx_t_4 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_4)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 3) < 0) __PYX_ERR(2, 1867, __pyx_L1_error)
    __pyx_t_6 = NULL;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(2, 1867, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v__ = __pyx_t_2;
  __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v__, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_matrix = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "src/pygcgopt/decomposition.pxi":1869
 *         _, _, matrix = self.matrix(obj=obj, bcoef=bcoef)
 * 
 *         return set(matrix)             # <<<<<<<<<<<<<<
 * 
 *     def matrixMIPLIBConsType(PartialDecomposition self, obj=False, bcoef=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PySet_New(__pyx_v_matrix); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1869, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":1866
 *         return X, Y, vals
 * 
 *     def uniqueMatrixValues(PartialDecomposition self, obj=False, bcoef=False):             # <<<<<<<<<<<<<<
 *         _, _, matrix = self.matrix(obj=obj, bcoef=bcoef)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.uniqueMatrixValues", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v__);
  __Pyx_XDECREF(__pyx_v_matrix);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1871
 *         return set(matrix)
 * 
 *     def matrixMIPLIBConsType(PartialDecomposition self, obj=False, bcoef=False):             # <<<<<<<<<<<<<<
 *         cdef map[pair[int, int], int] mat = self.thisptr.writeMIPLIBConsTypeMatrix()
 *         dictionary = <dict>mat
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_319matrixMIPLIBConsType(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_318matrixMIPLIBConsType[] = "PartialDecomposition.matrixMIPLIBConsType(self, obj=False, bcoef=False)";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_319matrixMIPLIBConsType(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_obj = 0;
  PyObject *__pyx_v_bcoef = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("matrixMIPLIBConsType (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_bcoef,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_False);
    values[1] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_obj);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bcoef);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "matrixMIPLIBConsType") < 0)) __PYX_ERR(2, 1871, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_obj = values[0];
    __pyx_v_bcoef = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("matrixMIPLIBConsType", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 1871, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.matrixMIPLIBConsType", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_318matrixMIPLIBConsType(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), __pyx_v_obj, __pyx_v_bcoef);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_318matrixMIPLIBConsType(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_bcoef) {
  std::map<std::pair<int,int> ,int>  __pyx_v_mat;
  PyObject *__pyx_v_dictionary = NULL;
  PyObject *__pyx_v_X = NULL;
  PyObject *__pyx_v_Y = NULL;
  PyObject *__pyx_v_vals = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::map<std::pair<int,int> ,int>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("matrixMIPLIBConsType", 0);

  /* "src/pygcgopt/decomposition.pxi":1872
 * 
 *     def matrixMIPLIBConsType(PartialDecomposition self, obj=False, bcoef=False):
 *         cdef map[pair[int, int], int] mat = self.thisptr.writeMIPLIBConsTypeMatrix()             # <<<<<<<<<<<<<<
 *         dictionary = <dict>mat
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->writeMIPLIBConsTypeMatrix();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1872, __pyx_L1_error)
  }
  __pyx_v_mat = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":1873
 *     def matrixMIPLIBConsType(PartialDecomposition self, obj=False, bcoef=False):
 *         cdef map[pair[int, int], int] mat = self.thisptr.writeMIPLIBConsTypeMatrix()
 *         dictionary = <dict>mat             # <<<<<<<<<<<<<<
 * 
 *         X = list()
 */
  __pyx_t_2 = __pyx_convert_map_to_py_std_3a__3a_pair_3c_int_2c_int_3e_______int(__pyx_v_mat); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1873, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(PyDict_CheckExact(__pyx_t_2))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(2, 1873, __pyx_L1_error)
  __pyx_t_3 = __pyx_t_2;
  __Pyx_INCREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_dictionary = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "src/pygcgopt/decomposition.pxi":1875
 *         dictionary = <dict>mat
 * 
 *         X = list()             # <<<<<<<<<<<<<<
 *         Y = list()
 *         vals = list()
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_X = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "src/pygcgopt/decomposition.pxi":1876
 * 
 *         X = list()
 *         Y = list()             # <<<<<<<<<<<<<<
 *         vals = list()
 *         for key, value in dictionary.items():
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1876, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_Y = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "src/pygcgopt/decomposition.pxi":1877
 *         X = list()
 *         Y = list()
 *         vals = list()             # <<<<<<<<<<<<<<
 *         for key, value in dictionary.items():
 *             if obj == True and bcoef == True:
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1877, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_vals = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "src/pygcgopt/decomposition.pxi":1878
 *         Y = list()
 *         vals = list()
 *         for key, value in dictionary.items():             # <<<<<<<<<<<<<<
 *             if obj == True and bcoef == True:
 *                 X.append(key[0])
 */
  __pyx_t_4 = 0;
  if (unlikely(__pyx_v_dictionary == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(2, 1878, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_dict_iterator(__pyx_v_dictionary, 1, __pyx_n_s_items, (&__pyx_t_5), (&__pyx_t_6)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1878, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __pyx_t_3 = __pyx_t_2;
  __pyx_t_2 = 0;
  while (1) {
    __pyx_t_8 = __Pyx_dict_iter_next(__pyx_t_3, __pyx_t_5, &__pyx_t_4, &__pyx_t_2, &__pyx_t_7, NULL, __pyx_t_6);
    if (unlikely(__pyx_t_8 == 0)) break;
    if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(2, 1878, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_2);
    __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "src/pygcgopt/decomposition.pxi":1879
 *         vals = list()
 *         for key, value in dictionary.items():
 *             if obj == True and bcoef == True:             # <<<<<<<<<<<<<<
 *                 X.append(key[0])
 *                 Y.append(key[1])
 */
    __pyx_t_7 = PyObject_RichCompare(__pyx_v_obj, Py_True, Py_EQ); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 1879, __pyx_L1_error)
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(2, 1879, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_10) {
    } else {
      __pyx_t_9 = __pyx_t_10;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_7 = PyObject_RichCompare(__pyx_v_bcoef, Py_True, Py_EQ); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 1879, __pyx_L1_error)
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(2, 1879, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_9 = __pyx_t_10;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_9) {

      /* "src/pygcgopt/decomposition.pxi":1880
 *         for key, value in dictionary.items():
 *             if obj == True and bcoef == True:
 *                 X.append(key[0])             # <<<<<<<<<<<<<<
 *                 Y.append(key[1])
 *                 vals.append(value)
 */
      __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_key, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 1880, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_X, __pyx_t_7); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(2, 1880, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "src/pygcgopt/decomposition.pxi":1881
 *             if obj == True and bcoef == True:
 *                 X.append(key[0])
 *                 Y.append(key[1])             # <<<<<<<<<<<<<<
 *                 vals.append(value)
 *             elif bcoef == True and obj == False:
 */
      __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_key, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 1881, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_Y, __pyx_t_7); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(2, 1881, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "src/pygcgopt/decomposition.pxi":1882
 *                 X.append(key[0])
 *                 Y.append(key[1])
 *                 vals.append(value)             # <<<<<<<<<<<<<<
 *             elif bcoef == True and obj == False:
 *                 if key[0] != -1:
 */
      __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_vals, __pyx_v_value); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(2, 1882, __pyx_L1_error)

      /* "src/pygcgopt/decomposition.pxi":1879
 *         vals = list()
 *         for key, value in dictionary.items():
 *             if obj == True and bcoef == True:             # <<<<<<<<<<<<<<
 *                 X.append(key[0])
 *                 Y.append(key[1])
 */
      goto __pyx_L5;
    }

    /* "src/pygcgopt/decomposition.pxi":1883
 *                 Y.append(key[1])
 *                 vals.append(value)
 *             elif bcoef == True and obj == False:             # <<<<<<<<<<<<<<
 *                 if key[0] != -1:
 *                     X.append(key[0])
 */
    __pyx_t_7 = PyObject_RichCompare(__pyx_v_bcoef, Py_True, Py_EQ); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 1883, __pyx_L1_error)
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(2, 1883, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_10) {
    } else {
      __pyx_t_9 = __pyx_t_10;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_7 = PyObject_RichCompare(__pyx_v_obj, Py_False, Py_EQ); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 1883, __pyx_L1_error)
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(2, 1883, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_9 = __pyx_t_10;
    __pyx_L8_bool_binop_done:;
    if (__pyx_t_9) {

      /* "src/pygcgopt/decomposition.pxi":1884
 *                 vals.append(value)
 *             elif bcoef == True and obj == False:
 *                 if key[0] != -1:             # <<<<<<<<<<<<<<
 *                     X.append(key[0])
 *                     Y.append(key[1])
 */
      __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_key, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 1884, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_2 = __Pyx_PyInt_NeObjC(__pyx_t_7, __pyx_int_neg_1, -1L, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1884, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(2, 1884, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__pyx_t_9) {

        /* "src/pygcgopt/decomposition.pxi":1885
 *             elif bcoef == True and obj == False:
 *                 if key[0] != -1:
 *                     X.append(key[0])             # <<<<<<<<<<<<<<
 *                     Y.append(key[1])
 *                     vals.append(value)
 */
        __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_key, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1885, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_X, __pyx_t_2); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(2, 1885, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "src/pygcgopt/decomposition.pxi":1886
 *                 if key[0] != -1:
 *                     X.append(key[0])
 *                     Y.append(key[1])             # <<<<<<<<<<<<<<
 *                     vals.append(value)
 *             elif obj == True and bcoef == False:
 */
        __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_key, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1886, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_Y, __pyx_t_2); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(2, 1886, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "src/pygcgopt/decomposition.pxi":1887
 *                     X.append(key[0])
 *                     Y.append(key[1])
 *                     vals.append(value)             # <<<<<<<<<<<<<<
 *             elif obj == True and bcoef == False:
 *                 if key[1] != self.getNVars() and key[1] != -1:
 */
        __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_vals, __pyx_v_value); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(2, 1887, __pyx_L1_error)

        /* "src/pygcgopt/decomposition.pxi":1884
 *                 vals.append(value)
 *             elif bcoef == True and obj == False:
 *                 if key[0] != -1:             # <<<<<<<<<<<<<<
 *                     X.append(key[0])
 *                     Y.append(key[1])
 */
      }

      /* "src/pygcgopt/decomposition.pxi":1883
 *                 Y.append(key[1])
 *                 vals.append(value)
 *             elif bcoef == True and obj == False:             # <<<<<<<<<<<<<<
 *                 if key[0] != -1:
 *                     X.append(key[0])
 */
      goto __pyx_L5;
    }

    /* "src/pygcgopt/decomposition.pxi":1888
 *                     Y.append(key[1])
 *                     vals.append(value)
 *             elif obj == True and bcoef == False:             # <<<<<<<<<<<<<<
 *                 if key[1] != self.getNVars() and key[1] != -1:
 *                     X.append(key[0])
 */
    __pyx_t_2 = PyObject_RichCompare(__pyx_v_obj, Py_True, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1888, __pyx_L1_error)
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(2, 1888, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_10) {
    } else {
      __pyx_t_9 = __pyx_t_10;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = PyObject_RichCompare(__pyx_v_bcoef, Py_False, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1888, __pyx_L1_error)
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(2, 1888, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_9 = __pyx_t_10;
    __pyx_L11_bool_binop_done:;
    if (__pyx_t_9) {

      /* "src/pygcgopt/decomposition.pxi":1889
 *                     vals.append(value)
 *             elif obj == True and bcoef == False:
 *                 if key[1] != self.getNVars() and key[1] != -1:             # <<<<<<<<<<<<<<
 *                     X.append(key[0])
 *                     Y.append(key[1])
 */
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_key, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1889, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_12 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNVars); if (unlikely(!__pyx_t_12)) __PYX_ERR(2, 1889, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_13 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_12))) {
        __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_12);
        if (likely(__pyx_t_13)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
          __Pyx_INCREF(__pyx_t_13);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_12, function);
        }
      }
      __pyx_t_7 = (__pyx_t_13) ? __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_t_13) : __Pyx_PyObject_CallNoArg(__pyx_t_12);
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 1889, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_12 = PyObject_RichCompare(__pyx_t_2, __pyx_t_7, Py_NE); __Pyx_XGOTREF(__pyx_t_12); if (unlikely(!__pyx_t_12)) __PYX_ERR(2, 1889, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_12); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(2, 1889, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      if (__pyx_t_10) {
      } else {
        __pyx_t_9 = __pyx_t_10;
        goto __pyx_L14_bool_binop_done;
      }
      __pyx_t_12 = __Pyx_GetItemInt(__pyx_v_key, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_12)) __PYX_ERR(2, 1889, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_7 = __Pyx_PyInt_NeObjC(__pyx_t_12, __pyx_int_neg_1, -1L, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 1889, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(2, 1889, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_9 = __pyx_t_10;
      __pyx_L14_bool_binop_done:;
      if (__pyx_t_9) {

        /* "src/pygcgopt/decomposition.pxi":1890
 *             elif obj == True and bcoef == False:
 *                 if key[1] != self.getNVars() and key[1] != -1:
 *                     X.append(key[0])             # <<<<<<<<<<<<<<
 *                     Y.append(key[1])
 *                     vals.append(value)
 */
        __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_key, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 1890, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_X, __pyx_t_7); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(2, 1890, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "src/pygcgopt/decomposition.pxi":1891
 *                 if key[1] != self.getNVars() and key[1] != -1:
 *                     X.append(key[0])
 *                     Y.append(key[1])             # <<<<<<<<<<<<<<
 *                     vals.append(value)
 *             else:
 */
        __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_key, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 1891, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_Y, __pyx_t_7); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(2, 1891, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "src/pygcgopt/decomposition.pxi":1892
 *                     X.append(key[0])
 *                     Y.append(key[1])
 *                     vals.append(value)             # <<<<<<<<<<<<<<
 *             else:
 *                 if key[0] != -1 and key[1] != self.getNVars() and key[1] != -1:
 */
        __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_vals, __pyx_v_value); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(2, 1892, __pyx_L1_error)

        /* "src/pygcgopt/decomposition.pxi":1889
 *                     vals.append(value)
 *             elif obj == True and bcoef == False:
 *                 if key[1] != self.getNVars() and key[1] != -1:             # <<<<<<<<<<<<<<
 *                     X.append(key[0])
 *                     Y.append(key[1])
 */
      }

      /* "src/pygcgopt/decomposition.pxi":1888
 *                     Y.append(key[1])
 *                     vals.append(value)
 *             elif obj == True and bcoef == False:             # <<<<<<<<<<<<<<
 *                 if key[1] != self.getNVars() and key[1] != -1:
 *                     X.append(key[0])
 */
      goto __pyx_L5;
    }

    /* "src/pygcgopt/decomposition.pxi":1894
 *                     vals.append(value)
 *             else:
 *                 if key[0] != -1 and key[1] != self.getNVars() and key[1] != -1:             # <<<<<<<<<<<<<<
 *                     X.append(key[0])
 *                     Y.append(key[1])
 */
    /*else*/ {
      __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_key, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 1894, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_12 = __Pyx_PyInt_NeObjC(__pyx_t_7, __pyx_int_neg_1, -1L, 0); if (unlikely(!__pyx_t_12)) __PYX_ERR(2, 1894, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_12); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(2, 1894, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      if (__pyx_t_10) {
      } else {
        __pyx_t_9 = __pyx_t_10;
        goto __pyx_L17_bool_binop_done;
      }
      __pyx_t_12 = __Pyx_GetItemInt(__pyx_v_key, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_12)) __PYX_ERR(2, 1894, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNVars); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1894, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_13 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_13)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_13);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      __pyx_t_7 = (__pyx_t_13) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_13) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 1894, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyObject_RichCompare(__pyx_t_12, __pyx_t_7, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1894, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(2, 1894, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__pyx_t_10) {
      } else {
        __pyx_t_9 = __pyx_t_10;
        goto __pyx_L17_bool_binop_done;
      }
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_key, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1894, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = __Pyx_PyInt_NeObjC(__pyx_t_2, __pyx_int_neg_1, -1L, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 1894, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(2, 1894, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_9 = __pyx_t_10;
      __pyx_L17_bool_binop_done:;
      if (__pyx_t_9) {

        /* "src/pygcgopt/decomposition.pxi":1895
 *             else:
 *                 if key[0] != -1 and key[1] != self.getNVars() and key[1] != -1:
 *                     X.append(key[0])             # <<<<<<<<<<<<<<
 *                     Y.append(key[1])
 *                     vals.append(value)
 */
        __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_key, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 1895, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_X, __pyx_t_7); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(2, 1895, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "src/pygcgopt/decomposition.pxi":1896
 *                 if key[0] != -1 and key[1] != self.getNVars() and key[1] != -1:
 *                     X.append(key[0])
 *                     Y.append(key[1])             # <<<<<<<<<<<<<<
 *                     vals.append(value)
 *         return X, Y, vals
 */
        __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_key, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 1896, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_Y, __pyx_t_7); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(2, 1896, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "src/pygcgopt/decomposition.pxi":1897
 *                     X.append(key[0])
 *                     Y.append(key[1])
 *                     vals.append(value)             # <<<<<<<<<<<<<<
 *         return X, Y, vals
 * 
 */
        __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_vals, __pyx_v_value); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(2, 1897, __pyx_L1_error)

        /* "src/pygcgopt/decomposition.pxi":1894
 *                     vals.append(value)
 *             else:
 *                 if key[0] != -1 and key[1] != self.getNVars() and key[1] != -1:             # <<<<<<<<<<<<<<
 *                     X.append(key[0])
 *                     Y.append(key[1])
 */
      }
    }
    __pyx_L5:;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/pygcgopt/decomposition.pxi":1898
 *                     Y.append(key[1])
 *                     vals.append(value)
 *         return X, Y, vals             # <<<<<<<<<<<<<<
 * 
 *     def uniqueMatrixMIPLIBConsType(PartialDecomposition self, obj=False, bcoef=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1898, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_X);
  __Pyx_GIVEREF(__pyx_v_X);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_X);
  __Pyx_INCREF(__pyx_v_Y);
  __Pyx_GIVEREF(__pyx_v_Y);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_Y);
  __Pyx_INCREF(__pyx_v_vals);
  __Pyx_GIVEREF(__pyx_v_vals);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_vals);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":1871
 *         return set(matrix)
 * 
 *     def matrixMIPLIBConsType(PartialDecomposition self, obj=False, bcoef=False):             # <<<<<<<<<<<<<<
 *         cdef map[pair[int, int], int] mat = self.thisptr.writeMIPLIBConsTypeMatrix()
 *         dictionary = <dict>mat
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.matrixMIPLIBConsType", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_dictionary);
  __Pyx_XDECREF(__pyx_v_X);
  __Pyx_XDECREF(__pyx_v_Y);
  __Pyx_XDECREF(__pyx_v_vals);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1900
 *         return X, Y, vals
 * 
 *     def uniqueMatrixMIPLIBConsType(PartialDecomposition self, obj=False, bcoef=False):             # <<<<<<<<<<<<<<
 *         _, _, matrix = self.matrixMIPLIBConsType(obj=obj, bcoef=bcoef)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_321uniqueMatrixMIPLIBConsType(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_320uniqueMatrixMIPLIBConsType[] = "PartialDecomposition.uniqueMatrixMIPLIBConsType(self, obj=False, bcoef=False)";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_321uniqueMatrixMIPLIBConsType(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_obj = 0;
  PyObject *__pyx_v_bcoef = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("uniqueMatrixMIPLIBConsType (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_bcoef,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_False);
    values[1] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_obj);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bcoef);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "uniqueMatrixMIPLIBConsType") < 0)) __PYX_ERR(2, 1900, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_obj = values[0];
    __pyx_v_bcoef = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("uniqueMatrixMIPLIBConsType", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 1900, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.uniqueMatrixMIPLIBConsType", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_320uniqueMatrixMIPLIBConsType(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), __pyx_v_obj, __pyx_v_bcoef);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_320uniqueMatrixMIPLIBConsType(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_bcoef) {
  CYTHON_UNUSED PyObject *__pyx_v__ = NULL;
  PyObject *__pyx_v_matrix = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("uniqueMatrixMIPLIBConsType", 0);

  /* "src/pygcgopt/decomposition.pxi":1901
 * 
 *     def uniqueMatrixMIPLIBConsType(PartialDecomposition self, obj=False, bcoef=False):
 *         _, _, matrix = self.matrixMIPLIBConsType(obj=obj, bcoef=bcoef)             # <<<<<<<<<<<<<<
 * 
 *         return set(matrix)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_matrixMIPLIBConsType); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1901, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1901, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_obj, __pyx_v_obj) < 0) __PYX_ERR(2, 1901, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_bcoef, __pyx_v_bcoef) < 0) __PYX_ERR(2, 1901, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1901, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
    PyObject* sequence = __pyx_t_3;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(2, 1901, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_1 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1901, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1901, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 1901, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_5 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 1901, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_1 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 2; __pyx_t_4 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_4)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 3) < 0) __PYX_ERR(2, 1901, __pyx_L1_error)
    __pyx_t_6 = NULL;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(2, 1901, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v__ = __pyx_t_2;
  __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v__, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_matrix = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "src/pygcgopt/decomposition.pxi":1903
 *         _, _, matrix = self.matrixMIPLIBConsType(obj=obj, bcoef=bcoef)
 * 
 *         return set(matrix)             # <<<<<<<<<<<<<<
 * 
 *     def matrixSCIPVarType(PartialDecomposition self, obj=False, bcoef=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PySet_New(__pyx_v_matrix); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1903, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":1900
 *         return X, Y, vals
 * 
 *     def uniqueMatrixMIPLIBConsType(PartialDecomposition self, obj=False, bcoef=False):             # <<<<<<<<<<<<<<
 *         _, _, matrix = self.matrixMIPLIBConsType(obj=obj, bcoef=bcoef)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.uniqueMatrixMIPLIBConsType", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v__);
  __Pyx_XDECREF(__pyx_v_matrix);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1905
 *         return set(matrix)
 * 
 *     def matrixSCIPVarType(PartialDecomposition self, obj=False, bcoef=False):             # <<<<<<<<<<<<<<
 *         cdef map[pair[int, int], int] mat = self.thisptr.writeSCIPVarTypeMatrix()
 *         dictionary = <dict>mat
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_323matrixSCIPVarType(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_322matrixSCIPVarType[] = "PartialDecomposition.matrixSCIPVarType(self, obj=False, bcoef=False)";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_323matrixSCIPVarType(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_obj = 0;
  PyObject *__pyx_v_bcoef = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("matrixSCIPVarType (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_bcoef,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_False);
    values[1] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_obj);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bcoef);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "matrixSCIPVarType") < 0)) __PYX_ERR(2, 1905, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_obj = values[0];
    __pyx_v_bcoef = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("matrixSCIPVarType", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 1905, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.matrixSCIPVarType", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_322matrixSCIPVarType(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), __pyx_v_obj, __pyx_v_bcoef);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_322matrixSCIPVarType(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_bcoef) {
  std::map<std::pair<int,int> ,int>  __pyx_v_mat;
  PyObject *__pyx_v_dictionary = NULL;
  PyObject *__pyx_v_X = NULL;
  PyObject *__pyx_v_Y = NULL;
  PyObject *__pyx_v_vals = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::map<std::pair<int,int> ,int>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("matrixSCIPVarType", 0);

  /* "src/pygcgopt/decomposition.pxi":1906
 * 
 *     def matrixSCIPVarType(PartialDecomposition self, obj=False, bcoef=False):
 *         cdef map[pair[int, int], int] mat = self.thisptr.writeSCIPVarTypeMatrix()             # <<<<<<<<<<<<<<
 *         dictionary = <dict>mat
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->writeSCIPVarTypeMatrix();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 1906, __pyx_L1_error)
  }
  __pyx_v_mat = __pyx_t_1;

  /* "src/pygcgopt/decomposition.pxi":1907
 *     def matrixSCIPVarType(PartialDecomposition self, obj=False, bcoef=False):
 *         cdef map[pair[int, int], int] mat = self.thisptr.writeSCIPVarTypeMatrix()
 *         dictionary = <dict>mat             # <<<<<<<<<<<<<<
 * 
 *         X = list()
 */
  __pyx_t_2 = __pyx_convert_map_to_py_std_3a__3a_pair_3c_int_2c_int_3e_______int(__pyx_v_mat); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1907, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(PyDict_CheckExact(__pyx_t_2))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(2, 1907, __pyx_L1_error)
  __pyx_t_3 = __pyx_t_2;
  __Pyx_INCREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_dictionary = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "src/pygcgopt/decomposition.pxi":1909
 *         dictionary = <dict>mat
 * 
 *         X = list()             # <<<<<<<<<<<<<<
 *         Y = list()
 *         vals = list()
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1909, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_X = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "src/pygcgopt/decomposition.pxi":1910
 * 
 *         X = list()
 *         Y = list()             # <<<<<<<<<<<<<<
 *         vals = list()
 *         for key, value in dictionary.items():
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1910, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_Y = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "src/pygcgopt/decomposition.pxi":1911
 *         X = list()
 *         Y = list()
 *         vals = list()             # <<<<<<<<<<<<<<
 *         for key, value in dictionary.items():
 *             if obj == True and bcoef == True:
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1911, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_vals = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "src/pygcgopt/decomposition.pxi":1912
 *         Y = list()
 *         vals = list()
 *         for key, value in dictionary.items():             # <<<<<<<<<<<<<<
 *             if obj == True and bcoef == True:
 *                 X.append(key[0])
 */
  __pyx_t_4 = 0;
  if (unlikely(__pyx_v_dictionary == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(2, 1912, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_dict_iterator(__pyx_v_dictionary, 1, __pyx_n_s_items, (&__pyx_t_5), (&__pyx_t_6)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __pyx_t_3 = __pyx_t_2;
  __pyx_t_2 = 0;
  while (1) {
    __pyx_t_8 = __Pyx_dict_iter_next(__pyx_t_3, __pyx_t_5, &__pyx_t_4, &__pyx_t_2, &__pyx_t_7, NULL, __pyx_t_6);
    if (unlikely(__pyx_t_8 == 0)) break;
    if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(2, 1912, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_2);
    __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "src/pygcgopt/decomposition.pxi":1913
 *         vals = list()
 *         for key, value in dictionary.items():
 *             if obj == True and bcoef == True:             # <<<<<<<<<<<<<<
 *                 X.append(key[0])
 *                 Y.append(key[1])
 */
    __pyx_t_7 = PyObject_RichCompare(__pyx_v_obj, Py_True, Py_EQ); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 1913, __pyx_L1_error)
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(2, 1913, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_10) {
    } else {
      __pyx_t_9 = __pyx_t_10;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_7 = PyObject_RichCompare(__pyx_v_bcoef, Py_True, Py_EQ); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 1913, __pyx_L1_error)
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(2, 1913, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_9 = __pyx_t_10;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_9) {

      /* "src/pygcgopt/decomposition.pxi":1914
 *         for key, value in dictionary.items():
 *             if obj == True and bcoef == True:
 *                 X.append(key[0])             # <<<<<<<<<<<<<<
 *                 Y.append(key[1])
 *                 vals.append(value)
 */
      __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_key, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 1914, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_X, __pyx_t_7); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(2, 1914, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "src/pygcgopt/decomposition.pxi":1915
 *             if obj == True and bcoef == True:
 *                 X.append(key[0])
 *                 Y.append(key[1])             # <<<<<<<<<<<<<<
 *                 vals.append(value)
 *             elif bcoef == True and obj == False:
 */
      __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_key, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 1915, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_Y, __pyx_t_7); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(2, 1915, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "src/pygcgopt/decomposition.pxi":1916
 *                 X.append(key[0])
 *                 Y.append(key[1])
 *                 vals.append(value)             # <<<<<<<<<<<<<<
 *             elif bcoef == True and obj == False:
 *                 if key[0] != -1:
 */
      __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_vals, __pyx_v_value); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(2, 1916, __pyx_L1_error)

      /* "src/pygcgopt/decomposition.pxi":1913
 *         vals = list()
 *         for key, value in dictionary.items():
 *             if obj == True and bcoef == True:             # <<<<<<<<<<<<<<
 *                 X.append(key[0])
 *                 Y.append(key[1])
 */
      goto __pyx_L5;
    }

    /* "src/pygcgopt/decomposition.pxi":1917
 *                 Y.append(key[1])
 *                 vals.append(value)
 *             elif bcoef == True and obj == False:             # <<<<<<<<<<<<<<
 *                 if key[0] != -1:
 *                     X.append(key[0])
 */
    __pyx_t_7 = PyObject_RichCompare(__pyx_v_bcoef, Py_True, Py_EQ); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 1917, __pyx_L1_error)
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(2, 1917, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_10) {
    } else {
      __pyx_t_9 = __pyx_t_10;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_7 = PyObject_RichCompare(__pyx_v_obj, Py_False, Py_EQ); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 1917, __pyx_L1_error)
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(2, 1917, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_9 = __pyx_t_10;
    __pyx_L8_bool_binop_done:;
    if (__pyx_t_9) {

      /* "src/pygcgopt/decomposition.pxi":1918
 *                 vals.append(value)
 *             elif bcoef == True and obj == False:
 *                 if key[0] != -1:             # <<<<<<<<<<<<<<
 *                     X.append(key[0])
 *                     Y.append(key[1])
 */
      __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_key, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 1918, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_2 = __Pyx_PyInt_NeObjC(__pyx_t_7, __pyx_int_neg_1, -1L, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1918, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(2, 1918, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__pyx_t_9) {

        /* "src/pygcgopt/decomposition.pxi":1919
 *             elif bcoef == True and obj == False:
 *                 if key[0] != -1:
 *                     X.append(key[0])             # <<<<<<<<<<<<<<
 *                     Y.append(key[1])
 *                     vals.append(value)
 */
        __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_key, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1919, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_X, __pyx_t_2); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(2, 1919, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "src/pygcgopt/decomposition.pxi":1920
 *                 if key[0] != -1:
 *                     X.append(key[0])
 *                     Y.append(key[1])             # <<<<<<<<<<<<<<
 *                     vals.append(value)
 *             elif obj == True and bcoef == False:
 */
        __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_key, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1920, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_Y, __pyx_t_2); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(2, 1920, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "src/pygcgopt/decomposition.pxi":1921
 *                     X.append(key[0])
 *                     Y.append(key[1])
 *                     vals.append(value)             # <<<<<<<<<<<<<<
 *             elif obj == True and bcoef == False:
 *                 if key[1] != self.getNVars() and key[1] != -1:
 */
        __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_vals, __pyx_v_value); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(2, 1921, __pyx_L1_error)

        /* "src/pygcgopt/decomposition.pxi":1918
 *                 vals.append(value)
 *             elif bcoef == True and obj == False:
 *                 if key[0] != -1:             # <<<<<<<<<<<<<<
 *                     X.append(key[0])
 *                     Y.append(key[1])
 */
      }

      /* "src/pygcgopt/decomposition.pxi":1917
 *                 Y.append(key[1])
 *                 vals.append(value)
 *             elif bcoef == True and obj == False:             # <<<<<<<<<<<<<<
 *                 if key[0] != -1:
 *                     X.append(key[0])
 */
      goto __pyx_L5;
    }

    /* "src/pygcgopt/decomposition.pxi":1922
 *                     Y.append(key[1])
 *                     vals.append(value)
 *             elif obj == True and bcoef == False:             # <<<<<<<<<<<<<<
 *                 if key[1] != self.getNVars() and key[1] != -1:
 *                     X.append(key[0])
 */
    __pyx_t_2 = PyObject_RichCompare(__pyx_v_obj, Py_True, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1922, __pyx_L1_error)
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(2, 1922, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_10) {
    } else {
      __pyx_t_9 = __pyx_t_10;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = PyObject_RichCompare(__pyx_v_bcoef, Py_False, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1922, __pyx_L1_error)
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(2, 1922, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_9 = __pyx_t_10;
    __pyx_L11_bool_binop_done:;
    if (__pyx_t_9) {

      /* "src/pygcgopt/decomposition.pxi":1923
 *                     vals.append(value)
 *             elif obj == True and bcoef == False:
 *                 if key[1] != self.getNVars() and key[1] != -1:             # <<<<<<<<<<<<<<
 *                     X.append(key[0])
 *                     Y.append(key[1])
 */
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_key, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1923, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_12 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNVars); if (unlikely(!__pyx_t_12)) __PYX_ERR(2, 1923, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_13 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_12))) {
        __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_12);
        if (likely(__pyx_t_13)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
          __Pyx_INCREF(__pyx_t_13);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_12, function);
        }
      }
      __pyx_t_7 = (__pyx_t_13) ? __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_t_13) : __Pyx_PyObject_CallNoArg(__pyx_t_12);
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 1923, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_12 = PyObject_RichCompare(__pyx_t_2, __pyx_t_7, Py_NE); __Pyx_XGOTREF(__pyx_t_12); if (unlikely(!__pyx_t_12)) __PYX_ERR(2, 1923, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_12); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(2, 1923, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      if (__pyx_t_10) {
      } else {
        __pyx_t_9 = __pyx_t_10;
        goto __pyx_L14_bool_binop_done;
      }
      __pyx_t_12 = __Pyx_GetItemInt(__pyx_v_key, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_12)) __PYX_ERR(2, 1923, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_7 = __Pyx_PyInt_NeObjC(__pyx_t_12, __pyx_int_neg_1, -1L, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 1923, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(2, 1923, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_9 = __pyx_t_10;
      __pyx_L14_bool_binop_done:;
      if (__pyx_t_9) {

        /* "src/pygcgopt/decomposition.pxi":1924
 *             elif obj == True and bcoef == False:
 *                 if key[1] != self.getNVars() and key[1] != -1:
 *                     X.append(key[0])             # <<<<<<<<<<<<<<
 *                     Y.append(key[1])
 *                     vals.append(value)
 */
        __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_key, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 1924, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_X, __pyx_t_7); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(2, 1924, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "src/pygcgopt/decomposition.pxi":1925
 *                 if key[1] != self.getNVars() and key[1] != -1:
 *                     X.append(key[0])
 *                     Y.append(key[1])             # <<<<<<<<<<<<<<
 *                     vals.append(value)
 *             else:
 */
        __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_key, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 1925, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_Y, __pyx_t_7); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(2, 1925, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "src/pygcgopt/decomposition.pxi":1926
 *                     X.append(key[0])
 *                     Y.append(key[1])
 *                     vals.append(value)             # <<<<<<<<<<<<<<
 *             else:
 *                 if key[0] != -1 and key[1] != self.getNVars() and key[1] != -1:
 */
        __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_vals, __pyx_v_value); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(2, 1926, __pyx_L1_error)

        /* "src/pygcgopt/decomposition.pxi":1923
 *                     vals.append(value)
 *             elif obj == True and bcoef == False:
 *                 if key[1] != self.getNVars() and key[1] != -1:             # <<<<<<<<<<<<<<
 *                     X.append(key[0])
 *                     Y.append(key[1])
 */
      }

      /* "src/pygcgopt/decomposition.pxi":1922
 *                     Y.append(key[1])
 *                     vals.append(value)
 *             elif obj == True and bcoef == False:             # <<<<<<<<<<<<<<
 *                 if key[1] != self.getNVars() and key[1] != -1:
 *                     X.append(key[0])
 */
      goto __pyx_L5;
    }

    /* "src/pygcgopt/decomposition.pxi":1928
 *                     vals.append(value)
 *             else:
 *                 if key[0] != -1 and key[1] != self.getNVars() and key[1] != -1:             # <<<<<<<<<<<<<<
 *                     X.append(key[0])
 *                     Y.append(key[1])
 */
    /*else*/ {
      __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_key, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 1928, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_12 = __Pyx_PyInt_NeObjC(__pyx_t_7, __pyx_int_neg_1, -1L, 0); if (unlikely(!__pyx_t_12)) __PYX_ERR(2, 1928, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_12); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(2, 1928, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      if (__pyx_t_10) {
      } else {
        __pyx_t_9 = __pyx_t_10;
        goto __pyx_L17_bool_binop_done;
      }
      __pyx_t_12 = __Pyx_GetItemInt(__pyx_v_key, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_12)) __PYX_ERR(2, 1928, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNVars); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1928, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_13 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_13)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_13);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      __pyx_t_7 = (__pyx_t_13) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_13) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 1928, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyObject_RichCompare(__pyx_t_12, __pyx_t_7, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1928, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(2, 1928, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__pyx_t_10) {
      } else {
        __pyx_t_9 = __pyx_t_10;
        goto __pyx_L17_bool_binop_done;
      }
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_key, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1928, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = __Pyx_PyInt_NeObjC(__pyx_t_2, __pyx_int_neg_1, -1L, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 1928, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(2, 1928, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_9 = __pyx_t_10;
      __pyx_L17_bool_binop_done:;
      if (__pyx_t_9) {

        /* "src/pygcgopt/decomposition.pxi":1929
 *             else:
 *                 if key[0] != -1 and key[1] != self.getNVars() and key[1] != -1:
 *                     X.append(key[0])             # <<<<<<<<<<<<<<
 *                     Y.append(key[1])
 *                     vals.append(value)
 */
        __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_key, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 1929, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_X, __pyx_t_7); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(2, 1929, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "src/pygcgopt/decomposition.pxi":1930
 *                 if key[0] != -1 and key[1] != self.getNVars() and key[1] != -1:
 *                     X.append(key[0])
 *                     Y.append(key[1])             # <<<<<<<<<<<<<<
 *                     vals.append(value)
 *         return X, Y, vals
 */
        __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_key, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 1930, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_Y, __pyx_t_7); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(2, 1930, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "src/pygcgopt/decomposition.pxi":1931
 *                     X.append(key[0])
 *                     Y.append(key[1])
 *                     vals.append(value)             # <<<<<<<<<<<<<<
 *         return X, Y, vals
 * 
 */
        __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_vals, __pyx_v_value); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(2, 1931, __pyx_L1_error)

        /* "src/pygcgopt/decomposition.pxi":1928
 *                     vals.append(value)
 *             else:
 *                 if key[0] != -1 and key[1] != self.getNVars() and key[1] != -1:             # <<<<<<<<<<<<<<
 *                     X.append(key[0])
 *                     Y.append(key[1])
 */
      }
    }
    __pyx_L5:;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/pygcgopt/decomposition.pxi":1932
 *                     Y.append(key[1])
 *                     vals.append(value)
 *         return X, Y, vals             # <<<<<<<<<<<<<<
 * 
 *     def uniqueMatrixSCIPVarType(PartialDecomposition self, obj=False, bcoef=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1932, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_X);
  __Pyx_GIVEREF(__pyx_v_X);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_X);
  __Pyx_INCREF(__pyx_v_Y);
  __Pyx_GIVEREF(__pyx_v_Y);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_Y);
  __Pyx_INCREF(__pyx_v_vals);
  __Pyx_GIVEREF(__pyx_v_vals);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_vals);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":1905
 *         return set(matrix)
 * 
 *     def matrixSCIPVarType(PartialDecomposition self, obj=False, bcoef=False):             # <<<<<<<<<<<<<<
 *         cdef map[pair[int, int], int] mat = self.thisptr.writeSCIPVarTypeMatrix()
 *         dictionary = <dict>mat
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.matrixSCIPVarType", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_dictionary);
  __Pyx_XDECREF(__pyx_v_X);
  __Pyx_XDECREF(__pyx_v_Y);
  __Pyx_XDECREF(__pyx_v_vals);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1934
 *         return X, Y, vals
 * 
 *     def uniqueMatrixSCIPVarType(PartialDecomposition self, obj=False, bcoef=False):             # <<<<<<<<<<<<<<
 *         _, _, matrix = self.matrixSCIPVarType(obj=obj, bcoef=bcoef)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_325uniqueMatrixSCIPVarType(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_324uniqueMatrixSCIPVarType[] = "PartialDecomposition.uniqueMatrixSCIPVarType(self, obj=False, bcoef=False)";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_325uniqueMatrixSCIPVarType(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_obj = 0;
  PyObject *__pyx_v_bcoef = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("uniqueMatrixSCIPVarType (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_bcoef,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_False);
    values[1] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_obj);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bcoef);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "uniqueMatrixSCIPVarType") < 0)) __PYX_ERR(2, 1934, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_obj = values[0];
    __pyx_v_bcoef = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("uniqueMatrixSCIPVarType", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 1934, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.uniqueMatrixSCIPVarType", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_324uniqueMatrixSCIPVarType(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), __pyx_v_obj, __pyx_v_bcoef);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_324uniqueMatrixSCIPVarType(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_bcoef) {
  CYTHON_UNUSED PyObject *__pyx_v__ = NULL;
  PyObject *__pyx_v_matrix = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("uniqueMatrixSCIPVarType", 0);

  /* "src/pygcgopt/decomposition.pxi":1935
 * 
 *     def uniqueMatrixSCIPVarType(PartialDecomposition self, obj=False, bcoef=False):
 *         _, _, matrix = self.matrixSCIPVarType(obj=obj, bcoef=bcoef)             # <<<<<<<<<<<<<<
 * 
 *         return set(matrix)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_matrixSCIPVarType); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1935, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1935, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_obj, __pyx_v_obj) < 0) __PYX_ERR(2, 1935, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_bcoef, __pyx_v_bcoef) < 0) __PYX_ERR(2, 1935, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1935, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
    PyObject* sequence = __pyx_t_3;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(2, 1935, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_1 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1935, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1935, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 1935, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_5 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 1935, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_1 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 2; __pyx_t_4 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_4)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 3) < 0) __PYX_ERR(2, 1935, __pyx_L1_error)
    __pyx_t_6 = NULL;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(2, 1935, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v__ = __pyx_t_2;
  __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v__, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_matrix = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "src/pygcgopt/decomposition.pxi":1937
 *         _, _, matrix = self.matrixSCIPVarType(obj=obj, bcoef=bcoef)
 * 
 *         return set(matrix)             # <<<<<<<<<<<<<<
 * 
 *     def scipVarMap(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PySet_New(__pyx_v_matrix); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":1934
 *         return X, Y, vals
 * 
 *     def uniqueMatrixSCIPVarType(PartialDecomposition self, obj=False, bcoef=False):             # <<<<<<<<<<<<<<
 *         _, _, matrix = self.matrixSCIPVarType(obj=obj, bcoef=bcoef)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.uniqueMatrixSCIPVarType", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v__);
  __Pyx_XDECREF(__pyx_v_matrix);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1939
 *         return set(matrix)
 * 
 *     def scipVarMap(self, value):             # <<<<<<<<<<<<<<
 *         if value==0:
 *             return "BIN"
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_327scipVarMap(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_326scipVarMap[] = "PartialDecomposition.scipVarMap(self, value)";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_327scipVarMap(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scipVarMap (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_326scipVarMap(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_326scipVarMap(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("scipVarMap", 0);

  /* "src/pygcgopt/decomposition.pxi":1940
 * 
 *     def scipVarMap(self, value):
 *         if value==0:             # <<<<<<<<<<<<<<
 *             return "BIN"
 *         elif value==1:
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_value, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1940, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 1940, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "src/pygcgopt/decomposition.pxi":1941
 *     def scipVarMap(self, value):
 *         if value==0:
 *             return "BIN"             # <<<<<<<<<<<<<<
 *         elif value==1:
 *             return "INT"
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_u_BIN);
    __pyx_r = __pyx_n_u_BIN;
    goto __pyx_L0;

    /* "src/pygcgopt/decomposition.pxi":1940
 * 
 *     def scipVarMap(self, value):
 *         if value==0:             # <<<<<<<<<<<<<<
 *             return "BIN"
 *         elif value==1:
 */
  }

  /* "src/pygcgopt/decomposition.pxi":1942
 *         if value==0:
 *             return "BIN"
 *         elif value==1:             # <<<<<<<<<<<<<<
 *             return "INT"
 *         elif value==2:
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_value, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1942, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 1942, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "src/pygcgopt/decomposition.pxi":1943
 *             return "BIN"
 *         elif value==1:
 *             return "INT"             # <<<<<<<<<<<<<<
 *         elif value==2:
 *             return "IMP"
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_u_INT);
    __pyx_r = __pyx_n_u_INT;
    goto __pyx_L0;

    /* "src/pygcgopt/decomposition.pxi":1942
 *         if value==0:
 *             return "BIN"
 *         elif value==1:             # <<<<<<<<<<<<<<
 *             return "INT"
 *         elif value==2:
 */
  }

  /* "src/pygcgopt/decomposition.pxi":1944
 *         elif value==1:
 *             return "INT"
 *         elif value==2:             # <<<<<<<<<<<<<<
 *             return "IMP"
 *         elif value==3:
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_value, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1944, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 1944, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "src/pygcgopt/decomposition.pxi":1945
 *             return "INT"
 *         elif value==2:
 *             return "IMP"             # <<<<<<<<<<<<<<
 *         elif value==3:
 *             return "CONT"
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_u_IMP);
    __pyx_r = __pyx_n_u_IMP;
    goto __pyx_L0;

    /* "src/pygcgopt/decomposition.pxi":1944
 *         elif value==1:
 *             return "INT"
 *         elif value==2:             # <<<<<<<<<<<<<<
 *             return "IMP"
 *         elif value==3:
 */
  }

  /* "src/pygcgopt/decomposition.pxi":1946
 *         elif value==2:
 *             return "IMP"
 *         elif value==3:             # <<<<<<<<<<<<<<
 *             return "CONT"
 *         else:
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_value, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1946, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 1946, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "src/pygcgopt/decomposition.pxi":1947
 *             return "IMP"
 *         elif value==3:
 *             return "CONT"             # <<<<<<<<<<<<<<
 *         else:
 *             return "NONE"
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_u_CONT);
    __pyx_r = __pyx_n_u_CONT;
    goto __pyx_L0;

    /* "src/pygcgopt/decomposition.pxi":1946
 *         elif value==2:
 *             return "IMP"
 *         elif value==3:             # <<<<<<<<<<<<<<
 *             return "CONT"
 *         else:
 */
  }

  /* "src/pygcgopt/decomposition.pxi":1949
 *             return "CONT"
 *         else:
 *             return "NONE"             # <<<<<<<<<<<<<<
 * 
 *     def miplibConsMap(self, value):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_u_NONE);
    __pyx_r = __pyx_n_u_NONE;
    goto __pyx_L0;
  }

  /* "src/pygcgopt/decomposition.pxi":1939
 *         return set(matrix)
 * 
 *     def scipVarMap(self, value):             # <<<<<<<<<<<<<<
 *         if value==0:
 *             return "BIN"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.scipVarMap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1951
 *             return "NONE"
 * 
 *     def miplibConsMap(self, value):             # <<<<<<<<<<<<<<
 *         if value==0:
 *             return "EMPTY"
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_329miplibConsMap(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_328miplibConsMap[] = "PartialDecomposition.miplibConsMap(self, value)";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_329miplibConsMap(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("miplibConsMap (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_328miplibConsMap(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_328miplibConsMap(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("miplibConsMap", 0);

  /* "src/pygcgopt/decomposition.pxi":1952
 * 
 *     def miplibConsMap(self, value):
 *         if value==0:             # <<<<<<<<<<<<<<
 *             return "EMPTY"
 *         elif value==1:
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_value, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1952, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 1952, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "src/pygcgopt/decomposition.pxi":1953
 *     def miplibConsMap(self, value):
 *         if value==0:
 *             return "EMPTY"             # <<<<<<<<<<<<<<
 *         elif value==1:
 *             return "FREE"
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_u_EMPTY);
    __pyx_r = __pyx_n_u_EMPTY;
    goto __pyx_L0;

    /* "src/pygcgopt/decomposition.pxi":1952
 * 
 *     def miplibConsMap(self, value):
 *         if value==0:             # <<<<<<<<<<<<<<
 *             return "EMPTY"
 *         elif value==1:
 */
  }

  /* "src/pygcgopt/decomposition.pxi":1954
 *         if value==0:
 *             return "EMPTY"
 *         elif value==1:             # <<<<<<<<<<<<<<
 *             return "FREE"
 *         elif value==2:
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_value, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1954, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 1954, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "src/pygcgopt/decomposition.pxi":1955
 *             return "EMPTY"
 *         elif value==1:
 *             return "FREE"             # <<<<<<<<<<<<<<
 *         elif value==2:
 *             return "SING"
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_u_FREE);
    __pyx_r = __pyx_n_u_FREE;
    goto __pyx_L0;

    /* "src/pygcgopt/decomposition.pxi":1954
 *         if value==0:
 *             return "EMPTY"
 *         elif value==1:             # <<<<<<<<<<<<<<
 *             return "FREE"
 *         elif value==2:
 */
  }

  /* "src/pygcgopt/decomposition.pxi":1956
 *         elif value==1:
 *             return "FREE"
 *         elif value==2:             # <<<<<<<<<<<<<<
 *             return "SING"
 *         elif value==3:
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_value, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1956, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 1956, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "src/pygcgopt/decomposition.pxi":1957
 *             return "FREE"
 *         elif value==2:
 *             return "SING"             # <<<<<<<<<<<<<<
 *         elif value==3:
 *             return "AGGR"
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_u_SING);
    __pyx_r = __pyx_n_u_SING;
    goto __pyx_L0;

    /* "src/pygcgopt/decomposition.pxi":1956
 *         elif value==1:
 *             return "FREE"
 *         elif value==2:             # <<<<<<<<<<<<<<
 *             return "SING"
 *         elif value==3:
 */
  }

  /* "src/pygcgopt/decomposition.pxi":1958
 *         elif value==2:
 *             return "SING"
 *         elif value==3:             # <<<<<<<<<<<<<<
 *             return "AGGR"
 *         elif value==4:
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_value, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1958, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 1958, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "src/pygcgopt/decomposition.pxi":1959
 *             return "SING"
 *         elif value==3:
 *             return "AGGR"             # <<<<<<<<<<<<<<
 *         elif value==4:
 *             return "VARB"
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_u_AGGR);
    __pyx_r = __pyx_n_u_AGGR;
    goto __pyx_L0;

    /* "src/pygcgopt/decomposition.pxi":1958
 *         elif value==2:
 *             return "SING"
 *         elif value==3:             # <<<<<<<<<<<<<<
 *             return "AGGR"
 *         elif value==4:
 */
  }

  /* "src/pygcgopt/decomposition.pxi":1960
 *         elif value==3:
 *             return "AGGR"
 *         elif value==4:             # <<<<<<<<<<<<<<
 *             return "VARB"
 *         elif value==5:
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_value, __pyx_int_4, 4, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1960, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 1960, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "src/pygcgopt/decomposition.pxi":1961
 *             return "AGGR"
 *         elif value==4:
 *             return "VARB"             # <<<<<<<<<<<<<<
 *         elif value==5:
 *             return "SPAR"
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_u_VARB);
    __pyx_r = __pyx_n_u_VARB;
    goto __pyx_L0;

    /* "src/pygcgopt/decomposition.pxi":1960
 *         elif value==3:
 *             return "AGGR"
 *         elif value==4:             # <<<<<<<<<<<<<<
 *             return "VARB"
 *         elif value==5:
 */
  }

  /* "src/pygcgopt/decomposition.pxi":1962
 *         elif value==4:
 *             return "VARB"
 *         elif value==5:             # <<<<<<<<<<<<<<
 *             return "SPAR"
 *         elif value==6:
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_value, __pyx_int_5, 5, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1962, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 1962, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "src/pygcgopt/decomposition.pxi":1963
 *             return "VARB"
 *         elif value==5:
 *             return "SPAR"             # <<<<<<<<<<<<<<
 *         elif value==6:
 *             return "SPAC"
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_u_SPAR);
    __pyx_r = __pyx_n_u_SPAR;
    goto __pyx_L0;

    /* "src/pygcgopt/decomposition.pxi":1962
 *         elif value==4:
 *             return "VARB"
 *         elif value==5:             # <<<<<<<<<<<<<<
 *             return "SPAR"
 *         elif value==6:
 */
  }

  /* "src/pygcgopt/decomposition.pxi":1964
 *         elif value==5:
 *             return "SPAR"
 *         elif value==6:             # <<<<<<<<<<<<<<
 *             return "SPAC"
 *         elif value==7:
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_value, __pyx_int_6, 6, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1964, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 1964, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "src/pygcgopt/decomposition.pxi":1965
 *             return "SPAR"
 *         elif value==6:
 *             return "SPAC"             # <<<<<<<<<<<<<<
 *         elif value==7:
 *             return "SCOV"
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_u_SPAC);
    __pyx_r = __pyx_n_u_SPAC;
    goto __pyx_L0;

    /* "src/pygcgopt/decomposition.pxi":1964
 *         elif value==5:
 *             return "SPAR"
 *         elif value==6:             # <<<<<<<<<<<<<<
 *             return "SPAC"
 *         elif value==7:
 */
  }

  /* "src/pygcgopt/decomposition.pxi":1966
 *         elif value==6:
 *             return "SPAC"
 *         elif value==7:             # <<<<<<<<<<<<<<
 *             return "SCOV"
 *         elif value==8:
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_value, __pyx_int_7, 7, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1966, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 1966, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "src/pygcgopt/decomposition.pxi":1967
 *             return "SPAC"
 *         elif value==7:
 *             return "SCOV"             # <<<<<<<<<<<<<<
 *         elif value==8:
 *             return "CARD"
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_u_SCOV);
    __pyx_r = __pyx_n_u_SCOV;
    goto __pyx_L0;

    /* "src/pygcgopt/decomposition.pxi":1966
 *         elif value==6:
 *             return "SPAC"
 *         elif value==7:             # <<<<<<<<<<<<<<
 *             return "SCOV"
 *         elif value==8:
 */
  }

  /* "src/pygcgopt/decomposition.pxi":1968
 *         elif value==7:
 *             return "SCOV"
 *         elif value==8:             # <<<<<<<<<<<<<<
 *             return "CARD"
 *         elif value==9:
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_value, __pyx_int_8, 8, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1968, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 1968, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "src/pygcgopt/decomposition.pxi":1969
 *             return "SCOV"
 *         elif value==8:
 *             return "CARD"             # <<<<<<<<<<<<<<
 *         elif value==9:
 *             return "INVK"
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_u_CARD);
    __pyx_r = __pyx_n_u_CARD;
    goto __pyx_L0;

    /* "src/pygcgopt/decomposition.pxi":1968
 *         elif value==7:
 *             return "SCOV"
 *         elif value==8:             # <<<<<<<<<<<<<<
 *             return "CARD"
 *         elif value==9:
 */
  }

  /* "src/pygcgopt/decomposition.pxi":1970
 *         elif value==8:
 *             return "CARD"
 *         elif value==9:             # <<<<<<<<<<<<<<
 *             return "INVK"
 *         elif value==10:
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_value, __pyx_int_9, 9, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1970, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 1970, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "src/pygcgopt/decomposition.pxi":1971
 *             return "CARD"
 *         elif value==9:
 *             return "INVK"             # <<<<<<<<<<<<<<
 *         elif value==10:
 *             return "EQUK"
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_u_INVK);
    __pyx_r = __pyx_n_u_INVK;
    goto __pyx_L0;

    /* "src/pygcgopt/decomposition.pxi":1970
 *         elif value==8:
 *             return "CARD"
 *         elif value==9:             # <<<<<<<<<<<<<<
 *             return "INVK"
 *         elif value==10:
 */
  }

  /* "src/pygcgopt/decomposition.pxi":1972
 *         elif value==9:
 *             return "INVK"
 *         elif value==10:             # <<<<<<<<<<<<<<
 *             return "EQUK"
 *         elif value==11:
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_value, __pyx_int_10, 10, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1972, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 1972, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "src/pygcgopt/decomposition.pxi":1973
 *             return "INVK"
 *         elif value==10:
 *             return "EQUK"             # <<<<<<<<<<<<<<
 *         elif value==11:
 *             return "BINP"
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_u_EQUK);
    __pyx_r = __pyx_n_u_EQUK;
    goto __pyx_L0;

    /* "src/pygcgopt/decomposition.pxi":1972
 *         elif value==9:
 *             return "INVK"
 *         elif value==10:             # <<<<<<<<<<<<<<
 *             return "EQUK"
 *         elif value==11:
 */
  }

  /* "src/pygcgopt/decomposition.pxi":1974
 *         elif value==10:
 *             return "EQUK"
 *         elif value==11:             # <<<<<<<<<<<<<<
 *             return "BINP"
 *         elif value==12:
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_value, __pyx_int_11, 11, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1974, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 1974, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "src/pygcgopt/decomposition.pxi":1975
 *             return "EQUK"
 *         elif value==11:
 *             return "BINP"             # <<<<<<<<<<<<<<
 *         elif value==12:
 *             return "KNAP"
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_u_BINP);
    __pyx_r = __pyx_n_u_BINP;
    goto __pyx_L0;

    /* "src/pygcgopt/decomposition.pxi":1974
 *         elif value==10:
 *             return "EQUK"
 *         elif value==11:             # <<<<<<<<<<<<<<
 *             return "BINP"
 *         elif value==12:
 */
  }

  /* "src/pygcgopt/decomposition.pxi":1976
 *         elif value==11:
 *             return "BINP"
 *         elif value==12:             # <<<<<<<<<<<<<<
 *             return "KNAP"
 *         elif value==13:
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_value, __pyx_int_12, 12, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1976, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 1976, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "src/pygcgopt/decomposition.pxi":1977
 *             return "BINP"
 *         elif value==12:
 *             return "KNAP"             # <<<<<<<<<<<<<<
 *         elif value==13:
 *             return "IKNA"
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_u_KNAP);
    __pyx_r = __pyx_n_u_KNAP;
    goto __pyx_L0;

    /* "src/pygcgopt/decomposition.pxi":1976
 *         elif value==11:
 *             return "BINP"
 *         elif value==12:             # <<<<<<<<<<<<<<
 *             return "KNAP"
 *         elif value==13:
 */
  }

  /* "src/pygcgopt/decomposition.pxi":1978
 *         elif value==12:
 *             return "KNAP"
 *         elif value==13:             # <<<<<<<<<<<<<<
 *             return "IKNA"
 *         elif value==14:
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_value, __pyx_int_13, 13, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1978, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 1978, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "src/pygcgopt/decomposition.pxi":1979
 *             return "KNAP"
 *         elif value==13:
 *             return "IKNA"             # <<<<<<<<<<<<<<
 *         elif value==14:
 *             return "MIXB"
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_u_IKNA);
    __pyx_r = __pyx_n_u_IKNA;
    goto __pyx_L0;

    /* "src/pygcgopt/decomposition.pxi":1978
 *         elif value==12:
 *             return "KNAP"
 *         elif value==13:             # <<<<<<<<<<<<<<
 *             return "IKNA"
 *         elif value==14:
 */
  }

  /* "src/pygcgopt/decomposition.pxi":1980
 *         elif value==13:
 *             return "IKNA"
 *         elif value==14:             # <<<<<<<<<<<<<<
 *             return "MIXB"
 *         elif value==15:
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_value, __pyx_int_14, 14, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1980, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 1980, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "src/pygcgopt/decomposition.pxi":1981
 *             return "IKNA"
 *         elif value==14:
 *             return "MIXB"             # <<<<<<<<<<<<<<
 *         elif value==15:
 *             return "GENL"
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_u_MIXB);
    __pyx_r = __pyx_n_u_MIXB;
    goto __pyx_L0;

    /* "src/pygcgopt/decomposition.pxi":1980
 *         elif value==13:
 *             return "IKNA"
 *         elif value==14:             # <<<<<<<<<<<<<<
 *             return "MIXB"
 *         elif value==15:
 */
  }

  /* "src/pygcgopt/decomposition.pxi":1982
 *         elif value==14:
 *             return "MIXB"
 *         elif value==15:             # <<<<<<<<<<<<<<
 *             return "GENL"
 *         else:
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_value, __pyx_int_15, 15, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1982, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 1982, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "src/pygcgopt/decomposition.pxi":1983
 *             return "MIXB"
 *         elif value==15:
 *             return "GENL"             # <<<<<<<<<<<<<<
 *         else:
 *             return "NONE"
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_u_GENL);
    __pyx_r = __pyx_n_u_GENL;
    goto __pyx_L0;

    /* "src/pygcgopt/decomposition.pxi":1982
 *         elif value==14:
 *             return "MIXB"
 *         elif value==15:             # <<<<<<<<<<<<<<
 *             return "GENL"
 *         else:
 */
  }

  /* "src/pygcgopt/decomposition.pxi":1985
 *             return "GENL"
 *         else:
 *             return "NONE"             # <<<<<<<<<<<<<<
 * 
 *     def visualize(PartialDecomposition self, fname=None, figsize=(12, 8), dpi=None, title=None, matrixType="nonzero", obj=False, bcoef=False, dots=True, boxes=True, s=1, alpha=1, cmap=None, norm=None, linkingcolor="#FFB72D", mastercolor="#1340C7", blockcolor="#718CDB", stairlinkingcolor="#886100", opencolor="#FFD88F", linecolor="#000000", linewidth=0.8):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_u_NONE);
    __pyx_r = __pyx_n_u_NONE;
    goto __pyx_L0;
  }

  /* "src/pygcgopt/decomposition.pxi":1951
 *             return "NONE"
 * 
 *     def miplibConsMap(self, value):             # <<<<<<<<<<<<<<
 *         if value==0:
 *             return "EMPTY"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.miplibConsMap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":1987
 *             return "NONE"
 * 
 *     def visualize(PartialDecomposition self, fname=None, figsize=(12, 8), dpi=None, title=None, matrixType="nonzero", obj=False, bcoef=False, dots=True, boxes=True, s=1, alpha=1, cmap=None, norm=None, linkingcolor="#FFB72D", mastercolor="#1340C7", blockcolor="#718CDB", stairlinkingcolor="#886100", opencolor="#FFD88F", linecolor="#000000", linewidth=0.8):             # <<<<<<<<<<<<<<
 *         try:
 *             import matplotlib.pyplot as plt
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_331visualize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_330visualize[] = "PartialDecomposition.visualize(self, fname=None, figsize=(12, 8), dpi=None, title=None, matrixType=u'nonzero', obj=False, bcoef=False, dots=True, boxes=True, s=1, alpha=1, cmap=None, norm=None, linkingcolor=u'#FFB72D', mastercolor=u'#1340C7', blockcolor=u'#718CDB', stairlinkingcolor=u'#886100', opencolor=u'#FFD88F', linecolor=u'#000000', linewidth=0.8)";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_331visualize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fname = 0;
  PyObject *__pyx_v_figsize = 0;
  PyObject *__pyx_v_dpi = 0;
  PyObject *__pyx_v_title = 0;
  PyObject *__pyx_v_matrixType = 0;
  PyObject *__pyx_v_obj = 0;
  PyObject *__pyx_v_bcoef = 0;
  PyObject *__pyx_v_dots = 0;
  PyObject *__pyx_v_boxes = 0;
  PyObject *__pyx_v_s = 0;
  PyObject *__pyx_v_alpha = 0;
  PyObject *__pyx_v_cmap = 0;
  PyObject *__pyx_v_norm = 0;
  PyObject *__pyx_v_linkingcolor = 0;
  PyObject *__pyx_v_mastercolor = 0;
  PyObject *__pyx_v_blockcolor = 0;
  PyObject *__pyx_v_stairlinkingcolor = 0;
  PyObject *__pyx_v_opencolor = 0;
  PyObject *__pyx_v_linecolor = 0;
  PyObject *__pyx_v_linewidth = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("visualize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fname,&__pyx_n_s_figsize,&__pyx_n_s_dpi,&__pyx_n_s_title,&__pyx_n_s_matrixType,&__pyx_n_s_obj,&__pyx_n_s_bcoef,&__pyx_n_s_dots,&__pyx_n_s_boxes,&__pyx_n_s_s,&__pyx_n_s_alpha,&__pyx_n_s_cmap,&__pyx_n_s_norm,&__pyx_n_s_linkingcolor,&__pyx_n_s_mastercolor,&__pyx_n_s_blockcolor,&__pyx_n_s_stairlinkingcolor,&__pyx_n_s_opencolor,&__pyx_n_s_linecolor,&__pyx_n_s_linewidth,0};
    PyObject* values[20] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)__pyx_tuple__11);
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject *)__pyx_n_u_nonzero);
    values[5] = ((PyObject *)Py_False);
    values[6] = ((PyObject *)Py_False);
    values[7] = ((PyObject *)Py_True);
    values[8] = ((PyObject *)Py_True);
    values[9] = ((PyObject *)__pyx_int_1);
    values[10] = ((PyObject *)__pyx_int_1);
    values[11] = ((PyObject *)Py_None);
    values[12] = ((PyObject *)Py_None);
    values[13] = ((PyObject *)__pyx_kp_u_FFB72D);
    values[14] = ((PyObject *)__pyx_kp_u_1340C7);
    values[15] = ((PyObject *)__pyx_kp_u_718CDB);
    values[16] = ((PyObject *)__pyx_kp_u_886100);
    values[17] = ((PyObject *)__pyx_kp_u_FFD88F);
    values[18] = ((PyObject *)__pyx_kp_u_000000);
    values[19] = ((PyObject *)__pyx_float_0_8);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 20: values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
        CYTHON_FALLTHROUGH;
        case 19: values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
        CYTHON_FALLTHROUGH;
        case 18: values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
        CYTHON_FALLTHROUGH;
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        CYTHON_FALLTHROUGH;
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        CYTHON_FALLTHROUGH;
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fname);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_figsize);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dpi);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_title);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_matrixType);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_obj);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bcoef);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dots);
          if (value) { values[7] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_boxes);
          if (value) { values[8] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_s);
          if (value) { values[9] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha);
          if (value) { values[10] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cmap);
          if (value) { values[11] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_norm);
          if (value) { values[12] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_linkingcolor);
          if (value) { values[13] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 14:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mastercolor);
          if (value) { values[14] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 15:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_blockcolor);
          if (value) { values[15] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 16:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_stairlinkingcolor);
          if (value) { values[16] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 17:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_opencolor);
          if (value) { values[17] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 18:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_linecolor);
          if (value) { values[18] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 19:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_linewidth);
          if (value) { values[19] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "visualize") < 0)) __PYX_ERR(2, 1987, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 20: values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
        CYTHON_FALLTHROUGH;
        case 19: values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
        CYTHON_FALLTHROUGH;
        case 18: values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
        CYTHON_FALLTHROUGH;
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        CYTHON_FALLTHROUGH;
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        CYTHON_FALLTHROUGH;
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_fname = values[0];
    __pyx_v_figsize = values[1];
    __pyx_v_dpi = values[2];
    __pyx_v_title = values[3];
    __pyx_v_matrixType = values[4];
    __pyx_v_obj = values[5];
    __pyx_v_bcoef = values[6];
    __pyx_v_dots = values[7];
    __pyx_v_boxes = values[8];
    __pyx_v_s = values[9];
    __pyx_v_alpha = values[10];
    __pyx_v_cmap = values[11];
    __pyx_v_norm = values[12];
    __pyx_v_linkingcolor = values[13];
    __pyx_v_mastercolor = values[14];
    __pyx_v_blockcolor = values[15];
    __pyx_v_stairlinkingcolor = values[16];
    __pyx_v_opencolor = values[17];
    __pyx_v_linecolor = values[18];
    __pyx_v_linewidth = values[19];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("visualize", 0, 0, 20, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 1987, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.visualize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_330visualize(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), __pyx_v_fname, __pyx_v_figsize, __pyx_v_dpi, __pyx_v_title, __pyx_v_matrixType, __pyx_v_obj, __pyx_v_bcoef, __pyx_v_dots, __pyx_v_boxes, __pyx_v_s, __pyx_v_alpha, __pyx_v_cmap, __pyx_v_norm, __pyx_v_linkingcolor, __pyx_v_mastercolor, __pyx_v_blockcolor, __pyx_v_stairlinkingcolor, __pyx_v_opencolor, __pyx_v_linecolor, __pyx_v_linewidth);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_330visualize(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_fname, PyObject *__pyx_v_figsize, PyObject *__pyx_v_dpi, PyObject *__pyx_v_title, PyObject *__pyx_v_matrixType, PyObject *__pyx_v_obj, PyObject *__pyx_v_bcoef, PyObject *__pyx_v_dots, PyObject *__pyx_v_boxes, PyObject *__pyx_v_s, PyObject *__pyx_v_alpha, PyObject *__pyx_v_cmap, PyObject *__pyx_v_norm, PyObject *__pyx_v_linkingcolor, PyObject *__pyx_v_mastercolor, PyObject *__pyx_v_blockcolor, PyObject *__pyx_v_stairlinkingcolor, PyObject *__pyx_v_opencolor, PyObject *__pyx_v_linecolor, PyObject *__pyx_v_linewidth) {
  PyObject *__pyx_v_plt = NULL;
  PyObject *__pyx_v_patches = NULL;
  PyObject *__pyx_v_colors = NULL;
  PyObject *__pyx_v_X = NULL;
  PyObject *__pyx_v_Y = NULL;
  PyObject *__pyx_v_vals = NULL;
  PyObject *__pyx_v_fig = NULL;
  PyObject *__pyx_v_ax = NULL;
  PyObject *__pyx_v_rowboxcounter = NULL;
  PyObject *__pyx_v_colboxcounter = NULL;
  PyObject *__pyx_v_lvars = NULL;
  PyObject *__pyx_v_master = NULL;
  PyObject *__pyx_v_b = NULL;
  PyObject *__pyx_v_block = NULL;
  PyObject *__pyx_v_stairlinking = NULL;
  PyObject *__pyx_v_openrec = NULL;
  long __pyx_v_zorderForBoxes;
  PyObject *__pyx_v_scatter = NULL;
  PyObject *__pyx_v_cbar = NULL;
  PyObject *__pyx_v_uniqueMatrixMIPLIBConsTypeList = NULL;
  PyObject *__pyx_v_selfcolors = NULL;
  PyObject *__pyx_v_colors_used = NULL;
  PyObject *__pyx_v_cmap_self = NULL;
  PyObject *__pyx_v_boundaries = NULL;
  PyObject *__pyx_v_uniqueMatrixSCIPVarTypeList = NULL;
  PyObject *__pyx_8genexpr3__pyx_v_y = NULL;
  PyObject *__pyx_8genexpr4__pyx_v_x = NULL;
  PyObject *__pyx_8genexpr5__pyx_v_y = NULL;
  PyObject *__pyx_8genexpr6__pyx_v_x = NULL;
  PyObject *__pyx_8genexpr7__pyx_v_y = NULL;
  PyObject *__pyx_8genexpr8__pyx_v_x = NULL;
  PyObject *__pyx_8genexpr9__pyx_v_y = NULL;
  PyObject *__pyx_9genexpr10__pyx_v_x = NULL;
  PyObject *__pyx_9genexpr11__pyx_v_y = NULL;
  PyObject *__pyx_9genexpr12__pyx_v_x = NULL;
  PyObject *__pyx_9genexpr13__pyx_v_i = NULL;
  PyObject *__pyx_9genexpr14__pyx_v_y = NULL;
  PyObject *__pyx_9genexpr15__pyx_v_x = NULL;
  Py_ssize_t __pyx_9genexpr16__pyx_v_i;
  PyObject *__pyx_9genexpr17__pyx_v_i = NULL;
  PyObject *__pyx_9genexpr18__pyx_v_y = NULL;
  PyObject *__pyx_9genexpr19__pyx_v_x = NULL;
  PyObject *__pyx_9genexpr20__pyx_v_y = NULL;
  PyObject *__pyx_9genexpr21__pyx_v_x = NULL;
  PyObject *__pyx_9genexpr22__pyx_v_i = NULL;
  PyObject *__pyx_9genexpr23__pyx_v_y = NULL;
  PyObject *__pyx_9genexpr24__pyx_v_x = NULL;
  Py_ssize_t __pyx_9genexpr25__pyx_v_i;
  PyObject *__pyx_9genexpr26__pyx_v_i = NULL;
  PyObject *__pyx_9genexpr27__pyx_v_y = NULL;
  PyObject *__pyx_9genexpr28__pyx_v_x = NULL;
  PyObject *__pyx_9genexpr29__pyx_v_y = NULL;
  PyObject *__pyx_9genexpr30__pyx_v_x = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *(*__pyx_t_11)(PyObject *);
  Py_ssize_t __pyx_t_12;
  PyObject *(*__pyx_t_13)(PyObject *);
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  int __pyx_t_18;
  int __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  Py_ssize_t __pyx_t_21;
  Py_ssize_t __pyx_t_22;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("visualize", 0);
  __Pyx_INCREF(__pyx_v_norm);

  /* "src/pygcgopt/decomposition.pxi":1988
 * 
 *     def visualize(PartialDecomposition self, fname=None, figsize=(12, 8), dpi=None, title=None, matrixType="nonzero", obj=False, bcoef=False, dots=True, boxes=True, s=1, alpha=1, cmap=None, norm=None, linkingcolor="#FFB72D", mastercolor="#1340C7", blockcolor="#718CDB", stairlinkingcolor="#886100", opencolor="#FFD88F", linecolor="#000000", linewidth=0.8):
 *         try:             # <<<<<<<<<<<<<<
 *             import matplotlib.pyplot as plt
 *             import matplotlib.patches as patches
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "src/pygcgopt/decomposition.pxi":1989
 *     def visualize(PartialDecomposition self, fname=None, figsize=(12, 8), dpi=None, title=None, matrixType="nonzero", obj=False, bcoef=False, dots=True, boxes=True, s=1, alpha=1, cmap=None, norm=None, linkingcolor="#FFB72D", mastercolor="#1340C7", blockcolor="#718CDB", stairlinkingcolor="#886100", opencolor="#FFD88F", linecolor="#000000", linewidth=0.8):
 *         try:
 *             import matplotlib.pyplot as plt             # <<<<<<<<<<<<<<
 *             import matplotlib.patches as patches
 *             import matplotlib.colors as colors
 */
      __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 1989, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_n_s__12);
      __Pyx_GIVEREF(__pyx_n_s__12);
      PyList_SET_ITEM(__pyx_t_4, 0, __pyx_n_s__12);
      __pyx_t_5 = __Pyx_Import(__pyx_n_s_matplotlib_pyplot, __pyx_t_4, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 1989, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_plt = __pyx_t_5;
      __pyx_t_5 = 0;

      /* "src/pygcgopt/decomposition.pxi":1990
 *         try:
 *             import matplotlib.pyplot as plt
 *             import matplotlib.patches as patches             # <<<<<<<<<<<<<<
 *             import matplotlib.colors as colors
 * 
 */
      __pyx_t_5 = PyList_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 1990, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_n_s__12);
      __Pyx_GIVEREF(__pyx_n_s__12);
      PyList_SET_ITEM(__pyx_t_5, 0, __pyx_n_s__12);
      __pyx_t_4 = __Pyx_Import(__pyx_n_s_matplotlib_patches, __pyx_t_5, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 1990, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_patches = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "src/pygcgopt/decomposition.pxi":1991
 *             import matplotlib.pyplot as plt
 *             import matplotlib.patches as patches
 *             import matplotlib.colors as colors             # <<<<<<<<<<<<<<
 * 
 *             if dots == True:
 */
      __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 1991, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_n_s__12);
      __Pyx_GIVEREF(__pyx_n_s__12);
      PyList_SET_ITEM(__pyx_t_4, 0, __pyx_n_s__12);
      __pyx_t_5 = __Pyx_Import(__pyx_n_s_matplotlib_colors, __pyx_t_4, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 1991, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_colors = __pyx_t_5;
      __pyx_t_5 = 0;

      /* "src/pygcgopt/decomposition.pxi":1993
 *             import matplotlib.colors as colors
 * 
 *             if dots == True:             # <<<<<<<<<<<<<<
 *                 if matrixType == "nonzero" or matrixType == "nonzerowithvalue":
 *                     X, Y, vals = self.matrix(obj=obj, bcoef=bcoef)
 */
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_dots, Py_True, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 1993, __pyx_L3_error)
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 1993, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_6) {

        /* "src/pygcgopt/decomposition.pxi":1994
 * 
 *             if dots == True:
 *                 if matrixType == "nonzero" or matrixType == "nonzerowithvalue":             # <<<<<<<<<<<<<<
 *                     X, Y, vals = self.matrix(obj=obj, bcoef=bcoef)
 *                 elif matrixType == "miplibconstype":
 */
        __pyx_t_7 = (__Pyx_PyUnicode_Equals(__pyx_v_matrixType, __pyx_n_u_nonzero, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(2, 1994, __pyx_L3_error)
        if (!__pyx_t_7) {
        } else {
          __pyx_t_6 = __pyx_t_7;
          goto __pyx_L11_bool_binop_done;
        }
        __pyx_t_7 = (__Pyx_PyUnicode_Equals(__pyx_v_matrixType, __pyx_n_u_nonzerowithvalue, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(2, 1994, __pyx_L3_error)
        __pyx_t_6 = __pyx_t_7;
        __pyx_L11_bool_binop_done:;
        if (__pyx_t_6) {

          /* "src/pygcgopt/decomposition.pxi":1995
 *             if dots == True:
 *                 if matrixType == "nonzero" or matrixType == "nonzerowithvalue":
 *                     X, Y, vals = self.matrix(obj=obj, bcoef=bcoef)             # <<<<<<<<<<<<<<
 *                 elif matrixType == "miplibconstype":
 *                     X, Y, vals = self.matrixMIPLIBConsType(obj=obj, bcoef=bcoef)
 */
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_matrix); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 1995, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_4 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 1995, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_4);
          if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_obj, __pyx_v_obj) < 0) __PYX_ERR(2, 1995, __pyx_L3_error)
          if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_bcoef, __pyx_v_bcoef) < 0) __PYX_ERR(2, 1995, __pyx_L3_error)
          __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1995, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if ((likely(PyTuple_CheckExact(__pyx_t_8))) || (PyList_CheckExact(__pyx_t_8))) {
            PyObject* sequence = __pyx_t_8;
            Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
            if (unlikely(size != 3)) {
              if (size > 3) __Pyx_RaiseTooManyValuesError(3);
              else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
              __PYX_ERR(2, 1995, __pyx_L3_error)
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            if (likely(PyTuple_CheckExact(sequence))) {
              __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
              __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
              __pyx_t_9 = PyTuple_GET_ITEM(sequence, 2); 
            } else {
              __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
              __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
              __pyx_t_9 = PyList_GET_ITEM(sequence, 2); 
            }
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_9);
            #else
            __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 1995, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 1995, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_9 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 1995, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_9);
            #endif
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          } else {
            Py_ssize_t index = -1;
            __pyx_t_10 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 1995, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __pyx_t_11 = Py_TYPE(__pyx_t_10)->tp_iternext;
            index = 0; __pyx_t_4 = __pyx_t_11(__pyx_t_10); if (unlikely(!__pyx_t_4)) goto __pyx_L13_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_4);
            index = 1; __pyx_t_5 = __pyx_t_11(__pyx_t_10); if (unlikely(!__pyx_t_5)) goto __pyx_L13_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_5);
            index = 2; __pyx_t_9 = __pyx_t_11(__pyx_t_10); if (unlikely(!__pyx_t_9)) goto __pyx_L13_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_9);
            if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_10), 3) < 0) __PYX_ERR(2, 1995, __pyx_L3_error)
            __pyx_t_11 = NULL;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            goto __pyx_L14_unpacking_done;
            __pyx_L13_unpacking_failed:;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __pyx_t_11 = NULL;
            if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
            __PYX_ERR(2, 1995, __pyx_L3_error)
            __pyx_L14_unpacking_done:;
          }
          __pyx_v_X = __pyx_t_4;
          __pyx_t_4 = 0;
          __pyx_v_Y = __pyx_t_5;
          __pyx_t_5 = 0;
          __pyx_v_vals = __pyx_t_9;
          __pyx_t_9 = 0;

          /* "src/pygcgopt/decomposition.pxi":1994
 * 
 *             if dots == True:
 *                 if matrixType == "nonzero" or matrixType == "nonzerowithvalue":             # <<<<<<<<<<<<<<
 *                     X, Y, vals = self.matrix(obj=obj, bcoef=bcoef)
 *                 elif matrixType == "miplibconstype":
 */
          goto __pyx_L10;
        }

        /* "src/pygcgopt/decomposition.pxi":1996
 *                 if matrixType == "nonzero" or matrixType == "nonzerowithvalue":
 *                     X, Y, vals = self.matrix(obj=obj, bcoef=bcoef)
 *                 elif matrixType == "miplibconstype":             # <<<<<<<<<<<<<<
 *                     X, Y, vals = self.matrixMIPLIBConsType(obj=obj, bcoef=bcoef)
 *                 elif matrixType == "scipvartype":
 */
        __pyx_t_6 = (__Pyx_PyUnicode_Equals(__pyx_v_matrixType, __pyx_n_u_miplibconstype, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 1996, __pyx_L3_error)
        if (__pyx_t_6) {

          /* "src/pygcgopt/decomposition.pxi":1997
 *                     X, Y, vals = self.matrix(obj=obj, bcoef=bcoef)
 *                 elif matrixType == "miplibconstype":
 *                     X, Y, vals = self.matrixMIPLIBConsType(obj=obj, bcoef=bcoef)             # <<<<<<<<<<<<<<
 *                 elif matrixType == "scipvartype":
 *                     X, Y, vals = self.matrixSCIPVarType(obj=obj, bcoef=bcoef)
 */
          __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_matrixMIPLIBConsType); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1997, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_9 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 1997, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_9);
          if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_obj, __pyx_v_obj) < 0) __PYX_ERR(2, 1997, __pyx_L3_error)
          if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_bcoef, __pyx_v_bcoef) < 0) __PYX_ERR(2, 1997, __pyx_L3_error)
          __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_empty_tuple, __pyx_t_9); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 1997, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          if ((likely(PyTuple_CheckExact(__pyx_t_5))) || (PyList_CheckExact(__pyx_t_5))) {
            PyObject* sequence = __pyx_t_5;
            Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
            if (unlikely(size != 3)) {
              if (size > 3) __Pyx_RaiseTooManyValuesError(3);
              else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
              __PYX_ERR(2, 1997, __pyx_L3_error)
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            if (likely(PyTuple_CheckExact(sequence))) {
              __pyx_t_9 = PyTuple_GET_ITEM(sequence, 0); 
              __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 
              __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
            } else {
              __pyx_t_9 = PyList_GET_ITEM(sequence, 0); 
              __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 
              __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 
            }
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_4);
            #else
            __pyx_t_9 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 1997, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_8 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1997, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_8);
            __pyx_t_4 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 1997, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_4);
            #endif
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          } else {
            Py_ssize_t index = -1;
            __pyx_t_10 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 1997, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_11 = Py_TYPE(__pyx_t_10)->tp_iternext;
            index = 0; __pyx_t_9 = __pyx_t_11(__pyx_t_10); if (unlikely(!__pyx_t_9)) goto __pyx_L15_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_9);
            index = 1; __pyx_t_8 = __pyx_t_11(__pyx_t_10); if (unlikely(!__pyx_t_8)) goto __pyx_L15_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_8);
            index = 2; __pyx_t_4 = __pyx_t_11(__pyx_t_10); if (unlikely(!__pyx_t_4)) goto __pyx_L15_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_4);
            if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_10), 3) < 0) __PYX_ERR(2, 1997, __pyx_L3_error)
            __pyx_t_11 = NULL;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            goto __pyx_L16_unpacking_done;
            __pyx_L15_unpacking_failed:;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __pyx_t_11 = NULL;
            if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
            __PYX_ERR(2, 1997, __pyx_L3_error)
            __pyx_L16_unpacking_done:;
          }
          __pyx_v_X = __pyx_t_9;
          __pyx_t_9 = 0;
          __pyx_v_Y = __pyx_t_8;
          __pyx_t_8 = 0;
          __pyx_v_vals = __pyx_t_4;
          __pyx_t_4 = 0;

          /* "src/pygcgopt/decomposition.pxi":1996
 *                 if matrixType == "nonzero" or matrixType == "nonzerowithvalue":
 *                     X, Y, vals = self.matrix(obj=obj, bcoef=bcoef)
 *                 elif matrixType == "miplibconstype":             # <<<<<<<<<<<<<<
 *                     X, Y, vals = self.matrixMIPLIBConsType(obj=obj, bcoef=bcoef)
 *                 elif matrixType == "scipvartype":
 */
          goto __pyx_L10;
        }

        /* "src/pygcgopt/decomposition.pxi":1998
 *                 elif matrixType == "miplibconstype":
 *                     X, Y, vals = self.matrixMIPLIBConsType(obj=obj, bcoef=bcoef)
 *                 elif matrixType == "scipvartype":             # <<<<<<<<<<<<<<
 *                     X, Y, vals = self.matrixSCIPVarType(obj=obj, bcoef=bcoef)
 * 
 */
        __pyx_t_6 = (__Pyx_PyUnicode_Equals(__pyx_v_matrixType, __pyx_n_u_scipvartype, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 1998, __pyx_L3_error)
        if (__pyx_t_6) {

          /* "src/pygcgopt/decomposition.pxi":1999
 *                     X, Y, vals = self.matrixMIPLIBConsType(obj=obj, bcoef=bcoef)
 *                 elif matrixType == "scipvartype":
 *                     X, Y, vals = self.matrixSCIPVarType(obj=obj, bcoef=bcoef)             # <<<<<<<<<<<<<<
 * 
 *             fig, ax = plt.subplots(figsize=figsize)
 */
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_matrixSCIPVarType); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 1999, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_4 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 1999, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_4);
          if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_obj, __pyx_v_obj) < 0) __PYX_ERR(2, 1999, __pyx_L3_error)
          if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_bcoef, __pyx_v_bcoef) < 0) __PYX_ERR(2, 1999, __pyx_L3_error)
          __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1999, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if ((likely(PyTuple_CheckExact(__pyx_t_8))) || (PyList_CheckExact(__pyx_t_8))) {
            PyObject* sequence = __pyx_t_8;
            Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
            if (unlikely(size != 3)) {
              if (size > 3) __Pyx_RaiseTooManyValuesError(3);
              else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
              __PYX_ERR(2, 1999, __pyx_L3_error)
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            if (likely(PyTuple_CheckExact(sequence))) {
              __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
              __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
              __pyx_t_9 = PyTuple_GET_ITEM(sequence, 2); 
            } else {
              __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
              __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
              __pyx_t_9 = PyList_GET_ITEM(sequence, 2); 
            }
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_9);
            #else
            __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 1999, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 1999, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_9 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 1999, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_9);
            #endif
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          } else {
            Py_ssize_t index = -1;
            __pyx_t_10 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 1999, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __pyx_t_11 = Py_TYPE(__pyx_t_10)->tp_iternext;
            index = 0; __pyx_t_4 = __pyx_t_11(__pyx_t_10); if (unlikely(!__pyx_t_4)) goto __pyx_L17_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_4);
            index = 1; __pyx_t_5 = __pyx_t_11(__pyx_t_10); if (unlikely(!__pyx_t_5)) goto __pyx_L17_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_5);
            index = 2; __pyx_t_9 = __pyx_t_11(__pyx_t_10); if (unlikely(!__pyx_t_9)) goto __pyx_L17_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_9);
            if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_10), 3) < 0) __PYX_ERR(2, 1999, __pyx_L3_error)
            __pyx_t_11 = NULL;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            goto __pyx_L18_unpacking_done;
            __pyx_L17_unpacking_failed:;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __pyx_t_11 = NULL;
            if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
            __PYX_ERR(2, 1999, __pyx_L3_error)
            __pyx_L18_unpacking_done:;
          }
          __pyx_v_X = __pyx_t_4;
          __pyx_t_4 = 0;
          __pyx_v_Y = __pyx_t_5;
          __pyx_t_5 = 0;
          __pyx_v_vals = __pyx_t_9;
          __pyx_t_9 = 0;

          /* "src/pygcgopt/decomposition.pxi":1998
 *                 elif matrixType == "miplibconstype":
 *                     X, Y, vals = self.matrixMIPLIBConsType(obj=obj, bcoef=bcoef)
 *                 elif matrixType == "scipvartype":             # <<<<<<<<<<<<<<
 *                     X, Y, vals = self.matrixSCIPVarType(obj=obj, bcoef=bcoef)
 * 
 */
        }
        __pyx_L10:;

        /* "src/pygcgopt/decomposition.pxi":1993
 *             import matplotlib.colors as colors
 * 
 *             if dots == True:             # <<<<<<<<<<<<<<
 *                 if matrixType == "nonzero" or matrixType == "nonzerowithvalue":
 *                     X, Y, vals = self.matrix(obj=obj, bcoef=bcoef)
 */
      }

      /* "src/pygcgopt/decomposition.pxi":2001
 *                     X, Y, vals = self.matrixSCIPVarType(obj=obj, bcoef=bcoef)
 * 
 *             fig, ax = plt.subplots(figsize=figsize)             # <<<<<<<<<<<<<<
 * 
 *             #set title
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_plt, __pyx_n_s_subplots); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2001, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 2001, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_figsize, __pyx_v_figsize) < 0) __PYX_ERR(2, 2001, __pyx_L3_error)
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_empty_tuple, __pyx_t_9); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2001, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if ((likely(PyTuple_CheckExact(__pyx_t_5))) || (PyList_CheckExact(__pyx_t_5))) {
        PyObject* sequence = __pyx_t_5;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(2, 2001, __pyx_L3_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_9 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_9 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_8);
        #else
        __pyx_t_9 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 2001, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_8 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2001, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_8);
        #endif
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_4 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2001, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_11 = Py_TYPE(__pyx_t_4)->tp_iternext;
        index = 0; __pyx_t_9 = __pyx_t_11(__pyx_t_4); if (unlikely(!__pyx_t_9)) goto __pyx_L19_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_9);
        index = 1; __pyx_t_8 = __pyx_t_11(__pyx_t_4); if (unlikely(!__pyx_t_8)) goto __pyx_L19_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_8);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_4), 2) < 0) __PYX_ERR(2, 2001, __pyx_L3_error)
        __pyx_t_11 = NULL;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        goto __pyx_L20_unpacking_done;
        __pyx_L19_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_11 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(2, 2001, __pyx_L3_error)
        __pyx_L20_unpacking_done:;
      }
      __pyx_v_fig = __pyx_t_9;
      __pyx_t_9 = 0;
      __pyx_v_ax = __pyx_t_8;
      __pyx_t_8 = 0;

      /* "src/pygcgopt/decomposition.pxi":2004
 * 
 *             #set title
 *             if title == None:             # <<<<<<<<<<<<<<
 *                 ax.set_title(self.getVisuName())
 *             else:
 */
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_title, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2004, __pyx_L3_error)
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 2004, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_6) {

        /* "src/pygcgopt/decomposition.pxi":2005
 *             #set title
 *             if title == None:
 *                 ax.set_title(self.getVisuName())             # <<<<<<<<<<<<<<
 *             else:
 *                 ax.set_title(title)
 */
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_set_title); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2005, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getVisuName); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2005, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_10 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
          }
        }
        __pyx_t_9 = (__pyx_t_10) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_10) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 2005, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
          }
        }
        __pyx_t_5 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_4, __pyx_t_9) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_9);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2005, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "src/pygcgopt/decomposition.pxi":2004
 * 
 *             #set title
 *             if title == None:             # <<<<<<<<<<<<<<
 *                 ax.set_title(self.getVisuName())
 *             else:
 */
        goto __pyx_L21;
      }

      /* "src/pygcgopt/decomposition.pxi":2007
 *                 ax.set_title(self.getVisuName())
 *             else:
 *                 ax.set_title(title)             # <<<<<<<<<<<<<<
 * 
 *             #create the boxes
 */
      /*else*/ {
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_set_title); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2007, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_9 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
          }
        }
        __pyx_t_5 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_v_title) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_title);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2007, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __pyx_L21:;

      /* "src/pygcgopt/decomposition.pxi":2010
 * 
 *             #create the boxes
 *             if boxes==True:             # <<<<<<<<<<<<<<
 *                 rowboxcounter = 0
 *                 colboxcounter = 0
 */
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_boxes, Py_True, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2010, __pyx_L3_error)
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 2010, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_6) {

        /* "src/pygcgopt/decomposition.pxi":2011
 *             #create the boxes
 *             if boxes==True:
 *                 rowboxcounter = 0             # <<<<<<<<<<<<<<
 *                 colboxcounter = 0
 * 
 */
        __Pyx_INCREF(__pyx_int_0);
        __pyx_v_rowboxcounter = __pyx_int_0;

        /* "src/pygcgopt/decomposition.pxi":2012
 *             if boxes==True:
 *                 rowboxcounter = 0
 *                 colboxcounter = 0             # <<<<<<<<<<<<<<
 * 
 *                 if self.getNLinkingvars()!=0:
 */
        __Pyx_INCREF(__pyx_int_0);
        __pyx_v_colboxcounter = __pyx_int_0;

        /* "src/pygcgopt/decomposition.pxi":2014
 *                 colboxcounter = 0
 * 
 *                 if self.getNLinkingvars()!=0:             # <<<<<<<<<<<<<<
 *                     lvars = patches.Rectangle((0,0), self.getNLinkingvars(), self.getNConss(), linewidth=linewidth, alpha=alpha, facecolor=linkingcolor, zorder=0, edgecolor=linecolor)
 *                     ax.add_patch(lvars)
 */
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNLinkingvars); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2014, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_9 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
          }
        }
        __pyx_t_5 = (__pyx_t_9) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_9) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2014, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyInt_NeObjC(__pyx_t_5, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2014, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 2014, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (__pyx_t_6) {

          /* "src/pygcgopt/decomposition.pxi":2015
 * 
 *                 if self.getNLinkingvars()!=0:
 *                     lvars = patches.Rectangle((0,0), self.getNLinkingvars(), self.getNConss(), linewidth=linewidth, alpha=alpha, facecolor=linkingcolor, zorder=0, edgecolor=linecolor)             # <<<<<<<<<<<<<<
 *                     ax.add_patch(lvars)
 *                     colboxcounter+=self.getNLinkingvars()
 */
          __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_patches, __pyx_n_s_Rectangle); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2015, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNLinkingvars); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 2015, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_4 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_9);
            if (likely(__pyx_t_4)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
              __Pyx_INCREF(__pyx_t_4);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_9, function);
            }
          }
          __pyx_t_5 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_9);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2015, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNConss); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2015, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_10 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
            __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_4);
            if (likely(__pyx_t_10)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
              __Pyx_INCREF(__pyx_t_10);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_4, function);
            }
          }
          __pyx_t_9 = (__pyx_t_10) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_10) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 2015, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2015, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_INCREF(__pyx_tuple__13);
          __Pyx_GIVEREF(__pyx_tuple__13);
          PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_tuple__13);
          __Pyx_GIVEREF(__pyx_t_5);
          PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_9);
          PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_9);
          __pyx_t_5 = 0;
          __pyx_t_9 = 0;
          __pyx_t_9 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 2015, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_9);
          if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_linewidth, __pyx_v_linewidth) < 0) __PYX_ERR(2, 2015, __pyx_L3_error)
          if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_alpha, __pyx_v_alpha) < 0) __PYX_ERR(2, 2015, __pyx_L3_error)
          if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_facecolor, __pyx_v_linkingcolor) < 0) __PYX_ERR(2, 2015, __pyx_L3_error)
          if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_zorder, __pyx_int_0) < 0) __PYX_ERR(2, 2015, __pyx_L3_error)
          if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_edgecolor, __pyx_v_linecolor) < 0) __PYX_ERR(2, 2015, __pyx_L3_error)
          __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_4, __pyx_t_9); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2015, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_v_lvars = __pyx_t_5;
          __pyx_t_5 = 0;

          /* "src/pygcgopt/decomposition.pxi":2016
 *                 if self.getNLinkingvars()!=0:
 *                     lvars = patches.Rectangle((0,0), self.getNLinkingvars(), self.getNConss(), linewidth=linewidth, alpha=alpha, facecolor=linkingcolor, zorder=0, edgecolor=linecolor)
 *                     ax.add_patch(lvars)             # <<<<<<<<<<<<<<
 *                     colboxcounter+=self.getNLinkingvars()
 * 
 */
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_add_patch); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 2016, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_4 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_9);
            if (likely(__pyx_t_4)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
              __Pyx_INCREF(__pyx_t_4);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_9, function);
            }
          }
          __pyx_t_5 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_4, __pyx_v_lvars) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_lvars);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2016, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

          /* "src/pygcgopt/decomposition.pxi":2017
 *                     lvars = patches.Rectangle((0,0), self.getNLinkingvars(), self.getNConss(), linewidth=linewidth, alpha=alpha, facecolor=linkingcolor, zorder=0, edgecolor=linecolor)
 *                     ax.add_patch(lvars)
 *                     colboxcounter+=self.getNLinkingvars()             # <<<<<<<<<<<<<<
 * 
 *                 if self.getNMasterconss()!=0:
 */
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNLinkingvars); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 2017, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_4 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_9);
            if (likely(__pyx_t_4)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
              __Pyx_INCREF(__pyx_t_4);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_9, function);
            }
          }
          __pyx_t_5 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_9);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2017, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_t_9 = PyNumber_InPlaceAdd(__pyx_v_colboxcounter, __pyx_t_5); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 2017, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF_SET(__pyx_v_colboxcounter, __pyx_t_9);
          __pyx_t_9 = 0;

          /* "src/pygcgopt/decomposition.pxi":2014
 *                 colboxcounter = 0
 * 
 *                 if self.getNLinkingvars()!=0:             # <<<<<<<<<<<<<<
 *                     lvars = patches.Rectangle((0,0), self.getNLinkingvars(), self.getNConss(), linewidth=linewidth, alpha=alpha, facecolor=linkingcolor, zorder=0, edgecolor=linecolor)
 *                     ax.add_patch(lvars)
 */
        }

        /* "src/pygcgopt/decomposition.pxi":2019
 *                     colboxcounter+=self.getNLinkingvars()
 * 
 *                 if self.getNMasterconss()!=0:             # <<<<<<<<<<<<<<
 *                     master = patches.Rectangle((0,0), self.getNVars(), self.getNMasterconss(), linewidth=linewidth, alpha=alpha, facecolor=mastercolor, zorder=0, edgecolor=linecolor)
 *                     ax.add_patch(master)
 */
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNMasterconss); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2019, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
          }
        }
        __pyx_t_9 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 2019, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyInt_NeObjC(__pyx_t_9, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2019, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 2019, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (__pyx_t_6) {

          /* "src/pygcgopt/decomposition.pxi":2020
 * 
 *                 if self.getNMasterconss()!=0:
 *                     master = patches.Rectangle((0,0), self.getNVars(), self.getNMasterconss(), linewidth=linewidth, alpha=alpha, facecolor=mastercolor, zorder=0, edgecolor=linecolor)             # <<<<<<<<<<<<<<
 *                     ax.add_patch(master)
 *                     rowboxcounter+=self.getNMasterconss()
 */
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_patches, __pyx_n_s_Rectangle); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2020, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNVars); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2020, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_8 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
            __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
            if (likely(__pyx_t_8)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
              __Pyx_INCREF(__pyx_t_8);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_4, function);
            }
          }
          __pyx_t_9 = (__pyx_t_8) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_8) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 2020, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNMasterconss); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2020, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_10 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
            __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_8);
            if (likely(__pyx_t_10)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
              __Pyx_INCREF(__pyx_t_10);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_8, function);
            }
          }
          __pyx_t_4 = (__pyx_t_10) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_10) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2020, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2020, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_INCREF(__pyx_tuple__13);
          __Pyx_GIVEREF(__pyx_tuple__13);
          PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_tuple__13);
          __Pyx_GIVEREF(__pyx_t_9);
          PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_9);
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_4);
          __pyx_t_9 = 0;
          __pyx_t_4 = 0;
          __pyx_t_4 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2020, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_4);
          if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_linewidth, __pyx_v_linewidth) < 0) __PYX_ERR(2, 2020, __pyx_L3_error)
          if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_alpha, __pyx_v_alpha) < 0) __PYX_ERR(2, 2020, __pyx_L3_error)
          if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_facecolor, __pyx_v_mastercolor) < 0) __PYX_ERR(2, 2020, __pyx_L3_error)
          if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_zorder, __pyx_int_0) < 0) __PYX_ERR(2, 2020, __pyx_L3_error)
          if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_edgecolor, __pyx_v_linecolor) < 0) __PYX_ERR(2, 2020, __pyx_L3_error)
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, __pyx_t_4); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 2020, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_v_master = __pyx_t_9;
          __pyx_t_9 = 0;

          /* "src/pygcgopt/decomposition.pxi":2021
 *                 if self.getNMasterconss()!=0:
 *                     master = patches.Rectangle((0,0), self.getNVars(), self.getNMasterconss(), linewidth=linewidth, alpha=alpha, facecolor=mastercolor, zorder=0, edgecolor=linecolor)
 *                     ax.add_patch(master)             # <<<<<<<<<<<<<<
 *                     rowboxcounter+=self.getNMasterconss()
 * 
 */
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_add_patch); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2021, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_8 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
            __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
            if (likely(__pyx_t_8)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
              __Pyx_INCREF(__pyx_t_8);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_4, function);
            }
          }
          __pyx_t_9 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_8, __pyx_v_master) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_master);
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 2021, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

          /* "src/pygcgopt/decomposition.pxi":2022
 *                     master = patches.Rectangle((0,0), self.getNVars(), self.getNMasterconss(), linewidth=linewidth, alpha=alpha, facecolor=mastercolor, zorder=0, edgecolor=linecolor)
 *                     ax.add_patch(master)
 *                     rowboxcounter+=self.getNMasterconss()             # <<<<<<<<<<<<<<
 * 
 *                 if self.getNMastervars()!=0:
 */
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNMasterconss); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2022, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_8 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
            __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
            if (likely(__pyx_t_8)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
              __Pyx_INCREF(__pyx_t_8);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_4, function);
            }
          }
          __pyx_t_9 = (__pyx_t_8) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_8) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 2022, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_rowboxcounter, __pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2022, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_DECREF_SET(__pyx_v_rowboxcounter, __pyx_t_4);
          __pyx_t_4 = 0;

          /* "src/pygcgopt/decomposition.pxi":2019
 *                     colboxcounter+=self.getNLinkingvars()
 * 
 *                 if self.getNMasterconss()!=0:             # <<<<<<<<<<<<<<
 *                     master = patches.Rectangle((0,0), self.getNVars(), self.getNMasterconss(), linewidth=linewidth, alpha=alpha, facecolor=mastercolor, zorder=0, edgecolor=linecolor)
 *                     ax.add_patch(master)
 */
        }

        /* "src/pygcgopt/decomposition.pxi":2024
 *                     rowboxcounter+=self.getNMasterconss()
 * 
 *                 if self.getNMastervars()!=0:             # <<<<<<<<<<<<<<
 *                     colboxcounter+=self.getNMastervars()
 * 
 */
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNMastervars); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 2024, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_8 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
          __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_9);
          if (likely(__pyx_t_8)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_8);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_9, function);
          }
        }
        __pyx_t_4 = (__pyx_t_8) ? __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_8) : __Pyx_PyObject_CallNoArg(__pyx_t_9);
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2024, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = __Pyx_PyInt_NeObjC(__pyx_t_4, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 2024, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 2024, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (__pyx_t_6) {

          /* "src/pygcgopt/decomposition.pxi":2025
 * 
 *                 if self.getNMastervars()!=0:
 *                     colboxcounter+=self.getNMastervars()             # <<<<<<<<<<<<<<
 * 
 *                 for b in range(self.getNBlocks()):
 */
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNMastervars); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2025, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_8 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
            __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
            if (likely(__pyx_t_8)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
              __Pyx_INCREF(__pyx_t_8);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_4, function);
            }
          }
          __pyx_t_9 = (__pyx_t_8) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_8) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 2025, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_colboxcounter, __pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2025, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_DECREF_SET(__pyx_v_colboxcounter, __pyx_t_4);
          __pyx_t_4 = 0;

          /* "src/pygcgopt/decomposition.pxi":2024
 *                     rowboxcounter+=self.getNMasterconss()
 * 
 *                 if self.getNMastervars()!=0:             # <<<<<<<<<<<<<<
 *                     colboxcounter+=self.getNMastervars()
 * 
 */
        }

        /* "src/pygcgopt/decomposition.pxi":2027
 *                     colboxcounter+=self.getNMastervars()
 * 
 *                 for b in range(self.getNBlocks()):             # <<<<<<<<<<<<<<
 *                     block = patches.Rectangle((colboxcounter,rowboxcounter), self.getNVarsForBlock(b), self.getNConssForBlock(b), linewidth=linewidth, alpha=alpha, facecolor=blockcolor, zorder=0, edgecolor=linecolor)
 *                     ax.add_patch(block)
 */
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNBlocks); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 2027, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_8 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
          __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_9);
          if (likely(__pyx_t_8)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_8);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_9, function);
          }
        }
        __pyx_t_4 = (__pyx_t_8) ? __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_8) : __Pyx_PyObject_CallNoArg(__pyx_t_9);
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2027, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_4); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 2027, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (likely(PyList_CheckExact(__pyx_t_9)) || PyTuple_CheckExact(__pyx_t_9)) {
          __pyx_t_4 = __pyx_t_9; __Pyx_INCREF(__pyx_t_4); __pyx_t_12 = 0;
          __pyx_t_13 = NULL;
        } else {
          __pyx_t_12 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2027, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_13 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(2, 2027, __pyx_L3_error)
        }
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        for (;;) {
          if (likely(!__pyx_t_13)) {
            if (likely(PyList_CheckExact(__pyx_t_4))) {
              if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_4)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_9 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_12); __Pyx_INCREF(__pyx_t_9); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(2, 2027, __pyx_L3_error)
              #else
              __pyx_t_9 = PySequence_ITEM(__pyx_t_4, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 2027, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_9);
              #endif
            } else {
              if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_12); __Pyx_INCREF(__pyx_t_9); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(2, 2027, __pyx_L3_error)
              #else
              __pyx_t_9 = PySequence_ITEM(__pyx_t_4, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 2027, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_9);
              #endif
            }
          } else {
            __pyx_t_9 = __pyx_t_13(__pyx_t_4);
            if (unlikely(!__pyx_t_9)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(2, 2027, __pyx_L3_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_9);
          }
          __Pyx_XDECREF_SET(__pyx_v_b, __pyx_t_9);
          __pyx_t_9 = 0;

          /* "src/pygcgopt/decomposition.pxi":2028
 * 
 *                 for b in range(self.getNBlocks()):
 *                     block = patches.Rectangle((colboxcounter,rowboxcounter), self.getNVarsForBlock(b), self.getNConssForBlock(b), linewidth=linewidth, alpha=alpha, facecolor=blockcolor, zorder=0, edgecolor=linecolor)             # <<<<<<<<<<<<<<
 *                     ax.add_patch(block)
 *                     colboxcounter += self.getNVarsForBlock(b)
 */
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_patches, __pyx_n_s_Rectangle); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 2028, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2028, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_INCREF(__pyx_v_colboxcounter);
          __Pyx_GIVEREF(__pyx_v_colboxcounter);
          PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_colboxcounter);
          __Pyx_INCREF(__pyx_v_rowboxcounter);
          __Pyx_GIVEREF(__pyx_v_rowboxcounter);
          PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_v_rowboxcounter);
          __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNVarsForBlock); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 2028, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_14 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
            __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_10);
            if (likely(__pyx_t_14)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
              __Pyx_INCREF(__pyx_t_14);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_10, function);
            }
          }
          __pyx_t_5 = (__pyx_t_14) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_14, __pyx_v_b) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_v_b);
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2028, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_14 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNConssForBlock); if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 2028, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_14);
          __pyx_t_15 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_14))) {
            __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_14);
            if (likely(__pyx_t_15)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
              __Pyx_INCREF(__pyx_t_15);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_14, function);
            }
          }
          __pyx_t_10 = (__pyx_t_15) ? __Pyx_PyObject_Call2Args(__pyx_t_14, __pyx_t_15, __pyx_v_b) : __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_v_b);
          __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
          if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 2028, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          __pyx_t_14 = PyTuple_New(3); if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 2028, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_GIVEREF(__pyx_t_8);
          PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_8);
          __Pyx_GIVEREF(__pyx_t_5);
          PyTuple_SET_ITEM(__pyx_t_14, 1, __pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_10);
          PyTuple_SET_ITEM(__pyx_t_14, 2, __pyx_t_10);
          __pyx_t_8 = 0;
          __pyx_t_5 = 0;
          __pyx_t_10 = 0;
          __pyx_t_10 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 2028, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_10);
          if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_linewidth, __pyx_v_linewidth) < 0) __PYX_ERR(2, 2028, __pyx_L3_error)
          if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_alpha, __pyx_v_alpha) < 0) __PYX_ERR(2, 2028, __pyx_L3_error)
          if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_facecolor, __pyx_v_blockcolor) < 0) __PYX_ERR(2, 2028, __pyx_L3_error)
          if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_zorder, __pyx_int_0) < 0) __PYX_ERR(2, 2028, __pyx_L3_error)
          if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_edgecolor, __pyx_v_linecolor) < 0) __PYX_ERR(2, 2028, __pyx_L3_error)
          __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_14, __pyx_t_10); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2028, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF_SET(__pyx_v_block, __pyx_t_5);
          __pyx_t_5 = 0;

          /* "src/pygcgopt/decomposition.pxi":2029
 *                 for b in range(self.getNBlocks()):
 *                     block = patches.Rectangle((colboxcounter,rowboxcounter), self.getNVarsForBlock(b), self.getNConssForBlock(b), linewidth=linewidth, alpha=alpha, facecolor=blockcolor, zorder=0, edgecolor=linecolor)
 *                     ax.add_patch(block)             # <<<<<<<<<<<<<<
 *                     colboxcounter += self.getNVarsForBlock(b)
 *                     if self.getNStairlinkingvars(b)!=0:
 */
          __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_add_patch); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 2029, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_14 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
            __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_10);
            if (likely(__pyx_t_14)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
              __Pyx_INCREF(__pyx_t_14);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_10, function);
            }
          }
          __pyx_t_5 = (__pyx_t_14) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_14, __pyx_v_block) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_v_block);
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2029, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

          /* "src/pygcgopt/decomposition.pxi":2030
 *                     block = patches.Rectangle((colboxcounter,rowboxcounter), self.getNVarsForBlock(b), self.getNConssForBlock(b), linewidth=linewidth, alpha=alpha, facecolor=blockcolor, zorder=0, edgecolor=linecolor)
 *                     ax.add_patch(block)
 *                     colboxcounter += self.getNVarsForBlock(b)             # <<<<<<<<<<<<<<
 *                     if self.getNStairlinkingvars(b)!=0:
 *                         stairlinking = patches.Rectangle((colboxcounter,rowboxcounter), self.getNStairlinkingvars(b), self.getNConssForBlock(b)+self.getNConssForBlock(b+1), linewidth=linewidth, alpha=alpha, facecolor=stairlinkingcolor, zorder=0, edgecolor=linecolor)
 */
          __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNVarsForBlock); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 2030, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_14 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
            __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_10);
            if (likely(__pyx_t_14)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
              __Pyx_INCREF(__pyx_t_14);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_10, function);
            }
          }
          __pyx_t_5 = (__pyx_t_14) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_14, __pyx_v_b) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_v_b);
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2030, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_10 = PyNumber_InPlaceAdd(__pyx_v_colboxcounter, __pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 2030, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF_SET(__pyx_v_colboxcounter, __pyx_t_10);
          __pyx_t_10 = 0;

          /* "src/pygcgopt/decomposition.pxi":2031
 *                     ax.add_patch(block)
 *                     colboxcounter += self.getNVarsForBlock(b)
 *                     if self.getNStairlinkingvars(b)!=0:             # <<<<<<<<<<<<<<
 *                         stairlinking = patches.Rectangle((colboxcounter,rowboxcounter), self.getNStairlinkingvars(b), self.getNConssForBlock(b)+self.getNConssForBlock(b+1), linewidth=linewidth, alpha=alpha, facecolor=stairlinkingcolor, zorder=0, edgecolor=linecolor)
 *                         ax.add_patch(stairlinking)
 */
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNStairlinkingvars); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2031, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_14 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
            __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_5);
            if (likely(__pyx_t_14)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
              __Pyx_INCREF(__pyx_t_14);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_5, function);
            }
          }
          __pyx_t_10 = (__pyx_t_14) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_14, __pyx_v_b) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_b);
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 2031, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = __Pyx_PyInt_NeObjC(__pyx_t_10, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2031, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 2031, __pyx_L3_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (__pyx_t_6) {

            /* "src/pygcgopt/decomposition.pxi":2032
 *                     colboxcounter += self.getNVarsForBlock(b)
 *                     if self.getNStairlinkingvars(b)!=0:
 *                         stairlinking = patches.Rectangle((colboxcounter,rowboxcounter), self.getNStairlinkingvars(b), self.getNConssForBlock(b)+self.getNConssForBlock(b+1), linewidth=linewidth, alpha=alpha, facecolor=stairlinkingcolor, zorder=0, edgecolor=linecolor)             # <<<<<<<<<<<<<<
 *                         ax.add_patch(stairlinking)
 *                     colboxcounter += self.getNStairlinkingvars(b)
 */
            __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_patches, __pyx_n_s_Rectangle); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2032, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 2032, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_INCREF(__pyx_v_colboxcounter);
            __Pyx_GIVEREF(__pyx_v_colboxcounter);
            PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_v_colboxcounter);
            __Pyx_INCREF(__pyx_v_rowboxcounter);
            __Pyx_GIVEREF(__pyx_v_rowboxcounter);
            PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_v_rowboxcounter);
            __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNStairlinkingvars); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 2032, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_8 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
              __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_9);
              if (likely(__pyx_t_8)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
                __Pyx_INCREF(__pyx_t_8);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_9, function);
              }
            }
            __pyx_t_14 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_8, __pyx_v_b) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_b);
            __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
            if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 2032, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_14);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNConssForBlock); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2032, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_8);
            __pyx_t_15 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
              __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_8);
              if (likely(__pyx_t_15)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
                __Pyx_INCREF(__pyx_t_15);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_8, function);
              }
            }
            __pyx_t_9 = (__pyx_t_15) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_15, __pyx_v_b) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_b);
            __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
            if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 2032, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __pyx_t_15 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNConssForBlock); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2032, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_15);
            __pyx_t_16 = __Pyx_PyInt_AddObjC(__pyx_v_b, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_16)) __PYX_ERR(2, 2032, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_16);
            __pyx_t_17 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
              __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_15);
              if (likely(__pyx_t_17)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
                __Pyx_INCREF(__pyx_t_17);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_15, function);
              }
            }
            __pyx_t_8 = (__pyx_t_17) ? __Pyx_PyObject_Call2Args(__pyx_t_15, __pyx_t_17, __pyx_t_16) : __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_t_16);
            __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2032, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            __pyx_t_15 = PyNumber_Add(__pyx_t_9, __pyx_t_8); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2032, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2032, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_GIVEREF(__pyx_t_10);
            PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_10);
            __Pyx_GIVEREF(__pyx_t_14);
            PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_14);
            __Pyx_GIVEREF(__pyx_t_15);
            PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_15);
            __pyx_t_10 = 0;
            __pyx_t_14 = 0;
            __pyx_t_15 = 0;
            __pyx_t_15 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2032, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_15);
            if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_linewidth, __pyx_v_linewidth) < 0) __PYX_ERR(2, 2032, __pyx_L3_error)
            if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_alpha, __pyx_v_alpha) < 0) __PYX_ERR(2, 2032, __pyx_L3_error)
            if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_facecolor, __pyx_v_stairlinkingcolor) < 0) __PYX_ERR(2, 2032, __pyx_L3_error)
            if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_zorder, __pyx_int_0) < 0) __PYX_ERR(2, 2032, __pyx_L3_error)
            if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_edgecolor, __pyx_v_linecolor) < 0) __PYX_ERR(2, 2032, __pyx_L3_error)
            __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, __pyx_t_15); if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 2032, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_14);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            __Pyx_XDECREF_SET(__pyx_v_stairlinking, __pyx_t_14);
            __pyx_t_14 = 0;

            /* "src/pygcgopt/decomposition.pxi":2033
 *                     if self.getNStairlinkingvars(b)!=0:
 *                         stairlinking = patches.Rectangle((colboxcounter,rowboxcounter), self.getNStairlinkingvars(b), self.getNConssForBlock(b)+self.getNConssForBlock(b+1), linewidth=linewidth, alpha=alpha, facecolor=stairlinkingcolor, zorder=0, edgecolor=linecolor)
 *                         ax.add_patch(stairlinking)             # <<<<<<<<<<<<<<
 *                     colboxcounter += self.getNStairlinkingvars(b)
 *                     rowboxcounter += self.getNConssForBlock(b)
 */
            __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_add_patch); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2033, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_15);
            __pyx_t_8 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
              __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_15);
              if (likely(__pyx_t_8)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
                __Pyx_INCREF(__pyx_t_8);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_15, function);
              }
            }
            __pyx_t_14 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_15, __pyx_t_8, __pyx_v_stairlinking) : __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_v_stairlinking);
            __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
            if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 2033, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_14);
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

            /* "src/pygcgopt/decomposition.pxi":2031
 *                     ax.add_patch(block)
 *                     colboxcounter += self.getNVarsForBlock(b)
 *                     if self.getNStairlinkingvars(b)!=0:             # <<<<<<<<<<<<<<
 *                         stairlinking = patches.Rectangle((colboxcounter,rowboxcounter), self.getNStairlinkingvars(b), self.getNConssForBlock(b)+self.getNConssForBlock(b+1), linewidth=linewidth, alpha=alpha, facecolor=stairlinkingcolor, zorder=0, edgecolor=linecolor)
 *                         ax.add_patch(stairlinking)
 */
          }

          /* "src/pygcgopt/decomposition.pxi":2034
 *                         stairlinking = patches.Rectangle((colboxcounter,rowboxcounter), self.getNStairlinkingvars(b), self.getNConssForBlock(b)+self.getNConssForBlock(b+1), linewidth=linewidth, alpha=alpha, facecolor=stairlinkingcolor, zorder=0, edgecolor=linecolor)
 *                         ax.add_patch(stairlinking)
 *                     colboxcounter += self.getNStairlinkingvars(b)             # <<<<<<<<<<<<<<
 *                     rowboxcounter += self.getNConssForBlock(b)
 * 
 */
          __pyx_t_15 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNStairlinkingvars); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2034, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_8 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
            __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_15);
            if (likely(__pyx_t_8)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
              __Pyx_INCREF(__pyx_t_8);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_15, function);
            }
          }
          __pyx_t_14 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_15, __pyx_t_8, __pyx_v_b) : __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_v_b);
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 2034, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __pyx_t_15 = PyNumber_InPlaceAdd(__pyx_v_colboxcounter, __pyx_t_14); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2034, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_DECREF_SET(__pyx_v_colboxcounter, __pyx_t_15);
          __pyx_t_15 = 0;

          /* "src/pygcgopt/decomposition.pxi":2035
 *                         ax.add_patch(stairlinking)
 *                     colboxcounter += self.getNStairlinkingvars(b)
 *                     rowboxcounter += self.getNConssForBlock(b)             # <<<<<<<<<<<<<<
 * 
 *                 if self.getNOpenvars()!=0:
 */
          __pyx_t_14 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNConssForBlock); if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 2035, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_14);
          __pyx_t_8 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_14))) {
            __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_14);
            if (likely(__pyx_t_8)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
              __Pyx_INCREF(__pyx_t_8);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_14, function);
            }
          }
          __pyx_t_15 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_14, __pyx_t_8, __pyx_v_b) : __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_v_b);
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2035, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          __pyx_t_14 = PyNumber_InPlaceAdd(__pyx_v_rowboxcounter, __pyx_t_15); if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 2035, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_DECREF_SET(__pyx_v_rowboxcounter, __pyx_t_14);
          __pyx_t_14 = 0;

          /* "src/pygcgopt/decomposition.pxi":2027
 *                     colboxcounter+=self.getNMastervars()
 * 
 *                 for b in range(self.getNBlocks()):             # <<<<<<<<<<<<<<
 *                     block = patches.Rectangle((colboxcounter,rowboxcounter), self.getNVarsForBlock(b), self.getNConssForBlock(b), linewidth=linewidth, alpha=alpha, facecolor=blockcolor, zorder=0, edgecolor=linecolor)
 *                     ax.add_patch(block)
 */
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "src/pygcgopt/decomposition.pxi":2037
 *                     rowboxcounter += self.getNConssForBlock(b)
 * 
 *                 if self.getNOpenvars()!=0:             # <<<<<<<<<<<<<<
 *                     openrec = patches.Rectangle((colboxcounter,rowboxcounter), self.getNOpenvars(), self.getNOpenconss(), linewidth=linewidth, alpha=alpha, facecolor=opencolor, zorder=0, edgecolor=linecolor)
 *                     ax.add_patch(openrec)
 */
        __pyx_t_14 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNOpenvars); if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 2037, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_15 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_14))) {
          __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_14);
          if (likely(__pyx_t_15)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
            __Pyx_INCREF(__pyx_t_15);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_14, function);
          }
        }
        __pyx_t_4 = (__pyx_t_15) ? __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_t_15) : __Pyx_PyObject_CallNoArg(__pyx_t_14);
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2037, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __pyx_t_14 = __Pyx_PyInt_NeObjC(__pyx_t_4, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 2037, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_14); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 2037, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        if (__pyx_t_6) {

          /* "src/pygcgopt/decomposition.pxi":2038
 * 
 *                 if self.getNOpenvars()!=0:
 *                     openrec = patches.Rectangle((colboxcounter,rowboxcounter), self.getNOpenvars(), self.getNOpenconss(), linewidth=linewidth, alpha=alpha, facecolor=opencolor, zorder=0, edgecolor=linecolor)             # <<<<<<<<<<<<<<
 *                     ax.add_patch(openrec)
 *                     colboxcounter += self.getNOpenvars()
 */
          __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_patches, __pyx_n_s_Rectangle); if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 2038, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_14);
          __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2038, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_INCREF(__pyx_v_colboxcounter);
          __Pyx_GIVEREF(__pyx_v_colboxcounter);
          PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_colboxcounter);
          __Pyx_INCREF(__pyx_v_rowboxcounter);
          __Pyx_GIVEREF(__pyx_v_rowboxcounter);
          PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_rowboxcounter);
          __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNOpenvars); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2038, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_5 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
            __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_8);
            if (likely(__pyx_t_5)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
              __Pyx_INCREF(__pyx_t_5);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_8, function);
            }
          }
          __pyx_t_15 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2038, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNOpenconss); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2038, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_10 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
            __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_5);
            if (likely(__pyx_t_10)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
              __Pyx_INCREF(__pyx_t_10);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_5, function);
            }
          }
          __pyx_t_8 = (__pyx_t_10) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_10) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2038, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2038, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_15);
          PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_15);
          __Pyx_GIVEREF(__pyx_t_8);
          PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_8);
          __pyx_t_4 = 0;
          __pyx_t_15 = 0;
          __pyx_t_8 = 0;
          __pyx_t_8 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2038, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_8);
          if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_linewidth, __pyx_v_linewidth) < 0) __PYX_ERR(2, 2038, __pyx_L3_error)
          if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_alpha, __pyx_v_alpha) < 0) __PYX_ERR(2, 2038, __pyx_L3_error)
          if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_facecolor, __pyx_v_opencolor) < 0) __PYX_ERR(2, 2038, __pyx_L3_error)
          if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_zorder, __pyx_int_0) < 0) __PYX_ERR(2, 2038, __pyx_L3_error)
          if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_edgecolor, __pyx_v_linecolor) < 0) __PYX_ERR(2, 2038, __pyx_L3_error)
          __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_5, __pyx_t_8); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2038, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_v_openrec = __pyx_t_15;
          __pyx_t_15 = 0;

          /* "src/pygcgopt/decomposition.pxi":2039
 *                 if self.getNOpenvars()!=0:
 *                     openrec = patches.Rectangle((colboxcounter,rowboxcounter), self.getNOpenvars(), self.getNOpenconss(), linewidth=linewidth, alpha=alpha, facecolor=opencolor, zorder=0, edgecolor=linecolor)
 *                     ax.add_patch(openrec)             # <<<<<<<<<<<<<<
 *                     colboxcounter += self.getNOpenvars()
 *                     rowboxcounter += self.getNOpenconss()
 */
          __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_add_patch); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2039, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_5 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
            __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_8);
            if (likely(__pyx_t_5)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
              __Pyx_INCREF(__pyx_t_5);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_8, function);
            }
          }
          __pyx_t_15 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_5, __pyx_v_openrec) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_openrec);
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2039, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

          /* "src/pygcgopt/decomposition.pxi":2040
 *                     openrec = patches.Rectangle((colboxcounter,rowboxcounter), self.getNOpenvars(), self.getNOpenconss(), linewidth=linewidth, alpha=alpha, facecolor=opencolor, zorder=0, edgecolor=linecolor)
 *                     ax.add_patch(openrec)
 *                     colboxcounter += self.getNOpenvars()             # <<<<<<<<<<<<<<
 *                     rowboxcounter += self.getNOpenconss()
 * 
 */
          __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNOpenvars); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2040, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_5 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
            __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_8);
            if (likely(__pyx_t_5)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
              __Pyx_INCREF(__pyx_t_5);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_8, function);
            }
          }
          __pyx_t_15 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2040, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_8 = PyNumber_InPlaceAdd(__pyx_v_colboxcounter, __pyx_t_15); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2040, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_DECREF_SET(__pyx_v_colboxcounter, __pyx_t_8);
          __pyx_t_8 = 0;

          /* "src/pygcgopt/decomposition.pxi":2041
 *                     ax.add_patch(openrec)
 *                     colboxcounter += self.getNOpenvars()
 *                     rowboxcounter += self.getNOpenconss()             # <<<<<<<<<<<<<<
 * 
 *             #set the zorder of the scatter-points
 */
          __pyx_t_15 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNOpenconss); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2041, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_5 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
            __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_15);
            if (likely(__pyx_t_5)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
              __Pyx_INCREF(__pyx_t_5);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_15, function);
            }
          }
          __pyx_t_8 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_15);
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2041, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __pyx_t_15 = PyNumber_InPlaceAdd(__pyx_v_rowboxcounter, __pyx_t_8); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2041, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF_SET(__pyx_v_rowboxcounter, __pyx_t_15);
          __pyx_t_15 = 0;

          /* "src/pygcgopt/decomposition.pxi":2037
 *                     rowboxcounter += self.getNConssForBlock(b)
 * 
 *                 if self.getNOpenvars()!=0:             # <<<<<<<<<<<<<<
 *                     openrec = patches.Rectangle((colboxcounter,rowboxcounter), self.getNOpenvars(), self.getNOpenconss(), linewidth=linewidth, alpha=alpha, facecolor=opencolor, zorder=0, edgecolor=linecolor)
 *                     ax.add_patch(openrec)
 */
        }

        /* "src/pygcgopt/decomposition.pxi":2010
 * 
 *             #create the boxes
 *             if boxes==True:             # <<<<<<<<<<<<<<
 *                 rowboxcounter = 0
 *                 colboxcounter = 0
 */
      }

      /* "src/pygcgopt/decomposition.pxi":2044
 * 
 *             #set the zorder of the scatter-points
 *             zorderForBoxes = 0             # <<<<<<<<<<<<<<
 *             if boxes == True:
 *                 zorderForBoxes = 1
 */
      __pyx_v_zorderForBoxes = 0;

      /* "src/pygcgopt/decomposition.pxi":2045
 *             #set the zorder of the scatter-points
 *             zorderForBoxes = 0
 *             if boxes == True:             # <<<<<<<<<<<<<<
 *                 zorderForBoxes = 1
 * 
 */
      __pyx_t_15 = PyObject_RichCompare(__pyx_v_boxes, Py_True, Py_EQ); __Pyx_XGOTREF(__pyx_t_15); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2045, __pyx_L3_error)
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_15); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 2045, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      if (__pyx_t_6) {

        /* "src/pygcgopt/decomposition.pxi":2046
 *             zorderForBoxes = 0
 *             if boxes == True:
 *                 zorderForBoxes = 1             # <<<<<<<<<<<<<<
 * 
 *             #plot the coefficients
 */
        __pyx_v_zorderForBoxes = 1;

        /* "src/pygcgopt/decomposition.pxi":2045
 *             #set the zorder of the scatter-points
 *             zorderForBoxes = 0
 *             if boxes == True:             # <<<<<<<<<<<<<<
 *                 zorderForBoxes = 1
 * 
 */
      }

      /* "src/pygcgopt/decomposition.pxi":2049
 * 
 *             #plot the coefficients
 *             if dots == True:             # <<<<<<<<<<<<<<
 *                 if matrixType == "nonzero":
 *                     if cmap == None:
 */
      __pyx_t_15 = PyObject_RichCompare(__pyx_v_dots, Py_True, Py_EQ); __Pyx_XGOTREF(__pyx_t_15); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2049, __pyx_L3_error)
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_15); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 2049, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      if (__pyx_t_6) {

        /* "src/pygcgopt/decomposition.pxi":2050
 *             #plot the coefficients
 *             if dots == True:
 *                 if matrixType == "nonzero":             # <<<<<<<<<<<<<<
 *                     if cmap == None:
 *                         scatter=ax.scatter([y+0.5 for y in Y], [x+0.5 for x in X], c="black", s=s, alpha=1, zorder=zorderForBoxes)
 */
        __pyx_t_6 = (__Pyx_PyUnicode_Equals(__pyx_v_matrixType, __pyx_n_u_nonzero, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 2050, __pyx_L3_error)
        if (__pyx_t_6) {

          /* "src/pygcgopt/decomposition.pxi":2051
 *             if dots == True:
 *                 if matrixType == "nonzero":
 *                     if cmap == None:             # <<<<<<<<<<<<<<
 *                         scatter=ax.scatter([y+0.5 for y in Y], [x+0.5 for x in X], c="black", s=s, alpha=1, zorder=zorderForBoxes)
 *                     else:
 */
          __pyx_t_15 = PyObject_RichCompare(__pyx_v_cmap, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_15); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2051, __pyx_L3_error)
          __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_15); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 2051, __pyx_L3_error)
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          if (__pyx_t_6) {

            /* "src/pygcgopt/decomposition.pxi":2052
 *                 if matrixType == "nonzero":
 *                     if cmap == None:
 *                         scatter=ax.scatter([y+0.5 for y in Y], [x+0.5 for x in X], c="black", s=s, alpha=1, zorder=zorderForBoxes)             # <<<<<<<<<<<<<<
 *                     else:
 *                         scatter=ax.scatter([y+0.5 for y in Y], [x+0.5 for x in X], c=cmap, s=s, alpha=1, zorder=zorderForBoxes)
 */
            __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_scatter); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2052, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_15);
            { /* enter inner scope */
              __pyx_t_8 = PyList_New(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2052, __pyx_L36_error)
              __Pyx_GOTREF(__pyx_t_8);
              if (unlikely(!__pyx_v_Y)) { __Pyx_RaiseUnboundLocalError("Y"); __PYX_ERR(2, 2052, __pyx_L36_error) }
              if (likely(PyList_CheckExact(__pyx_v_Y)) || PyTuple_CheckExact(__pyx_v_Y)) {
                __pyx_t_5 = __pyx_v_Y; __Pyx_INCREF(__pyx_t_5); __pyx_t_12 = 0;
                __pyx_t_13 = NULL;
              } else {
                __pyx_t_12 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_v_Y); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2052, __pyx_L36_error)
                __Pyx_GOTREF(__pyx_t_5);
                __pyx_t_13 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(2, 2052, __pyx_L36_error)
              }
              for (;;) {
                if (likely(!__pyx_t_13)) {
                  if (likely(PyList_CheckExact(__pyx_t_5))) {
                    if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_5)) break;
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_14 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_12); __Pyx_INCREF(__pyx_t_14); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(2, 2052, __pyx_L36_error)
                    #else
                    __pyx_t_14 = PySequence_ITEM(__pyx_t_5, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 2052, __pyx_L36_error)
                    __Pyx_GOTREF(__pyx_t_14);
                    #endif
                  } else {
                    if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_14 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_12); __Pyx_INCREF(__pyx_t_14); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(2, 2052, __pyx_L36_error)
                    #else
                    __pyx_t_14 = PySequence_ITEM(__pyx_t_5, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 2052, __pyx_L36_error)
                    __Pyx_GOTREF(__pyx_t_14);
                    #endif
                  }
                } else {
                  __pyx_t_14 = __pyx_t_13(__pyx_t_5);
                  if (unlikely(!__pyx_t_14)) {
                    PyObject* exc_type = PyErr_Occurred();
                    if (exc_type) {
                      if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                      else __PYX_ERR(2, 2052, __pyx_L36_error)
                    }
                    break;
                  }
                  __Pyx_GOTREF(__pyx_t_14);
                }
                __Pyx_XDECREF_SET(__pyx_8genexpr3__pyx_v_y, __pyx_t_14);
                __pyx_t_14 = 0;
                __pyx_t_14 = __Pyx_PyFloat_AddObjC(__pyx_8genexpr3__pyx_v_y, __pyx_float_0_5, 0.5, 0, 0); if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 2052, __pyx_L36_error)
                __Pyx_GOTREF(__pyx_t_14);
                if (unlikely(__Pyx_ListComp_Append(__pyx_t_8, (PyObject*)__pyx_t_14))) __PYX_ERR(2, 2052, __pyx_L36_error)
                __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
              }
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
              __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_y); __pyx_8genexpr3__pyx_v_y = 0;
              goto __pyx_L39_exit_scope;
              __pyx_L36_error:;
              __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_y); __pyx_8genexpr3__pyx_v_y = 0;
              goto __pyx_L3_error;
              __pyx_L39_exit_scope:;
            } /* exit inner scope */
            { /* enter inner scope */
              __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2052, __pyx_L42_error)
              __Pyx_GOTREF(__pyx_t_5);
              if (unlikely(!__pyx_v_X)) { __Pyx_RaiseUnboundLocalError("X"); __PYX_ERR(2, 2052, __pyx_L42_error) }
              if (likely(PyList_CheckExact(__pyx_v_X)) || PyTuple_CheckExact(__pyx_v_X)) {
                __pyx_t_14 = __pyx_v_X; __Pyx_INCREF(__pyx_t_14); __pyx_t_12 = 0;
                __pyx_t_13 = NULL;
              } else {
                __pyx_t_12 = -1; __pyx_t_14 = PyObject_GetIter(__pyx_v_X); if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 2052, __pyx_L42_error)
                __Pyx_GOTREF(__pyx_t_14);
                __pyx_t_13 = Py_TYPE(__pyx_t_14)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(2, 2052, __pyx_L42_error)
              }
              for (;;) {
                if (likely(!__pyx_t_13)) {
                  if (likely(PyList_CheckExact(__pyx_t_14))) {
                    if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_14)) break;
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_4 = PyList_GET_ITEM(__pyx_t_14, __pyx_t_12); __Pyx_INCREF(__pyx_t_4); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(2, 2052, __pyx_L42_error)
                    #else
                    __pyx_t_4 = PySequence_ITEM(__pyx_t_14, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2052, __pyx_L42_error)
                    __Pyx_GOTREF(__pyx_t_4);
                    #endif
                  } else {
                    if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_14)) break;
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_14, __pyx_t_12); __Pyx_INCREF(__pyx_t_4); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(2, 2052, __pyx_L42_error)
                    #else
                    __pyx_t_4 = PySequence_ITEM(__pyx_t_14, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2052, __pyx_L42_error)
                    __Pyx_GOTREF(__pyx_t_4);
                    #endif
                  }
                } else {
                  __pyx_t_4 = __pyx_t_13(__pyx_t_14);
                  if (unlikely(!__pyx_t_4)) {
                    PyObject* exc_type = PyErr_Occurred();
                    if (exc_type) {
                      if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                      else __PYX_ERR(2, 2052, __pyx_L42_error)
                    }
                    break;
                  }
                  __Pyx_GOTREF(__pyx_t_4);
                }
                __Pyx_XDECREF_SET(__pyx_8genexpr4__pyx_v_x, __pyx_t_4);
                __pyx_t_4 = 0;
                __pyx_t_4 = __Pyx_PyFloat_AddObjC(__pyx_8genexpr4__pyx_v_x, __pyx_float_0_5, 0.5, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2052, __pyx_L42_error)
                __Pyx_GOTREF(__pyx_t_4);
                if (unlikely(__Pyx_ListComp_Append(__pyx_t_5, (PyObject*)__pyx_t_4))) __PYX_ERR(2, 2052, __pyx_L42_error)
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              }
              __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
              __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_x); __pyx_8genexpr4__pyx_v_x = 0;
              goto __pyx_L45_exit_scope;
              __pyx_L42_error:;
              __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_x); __pyx_8genexpr4__pyx_v_x = 0;
              goto __pyx_L3_error;
              __pyx_L45_exit_scope:;
            } /* exit inner scope */
            __pyx_t_14 = PyTuple_New(2); if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 2052, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_14);
            __Pyx_GIVEREF(__pyx_t_8);
            PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_8);
            __Pyx_GIVEREF(__pyx_t_5);
            PyTuple_SET_ITEM(__pyx_t_14, 1, __pyx_t_5);
            __pyx_t_8 = 0;
            __pyx_t_5 = 0;
            __pyx_t_5 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2052, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_5);
            if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_c, __pyx_n_u_black) < 0) __PYX_ERR(2, 2052, __pyx_L3_error)
            if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_s, __pyx_v_s) < 0) __PYX_ERR(2, 2052, __pyx_L3_error)
            if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_alpha, __pyx_int_1) < 0) __PYX_ERR(2, 2052, __pyx_L3_error)
            __pyx_t_8 = __Pyx_PyInt_From_long(__pyx_v_zorderForBoxes); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2052, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_8);
            if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_zorder, __pyx_t_8) < 0) __PYX_ERR(2, 2052, __pyx_L3_error)
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_t_14, __pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2052, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_v_scatter = __pyx_t_8;
            __pyx_t_8 = 0;

            /* "src/pygcgopt/decomposition.pxi":2051
 *             if dots == True:
 *                 if matrixType == "nonzero":
 *                     if cmap == None:             # <<<<<<<<<<<<<<
 *                         scatter=ax.scatter([y+0.5 for y in Y], [x+0.5 for x in X], c="black", s=s, alpha=1, zorder=zorderForBoxes)
 *                     else:
 */
            goto __pyx_L33;
          }

          /* "src/pygcgopt/decomposition.pxi":2054
 *                         scatter=ax.scatter([y+0.5 for y in Y], [x+0.5 for x in X], c="black", s=s, alpha=1, zorder=zorderForBoxes)
 *                     else:
 *                         scatter=ax.scatter([y+0.5 for y in Y], [x+0.5 for x in X], c=cmap, s=s, alpha=1, zorder=zorderForBoxes)             # <<<<<<<<<<<<<<
 *                 elif matrixType == "nonzerowithvalue":
 *                     if cmap == None:
 */
          /*else*/ {
            __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_scatter); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2054, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_8);
            { /* enter inner scope */
              __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2054, __pyx_L48_error)
              __Pyx_GOTREF(__pyx_t_5);
              if (unlikely(!__pyx_v_Y)) { __Pyx_RaiseUnboundLocalError("Y"); __PYX_ERR(2, 2054, __pyx_L48_error) }
              if (likely(PyList_CheckExact(__pyx_v_Y)) || PyTuple_CheckExact(__pyx_v_Y)) {
                __pyx_t_14 = __pyx_v_Y; __Pyx_INCREF(__pyx_t_14); __pyx_t_12 = 0;
                __pyx_t_13 = NULL;
              } else {
                __pyx_t_12 = -1; __pyx_t_14 = PyObject_GetIter(__pyx_v_Y); if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 2054, __pyx_L48_error)
                __Pyx_GOTREF(__pyx_t_14);
                __pyx_t_13 = Py_TYPE(__pyx_t_14)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(2, 2054, __pyx_L48_error)
              }
              for (;;) {
                if (likely(!__pyx_t_13)) {
                  if (likely(PyList_CheckExact(__pyx_t_14))) {
                    if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_14)) break;
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_15 = PyList_GET_ITEM(__pyx_t_14, __pyx_t_12); __Pyx_INCREF(__pyx_t_15); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(2, 2054, __pyx_L48_error)
                    #else
                    __pyx_t_15 = PySequence_ITEM(__pyx_t_14, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2054, __pyx_L48_error)
                    __Pyx_GOTREF(__pyx_t_15);
                    #endif
                  } else {
                    if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_14)) break;
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_15 = PyTuple_GET_ITEM(__pyx_t_14, __pyx_t_12); __Pyx_INCREF(__pyx_t_15); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(2, 2054, __pyx_L48_error)
                    #else
                    __pyx_t_15 = PySequence_ITEM(__pyx_t_14, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2054, __pyx_L48_error)
                    __Pyx_GOTREF(__pyx_t_15);
                    #endif
                  }
                } else {
                  __pyx_t_15 = __pyx_t_13(__pyx_t_14);
                  if (unlikely(!__pyx_t_15)) {
                    PyObject* exc_type = PyErr_Occurred();
                    if (exc_type) {
                      if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                      else __PYX_ERR(2, 2054, __pyx_L48_error)
                    }
                    break;
                  }
                  __Pyx_GOTREF(__pyx_t_15);
                }
                __Pyx_XDECREF_SET(__pyx_8genexpr5__pyx_v_y, __pyx_t_15);
                __pyx_t_15 = 0;
                __pyx_t_15 = __Pyx_PyFloat_AddObjC(__pyx_8genexpr5__pyx_v_y, __pyx_float_0_5, 0.5, 0, 0); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2054, __pyx_L48_error)
                __Pyx_GOTREF(__pyx_t_15);
                if (unlikely(__Pyx_ListComp_Append(__pyx_t_5, (PyObject*)__pyx_t_15))) __PYX_ERR(2, 2054, __pyx_L48_error)
                __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              }
              __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
              __Pyx_XDECREF(__pyx_8genexpr5__pyx_v_y); __pyx_8genexpr5__pyx_v_y = 0;
              goto __pyx_L51_exit_scope;
              __pyx_L48_error:;
              __Pyx_XDECREF(__pyx_8genexpr5__pyx_v_y); __pyx_8genexpr5__pyx_v_y = 0;
              goto __pyx_L3_error;
              __pyx_L51_exit_scope:;
            } /* exit inner scope */
            { /* enter inner scope */
              __pyx_t_14 = PyList_New(0); if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 2054, __pyx_L54_error)
              __Pyx_GOTREF(__pyx_t_14);
              if (unlikely(!__pyx_v_X)) { __Pyx_RaiseUnboundLocalError("X"); __PYX_ERR(2, 2054, __pyx_L54_error) }
              if (likely(PyList_CheckExact(__pyx_v_X)) || PyTuple_CheckExact(__pyx_v_X)) {
                __pyx_t_15 = __pyx_v_X; __Pyx_INCREF(__pyx_t_15); __pyx_t_12 = 0;
                __pyx_t_13 = NULL;
              } else {
                __pyx_t_12 = -1; __pyx_t_15 = PyObject_GetIter(__pyx_v_X); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2054, __pyx_L54_error)
                __Pyx_GOTREF(__pyx_t_15);
                __pyx_t_13 = Py_TYPE(__pyx_t_15)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(2, 2054, __pyx_L54_error)
              }
              for (;;) {
                if (likely(!__pyx_t_13)) {
                  if (likely(PyList_CheckExact(__pyx_t_15))) {
                    if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_15)) break;
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_4 = PyList_GET_ITEM(__pyx_t_15, __pyx_t_12); __Pyx_INCREF(__pyx_t_4); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(2, 2054, __pyx_L54_error)
                    #else
                    __pyx_t_4 = PySequence_ITEM(__pyx_t_15, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2054, __pyx_L54_error)
                    __Pyx_GOTREF(__pyx_t_4);
                    #endif
                  } else {
                    if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_15)) break;
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_15, __pyx_t_12); __Pyx_INCREF(__pyx_t_4); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(2, 2054, __pyx_L54_error)
                    #else
                    __pyx_t_4 = PySequence_ITEM(__pyx_t_15, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2054, __pyx_L54_error)
                    __Pyx_GOTREF(__pyx_t_4);
                    #endif
                  }
                } else {
                  __pyx_t_4 = __pyx_t_13(__pyx_t_15);
                  if (unlikely(!__pyx_t_4)) {
                    PyObject* exc_type = PyErr_Occurred();
                    if (exc_type) {
                      if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                      else __PYX_ERR(2, 2054, __pyx_L54_error)
                    }
                    break;
                  }
                  __Pyx_GOTREF(__pyx_t_4);
                }
                __Pyx_XDECREF_SET(__pyx_8genexpr6__pyx_v_x, __pyx_t_4);
                __pyx_t_4 = 0;
                __pyx_t_4 = __Pyx_PyFloat_AddObjC(__pyx_8genexpr6__pyx_v_x, __pyx_float_0_5, 0.5, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2054, __pyx_L54_error)
                __Pyx_GOTREF(__pyx_t_4);
                if (unlikely(__Pyx_ListComp_Append(__pyx_t_14, (PyObject*)__pyx_t_4))) __PYX_ERR(2, 2054, __pyx_L54_error)
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              }
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              __Pyx_XDECREF(__pyx_8genexpr6__pyx_v_x); __pyx_8genexpr6__pyx_v_x = 0;
              goto __pyx_L57_exit_scope;
              __pyx_L54_error:;
              __Pyx_XDECREF(__pyx_8genexpr6__pyx_v_x); __pyx_8genexpr6__pyx_v_x = 0;
              goto __pyx_L3_error;
              __pyx_L57_exit_scope:;
            } /* exit inner scope */
            __pyx_t_15 = PyTuple_New(2); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2054, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_GIVEREF(__pyx_t_5);
            PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_5);
            __Pyx_GIVEREF(__pyx_t_14);
            PyTuple_SET_ITEM(__pyx_t_15, 1, __pyx_t_14);
            __pyx_t_5 = 0;
            __pyx_t_14 = 0;
            __pyx_t_14 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 2054, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_14);
            if (PyDict_SetItem(__pyx_t_14, __pyx_n_s_c, __pyx_v_cmap) < 0) __PYX_ERR(2, 2054, __pyx_L3_error)
            if (PyDict_SetItem(__pyx_t_14, __pyx_n_s_s, __pyx_v_s) < 0) __PYX_ERR(2, 2054, __pyx_L3_error)
            if (PyDict_SetItem(__pyx_t_14, __pyx_n_s_alpha, __pyx_int_1) < 0) __PYX_ERR(2, 2054, __pyx_L3_error)
            __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_zorderForBoxes); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2054, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_5);
            if (PyDict_SetItem(__pyx_t_14, __pyx_n_s_zorder, __pyx_t_5) < 0) __PYX_ERR(2, 2054, __pyx_L3_error)
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_15, __pyx_t_14); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2054, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
            __pyx_v_scatter = __pyx_t_5;
            __pyx_t_5 = 0;
          }
          __pyx_L33:;

          /* "src/pygcgopt/decomposition.pxi":2050
 *             #plot the coefficients
 *             if dots == True:
 *                 if matrixType == "nonzero":             # <<<<<<<<<<<<<<
 *                     if cmap == None:
 *                         scatter=ax.scatter([y+0.5 for y in Y], [x+0.5 for x in X], c="black", s=s, alpha=1, zorder=zorderForBoxes)
 */
          goto __pyx_L32;
        }

        /* "src/pygcgopt/decomposition.pxi":2055
 *                     else:
 *                         scatter=ax.scatter([y+0.5 for y in Y], [x+0.5 for x in X], c=cmap, s=s, alpha=1, zorder=zorderForBoxes)
 *                 elif matrixType == "nonzerowithvalue":             # <<<<<<<<<<<<<<
 *                     if cmap == None:
 *                         scatter=ax.scatter([y+0.5 for y in Y], [x+0.5 for x in X], c=vals, s=s, alpha=1, zorder=zorderForBoxes)
 */
        __pyx_t_6 = (__Pyx_PyUnicode_Equals(__pyx_v_matrixType, __pyx_n_u_nonzerowithvalue, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 2055, __pyx_L3_error)
        if (__pyx_t_6) {

          /* "src/pygcgopt/decomposition.pxi":2056
 *                         scatter=ax.scatter([y+0.5 for y in Y], [x+0.5 for x in X], c=cmap, s=s, alpha=1, zorder=zorderForBoxes)
 *                 elif matrixType == "nonzerowithvalue":
 *                     if cmap == None:             # <<<<<<<<<<<<<<
 *                         scatter=ax.scatter([y+0.5 for y in Y], [x+0.5 for x in X], c=vals, s=s, alpha=1, zorder=zorderForBoxes)
 *                     else:
 */
          __pyx_t_5 = PyObject_RichCompare(__pyx_v_cmap, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2056, __pyx_L3_error)
          __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 2056, __pyx_L3_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (__pyx_t_6) {

            /* "src/pygcgopt/decomposition.pxi":2057
 *                 elif matrixType == "nonzerowithvalue":
 *                     if cmap == None:
 *                         scatter=ax.scatter([y+0.5 for y in Y], [x+0.5 for x in X], c=vals, s=s, alpha=1, zorder=zorderForBoxes)             # <<<<<<<<<<<<<<
 *                     else:
 *                         if norm == None:
 */
            __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_scatter); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2057, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_5);
            { /* enter inner scope */
              __pyx_t_14 = PyList_New(0); if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 2057, __pyx_L61_error)
              __Pyx_GOTREF(__pyx_t_14);
              if (unlikely(!__pyx_v_Y)) { __Pyx_RaiseUnboundLocalError("Y"); __PYX_ERR(2, 2057, __pyx_L61_error) }
              if (likely(PyList_CheckExact(__pyx_v_Y)) || PyTuple_CheckExact(__pyx_v_Y)) {
                __pyx_t_15 = __pyx_v_Y; __Pyx_INCREF(__pyx_t_15); __pyx_t_12 = 0;
                __pyx_t_13 = NULL;
              } else {
                __pyx_t_12 = -1; __pyx_t_15 = PyObject_GetIter(__pyx_v_Y); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2057, __pyx_L61_error)
                __Pyx_GOTREF(__pyx_t_15);
                __pyx_t_13 = Py_TYPE(__pyx_t_15)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(2, 2057, __pyx_L61_error)
              }
              for (;;) {
                if (likely(!__pyx_t_13)) {
                  if (likely(PyList_CheckExact(__pyx_t_15))) {
                    if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_15)) break;
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_8 = PyList_GET_ITEM(__pyx_t_15, __pyx_t_12); __Pyx_INCREF(__pyx_t_8); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(2, 2057, __pyx_L61_error)
                    #else
                    __pyx_t_8 = PySequence_ITEM(__pyx_t_15, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2057, __pyx_L61_error)
                    __Pyx_GOTREF(__pyx_t_8);
                    #endif
                  } else {
                    if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_15)) break;
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_15, __pyx_t_12); __Pyx_INCREF(__pyx_t_8); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(2, 2057, __pyx_L61_error)
                    #else
                    __pyx_t_8 = PySequence_ITEM(__pyx_t_15, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2057, __pyx_L61_error)
                    __Pyx_GOTREF(__pyx_t_8);
                    #endif
                  }
                } else {
                  __pyx_t_8 = __pyx_t_13(__pyx_t_15);
                  if (unlikely(!__pyx_t_8)) {
                    PyObject* exc_type = PyErr_Occurred();
                    if (exc_type) {
                      if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                      else __PYX_ERR(2, 2057, __pyx_L61_error)
                    }
                    break;
                  }
                  __Pyx_GOTREF(__pyx_t_8);
                }
                __Pyx_XDECREF_SET(__pyx_8genexpr7__pyx_v_y, __pyx_t_8);
                __pyx_t_8 = 0;
                __pyx_t_8 = __Pyx_PyFloat_AddObjC(__pyx_8genexpr7__pyx_v_y, __pyx_float_0_5, 0.5, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2057, __pyx_L61_error)
                __Pyx_GOTREF(__pyx_t_8);
                if (unlikely(__Pyx_ListComp_Append(__pyx_t_14, (PyObject*)__pyx_t_8))) __PYX_ERR(2, 2057, __pyx_L61_error)
                __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              }
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              __Pyx_XDECREF(__pyx_8genexpr7__pyx_v_y); __pyx_8genexpr7__pyx_v_y = 0;
              goto __pyx_L64_exit_scope;
              __pyx_L61_error:;
              __Pyx_XDECREF(__pyx_8genexpr7__pyx_v_y); __pyx_8genexpr7__pyx_v_y = 0;
              goto __pyx_L3_error;
              __pyx_L64_exit_scope:;
            } /* exit inner scope */
            { /* enter inner scope */
              __pyx_t_15 = PyList_New(0); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2057, __pyx_L67_error)
              __Pyx_GOTREF(__pyx_t_15);
              if (unlikely(!__pyx_v_X)) { __Pyx_RaiseUnboundLocalError("X"); __PYX_ERR(2, 2057, __pyx_L67_error) }
              if (likely(PyList_CheckExact(__pyx_v_X)) || PyTuple_CheckExact(__pyx_v_X)) {
                __pyx_t_8 = __pyx_v_X; __Pyx_INCREF(__pyx_t_8); __pyx_t_12 = 0;
                __pyx_t_13 = NULL;
              } else {
                __pyx_t_12 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_v_X); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2057, __pyx_L67_error)
                __Pyx_GOTREF(__pyx_t_8);
                __pyx_t_13 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(2, 2057, __pyx_L67_error)
              }
              for (;;) {
                if (likely(!__pyx_t_13)) {
                  if (likely(PyList_CheckExact(__pyx_t_8))) {
                    if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_8)) break;
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_4 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_12); __Pyx_INCREF(__pyx_t_4); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(2, 2057, __pyx_L67_error)
                    #else
                    __pyx_t_4 = PySequence_ITEM(__pyx_t_8, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2057, __pyx_L67_error)
                    __Pyx_GOTREF(__pyx_t_4);
                    #endif
                  } else {
                    if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_12); __Pyx_INCREF(__pyx_t_4); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(2, 2057, __pyx_L67_error)
                    #else
                    __pyx_t_4 = PySequence_ITEM(__pyx_t_8, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2057, __pyx_L67_error)
                    __Pyx_GOTREF(__pyx_t_4);
                    #endif
                  }
                } else {
                  __pyx_t_4 = __pyx_t_13(__pyx_t_8);
                  if (unlikely(!__pyx_t_4)) {
                    PyObject* exc_type = PyErr_Occurred();
                    if (exc_type) {
                      if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                      else __PYX_ERR(2, 2057, __pyx_L67_error)
                    }
                    break;
                  }
                  __Pyx_GOTREF(__pyx_t_4);
                }
                __Pyx_XDECREF_SET(__pyx_8genexpr8__pyx_v_x, __pyx_t_4);
                __pyx_t_4 = 0;
                __pyx_t_4 = __Pyx_PyFloat_AddObjC(__pyx_8genexpr8__pyx_v_x, __pyx_float_0_5, 0.5, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2057, __pyx_L67_error)
                __Pyx_GOTREF(__pyx_t_4);
                if (unlikely(__Pyx_ListComp_Append(__pyx_t_15, (PyObject*)__pyx_t_4))) __PYX_ERR(2, 2057, __pyx_L67_error)
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              }
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              __Pyx_XDECREF(__pyx_8genexpr8__pyx_v_x); __pyx_8genexpr8__pyx_v_x = 0;
              goto __pyx_L70_exit_scope;
              __pyx_L67_error:;
              __Pyx_XDECREF(__pyx_8genexpr8__pyx_v_x); __pyx_8genexpr8__pyx_v_x = 0;
              goto __pyx_L3_error;
              __pyx_L70_exit_scope:;
            } /* exit inner scope */
            __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2057, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_GIVEREF(__pyx_t_14);
            PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_14);
            __Pyx_GIVEREF(__pyx_t_15);
            PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_15);
            __pyx_t_14 = 0;
            __pyx_t_15 = 0;
            __pyx_t_15 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2057, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_15);
            if (unlikely(!__pyx_v_vals)) { __Pyx_RaiseUnboundLocalError("vals"); __PYX_ERR(2, 2057, __pyx_L3_error) }
            if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_c, __pyx_v_vals) < 0) __PYX_ERR(2, 2057, __pyx_L3_error)
            if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_s, __pyx_v_s) < 0) __PYX_ERR(2, 2057, __pyx_L3_error)
            if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_alpha, __pyx_int_1) < 0) __PYX_ERR(2, 2057, __pyx_L3_error)
            __pyx_t_14 = __Pyx_PyInt_From_long(__pyx_v_zorderForBoxes); if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 2057, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_14);
            if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_zorder, __pyx_t_14) < 0) __PYX_ERR(2, 2057, __pyx_L3_error)
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
            __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, __pyx_t_15); if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 2057, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_14);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            __pyx_v_scatter = __pyx_t_14;
            __pyx_t_14 = 0;

            /* "src/pygcgopt/decomposition.pxi":2056
 *                         scatter=ax.scatter([y+0.5 for y in Y], [x+0.5 for x in X], c=cmap, s=s, alpha=1, zorder=zorderForBoxes)
 *                 elif matrixType == "nonzerowithvalue":
 *                     if cmap == None:             # <<<<<<<<<<<<<<
 *                         scatter=ax.scatter([y+0.5 for y in Y], [x+0.5 for x in X], c=vals, s=s, alpha=1, zorder=zorderForBoxes)
 *                     else:
 */
            goto __pyx_L58;
          }

          /* "src/pygcgopt/decomposition.pxi":2059
 *                         scatter=ax.scatter([y+0.5 for y in Y], [x+0.5 for x in X], c=vals, s=s, alpha=1, zorder=zorderForBoxes)
 *                     else:
 *                         if norm == None:             # <<<<<<<<<<<<<<
 *                             scatter=ax.scatter([y+0.5 for y in Y], [x+0.5 for x in X], c=vals, cmap=cmap, s=s, alpha=1, zorder=zorderForBoxes)
 *                         else:
 */
          /*else*/ {
            __pyx_t_14 = PyObject_RichCompare(__pyx_v_norm, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_14); if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 2059, __pyx_L3_error)
            __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_14); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 2059, __pyx_L3_error)
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
            if (__pyx_t_6) {

              /* "src/pygcgopt/decomposition.pxi":2060
 *                     else:
 *                         if norm == None:
 *                             scatter=ax.scatter([y+0.5 for y in Y], [x+0.5 for x in X], c=vals, cmap=cmap, s=s, alpha=1, zorder=zorderForBoxes)             # <<<<<<<<<<<<<<
 *                         else:
 *                             scatter=ax.scatter([y+0.5 for y in Y], [x+0.5 for x in X], c=vals, cmap=cmap, norm=norm, s=s, alpha=1, zorder=zorderForBoxes)
 */
              __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_scatter); if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 2060, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_14);
              { /* enter inner scope */
                __pyx_t_15 = PyList_New(0); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2060, __pyx_L74_error)
                __Pyx_GOTREF(__pyx_t_15);
                if (unlikely(!__pyx_v_Y)) { __Pyx_RaiseUnboundLocalError("Y"); __PYX_ERR(2, 2060, __pyx_L74_error) }
                if (likely(PyList_CheckExact(__pyx_v_Y)) || PyTuple_CheckExact(__pyx_v_Y)) {
                  __pyx_t_8 = __pyx_v_Y; __Pyx_INCREF(__pyx_t_8); __pyx_t_12 = 0;
                  __pyx_t_13 = NULL;
                } else {
                  __pyx_t_12 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_v_Y); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2060, __pyx_L74_error)
                  __Pyx_GOTREF(__pyx_t_8);
                  __pyx_t_13 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(2, 2060, __pyx_L74_error)
                }
                for (;;) {
                  if (likely(!__pyx_t_13)) {
                    if (likely(PyList_CheckExact(__pyx_t_8))) {
                      if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_8)) break;
                      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                      __pyx_t_5 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_12); __Pyx_INCREF(__pyx_t_5); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(2, 2060, __pyx_L74_error)
                      #else
                      __pyx_t_5 = PySequence_ITEM(__pyx_t_8, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2060, __pyx_L74_error)
                      __Pyx_GOTREF(__pyx_t_5);
                      #endif
                    } else {
                      if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
                      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                      __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_12); __Pyx_INCREF(__pyx_t_5); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(2, 2060, __pyx_L74_error)
                      #else
                      __pyx_t_5 = PySequence_ITEM(__pyx_t_8, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2060, __pyx_L74_error)
                      __Pyx_GOTREF(__pyx_t_5);
                      #endif
                    }
                  } else {
                    __pyx_t_5 = __pyx_t_13(__pyx_t_8);
                    if (unlikely(!__pyx_t_5)) {
                      PyObject* exc_type = PyErr_Occurred();
                      if (exc_type) {
                        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                        else __PYX_ERR(2, 2060, __pyx_L74_error)
                      }
                      break;
                    }
                    __Pyx_GOTREF(__pyx_t_5);
                  }
                  __Pyx_XDECREF_SET(__pyx_8genexpr9__pyx_v_y, __pyx_t_5);
                  __pyx_t_5 = 0;
                  __pyx_t_5 = __Pyx_PyFloat_AddObjC(__pyx_8genexpr9__pyx_v_y, __pyx_float_0_5, 0.5, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2060, __pyx_L74_error)
                  __Pyx_GOTREF(__pyx_t_5);
                  if (unlikely(__Pyx_ListComp_Append(__pyx_t_15, (PyObject*)__pyx_t_5))) __PYX_ERR(2, 2060, __pyx_L74_error)
                  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                }
                __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                __Pyx_XDECREF(__pyx_8genexpr9__pyx_v_y); __pyx_8genexpr9__pyx_v_y = 0;
                goto __pyx_L77_exit_scope;
                __pyx_L74_error:;
                __Pyx_XDECREF(__pyx_8genexpr9__pyx_v_y); __pyx_8genexpr9__pyx_v_y = 0;
                goto __pyx_L3_error;
                __pyx_L77_exit_scope:;
              } /* exit inner scope */
              { /* enter inner scope */
                __pyx_t_8 = PyList_New(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2060, __pyx_L80_error)
                __Pyx_GOTREF(__pyx_t_8);
                if (unlikely(!__pyx_v_X)) { __Pyx_RaiseUnboundLocalError("X"); __PYX_ERR(2, 2060, __pyx_L80_error) }
                if (likely(PyList_CheckExact(__pyx_v_X)) || PyTuple_CheckExact(__pyx_v_X)) {
                  __pyx_t_5 = __pyx_v_X; __Pyx_INCREF(__pyx_t_5); __pyx_t_12 = 0;
                  __pyx_t_13 = NULL;
                } else {
                  __pyx_t_12 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_v_X); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2060, __pyx_L80_error)
                  __Pyx_GOTREF(__pyx_t_5);
                  __pyx_t_13 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(2, 2060, __pyx_L80_error)
                }
                for (;;) {
                  if (likely(!__pyx_t_13)) {
                    if (likely(PyList_CheckExact(__pyx_t_5))) {
                      if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_5)) break;
                      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                      __pyx_t_4 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_12); __Pyx_INCREF(__pyx_t_4); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(2, 2060, __pyx_L80_error)
                      #else
                      __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2060, __pyx_L80_error)
                      __Pyx_GOTREF(__pyx_t_4);
                      #endif
                    } else {
                      if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
                      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                      __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_12); __Pyx_INCREF(__pyx_t_4); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(2, 2060, __pyx_L80_error)
                      #else
                      __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2060, __pyx_L80_error)
                      __Pyx_GOTREF(__pyx_t_4);
                      #endif
                    }
                  } else {
                    __pyx_t_4 = __pyx_t_13(__pyx_t_5);
                    if (unlikely(!__pyx_t_4)) {
                      PyObject* exc_type = PyErr_Occurred();
                      if (exc_type) {
                        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                        else __PYX_ERR(2, 2060, __pyx_L80_error)
                      }
                      break;
                    }
                    __Pyx_GOTREF(__pyx_t_4);
                  }
                  __Pyx_XDECREF_SET(__pyx_9genexpr10__pyx_v_x, __pyx_t_4);
                  __pyx_t_4 = 0;
                  __pyx_t_4 = __Pyx_PyFloat_AddObjC(__pyx_9genexpr10__pyx_v_x, __pyx_float_0_5, 0.5, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2060, __pyx_L80_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  if (unlikely(__Pyx_ListComp_Append(__pyx_t_8, (PyObject*)__pyx_t_4))) __PYX_ERR(2, 2060, __pyx_L80_error)
                  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                }
                __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                __Pyx_XDECREF(__pyx_9genexpr10__pyx_v_x); __pyx_9genexpr10__pyx_v_x = 0;
                goto __pyx_L83_exit_scope;
                __pyx_L80_error:;
                __Pyx_XDECREF(__pyx_9genexpr10__pyx_v_x); __pyx_9genexpr10__pyx_v_x = 0;
                goto __pyx_L3_error;
                __pyx_L83_exit_scope:;
              } /* exit inner scope */
              __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2060, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_5);
              __Pyx_GIVEREF(__pyx_t_15);
              PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_15);
              __Pyx_GIVEREF(__pyx_t_8);
              PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_8);
              __pyx_t_15 = 0;
              __pyx_t_8 = 0;
              __pyx_t_8 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2060, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_8);
              if (unlikely(!__pyx_v_vals)) { __Pyx_RaiseUnboundLocalError("vals"); __PYX_ERR(2, 2060, __pyx_L3_error) }
              if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_c, __pyx_v_vals) < 0) __PYX_ERR(2, 2060, __pyx_L3_error)
              if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_cmap, __pyx_v_cmap) < 0) __PYX_ERR(2, 2060, __pyx_L3_error)
              if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_s, __pyx_v_s) < 0) __PYX_ERR(2, 2060, __pyx_L3_error)
              if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_alpha, __pyx_int_1) < 0) __PYX_ERR(2, 2060, __pyx_L3_error)
              __pyx_t_15 = __Pyx_PyInt_From_long(__pyx_v_zorderForBoxes); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2060, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_15);
              if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_zorder, __pyx_t_15) < 0) __PYX_ERR(2, 2060, __pyx_L3_error)
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_5, __pyx_t_8); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2060, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_15);
              __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              __pyx_v_scatter = __pyx_t_15;
              __pyx_t_15 = 0;

              /* "src/pygcgopt/decomposition.pxi":2059
 *                         scatter=ax.scatter([y+0.5 for y in Y], [x+0.5 for x in X], c=vals, s=s, alpha=1, zorder=zorderForBoxes)
 *                     else:
 *                         if norm == None:             # <<<<<<<<<<<<<<
 *                             scatter=ax.scatter([y+0.5 for y in Y], [x+0.5 for x in X], c=vals, cmap=cmap, s=s, alpha=1, zorder=zorderForBoxes)
 *                         else:
 */
              goto __pyx_L71;
            }

            /* "src/pygcgopt/decomposition.pxi":2062
 *                             scatter=ax.scatter([y+0.5 for y in Y], [x+0.5 for x in X], c=vals, cmap=cmap, s=s, alpha=1, zorder=zorderForBoxes)
 *                         else:
 *                             scatter=ax.scatter([y+0.5 for y in Y], [x+0.5 for x in X], c=vals, cmap=cmap, norm=norm, s=s, alpha=1, zorder=zorderForBoxes)             # <<<<<<<<<<<<<<
 *                     cbar = fig.colorbar(scatter)
 *                     cbar.ax.set_ylabel("coefficients", rotation=90)
 */
            /*else*/ {
              __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_scatter); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2062, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_15);
              { /* enter inner scope */
                __pyx_t_8 = PyList_New(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2062, __pyx_L86_error)
                __Pyx_GOTREF(__pyx_t_8);
                if (unlikely(!__pyx_v_Y)) { __Pyx_RaiseUnboundLocalError("Y"); __PYX_ERR(2, 2062, __pyx_L86_error) }
                if (likely(PyList_CheckExact(__pyx_v_Y)) || PyTuple_CheckExact(__pyx_v_Y)) {
                  __pyx_t_5 = __pyx_v_Y; __Pyx_INCREF(__pyx_t_5); __pyx_t_12 = 0;
                  __pyx_t_13 = NULL;
                } else {
                  __pyx_t_12 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_v_Y); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2062, __pyx_L86_error)
                  __Pyx_GOTREF(__pyx_t_5);
                  __pyx_t_13 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(2, 2062, __pyx_L86_error)
                }
                for (;;) {
                  if (likely(!__pyx_t_13)) {
                    if (likely(PyList_CheckExact(__pyx_t_5))) {
                      if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_5)) break;
                      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                      __pyx_t_14 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_12); __Pyx_INCREF(__pyx_t_14); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(2, 2062, __pyx_L86_error)
                      #else
                      __pyx_t_14 = PySequence_ITEM(__pyx_t_5, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 2062, __pyx_L86_error)
                      __Pyx_GOTREF(__pyx_t_14);
                      #endif
                    } else {
                      if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
                      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                      __pyx_t_14 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_12); __Pyx_INCREF(__pyx_t_14); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(2, 2062, __pyx_L86_error)
                      #else
                      __pyx_t_14 = PySequence_ITEM(__pyx_t_5, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 2062, __pyx_L86_error)
                      __Pyx_GOTREF(__pyx_t_14);
                      #endif
                    }
                  } else {
                    __pyx_t_14 = __pyx_t_13(__pyx_t_5);
                    if (unlikely(!__pyx_t_14)) {
                      PyObject* exc_type = PyErr_Occurred();
                      if (exc_type) {
                        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                        else __PYX_ERR(2, 2062, __pyx_L86_error)
                      }
                      break;
                    }
                    __Pyx_GOTREF(__pyx_t_14);
                  }
                  __Pyx_XDECREF_SET(__pyx_9genexpr11__pyx_v_y, __pyx_t_14);
                  __pyx_t_14 = 0;
                  __pyx_t_14 = __Pyx_PyFloat_AddObjC(__pyx_9genexpr11__pyx_v_y, __pyx_float_0_5, 0.5, 0, 0); if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 2062, __pyx_L86_error)
                  __Pyx_GOTREF(__pyx_t_14);
                  if (unlikely(__Pyx_ListComp_Append(__pyx_t_8, (PyObject*)__pyx_t_14))) __PYX_ERR(2, 2062, __pyx_L86_error)
                  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
                }
                __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                __Pyx_XDECREF(__pyx_9genexpr11__pyx_v_y); __pyx_9genexpr11__pyx_v_y = 0;
                goto __pyx_L89_exit_scope;
                __pyx_L86_error:;
                __Pyx_XDECREF(__pyx_9genexpr11__pyx_v_y); __pyx_9genexpr11__pyx_v_y = 0;
                goto __pyx_L3_error;
                __pyx_L89_exit_scope:;
              } /* exit inner scope */
              { /* enter inner scope */
                __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2062, __pyx_L92_error)
                __Pyx_GOTREF(__pyx_t_5);
                if (unlikely(!__pyx_v_X)) { __Pyx_RaiseUnboundLocalError("X"); __PYX_ERR(2, 2062, __pyx_L92_error) }
                if (likely(PyList_CheckExact(__pyx_v_X)) || PyTuple_CheckExact(__pyx_v_X)) {
                  __pyx_t_14 = __pyx_v_X; __Pyx_INCREF(__pyx_t_14); __pyx_t_12 = 0;
                  __pyx_t_13 = NULL;
                } else {
                  __pyx_t_12 = -1; __pyx_t_14 = PyObject_GetIter(__pyx_v_X); if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 2062, __pyx_L92_error)
                  __Pyx_GOTREF(__pyx_t_14);
                  __pyx_t_13 = Py_TYPE(__pyx_t_14)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(2, 2062, __pyx_L92_error)
                }
                for (;;) {
                  if (likely(!__pyx_t_13)) {
                    if (likely(PyList_CheckExact(__pyx_t_14))) {
                      if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_14)) break;
                      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                      __pyx_t_4 = PyList_GET_ITEM(__pyx_t_14, __pyx_t_12); __Pyx_INCREF(__pyx_t_4); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(2, 2062, __pyx_L92_error)
                      #else
                      __pyx_t_4 = PySequence_ITEM(__pyx_t_14, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2062, __pyx_L92_error)
                      __Pyx_GOTREF(__pyx_t_4);
                      #endif
                    } else {
                      if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_14)) break;
                      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                      __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_14, __pyx_t_12); __Pyx_INCREF(__pyx_t_4); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(2, 2062, __pyx_L92_error)
                      #else
                      __pyx_t_4 = PySequence_ITEM(__pyx_t_14, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2062, __pyx_L92_error)
                      __Pyx_GOTREF(__pyx_t_4);
                      #endif
                    }
                  } else {
                    __pyx_t_4 = __pyx_t_13(__pyx_t_14);
                    if (unlikely(!__pyx_t_4)) {
                      PyObject* exc_type = PyErr_Occurred();
                      if (exc_type) {
                        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                        else __PYX_ERR(2, 2062, __pyx_L92_error)
                      }
                      break;
                    }
                    __Pyx_GOTREF(__pyx_t_4);
                  }
                  __Pyx_XDECREF_SET(__pyx_9genexpr12__pyx_v_x, __pyx_t_4);
                  __pyx_t_4 = 0;
                  __pyx_t_4 = __Pyx_PyFloat_AddObjC(__pyx_9genexpr12__pyx_v_x, __pyx_float_0_5, 0.5, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2062, __pyx_L92_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  if (unlikely(__Pyx_ListComp_Append(__pyx_t_5, (PyObject*)__pyx_t_4))) __PYX_ERR(2, 2062, __pyx_L92_error)
                  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                }
                __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
                __Pyx_XDECREF(__pyx_9genexpr12__pyx_v_x); __pyx_9genexpr12__pyx_v_x = 0;
                goto __pyx_L95_exit_scope;
                __pyx_L92_error:;
                __Pyx_XDECREF(__pyx_9genexpr12__pyx_v_x); __pyx_9genexpr12__pyx_v_x = 0;
                goto __pyx_L3_error;
                __pyx_L95_exit_scope:;
              } /* exit inner scope */
              __pyx_t_14 = PyTuple_New(2); if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 2062, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_14);
              __Pyx_GIVEREF(__pyx_t_8);
              PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_8);
              __Pyx_GIVEREF(__pyx_t_5);
              PyTuple_SET_ITEM(__pyx_t_14, 1, __pyx_t_5);
              __pyx_t_8 = 0;
              __pyx_t_5 = 0;
              __pyx_t_5 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2062, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_5);
              if (unlikely(!__pyx_v_vals)) { __Pyx_RaiseUnboundLocalError("vals"); __PYX_ERR(2, 2062, __pyx_L3_error) }
              if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_c, __pyx_v_vals) < 0) __PYX_ERR(2, 2062, __pyx_L3_error)
              if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_cmap, __pyx_v_cmap) < 0) __PYX_ERR(2, 2062, __pyx_L3_error)
              if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_norm, __pyx_v_norm) < 0) __PYX_ERR(2, 2062, __pyx_L3_error)
              if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_s, __pyx_v_s) < 0) __PYX_ERR(2, 2062, __pyx_L3_error)
              if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_alpha, __pyx_int_1) < 0) __PYX_ERR(2, 2062, __pyx_L3_error)
              __pyx_t_8 = __Pyx_PyInt_From_long(__pyx_v_zorderForBoxes); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2062, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_8);
              if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_zorder, __pyx_t_8) < 0) __PYX_ERR(2, 2062, __pyx_L3_error)
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_t_14, __pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2062, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_8);
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
              __pyx_v_scatter = __pyx_t_8;
              __pyx_t_8 = 0;
            }
            __pyx_L71:;
          }
          __pyx_L58:;

          /* "src/pygcgopt/decomposition.pxi":2063
 *                         else:
 *                             scatter=ax.scatter([y+0.5 for y in Y], [x+0.5 for x in X], c=vals, cmap=cmap, norm=norm, s=s, alpha=1, zorder=zorderForBoxes)
 *                     cbar = fig.colorbar(scatter)             # <<<<<<<<<<<<<<
 *                     cbar.ax.set_ylabel("coefficients", rotation=90)
 *                 elif matrixType == "miplibconstype":
 */
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_fig, __pyx_n_s_colorbar); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2063, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_14 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
            __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_5);
            if (likely(__pyx_t_14)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
              __Pyx_INCREF(__pyx_t_14);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_5, function);
            }
          }
          __pyx_t_8 = (__pyx_t_14) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_14, __pyx_v_scatter) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_scatter);
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2063, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_v_cbar = __pyx_t_8;
          __pyx_t_8 = 0;

          /* "src/pygcgopt/decomposition.pxi":2064
 *                             scatter=ax.scatter([y+0.5 for y in Y], [x+0.5 for x in X], c=vals, cmap=cmap, norm=norm, s=s, alpha=1, zorder=zorderForBoxes)
 *                     cbar = fig.colorbar(scatter)
 *                     cbar.ax.set_ylabel("coefficients", rotation=90)             # <<<<<<<<<<<<<<
 *                 elif matrixType == "miplibconstype":
 *                     if cmap == None:
 */
          __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_cbar, __pyx_n_s_ax); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2064, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_set_ylabel); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2064, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_8 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2064, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_8);
          if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_rotation, __pyx_int_90) < 0) __PYX_ERR(2, 2064, __pyx_L3_error)
          __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__14, __pyx_t_8); if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 2064, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

          /* "src/pygcgopt/decomposition.pxi":2055
 *                     else:
 *                         scatter=ax.scatter([y+0.5 for y in Y], [x+0.5 for x in X], c=cmap, s=s, alpha=1, zorder=zorderForBoxes)
 *                 elif matrixType == "nonzerowithvalue":             # <<<<<<<<<<<<<<
 *                     if cmap == None:
 *                         scatter=ax.scatter([y+0.5 for y in Y], [x+0.5 for x in X], c=vals, s=s, alpha=1, zorder=zorderForBoxes)
 */
          goto __pyx_L32;
        }

        /* "src/pygcgopt/decomposition.pxi":2065
 *                     cbar = fig.colorbar(scatter)
 *                     cbar.ax.set_ylabel("coefficients", rotation=90)
 *                 elif matrixType == "miplibconstype":             # <<<<<<<<<<<<<<
 *                     if cmap == None:
 *                         uniqueMatrixMIPLIBConsTypeList = list(self.uniqueMatrixMIPLIBConsType(obj=obj, bcoef=bcoef))
 */
        __pyx_t_6 = (__Pyx_PyUnicode_Equals(__pyx_v_matrixType, __pyx_n_u_miplibconstype, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 2065, __pyx_L3_error)
        if (__pyx_t_6) {

          /* "src/pygcgopt/decomposition.pxi":2066
 *                     cbar.ax.set_ylabel("coefficients", rotation=90)
 *                 elif matrixType == "miplibconstype":
 *                     if cmap == None:             # <<<<<<<<<<<<<<
 *                         uniqueMatrixMIPLIBConsTypeList = list(self.uniqueMatrixMIPLIBConsType(obj=obj, bcoef=bcoef))
 *                         uniqueMatrixMIPLIBConsTypeList.sort()
 */
          __pyx_t_14 = PyObject_RichCompare(__pyx_v_cmap, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_14); if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 2066, __pyx_L3_error)
          __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_14); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 2066, __pyx_L3_error)
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          if (__pyx_t_6) {

            /* "src/pygcgopt/decomposition.pxi":2067
 *                 elif matrixType == "miplibconstype":
 *                     if cmap == None:
 *                         uniqueMatrixMIPLIBConsTypeList = list(self.uniqueMatrixMIPLIBConsType(obj=obj, bcoef=bcoef))             # <<<<<<<<<<<<<<
 *                         uniqueMatrixMIPLIBConsTypeList.sort()
 *                         selfcolors=["tab:blue", "tab:orange", "tab:green", "tab:red", "tab:purple", "tab:brown", "tab:pink", "tab:gray", "tab:olive", "tab:cyan", "black", "hotpink", "peachpuff", "lime", "darkblue", "tan"]
 */
            __pyx_t_14 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_uniqueMatrixMIPLIBConsType); if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 2067, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_14);
            __pyx_t_8 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2067, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_8);
            if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_obj, __pyx_v_obj) < 0) __PYX_ERR(2, 2067, __pyx_L3_error)
            if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_bcoef, __pyx_v_bcoef) < 0) __PYX_ERR(2, 2067, __pyx_L3_error)
            __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_empty_tuple, __pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2067, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __pyx_t_8 = PySequence_List(__pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2067, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_v_uniqueMatrixMIPLIBConsTypeList = ((PyObject*)__pyx_t_8);
            __pyx_t_8 = 0;

            /* "src/pygcgopt/decomposition.pxi":2068
 *                     if cmap == None:
 *                         uniqueMatrixMIPLIBConsTypeList = list(self.uniqueMatrixMIPLIBConsType(obj=obj, bcoef=bcoef))
 *                         uniqueMatrixMIPLIBConsTypeList.sort()             # <<<<<<<<<<<<<<
 *                         selfcolors=["tab:blue", "tab:orange", "tab:green", "tab:red", "tab:purple", "tab:brown", "tab:pink", "tab:gray", "tab:olive", "tab:cyan", "black", "hotpink", "peachpuff", "lime", "darkblue", "tan"]
 *                         colors_used=selfcolors[0:len(uniqueMatrixMIPLIBConsTypeList)]
 */
            __pyx_t_18 = PyList_Sort(__pyx_v_uniqueMatrixMIPLIBConsTypeList); if (unlikely(__pyx_t_18 == ((int)-1))) __PYX_ERR(2, 2068, __pyx_L3_error)

            /* "src/pygcgopt/decomposition.pxi":2069
 *                         uniqueMatrixMIPLIBConsTypeList = list(self.uniqueMatrixMIPLIBConsType(obj=obj, bcoef=bcoef))
 *                         uniqueMatrixMIPLIBConsTypeList.sort()
 *                         selfcolors=["tab:blue", "tab:orange", "tab:green", "tab:red", "tab:purple", "tab:brown", "tab:pink", "tab:gray", "tab:olive", "tab:cyan", "black", "hotpink", "peachpuff", "lime", "darkblue", "tan"]             # <<<<<<<<<<<<<<
 *                         colors_used=selfcolors[0:len(uniqueMatrixMIPLIBConsTypeList)]
 *                         cmap_self = colors.ListedColormap(colors_used)
 */
            __pyx_t_8 = PyList_New(16); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2069, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_INCREF(__pyx_kp_u_tab_blue);
            __Pyx_GIVEREF(__pyx_kp_u_tab_blue);
            PyList_SET_ITEM(__pyx_t_8, 0, __pyx_kp_u_tab_blue);
            __Pyx_INCREF(__pyx_kp_u_tab_orange);
            __Pyx_GIVEREF(__pyx_kp_u_tab_orange);
            PyList_SET_ITEM(__pyx_t_8, 1, __pyx_kp_u_tab_orange);
            __Pyx_INCREF(__pyx_kp_u_tab_green);
            __Pyx_GIVEREF(__pyx_kp_u_tab_green);
            PyList_SET_ITEM(__pyx_t_8, 2, __pyx_kp_u_tab_green);
            __Pyx_INCREF(__pyx_kp_u_tab_red);
            __Pyx_GIVEREF(__pyx_kp_u_tab_red);
            PyList_SET_ITEM(__pyx_t_8, 3, __pyx_kp_u_tab_red);
            __Pyx_INCREF(__pyx_kp_u_tab_purple);
            __Pyx_GIVEREF(__pyx_kp_u_tab_purple);
            PyList_SET_ITEM(__pyx_t_8, 4, __pyx_kp_u_tab_purple);
            __Pyx_INCREF(__pyx_kp_u_tab_brown);
            __Pyx_GIVEREF(__pyx_kp_u_tab_brown);
            PyList_SET_ITEM(__pyx_t_8, 5, __pyx_kp_u_tab_brown);
            __Pyx_INCREF(__pyx_kp_u_tab_pink);
            __Pyx_GIVEREF(__pyx_kp_u_tab_pink);
            PyList_SET_ITEM(__pyx_t_8, 6, __pyx_kp_u_tab_pink);
            __Pyx_INCREF(__pyx_kp_u_tab_gray);
            __Pyx_GIVEREF(__pyx_kp_u_tab_gray);
            PyList_SET_ITEM(__pyx_t_8, 7, __pyx_kp_u_tab_gray);
            __Pyx_INCREF(__pyx_kp_u_tab_olive);
            __Pyx_GIVEREF(__pyx_kp_u_tab_olive);
            PyList_SET_ITEM(__pyx_t_8, 8, __pyx_kp_u_tab_olive);
            __Pyx_INCREF(__pyx_kp_u_tab_cyan);
            __Pyx_GIVEREF(__pyx_kp_u_tab_cyan);
            PyList_SET_ITEM(__pyx_t_8, 9, __pyx_kp_u_tab_cyan);
            __Pyx_INCREF(__pyx_n_u_black);
            __Pyx_GIVEREF(__pyx_n_u_black);
            PyList_SET_ITEM(__pyx_t_8, 10, __pyx_n_u_black);
            __Pyx_INCREF(__pyx_n_u_hotpink);
            __Pyx_GIVEREF(__pyx_n_u_hotpink);
            PyList_SET_ITEM(__pyx_t_8, 11, __pyx_n_u_hotpink);
            __Pyx_INCREF(__pyx_n_u_peachpuff);
            __Pyx_GIVEREF(__pyx_n_u_peachpuff);
            PyList_SET_ITEM(__pyx_t_8, 12, __pyx_n_u_peachpuff);
            __Pyx_INCREF(__pyx_n_u_lime);
            __Pyx_GIVEREF(__pyx_n_u_lime);
            PyList_SET_ITEM(__pyx_t_8, 13, __pyx_n_u_lime);
            __Pyx_INCREF(__pyx_n_u_darkblue);
            __Pyx_GIVEREF(__pyx_n_u_darkblue);
            PyList_SET_ITEM(__pyx_t_8, 14, __pyx_n_u_darkblue);
            __Pyx_INCREF(__pyx_n_u_tan);
            __Pyx_GIVEREF(__pyx_n_u_tan);
            PyList_SET_ITEM(__pyx_t_8, 15, __pyx_n_u_tan);
            __pyx_v_selfcolors = ((PyObject*)__pyx_t_8);
            __pyx_t_8 = 0;

            /* "src/pygcgopt/decomposition.pxi":2070
 *                         uniqueMatrixMIPLIBConsTypeList.sort()
 *                         selfcolors=["tab:blue", "tab:orange", "tab:green", "tab:red", "tab:purple", "tab:brown", "tab:pink", "tab:gray", "tab:olive", "tab:cyan", "black", "hotpink", "peachpuff", "lime", "darkblue", "tan"]
 *                         colors_used=selfcolors[0:len(uniqueMatrixMIPLIBConsTypeList)]             # <<<<<<<<<<<<<<
 *                         cmap_self = colors.ListedColormap(colors_used)
 *                         boundaries = [-1.5] + [i+0.5 for i in uniqueMatrixMIPLIBConsTypeList]
 */
            __pyx_t_12 = PyList_GET_SIZE(__pyx_v_uniqueMatrixMIPLIBConsTypeList); if (unlikely(__pyx_t_12 == ((Py_ssize_t)-1))) __PYX_ERR(2, 2070, __pyx_L3_error)
            __pyx_t_8 = __Pyx_PyList_GetSlice(__pyx_v_selfcolors, 0, __pyx_t_12); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2070, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_8);
            __pyx_v_colors_used = ((PyObject*)__pyx_t_8);
            __pyx_t_8 = 0;

            /* "src/pygcgopt/decomposition.pxi":2071
 *                         selfcolors=["tab:blue", "tab:orange", "tab:green", "tab:red", "tab:purple", "tab:brown", "tab:pink", "tab:gray", "tab:olive", "tab:cyan", "black", "hotpink", "peachpuff", "lime", "darkblue", "tan"]
 *                         colors_used=selfcolors[0:len(uniqueMatrixMIPLIBConsTypeList)]
 *                         cmap_self = colors.ListedColormap(colors_used)             # <<<<<<<<<<<<<<
 *                         boundaries = [-1.5] + [i+0.5 for i in uniqueMatrixMIPLIBConsTypeList]
 *                         norm = colors.BoundaryNorm(boundaries, cmap_self.N)
 */
            __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_colors, __pyx_n_s_ListedColormap); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2071, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_14 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
              __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_5);
              if (likely(__pyx_t_14)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
                __Pyx_INCREF(__pyx_t_14);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_5, function);
              }
            }
            __pyx_t_8 = (__pyx_t_14) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_14, __pyx_v_colors_used) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_colors_used);
            __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
            if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2071, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_v_cmap_self = __pyx_t_8;
            __pyx_t_8 = 0;

            /* "src/pygcgopt/decomposition.pxi":2072
 *                         colors_used=selfcolors[0:len(uniqueMatrixMIPLIBConsTypeList)]
 *                         cmap_self = colors.ListedColormap(colors_used)
 *                         boundaries = [-1.5] + [i+0.5 for i in uniqueMatrixMIPLIBConsTypeList]             # <<<<<<<<<<<<<<
 *                         norm = colors.BoundaryNorm(boundaries, cmap_self.N)
 *                         scatter=ax.scatter([y+0.5 for y in Y], [x+0.5 for x in X], c=vals, cmap=cmap_self, norm=norm, s=s, alpha=1, zorder=zorderForBoxes)
 */
            __pyx_t_8 = PyList_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2072, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_INCREF(__pyx_float_neg_1_5);
            __Pyx_GIVEREF(__pyx_float_neg_1_5);
            PyList_SET_ITEM(__pyx_t_8, 0, __pyx_float_neg_1_5);
            { /* enter inner scope */
              __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2072, __pyx_L99_error)
              __Pyx_GOTREF(__pyx_t_5);
              __pyx_t_14 = __pyx_v_uniqueMatrixMIPLIBConsTypeList; __Pyx_INCREF(__pyx_t_14); __pyx_t_12 = 0;
              for (;;) {
                if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_14)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_15 = PyList_GET_ITEM(__pyx_t_14, __pyx_t_12); __Pyx_INCREF(__pyx_t_15); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(2, 2072, __pyx_L99_error)
                #else
                __pyx_t_15 = PySequence_ITEM(__pyx_t_14, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2072, __pyx_L99_error)
                __Pyx_GOTREF(__pyx_t_15);
                #endif
                __Pyx_XDECREF_SET(__pyx_9genexpr13__pyx_v_i, __pyx_t_15);
                __pyx_t_15 = 0;
                __pyx_t_15 = __Pyx_PyFloat_AddObjC(__pyx_9genexpr13__pyx_v_i, __pyx_float_0_5, 0.5, 0, 0); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2072, __pyx_L99_error)
                __Pyx_GOTREF(__pyx_t_15);
                if (unlikely(__Pyx_ListComp_Append(__pyx_t_5, (PyObject*)__pyx_t_15))) __PYX_ERR(2, 2072, __pyx_L99_error)
                __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              }
              __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
              __Pyx_XDECREF(__pyx_9genexpr13__pyx_v_i); __pyx_9genexpr13__pyx_v_i = 0;
              goto __pyx_L102_exit_scope;
              __pyx_L99_error:;
              __Pyx_XDECREF(__pyx_9genexpr13__pyx_v_i); __pyx_9genexpr13__pyx_v_i = 0;
              goto __pyx_L3_error;
              __pyx_L102_exit_scope:;
            } /* exit inner scope */
            __pyx_t_14 = PyNumber_Add(__pyx_t_8, __pyx_t_5); if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 2072, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_14);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_v_boundaries = ((PyObject*)__pyx_t_14);
            __pyx_t_14 = 0;

            /* "src/pygcgopt/decomposition.pxi":2073
 *                         cmap_self = colors.ListedColormap(colors_used)
 *                         boundaries = [-1.5] + [i+0.5 for i in uniqueMatrixMIPLIBConsTypeList]
 *                         norm = colors.BoundaryNorm(boundaries, cmap_self.N)             # <<<<<<<<<<<<<<
 *                         scatter=ax.scatter([y+0.5 for y in Y], [x+0.5 for x in X], c=vals, cmap=cmap_self, norm=norm, s=s, alpha=1, zorder=zorderForBoxes)
 *                         cbar = fig.colorbar(scatter)
 */
            __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_colors, __pyx_n_s_BoundaryNorm); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2073, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_cmap_self, __pyx_n_s_N); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2073, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_8);
            __pyx_t_15 = NULL;
            __pyx_t_19 = 0;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
              __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_5);
              if (likely(__pyx_t_15)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
                __Pyx_INCREF(__pyx_t_15);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_5, function);
                __pyx_t_19 = 1;
              }
            }
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(__pyx_t_5)) {
              PyObject *__pyx_temp[3] = {__pyx_t_15, __pyx_v_boundaries, __pyx_t_8};
              __pyx_t_14 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_19, 2+__pyx_t_19); if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 2073, __pyx_L3_error)
              __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
              __Pyx_GOTREF(__pyx_t_14);
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            } else
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
              PyObject *__pyx_temp[3] = {__pyx_t_15, __pyx_v_boundaries, __pyx_t_8};
              __pyx_t_14 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_19, 2+__pyx_t_19); if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 2073, __pyx_L3_error)
              __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
              __Pyx_GOTREF(__pyx_t_14);
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            } else
            #endif
            {
              __pyx_t_4 = PyTuple_New(2+__pyx_t_19); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2073, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_4);
              if (__pyx_t_15) {
                __Pyx_GIVEREF(__pyx_t_15); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_15); __pyx_t_15 = NULL;
              }
              __Pyx_INCREF(__pyx_v_boundaries);
              __Pyx_GIVEREF(__pyx_v_boundaries);
              PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_19, __pyx_v_boundaries);
              __Pyx_GIVEREF(__pyx_t_8);
              PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_19, __pyx_t_8);
              __pyx_t_8 = 0;
              __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, NULL); if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 2073, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_14);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            }
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_DECREF_SET(__pyx_v_norm, __pyx_t_14);
            __pyx_t_14 = 0;

            /* "src/pygcgopt/decomposition.pxi":2074
 *                         boundaries = [-1.5] + [i+0.5 for i in uniqueMatrixMIPLIBConsTypeList]
 *                         norm = colors.BoundaryNorm(boundaries, cmap_self.N)
 *                         scatter=ax.scatter([y+0.5 for y in Y], [x+0.5 for x in X], c=vals, cmap=cmap_self, norm=norm, s=s, alpha=1, zorder=zorderForBoxes)             # <<<<<<<<<<<<<<
 *                         cbar = fig.colorbar(scatter)
 *                         cbar.set_ticks([(boundaries[i]+boundaries[i+1])/(2) for i in range(len(boundaries)) if i != len(boundaries)-1])
 */
            __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_scatter); if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 2074, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_14);
            { /* enter inner scope */
              __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2074, __pyx_L105_error)
              __Pyx_GOTREF(__pyx_t_5);
              if (unlikely(!__pyx_v_Y)) { __Pyx_RaiseUnboundLocalError("Y"); __PYX_ERR(2, 2074, __pyx_L105_error) }
              if (likely(PyList_CheckExact(__pyx_v_Y)) || PyTuple_CheckExact(__pyx_v_Y)) {
                __pyx_t_4 = __pyx_v_Y; __Pyx_INCREF(__pyx_t_4); __pyx_t_12 = 0;
                __pyx_t_13 = NULL;
              } else {
                __pyx_t_12 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_Y); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2074, __pyx_L105_error)
                __Pyx_GOTREF(__pyx_t_4);
                __pyx_t_13 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(2, 2074, __pyx_L105_error)
              }
              for (;;) {
                if (likely(!__pyx_t_13)) {
                  if (likely(PyList_CheckExact(__pyx_t_4))) {
                    if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_4)) break;
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_8 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_12); __Pyx_INCREF(__pyx_t_8); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(2, 2074, __pyx_L105_error)
                    #else
                    __pyx_t_8 = PySequence_ITEM(__pyx_t_4, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2074, __pyx_L105_error)
                    __Pyx_GOTREF(__pyx_t_8);
                    #endif
                  } else {
                    if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_12); __Pyx_INCREF(__pyx_t_8); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(2, 2074, __pyx_L105_error)
                    #else
                    __pyx_t_8 = PySequence_ITEM(__pyx_t_4, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2074, __pyx_L105_error)
                    __Pyx_GOTREF(__pyx_t_8);
                    #endif
                  }
                } else {
                  __pyx_t_8 = __pyx_t_13(__pyx_t_4);
                  if (unlikely(!__pyx_t_8)) {
                    PyObject* exc_type = PyErr_Occurred();
                    if (exc_type) {
                      if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                      else __PYX_ERR(2, 2074, __pyx_L105_error)
                    }
                    break;
                  }
                  __Pyx_GOTREF(__pyx_t_8);
                }
                __Pyx_XDECREF_SET(__pyx_9genexpr14__pyx_v_y, __pyx_t_8);
                __pyx_t_8 = 0;
                __pyx_t_8 = __Pyx_PyFloat_AddObjC(__pyx_9genexpr14__pyx_v_y, __pyx_float_0_5, 0.5, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2074, __pyx_L105_error)
                __Pyx_GOTREF(__pyx_t_8);
                if (unlikely(__Pyx_ListComp_Append(__pyx_t_5, (PyObject*)__pyx_t_8))) __PYX_ERR(2, 2074, __pyx_L105_error)
                __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              }
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              __Pyx_XDECREF(__pyx_9genexpr14__pyx_v_y); __pyx_9genexpr14__pyx_v_y = 0;
              goto __pyx_L108_exit_scope;
              __pyx_L105_error:;
              __Pyx_XDECREF(__pyx_9genexpr14__pyx_v_y); __pyx_9genexpr14__pyx_v_y = 0;
              goto __pyx_L3_error;
              __pyx_L108_exit_scope:;
            } /* exit inner scope */
            { /* enter inner scope */
              __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2074, __pyx_L111_error)
              __Pyx_GOTREF(__pyx_t_4);
              if (unlikely(!__pyx_v_X)) { __Pyx_RaiseUnboundLocalError("X"); __PYX_ERR(2, 2074, __pyx_L111_error) }
              if (likely(PyList_CheckExact(__pyx_v_X)) || PyTuple_CheckExact(__pyx_v_X)) {
                __pyx_t_8 = __pyx_v_X; __Pyx_INCREF(__pyx_t_8); __pyx_t_12 = 0;
                __pyx_t_13 = NULL;
              } else {
                __pyx_t_12 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_v_X); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2074, __pyx_L111_error)
                __Pyx_GOTREF(__pyx_t_8);
                __pyx_t_13 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(2, 2074, __pyx_L111_error)
              }
              for (;;) {
                if (likely(!__pyx_t_13)) {
                  if (likely(PyList_CheckExact(__pyx_t_8))) {
                    if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_8)) break;
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_15 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_12); __Pyx_INCREF(__pyx_t_15); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(2, 2074, __pyx_L111_error)
                    #else
                    __pyx_t_15 = PySequence_ITEM(__pyx_t_8, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2074, __pyx_L111_error)
                    __Pyx_GOTREF(__pyx_t_15);
                    #endif
                  } else {
                    if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_15 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_12); __Pyx_INCREF(__pyx_t_15); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(2, 2074, __pyx_L111_error)
                    #else
                    __pyx_t_15 = PySequence_ITEM(__pyx_t_8, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2074, __pyx_L111_error)
                    __Pyx_GOTREF(__pyx_t_15);
                    #endif
                  }
                } else {
                  __pyx_t_15 = __pyx_t_13(__pyx_t_8);
                  if (unlikely(!__pyx_t_15)) {
                    PyObject* exc_type = PyErr_Occurred();
                    if (exc_type) {
                      if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                      else __PYX_ERR(2, 2074, __pyx_L111_error)
                    }
                    break;
                  }
                  __Pyx_GOTREF(__pyx_t_15);
                }
                __Pyx_XDECREF_SET(__pyx_9genexpr15__pyx_v_x, __pyx_t_15);
                __pyx_t_15 = 0;
                __pyx_t_15 = __Pyx_PyFloat_AddObjC(__pyx_9genexpr15__pyx_v_x, __pyx_float_0_5, 0.5, 0, 0); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2074, __pyx_L111_error)
                __Pyx_GOTREF(__pyx_t_15);
                if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_15))) __PYX_ERR(2, 2074, __pyx_L111_error)
                __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              }
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              __Pyx_XDECREF(__pyx_9genexpr15__pyx_v_x); __pyx_9genexpr15__pyx_v_x = 0;
              goto __pyx_L114_exit_scope;
              __pyx_L111_error:;
              __Pyx_XDECREF(__pyx_9genexpr15__pyx_v_x); __pyx_9genexpr15__pyx_v_x = 0;
              goto __pyx_L3_error;
              __pyx_L114_exit_scope:;
            } /* exit inner scope */
            __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2074, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_GIVEREF(__pyx_t_5);
            PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5);
            __Pyx_GIVEREF(__pyx_t_4);
            PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_4);
            __pyx_t_5 = 0;
            __pyx_t_4 = 0;
            __pyx_t_4 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2074, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_4);
            if (unlikely(!__pyx_v_vals)) { __Pyx_RaiseUnboundLocalError("vals"); __PYX_ERR(2, 2074, __pyx_L3_error) }
            if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_c, __pyx_v_vals) < 0) __PYX_ERR(2, 2074, __pyx_L3_error)
            if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_cmap, __pyx_v_cmap_self) < 0) __PYX_ERR(2, 2074, __pyx_L3_error)
            if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_norm, __pyx_v_norm) < 0) __PYX_ERR(2, 2074, __pyx_L3_error)
            if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_s, __pyx_v_s) < 0) __PYX_ERR(2, 2074, __pyx_L3_error)
            if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_alpha, __pyx_int_1) < 0) __PYX_ERR(2, 2074, __pyx_L3_error)
            __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_zorderForBoxes); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2074, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_5);
            if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_zorder, __pyx_t_5) < 0) __PYX_ERR(2, 2074, __pyx_L3_error)
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_8, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2074, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_v_scatter = __pyx_t_5;
            __pyx_t_5 = 0;

            /* "src/pygcgopt/decomposition.pxi":2075
 *                         norm = colors.BoundaryNorm(boundaries, cmap_self.N)
 *                         scatter=ax.scatter([y+0.5 for y in Y], [x+0.5 for x in X], c=vals, cmap=cmap_self, norm=norm, s=s, alpha=1, zorder=zorderForBoxes)
 *                         cbar = fig.colorbar(scatter)             # <<<<<<<<<<<<<<
 *                         cbar.set_ticks([(boundaries[i]+boundaries[i+1])/(2) for i in range(len(boundaries)) if i != len(boundaries)-1])
 *                         cbar.set_ticklabels([self.miplibConsMap(i) for i in uniqueMatrixMIPLIBConsTypeList])
 */
            __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_fig, __pyx_n_s_colorbar); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2075, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_8 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
              __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
              if (likely(__pyx_t_8)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
                __Pyx_INCREF(__pyx_t_8);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_4, function);
              }
            }
            __pyx_t_5 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_8, __pyx_v_scatter) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_scatter);
            __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
            if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2075, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_v_cbar = __pyx_t_5;
            __pyx_t_5 = 0;

            /* "src/pygcgopt/decomposition.pxi":2076
 *                         scatter=ax.scatter([y+0.5 for y in Y], [x+0.5 for x in X], c=vals, cmap=cmap_self, norm=norm, s=s, alpha=1, zorder=zorderForBoxes)
 *                         cbar = fig.colorbar(scatter)
 *                         cbar.set_ticks([(boundaries[i]+boundaries[i+1])/(2) for i in range(len(boundaries)) if i != len(boundaries)-1])             # <<<<<<<<<<<<<<
 *                         cbar.set_ticklabels([self.miplibConsMap(i) for i in uniqueMatrixMIPLIBConsTypeList])
 *                         cbar.ax.set_ylabel("MIPLIB constypes", rotation=90)
 */
            __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_cbar, __pyx_n_s_set_ticks); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2076, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_4);
            { /* enter inner scope */
              __pyx_t_8 = PyList_New(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2076, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_8);
              __pyx_t_12 = PyList_GET_SIZE(__pyx_v_boundaries); if (unlikely(__pyx_t_12 == ((Py_ssize_t)-1))) __PYX_ERR(2, 2076, __pyx_L3_error)
              __pyx_t_20 = __pyx_t_12;
              for (__pyx_t_21 = 0; __pyx_t_21 < __pyx_t_20; __pyx_t_21+=1) {
                __pyx_9genexpr16__pyx_v_i = __pyx_t_21;
                __pyx_t_22 = PyList_GET_SIZE(__pyx_v_boundaries); if (unlikely(__pyx_t_22 == ((Py_ssize_t)-1))) __PYX_ERR(2, 2076, __pyx_L3_error)
                __pyx_t_6 = ((__pyx_9genexpr16__pyx_v_i != (__pyx_t_22 - 1)) != 0);
                if (__pyx_t_6) {
                  __pyx_t_14 = __Pyx_GetItemInt_List(__pyx_v_boundaries, __pyx_9genexpr16__pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 2076, __pyx_L3_error)
                  __Pyx_GOTREF(__pyx_t_14);
                  __pyx_t_22 = (__pyx_9genexpr16__pyx_v_i + 1);
                  __pyx_t_15 = __Pyx_GetItemInt_List(__pyx_v_boundaries, __pyx_t_22, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2076, __pyx_L3_error)
                  __Pyx_GOTREF(__pyx_t_15);
                  __pyx_t_10 = PyNumber_Add(__pyx_t_14, __pyx_t_15); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 2076, __pyx_L3_error)
                  __Pyx_GOTREF(__pyx_t_10);
                  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
                  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                  __pyx_t_15 = __Pyx_PyInt_TrueDivideObjC(__pyx_t_10, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2076, __pyx_L3_error)
                  __Pyx_GOTREF(__pyx_t_15);
                  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                  if (unlikely(__Pyx_ListComp_Append(__pyx_t_8, (PyObject*)__pyx_t_15))) __PYX_ERR(2, 2076, __pyx_L3_error)
                  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                }
              }
            } /* exit inner scope */
            __pyx_t_15 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
              __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_4);
              if (likely(__pyx_t_15)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
                __Pyx_INCREF(__pyx_t_15);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_4, function);
              }
            }
            __pyx_t_5 = (__pyx_t_15) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_15, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_8);
            __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2076, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

            /* "src/pygcgopt/decomposition.pxi":2077
 *                         cbar = fig.colorbar(scatter)
 *                         cbar.set_ticks([(boundaries[i]+boundaries[i+1])/(2) for i in range(len(boundaries)) if i != len(boundaries)-1])
 *                         cbar.set_ticklabels([self.miplibConsMap(i) for i in uniqueMatrixMIPLIBConsTypeList])             # <<<<<<<<<<<<<<
 *                         cbar.ax.set_ylabel("MIPLIB constypes", rotation=90)
 *                     else:
 */
            __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_cbar, __pyx_n_s_set_ticklabels); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2077, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_4);
            { /* enter inner scope */
              __pyx_t_8 = PyList_New(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2077, __pyx_L120_error)
              __Pyx_GOTREF(__pyx_t_8);
              __pyx_t_15 = __pyx_v_uniqueMatrixMIPLIBConsTypeList; __Pyx_INCREF(__pyx_t_15); __pyx_t_12 = 0;
              for (;;) {
                if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_15)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_10 = PyList_GET_ITEM(__pyx_t_15, __pyx_t_12); __Pyx_INCREF(__pyx_t_10); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(2, 2077, __pyx_L120_error)
                #else
                __pyx_t_10 = PySequence_ITEM(__pyx_t_15, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 2077, __pyx_L120_error)
                __Pyx_GOTREF(__pyx_t_10);
                #endif
                __Pyx_XDECREF_SET(__pyx_9genexpr17__pyx_v_i, __pyx_t_10);
                __pyx_t_10 = 0;
                __pyx_t_14 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_miplibConsMap); if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 2077, __pyx_L120_error)
                __Pyx_GOTREF(__pyx_t_14);
                __pyx_t_9 = NULL;
                if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_14))) {
                  __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_14);
                  if (likely(__pyx_t_9)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
                    __Pyx_INCREF(__pyx_t_9);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_14, function);
                  }
                }
                __pyx_t_10 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_14, __pyx_t_9, __pyx_9genexpr17__pyx_v_i) : __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_9genexpr17__pyx_v_i);
                __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
                if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 2077, __pyx_L120_error)
                __Pyx_GOTREF(__pyx_t_10);
                __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
                if (unlikely(__Pyx_ListComp_Append(__pyx_t_8, (PyObject*)__pyx_t_10))) __PYX_ERR(2, 2077, __pyx_L120_error)
                __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              }
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              __Pyx_XDECREF(__pyx_9genexpr17__pyx_v_i); __pyx_9genexpr17__pyx_v_i = 0;
              goto __pyx_L123_exit_scope;
              __pyx_L120_error:;
              __Pyx_XDECREF(__pyx_9genexpr17__pyx_v_i); __pyx_9genexpr17__pyx_v_i = 0;
              goto __pyx_L3_error;
              __pyx_L123_exit_scope:;
            } /* exit inner scope */
            __pyx_t_15 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
              __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_4);
              if (likely(__pyx_t_15)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
                __Pyx_INCREF(__pyx_t_15);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_4, function);
              }
            }
            __pyx_t_5 = (__pyx_t_15) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_15, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_8);
            __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2077, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

            /* "src/pygcgopt/decomposition.pxi":2078
 *                         cbar.set_ticks([(boundaries[i]+boundaries[i+1])/(2) for i in range(len(boundaries)) if i != len(boundaries)-1])
 *                         cbar.set_ticklabels([self.miplibConsMap(i) for i in uniqueMatrixMIPLIBConsTypeList])
 *                         cbar.ax.set_ylabel("MIPLIB constypes", rotation=90)             # <<<<<<<<<<<<<<
 *                     else:
 *                         if norm == None:
 */
            __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_cbar, __pyx_n_s_ax); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2078, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_set_ylabel); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2078, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2078, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_5);
            if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_rotation, __pyx_int_90) < 0) __PYX_ERR(2, 2078, __pyx_L3_error)
            __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__15, __pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2078, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

            /* "src/pygcgopt/decomposition.pxi":2066
 *                     cbar.ax.set_ylabel("coefficients", rotation=90)
 *                 elif matrixType == "miplibconstype":
 *                     if cmap == None:             # <<<<<<<<<<<<<<
 *                         uniqueMatrixMIPLIBConsTypeList = list(self.uniqueMatrixMIPLIBConsType(obj=obj, bcoef=bcoef))
 *                         uniqueMatrixMIPLIBConsTypeList.sort()
 */
            goto __pyx_L96;
          }

          /* "src/pygcgopt/decomposition.pxi":2080
 *                         cbar.ax.set_ylabel("MIPLIB constypes", rotation=90)
 *                     else:
 *                         if norm == None:             # <<<<<<<<<<<<<<
 *                             scatter=ax.scatter([y+0.5 for y in Y], [x+0.5 for x in X], c=vals, cmap=cmap, s=s, alpha=1, zorder=zorderForBoxes)
 *                         else:
 */
          /*else*/ {
            __pyx_t_8 = PyObject_RichCompare(__pyx_v_norm, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2080, __pyx_L3_error)
            __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 2080, __pyx_L3_error)
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            if (__pyx_t_6) {

              /* "src/pygcgopt/decomposition.pxi":2081
 *                     else:
 *                         if norm == None:
 *                             scatter=ax.scatter([y+0.5 for y in Y], [x+0.5 for x in X], c=vals, cmap=cmap, s=s, alpha=1, zorder=zorderForBoxes)             # <<<<<<<<<<<<<<
 *                         else:
 *                             scatter=ax.scatter([y+0.5 for y in Y], [x+0.5 for x in X], c=vals, cmap=cmap, norm=norm, s=s, alpha=1, zorder=zorderForBoxes)
 */
              __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_scatter); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2081, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_8);
              { /* enter inner scope */
                __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2081, __pyx_L127_error)
                __Pyx_GOTREF(__pyx_t_5);
                if (unlikely(!__pyx_v_Y)) { __Pyx_RaiseUnboundLocalError("Y"); __PYX_ERR(2, 2081, __pyx_L127_error) }
                if (likely(PyList_CheckExact(__pyx_v_Y)) || PyTuple_CheckExact(__pyx_v_Y)) {
                  __pyx_t_4 = __pyx_v_Y; __Pyx_INCREF(__pyx_t_4); __pyx_t_12 = 0;
                  __pyx_t_13 = NULL;
                } else {
                  __pyx_t_12 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_Y); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2081, __pyx_L127_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  __pyx_t_13 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(2, 2081, __pyx_L127_error)
                }
                for (;;) {
                  if (likely(!__pyx_t_13)) {
                    if (likely(PyList_CheckExact(__pyx_t_4))) {
                      if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_4)) break;
                      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                      __pyx_t_15 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_12); __Pyx_INCREF(__pyx_t_15); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(2, 2081, __pyx_L127_error)
                      #else
                      __pyx_t_15 = PySequence_ITEM(__pyx_t_4, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2081, __pyx_L127_error)
                      __Pyx_GOTREF(__pyx_t_15);
                      #endif
                    } else {
                      if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
                      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                      __pyx_t_15 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_12); __Pyx_INCREF(__pyx_t_15); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(2, 2081, __pyx_L127_error)
                      #else
                      __pyx_t_15 = PySequence_ITEM(__pyx_t_4, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2081, __pyx_L127_error)
                      __Pyx_GOTREF(__pyx_t_15);
                      #endif
                    }
                  } else {
                    __pyx_t_15 = __pyx_t_13(__pyx_t_4);
                    if (unlikely(!__pyx_t_15)) {
                      PyObject* exc_type = PyErr_Occurred();
                      if (exc_type) {
                        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                        else __PYX_ERR(2, 2081, __pyx_L127_error)
                      }
                      break;
                    }
                    __Pyx_GOTREF(__pyx_t_15);
                  }
                  __Pyx_XDECREF_SET(__pyx_9genexpr18__pyx_v_y, __pyx_t_15);
                  __pyx_t_15 = 0;
                  __pyx_t_15 = __Pyx_PyFloat_AddObjC(__pyx_9genexpr18__pyx_v_y, __pyx_float_0_5, 0.5, 0, 0); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2081, __pyx_L127_error)
                  __Pyx_GOTREF(__pyx_t_15);
                  if (unlikely(__Pyx_ListComp_Append(__pyx_t_5, (PyObject*)__pyx_t_15))) __PYX_ERR(2, 2081, __pyx_L127_error)
                  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                }
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                __Pyx_XDECREF(__pyx_9genexpr18__pyx_v_y); __pyx_9genexpr18__pyx_v_y = 0;
                goto __pyx_L130_exit_scope;
                __pyx_L127_error:;
                __Pyx_XDECREF(__pyx_9genexpr18__pyx_v_y); __pyx_9genexpr18__pyx_v_y = 0;
                goto __pyx_L3_error;
                __pyx_L130_exit_scope:;
              } /* exit inner scope */
              { /* enter inner scope */
                __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2081, __pyx_L133_error)
                __Pyx_GOTREF(__pyx_t_4);
                if (unlikely(!__pyx_v_X)) { __Pyx_RaiseUnboundLocalError("X"); __PYX_ERR(2, 2081, __pyx_L133_error) }
                if (likely(PyList_CheckExact(__pyx_v_X)) || PyTuple_CheckExact(__pyx_v_X)) {
                  __pyx_t_15 = __pyx_v_X; __Pyx_INCREF(__pyx_t_15); __pyx_t_12 = 0;
                  __pyx_t_13 = NULL;
                } else {
                  __pyx_t_12 = -1; __pyx_t_15 = PyObject_GetIter(__pyx_v_X); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2081, __pyx_L133_error)
                  __Pyx_GOTREF(__pyx_t_15);
                  __pyx_t_13 = Py_TYPE(__pyx_t_15)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(2, 2081, __pyx_L133_error)
                }
                for (;;) {
                  if (likely(!__pyx_t_13)) {
                    if (likely(PyList_CheckExact(__pyx_t_15))) {
                      if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_15)) break;
                      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                      __pyx_t_10 = PyList_GET_ITEM(__pyx_t_15, __pyx_t_12); __Pyx_INCREF(__pyx_t_10); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(2, 2081, __pyx_L133_error)
                      #else
                      __pyx_t_10 = PySequence_ITEM(__pyx_t_15, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 2081, __pyx_L133_error)
                      __Pyx_GOTREF(__pyx_t_10);
                      #endif
                    } else {
                      if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_15)) break;
                      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                      __pyx_t_10 = PyTuple_GET_ITEM(__pyx_t_15, __pyx_t_12); __Pyx_INCREF(__pyx_t_10); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(2, 2081, __pyx_L133_error)
                      #else
                      __pyx_t_10 = PySequence_ITEM(__pyx_t_15, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 2081, __pyx_L133_error)
                      __Pyx_GOTREF(__pyx_t_10);
                      #endif
                    }
                  } else {
                    __pyx_t_10 = __pyx_t_13(__pyx_t_15);
                    if (unlikely(!__pyx_t_10)) {
                      PyObject* exc_type = PyErr_Occurred();
                      if (exc_type) {
                        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                        else __PYX_ERR(2, 2081, __pyx_L133_error)
                      }
                      break;
                    }
                    __Pyx_GOTREF(__pyx_t_10);
                  }
                  __Pyx_XDECREF_SET(__pyx_9genexpr19__pyx_v_x, __pyx_t_10);
                  __pyx_t_10 = 0;
                  __pyx_t_10 = __Pyx_PyFloat_AddObjC(__pyx_9genexpr19__pyx_v_x, __pyx_float_0_5, 0.5, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 2081, __pyx_L133_error)
                  __Pyx_GOTREF(__pyx_t_10);
                  if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_10))) __PYX_ERR(2, 2081, __pyx_L133_error)
                  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                }
                __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                __Pyx_XDECREF(__pyx_9genexpr19__pyx_v_x); __pyx_9genexpr19__pyx_v_x = 0;
                goto __pyx_L136_exit_scope;
                __pyx_L133_error:;
                __Pyx_XDECREF(__pyx_9genexpr19__pyx_v_x); __pyx_9genexpr19__pyx_v_x = 0;
                goto __pyx_L3_error;
                __pyx_L136_exit_scope:;
              } /* exit inner scope */
              __pyx_t_15 = PyTuple_New(2); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2081, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_15);
              __Pyx_GIVEREF(__pyx_t_5);
              PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_5);
              __Pyx_GIVEREF(__pyx_t_4);
              PyTuple_SET_ITEM(__pyx_t_15, 1, __pyx_t_4);
              __pyx_t_5 = 0;
              __pyx_t_4 = 0;
              __pyx_t_4 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2081, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_4);
              if (unlikely(!__pyx_v_vals)) { __Pyx_RaiseUnboundLocalError("vals"); __PYX_ERR(2, 2081, __pyx_L3_error) }
              if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_c, __pyx_v_vals) < 0) __PYX_ERR(2, 2081, __pyx_L3_error)
              if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_cmap, __pyx_v_cmap) < 0) __PYX_ERR(2, 2081, __pyx_L3_error)
              if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_s, __pyx_v_s) < 0) __PYX_ERR(2, 2081, __pyx_L3_error)
              if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_alpha, __pyx_int_1) < 0) __PYX_ERR(2, 2081, __pyx_L3_error)
              __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_zorderForBoxes); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2081, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_5);
              if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_zorder, __pyx_t_5) < 0) __PYX_ERR(2, 2081, __pyx_L3_error)
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
              __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_15, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2081, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_5);
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              __pyx_v_scatter = __pyx_t_5;
              __pyx_t_5 = 0;

              /* "src/pygcgopt/decomposition.pxi":2080
 *                         cbar.ax.set_ylabel("MIPLIB constypes", rotation=90)
 *                     else:
 *                         if norm == None:             # <<<<<<<<<<<<<<
 *                             scatter=ax.scatter([y+0.5 for y in Y], [x+0.5 for x in X], c=vals, cmap=cmap, s=s, alpha=1, zorder=zorderForBoxes)
 *                         else:
 */
              goto __pyx_L124;
            }

            /* "src/pygcgopt/decomposition.pxi":2083
 *                             scatter=ax.scatter([y+0.5 for y in Y], [x+0.5 for x in X], c=vals, cmap=cmap, s=s, alpha=1, zorder=zorderForBoxes)
 *                         else:
 *                             scatter=ax.scatter([y+0.5 for y in Y], [x+0.5 for x in X], c=vals, cmap=cmap, norm=norm, s=s, alpha=1, zorder=zorderForBoxes)             # <<<<<<<<<<<<<<
 *                         fig.colorbar(scatter)
 *                 elif matrixType == "scipvartype":
 */
            /*else*/ {
              __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_scatter); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2083, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_5);
              { /* enter inner scope */
                __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2083, __pyx_L139_error)
                __Pyx_GOTREF(__pyx_t_4);
                if (unlikely(!__pyx_v_Y)) { __Pyx_RaiseUnboundLocalError("Y"); __PYX_ERR(2, 2083, __pyx_L139_error) }
                if (likely(PyList_CheckExact(__pyx_v_Y)) || PyTuple_CheckExact(__pyx_v_Y)) {
                  __pyx_t_15 = __pyx_v_Y; __Pyx_INCREF(__pyx_t_15); __pyx_t_12 = 0;
                  __pyx_t_13 = NULL;
                } else {
                  __pyx_t_12 = -1; __pyx_t_15 = PyObject_GetIter(__pyx_v_Y); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2083, __pyx_L139_error)
                  __Pyx_GOTREF(__pyx_t_15);
                  __pyx_t_13 = Py_TYPE(__pyx_t_15)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(2, 2083, __pyx_L139_error)
                }
                for (;;) {
                  if (likely(!__pyx_t_13)) {
                    if (likely(PyList_CheckExact(__pyx_t_15))) {
                      if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_15)) break;
                      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                      __pyx_t_8 = PyList_GET_ITEM(__pyx_t_15, __pyx_t_12); __Pyx_INCREF(__pyx_t_8); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(2, 2083, __pyx_L139_error)
                      #else
                      __pyx_t_8 = PySequence_ITEM(__pyx_t_15, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2083, __pyx_L139_error)
                      __Pyx_GOTREF(__pyx_t_8);
                      #endif
                    } else {
                      if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_15)) break;
                      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                      __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_15, __pyx_t_12); __Pyx_INCREF(__pyx_t_8); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(2, 2083, __pyx_L139_error)
                      #else
                      __pyx_t_8 = PySequence_ITEM(__pyx_t_15, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2083, __pyx_L139_error)
                      __Pyx_GOTREF(__pyx_t_8);
                      #endif
                    }
                  } else {
                    __pyx_t_8 = __pyx_t_13(__pyx_t_15);
                    if (unlikely(!__pyx_t_8)) {
                      PyObject* exc_type = PyErr_Occurred();
                      if (exc_type) {
                        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                        else __PYX_ERR(2, 2083, __pyx_L139_error)
                      }
                      break;
                    }
                    __Pyx_GOTREF(__pyx_t_8);
                  }
                  __Pyx_XDECREF_SET(__pyx_9genexpr20__pyx_v_y, __pyx_t_8);
                  __pyx_t_8 = 0;
                  __pyx_t_8 = __Pyx_PyFloat_AddObjC(__pyx_9genexpr20__pyx_v_y, __pyx_float_0_5, 0.5, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2083, __pyx_L139_error)
                  __Pyx_GOTREF(__pyx_t_8);
                  if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_8))) __PYX_ERR(2, 2083, __pyx_L139_error)
                  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                }
                __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                __Pyx_XDECREF(__pyx_9genexpr20__pyx_v_y); __pyx_9genexpr20__pyx_v_y = 0;
                goto __pyx_L142_exit_scope;
                __pyx_L139_error:;
                __Pyx_XDECREF(__pyx_9genexpr20__pyx_v_y); __pyx_9genexpr20__pyx_v_y = 0;
                goto __pyx_L3_error;
                __pyx_L142_exit_scope:;
              } /* exit inner scope */
              { /* enter inner scope */
                __pyx_t_15 = PyList_New(0); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2083, __pyx_L145_error)
                __Pyx_GOTREF(__pyx_t_15);
                if (unlikely(!__pyx_v_X)) { __Pyx_RaiseUnboundLocalError("X"); __PYX_ERR(2, 2083, __pyx_L145_error) }
                if (likely(PyList_CheckExact(__pyx_v_X)) || PyTuple_CheckExact(__pyx_v_X)) {
                  __pyx_t_8 = __pyx_v_X; __Pyx_INCREF(__pyx_t_8); __pyx_t_12 = 0;
                  __pyx_t_13 = NULL;
                } else {
                  __pyx_t_12 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_v_X); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2083, __pyx_L145_error)
                  __Pyx_GOTREF(__pyx_t_8);
                  __pyx_t_13 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(2, 2083, __pyx_L145_error)
                }
                for (;;) {
                  if (likely(!__pyx_t_13)) {
                    if (likely(PyList_CheckExact(__pyx_t_8))) {
                      if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_8)) break;
                      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                      __pyx_t_10 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_12); __Pyx_INCREF(__pyx_t_10); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(2, 2083, __pyx_L145_error)
                      #else
                      __pyx_t_10 = PySequence_ITEM(__pyx_t_8, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 2083, __pyx_L145_error)
                      __Pyx_GOTREF(__pyx_t_10);
                      #endif
                    } else {
                      if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
                      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                      __pyx_t_10 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_12); __Pyx_INCREF(__pyx_t_10); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(2, 2083, __pyx_L145_error)
                      #else
                      __pyx_t_10 = PySequence_ITEM(__pyx_t_8, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 2083, __pyx_L145_error)
                      __Pyx_GOTREF(__pyx_t_10);
                      #endif
                    }
                  } else {
                    __pyx_t_10 = __pyx_t_13(__pyx_t_8);
                    if (unlikely(!__pyx_t_10)) {
                      PyObject* exc_type = PyErr_Occurred();
                      if (exc_type) {
                        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                        else __PYX_ERR(2, 2083, __pyx_L145_error)
                      }
                      break;
                    }
                    __Pyx_GOTREF(__pyx_t_10);
                  }
                  __Pyx_XDECREF_SET(__pyx_9genexpr21__pyx_v_x, __pyx_t_10);
                  __pyx_t_10 = 0;
                  __pyx_t_10 = __Pyx_PyFloat_AddObjC(__pyx_9genexpr21__pyx_v_x, __pyx_float_0_5, 0.5, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 2083, __pyx_L145_error)
                  __Pyx_GOTREF(__pyx_t_10);
                  if (unlikely(__Pyx_ListComp_Append(__pyx_t_15, (PyObject*)__pyx_t_10))) __PYX_ERR(2, 2083, __pyx_L145_error)
                  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                }
                __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                __Pyx_XDECREF(__pyx_9genexpr21__pyx_v_x); __pyx_9genexpr21__pyx_v_x = 0;
                goto __pyx_L148_exit_scope;
                __pyx_L145_error:;
                __Pyx_XDECREF(__pyx_9genexpr21__pyx_v_x); __pyx_9genexpr21__pyx_v_x = 0;
                goto __pyx_L3_error;
                __pyx_L148_exit_scope:;
              } /* exit inner scope */
              __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2083, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_8);
              __Pyx_GIVEREF(__pyx_t_4);
              PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4);
              __Pyx_GIVEREF(__pyx_t_15);
              PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_15);
              __pyx_t_4 = 0;
              __pyx_t_15 = 0;
              __pyx_t_15 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2083, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_15);
              if (unlikely(!__pyx_v_vals)) { __Pyx_RaiseUnboundLocalError("vals"); __PYX_ERR(2, 2083, __pyx_L3_error) }
              if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_c, __pyx_v_vals) < 0) __PYX_ERR(2, 2083, __pyx_L3_error)
              if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_cmap, __pyx_v_cmap) < 0) __PYX_ERR(2, 2083, __pyx_L3_error)
              if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_norm, __pyx_v_norm) < 0) __PYX_ERR(2, 2083, __pyx_L3_error)
              if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_s, __pyx_v_s) < 0) __PYX_ERR(2, 2083, __pyx_L3_error)
              if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_alpha, __pyx_int_1) < 0) __PYX_ERR(2, 2083, __pyx_L3_error)
              __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_zorderForBoxes); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2083, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_4);
              if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_zorder, __pyx_t_4) < 0) __PYX_ERR(2, 2083, __pyx_L3_error)
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, __pyx_t_15); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2083, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              __pyx_v_scatter = __pyx_t_4;
              __pyx_t_4 = 0;
            }
            __pyx_L124:;

            /* "src/pygcgopt/decomposition.pxi":2084
 *                         else:
 *                             scatter=ax.scatter([y+0.5 for y in Y], [x+0.5 for x in X], c=vals, cmap=cmap, norm=norm, s=s, alpha=1, zorder=zorderForBoxes)
 *                         fig.colorbar(scatter)             # <<<<<<<<<<<<<<
 *                 elif matrixType == "scipvartype":
 *                     if cmap == None:
 */
            __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_v_fig, __pyx_n_s_colorbar); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2084, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_15);
            __pyx_t_8 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
              __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_15);
              if (likely(__pyx_t_8)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
                __Pyx_INCREF(__pyx_t_8);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_15, function);
              }
            }
            __pyx_t_4 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_15, __pyx_t_8, __pyx_v_scatter) : __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_v_scatter);
            __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
            if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2084, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          }
          __pyx_L96:;

          /* "src/pygcgopt/decomposition.pxi":2065
 *                     cbar = fig.colorbar(scatter)
 *                     cbar.ax.set_ylabel("coefficients", rotation=90)
 *                 elif matrixType == "miplibconstype":             # <<<<<<<<<<<<<<
 *                     if cmap == None:
 *                         uniqueMatrixMIPLIBConsTypeList = list(self.uniqueMatrixMIPLIBConsType(obj=obj, bcoef=bcoef))
 */
          goto __pyx_L32;
        }

        /* "src/pygcgopt/decomposition.pxi":2085
 *                             scatter=ax.scatter([y+0.5 for y in Y], [x+0.5 for x in X], c=vals, cmap=cmap, norm=norm, s=s, alpha=1, zorder=zorderForBoxes)
 *                         fig.colorbar(scatter)
 *                 elif matrixType == "scipvartype":             # <<<<<<<<<<<<<<
 *                     if cmap == None:
 *                         uniqueMatrixSCIPVarTypeList = list(self.uniqueMatrixSCIPVarType(obj=obj, bcoef=bcoef))
 */
        __pyx_t_6 = (__Pyx_PyUnicode_Equals(__pyx_v_matrixType, __pyx_n_u_scipvartype, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 2085, __pyx_L3_error)
        if (__pyx_t_6) {

          /* "src/pygcgopt/decomposition.pxi":2086
 *                         fig.colorbar(scatter)
 *                 elif matrixType == "scipvartype":
 *                     if cmap == None:             # <<<<<<<<<<<<<<
 *                         uniqueMatrixSCIPVarTypeList = list(self.uniqueMatrixSCIPVarType(obj=obj, bcoef=bcoef))
 *                         uniqueMatrixSCIPVarTypeList.sort()
 */
          __pyx_t_4 = PyObject_RichCompare(__pyx_v_cmap, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2086, __pyx_L3_error)
          __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 2086, __pyx_L3_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (__pyx_t_6) {

            /* "src/pygcgopt/decomposition.pxi":2087
 *                 elif matrixType == "scipvartype":
 *                     if cmap == None:
 *                         uniqueMatrixSCIPVarTypeList = list(self.uniqueMatrixSCIPVarType(obj=obj, bcoef=bcoef))             # <<<<<<<<<<<<<<
 *                         uniqueMatrixSCIPVarTypeList.sort()
 *                         selfcolors=["blue", "green", "red", "gray", "black"]
 */
            __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_uniqueMatrixSCIPVarType); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2087, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_15 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2087, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_15);
            if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_obj, __pyx_v_obj) < 0) __PYX_ERR(2, 2087, __pyx_L3_error)
            if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_bcoef, __pyx_v_bcoef) < 0) __PYX_ERR(2, 2087, __pyx_L3_error)
            __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_empty_tuple, __pyx_t_15); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2087, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            __pyx_t_15 = PySequence_List(__pyx_t_8); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2087, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __pyx_v_uniqueMatrixSCIPVarTypeList = ((PyObject*)__pyx_t_15);
            __pyx_t_15 = 0;

            /* "src/pygcgopt/decomposition.pxi":2088
 *                     if cmap == None:
 *                         uniqueMatrixSCIPVarTypeList = list(self.uniqueMatrixSCIPVarType(obj=obj, bcoef=bcoef))
 *                         uniqueMatrixSCIPVarTypeList.sort()             # <<<<<<<<<<<<<<
 *                         selfcolors=["blue", "green", "red", "gray", "black"]
 *                         colors_used=selfcolors[0:len(uniqueMatrixSCIPVarTypeList)]
 */
            __pyx_t_18 = PyList_Sort(__pyx_v_uniqueMatrixSCIPVarTypeList); if (unlikely(__pyx_t_18 == ((int)-1))) __PYX_ERR(2, 2088, __pyx_L3_error)

            /* "src/pygcgopt/decomposition.pxi":2089
 *                         uniqueMatrixSCIPVarTypeList = list(self.uniqueMatrixSCIPVarType(obj=obj, bcoef=bcoef))
 *                         uniqueMatrixSCIPVarTypeList.sort()
 *                         selfcolors=["blue", "green", "red", "gray", "black"]             # <<<<<<<<<<<<<<
 *                         colors_used=selfcolors[0:len(uniqueMatrixSCIPVarTypeList)]
 *                         cmap_self = colors.ListedColormap(colors_used)
 */
            __pyx_t_15 = PyList_New(5); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2089, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_INCREF(__pyx_n_u_blue);
            __Pyx_GIVEREF(__pyx_n_u_blue);
            PyList_SET_ITEM(__pyx_t_15, 0, __pyx_n_u_blue);
            __Pyx_INCREF(__pyx_n_u_green);
            __Pyx_GIVEREF(__pyx_n_u_green);
            PyList_SET_ITEM(__pyx_t_15, 1, __pyx_n_u_green);
            __Pyx_INCREF(__pyx_n_u_red);
            __Pyx_GIVEREF(__pyx_n_u_red);
            PyList_SET_ITEM(__pyx_t_15, 2, __pyx_n_u_red);
            __Pyx_INCREF(__pyx_n_u_gray);
            __Pyx_GIVEREF(__pyx_n_u_gray);
            PyList_SET_ITEM(__pyx_t_15, 3, __pyx_n_u_gray);
            __Pyx_INCREF(__pyx_n_u_black);
            __Pyx_GIVEREF(__pyx_n_u_black);
            PyList_SET_ITEM(__pyx_t_15, 4, __pyx_n_u_black);
            __pyx_v_selfcolors = ((PyObject*)__pyx_t_15);
            __pyx_t_15 = 0;

            /* "src/pygcgopt/decomposition.pxi":2090
 *                         uniqueMatrixSCIPVarTypeList.sort()
 *                         selfcolors=["blue", "green", "red", "gray", "black"]
 *                         colors_used=selfcolors[0:len(uniqueMatrixSCIPVarTypeList)]             # <<<<<<<<<<<<<<
 *                         cmap_self = colors.ListedColormap(colors_used)
 *                         boundaries = [-1.5] + [i+0.5 for i in uniqueMatrixSCIPVarTypeList]
 */
            __pyx_t_12 = PyList_GET_SIZE(__pyx_v_uniqueMatrixSCIPVarTypeList); if (unlikely(__pyx_t_12 == ((Py_ssize_t)-1))) __PYX_ERR(2, 2090, __pyx_L3_error)
            __pyx_t_15 = __Pyx_PyList_GetSlice(__pyx_v_selfcolors, 0, __pyx_t_12); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2090, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_15);
            __pyx_v_colors_used = ((PyObject*)__pyx_t_15);
            __pyx_t_15 = 0;

            /* "src/pygcgopt/decomposition.pxi":2091
 *                         selfcolors=["blue", "green", "red", "gray", "black"]
 *                         colors_used=selfcolors[0:len(uniqueMatrixSCIPVarTypeList)]
 *                         cmap_self = colors.ListedColormap(colors_used)             # <<<<<<<<<<<<<<
 *                         boundaries = [-1.5] + [i+0.5 for i in uniqueMatrixSCIPVarTypeList]
 *                         norm = colors.BoundaryNorm(boundaries, cmap_self.N)
 */
            __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_colors, __pyx_n_s_ListedColormap); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2091, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_8);
            __pyx_t_4 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
              __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_8);
              if (likely(__pyx_t_4)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
                __Pyx_INCREF(__pyx_t_4);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_8, function);
              }
            }
            __pyx_t_15 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_4, __pyx_v_colors_used) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_colors_used);
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2091, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __pyx_v_cmap_self = __pyx_t_15;
            __pyx_t_15 = 0;

            /* "src/pygcgopt/decomposition.pxi":2092
 *                         colors_used=selfcolors[0:len(uniqueMatrixSCIPVarTypeList)]
 *                         cmap_self = colors.ListedColormap(colors_used)
 *                         boundaries = [-1.5] + [i+0.5 for i in uniqueMatrixSCIPVarTypeList]             # <<<<<<<<<<<<<<
 *                         norm = colors.BoundaryNorm(boundaries, cmap_self.N)
 *                         scatter=ax.scatter([y+0.5 for y in Y], [x+0.5 for x in X], c=vals, cmap=cmap_self, norm=norm, s=s, alpha=1, zorder=zorderForBoxes)
 */
            __pyx_t_15 = PyList_New(1); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2092, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_INCREF(__pyx_float_neg_1_5);
            __Pyx_GIVEREF(__pyx_float_neg_1_5);
            PyList_SET_ITEM(__pyx_t_15, 0, __pyx_float_neg_1_5);
            { /* enter inner scope */
              __pyx_t_8 = PyList_New(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2092, __pyx_L152_error)
              __Pyx_GOTREF(__pyx_t_8);
              __pyx_t_4 = __pyx_v_uniqueMatrixSCIPVarTypeList; __Pyx_INCREF(__pyx_t_4); __pyx_t_12 = 0;
              for (;;) {
                if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_4)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_5 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_12); __Pyx_INCREF(__pyx_t_5); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(2, 2092, __pyx_L152_error)
                #else
                __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2092, __pyx_L152_error)
                __Pyx_GOTREF(__pyx_t_5);
                #endif
                __Pyx_XDECREF_SET(__pyx_9genexpr22__pyx_v_i, __pyx_t_5);
                __pyx_t_5 = 0;
                __pyx_t_5 = __Pyx_PyFloat_AddObjC(__pyx_9genexpr22__pyx_v_i, __pyx_float_0_5, 0.5, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2092, __pyx_L152_error)
                __Pyx_GOTREF(__pyx_t_5);
                if (unlikely(__Pyx_ListComp_Append(__pyx_t_8, (PyObject*)__pyx_t_5))) __PYX_ERR(2, 2092, __pyx_L152_error)
                __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
              }
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              __Pyx_XDECREF(__pyx_9genexpr22__pyx_v_i); __pyx_9genexpr22__pyx_v_i = 0;
              goto __pyx_L155_exit_scope;
              __pyx_L152_error:;
              __Pyx_XDECREF(__pyx_9genexpr22__pyx_v_i); __pyx_9genexpr22__pyx_v_i = 0;
              goto __pyx_L3_error;
              __pyx_L155_exit_scope:;
            } /* exit inner scope */
            __pyx_t_4 = PyNumber_Add(__pyx_t_15, __pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2092, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __pyx_v_boundaries = ((PyObject*)__pyx_t_4);
            __pyx_t_4 = 0;

            /* "src/pygcgopt/decomposition.pxi":2093
 *                         cmap_self = colors.ListedColormap(colors_used)
 *                         boundaries = [-1.5] + [i+0.5 for i in uniqueMatrixSCIPVarTypeList]
 *                         norm = colors.BoundaryNorm(boundaries, cmap_self.N)             # <<<<<<<<<<<<<<
 *                         scatter=ax.scatter([y+0.5 for y in Y], [x+0.5 for x in X], c=vals, cmap=cmap_self, norm=norm, s=s, alpha=1, zorder=zorderForBoxes)
 *                         cbar = plt.colorbar(scatter)
 */
            __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_colors, __pyx_n_s_BoundaryNorm); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2093, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_8);
            __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_v_cmap_self, __pyx_n_s_N); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2093, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_15);
            __pyx_t_5 = NULL;
            __pyx_t_19 = 0;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
              __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_8);
              if (likely(__pyx_t_5)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
                __Pyx_INCREF(__pyx_t_5);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_8, function);
                __pyx_t_19 = 1;
              }
            }
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(__pyx_t_8)) {
              PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_boundaries, __pyx_t_15};
              __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_19, 2+__pyx_t_19); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2093, __pyx_L3_error)
              __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            } else
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
              PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_boundaries, __pyx_t_15};
              __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_19, 2+__pyx_t_19); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2093, __pyx_L3_error)
              __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            } else
            #endif
            {
              __pyx_t_10 = PyTuple_New(2+__pyx_t_19); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 2093, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_10);
              if (__pyx_t_5) {
                __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_5); __pyx_t_5 = NULL;
              }
              __Pyx_INCREF(__pyx_v_boundaries);
              __Pyx_GIVEREF(__pyx_v_boundaries);
              PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_19, __pyx_v_boundaries);
              __Pyx_GIVEREF(__pyx_t_15);
              PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_19, __pyx_t_15);
              __pyx_t_15 = 0;
              __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_10, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2093, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            }
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_DECREF_SET(__pyx_v_norm, __pyx_t_4);
            __pyx_t_4 = 0;

            /* "src/pygcgopt/decomposition.pxi":2094
 *                         boundaries = [-1.5] + [i+0.5 for i in uniqueMatrixSCIPVarTypeList]
 *                         norm = colors.BoundaryNorm(boundaries, cmap_self.N)
 *                         scatter=ax.scatter([y+0.5 for y in Y], [x+0.5 for x in X], c=vals, cmap=cmap_self, norm=norm, s=s, alpha=1, zorder=zorderForBoxes)             # <<<<<<<<<<<<<<
 *                         cbar = plt.colorbar(scatter)
 *                         cbar.set_ticks([(boundaries[i]+boundaries[i+1])/(2) for i in range(len(boundaries)) if i != len(boundaries)-1])
 */
            __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_scatter); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2094, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_4);
            { /* enter inner scope */
              __pyx_t_8 = PyList_New(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2094, __pyx_L158_error)
              __Pyx_GOTREF(__pyx_t_8);
              if (unlikely(!__pyx_v_Y)) { __Pyx_RaiseUnboundLocalError("Y"); __PYX_ERR(2, 2094, __pyx_L158_error) }
              if (likely(PyList_CheckExact(__pyx_v_Y)) || PyTuple_CheckExact(__pyx_v_Y)) {
                __pyx_t_10 = __pyx_v_Y; __Pyx_INCREF(__pyx_t_10); __pyx_t_12 = 0;
                __pyx_t_13 = NULL;
              } else {
                __pyx_t_12 = -1; __pyx_t_10 = PyObject_GetIter(__pyx_v_Y); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 2094, __pyx_L158_error)
                __Pyx_GOTREF(__pyx_t_10);
                __pyx_t_13 = Py_TYPE(__pyx_t_10)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(2, 2094, __pyx_L158_error)
              }
              for (;;) {
                if (likely(!__pyx_t_13)) {
                  if (likely(PyList_CheckExact(__pyx_t_10))) {
                    if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_10)) break;
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_15 = PyList_GET_ITEM(__pyx_t_10, __pyx_t_12); __Pyx_INCREF(__pyx_t_15); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(2, 2094, __pyx_L158_error)
                    #else
                    __pyx_t_15 = PySequence_ITEM(__pyx_t_10, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2094, __pyx_L158_error)
                    __Pyx_GOTREF(__pyx_t_15);
                    #endif
                  } else {
                    if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_10)) break;
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_15 = PyTuple_GET_ITEM(__pyx_t_10, __pyx_t_12); __Pyx_INCREF(__pyx_t_15); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(2, 2094, __pyx_L158_error)
                    #else
                    __pyx_t_15 = PySequence_ITEM(__pyx_t_10, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2094, __pyx_L158_error)
                    __Pyx_GOTREF(__pyx_t_15);
                    #endif
                  }
                } else {
                  __pyx_t_15 = __pyx_t_13(__pyx_t_10);
                  if (unlikely(!__pyx_t_15)) {
                    PyObject* exc_type = PyErr_Occurred();
                    if (exc_type) {
                      if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                      else __PYX_ERR(2, 2094, __pyx_L158_error)
                    }
                    break;
                  }
                  __Pyx_GOTREF(__pyx_t_15);
                }
                __Pyx_XDECREF_SET(__pyx_9genexpr23__pyx_v_y, __pyx_t_15);
                __pyx_t_15 = 0;
                __pyx_t_15 = __Pyx_PyFloat_AddObjC(__pyx_9genexpr23__pyx_v_y, __pyx_float_0_5, 0.5, 0, 0); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2094, __pyx_L158_error)
                __Pyx_GOTREF(__pyx_t_15);
                if (unlikely(__Pyx_ListComp_Append(__pyx_t_8, (PyObject*)__pyx_t_15))) __PYX_ERR(2, 2094, __pyx_L158_error)
                __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              }
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              __Pyx_XDECREF(__pyx_9genexpr23__pyx_v_y); __pyx_9genexpr23__pyx_v_y = 0;
              goto __pyx_L161_exit_scope;
              __pyx_L158_error:;
              __Pyx_XDECREF(__pyx_9genexpr23__pyx_v_y); __pyx_9genexpr23__pyx_v_y = 0;
              goto __pyx_L3_error;
              __pyx_L161_exit_scope:;
            } /* exit inner scope */
            { /* enter inner scope */
              __pyx_t_10 = PyList_New(0); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 2094, __pyx_L164_error)
              __Pyx_GOTREF(__pyx_t_10);
              if (unlikely(!__pyx_v_X)) { __Pyx_RaiseUnboundLocalError("X"); __PYX_ERR(2, 2094, __pyx_L164_error) }
              if (likely(PyList_CheckExact(__pyx_v_X)) || PyTuple_CheckExact(__pyx_v_X)) {
                __pyx_t_15 = __pyx_v_X; __Pyx_INCREF(__pyx_t_15); __pyx_t_12 = 0;
                __pyx_t_13 = NULL;
              } else {
                __pyx_t_12 = -1; __pyx_t_15 = PyObject_GetIter(__pyx_v_X); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2094, __pyx_L164_error)
                __Pyx_GOTREF(__pyx_t_15);
                __pyx_t_13 = Py_TYPE(__pyx_t_15)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(2, 2094, __pyx_L164_error)
              }
              for (;;) {
                if (likely(!__pyx_t_13)) {
                  if (likely(PyList_CheckExact(__pyx_t_15))) {
                    if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_15)) break;
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_5 = PyList_GET_ITEM(__pyx_t_15, __pyx_t_12); __Pyx_INCREF(__pyx_t_5); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(2, 2094, __pyx_L164_error)
                    #else
                    __pyx_t_5 = PySequence_ITEM(__pyx_t_15, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2094, __pyx_L164_error)
                    __Pyx_GOTREF(__pyx_t_5);
                    #endif
                  } else {
                    if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_15)) break;
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_15, __pyx_t_12); __Pyx_INCREF(__pyx_t_5); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(2, 2094, __pyx_L164_error)
                    #else
                    __pyx_t_5 = PySequence_ITEM(__pyx_t_15, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2094, __pyx_L164_error)
                    __Pyx_GOTREF(__pyx_t_5);
                    #endif
                  }
                } else {
                  __pyx_t_5 = __pyx_t_13(__pyx_t_15);
                  if (unlikely(!__pyx_t_5)) {
                    PyObject* exc_type = PyErr_Occurred();
                    if (exc_type) {
                      if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                      else __PYX_ERR(2, 2094, __pyx_L164_error)
                    }
                    break;
                  }
                  __Pyx_GOTREF(__pyx_t_5);
                }
                __Pyx_XDECREF_SET(__pyx_9genexpr24__pyx_v_x, __pyx_t_5);
                __pyx_t_5 = 0;
                __pyx_t_5 = __Pyx_PyFloat_AddObjC(__pyx_9genexpr24__pyx_v_x, __pyx_float_0_5, 0.5, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2094, __pyx_L164_error)
                __Pyx_GOTREF(__pyx_t_5);
                if (unlikely(__Pyx_ListComp_Append(__pyx_t_10, (PyObject*)__pyx_t_5))) __PYX_ERR(2, 2094, __pyx_L164_error)
                __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
              }
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              __Pyx_XDECREF(__pyx_9genexpr24__pyx_v_x); __pyx_9genexpr24__pyx_v_x = 0;
              goto __pyx_L167_exit_scope;
              __pyx_L164_error:;
              __Pyx_XDECREF(__pyx_9genexpr24__pyx_v_x); __pyx_9genexpr24__pyx_v_x = 0;
              goto __pyx_L3_error;
              __pyx_L167_exit_scope:;
            } /* exit inner scope */
            __pyx_t_15 = PyTuple_New(2); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2094, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_GIVEREF(__pyx_t_8);
            PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_8);
            __Pyx_GIVEREF(__pyx_t_10);
            PyTuple_SET_ITEM(__pyx_t_15, 1, __pyx_t_10);
            __pyx_t_8 = 0;
            __pyx_t_10 = 0;
            __pyx_t_10 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 2094, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_10);
            if (unlikely(!__pyx_v_vals)) { __Pyx_RaiseUnboundLocalError("vals"); __PYX_ERR(2, 2094, __pyx_L3_error) }
            if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_c, __pyx_v_vals) < 0) __PYX_ERR(2, 2094, __pyx_L3_error)
            if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_cmap, __pyx_v_cmap_self) < 0) __PYX_ERR(2, 2094, __pyx_L3_error)
            if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_norm, __pyx_v_norm) < 0) __PYX_ERR(2, 2094, __pyx_L3_error)
            if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_s, __pyx_v_s) < 0) __PYX_ERR(2, 2094, __pyx_L3_error)
            if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_alpha, __pyx_int_1) < 0) __PYX_ERR(2, 2094, __pyx_L3_error)
            __pyx_t_8 = __Pyx_PyInt_From_long(__pyx_v_zorderForBoxes); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2094, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_8);
            if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_zorder, __pyx_t_8) < 0) __PYX_ERR(2, 2094, __pyx_L3_error)
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_15, __pyx_t_10); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2094, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __pyx_v_scatter = __pyx_t_8;
            __pyx_t_8 = 0;

            /* "src/pygcgopt/decomposition.pxi":2095
 *                         norm = colors.BoundaryNorm(boundaries, cmap_self.N)
 *                         scatter=ax.scatter([y+0.5 for y in Y], [x+0.5 for x in X], c=vals, cmap=cmap_self, norm=norm, s=s, alpha=1, zorder=zorderForBoxes)
 *                         cbar = plt.colorbar(scatter)             # <<<<<<<<<<<<<<
 *                         cbar.set_ticks([(boundaries[i]+boundaries[i+1])/(2) for i in range(len(boundaries)) if i != len(boundaries)-1])
 *                         cbar.set_ticklabels([self.scipVarMap(i) for i in uniqueMatrixSCIPVarTypeList])
 */
            __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_plt, __pyx_n_s_colorbar); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 2095, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_15 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
              __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_10);
              if (likely(__pyx_t_15)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
                __Pyx_INCREF(__pyx_t_15);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_10, function);
              }
            }
            __pyx_t_8 = (__pyx_t_15) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_15, __pyx_v_scatter) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_v_scatter);
            __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
            if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2095, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __pyx_v_cbar = __pyx_t_8;
            __pyx_t_8 = 0;

            /* "src/pygcgopt/decomposition.pxi":2096
 *                         scatter=ax.scatter([y+0.5 for y in Y], [x+0.5 for x in X], c=vals, cmap=cmap_self, norm=norm, s=s, alpha=1, zorder=zorderForBoxes)
 *                         cbar = plt.colorbar(scatter)
 *                         cbar.set_ticks([(boundaries[i]+boundaries[i+1])/(2) for i in range(len(boundaries)) if i != len(boundaries)-1])             # <<<<<<<<<<<<<<
 *                         cbar.set_ticklabels([self.scipVarMap(i) for i in uniqueMatrixSCIPVarTypeList])
 *                         cbar.ax.set_ylabel("SCIP vartypes", rotation=90)
 */
            __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_cbar, __pyx_n_s_set_ticks); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 2096, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_10);
            { /* enter inner scope */
              __pyx_t_15 = PyList_New(0); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2096, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_15);
              __pyx_t_12 = PyList_GET_SIZE(__pyx_v_boundaries); if (unlikely(__pyx_t_12 == ((Py_ssize_t)-1))) __PYX_ERR(2, 2096, __pyx_L3_error)
              __pyx_t_20 = __pyx_t_12;
              for (__pyx_t_21 = 0; __pyx_t_21 < __pyx_t_20; __pyx_t_21+=1) {
                __pyx_9genexpr25__pyx_v_i = __pyx_t_21;
                __pyx_t_22 = PyList_GET_SIZE(__pyx_v_boundaries); if (unlikely(__pyx_t_22 == ((Py_ssize_t)-1))) __PYX_ERR(2, 2096, __pyx_L3_error)
                __pyx_t_6 = ((__pyx_9genexpr25__pyx_v_i != (__pyx_t_22 - 1)) != 0);
                if (__pyx_t_6) {
                  __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_boundaries, __pyx_9genexpr25__pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2096, __pyx_L3_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  __pyx_t_22 = (__pyx_9genexpr25__pyx_v_i + 1);
                  __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_boundaries, __pyx_t_22, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2096, __pyx_L3_error)
                  __Pyx_GOTREF(__pyx_t_5);
                  __pyx_t_14 = PyNumber_Add(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 2096, __pyx_L3_error)
                  __Pyx_GOTREF(__pyx_t_14);
                  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                  __pyx_t_5 = __Pyx_PyInt_TrueDivideObjC(__pyx_t_14, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2096, __pyx_L3_error)
                  __Pyx_GOTREF(__pyx_t_5);
                  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
                  if (unlikely(__Pyx_ListComp_Append(__pyx_t_15, (PyObject*)__pyx_t_5))) __PYX_ERR(2, 2096, __pyx_L3_error)
                  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                }
              }
            } /* exit inner scope */
            __pyx_t_5 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
              __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_10);
              if (likely(__pyx_t_5)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
                __Pyx_INCREF(__pyx_t_5);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_10, function);
              }
            }
            __pyx_t_8 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_5, __pyx_t_15) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_15);
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2096, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

            /* "src/pygcgopt/decomposition.pxi":2097
 *                         cbar = plt.colorbar(scatter)
 *                         cbar.set_ticks([(boundaries[i]+boundaries[i+1])/(2) for i in range(len(boundaries)) if i != len(boundaries)-1])
 *                         cbar.set_ticklabels([self.scipVarMap(i) for i in uniqueMatrixSCIPVarTypeList])             # <<<<<<<<<<<<<<
 *                         cbar.ax.set_ylabel("SCIP vartypes", rotation=90)
 *                     else:
 */
            __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_cbar, __pyx_n_s_set_ticklabels); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 2097, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_10);
            { /* enter inner scope */
              __pyx_t_15 = PyList_New(0); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2097, __pyx_L173_error)
              __Pyx_GOTREF(__pyx_t_15);
              __pyx_t_5 = __pyx_v_uniqueMatrixSCIPVarTypeList; __Pyx_INCREF(__pyx_t_5); __pyx_t_12 = 0;
              for (;;) {
                if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_5)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_14 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_12); __Pyx_INCREF(__pyx_t_14); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(2, 2097, __pyx_L173_error)
                #else
                __pyx_t_14 = PySequence_ITEM(__pyx_t_5, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 2097, __pyx_L173_error)
                __Pyx_GOTREF(__pyx_t_14);
                #endif
                __Pyx_XDECREF_SET(__pyx_9genexpr26__pyx_v_i, __pyx_t_14);
                __pyx_t_14 = 0;
                __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_scipVarMap); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2097, __pyx_L173_error)
                __Pyx_GOTREF(__pyx_t_4);
                __pyx_t_9 = NULL;
                if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
                  __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_4);
                  if (likely(__pyx_t_9)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
                    __Pyx_INCREF(__pyx_t_9);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_4, function);
                  }
                }
                __pyx_t_14 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_9, __pyx_9genexpr26__pyx_v_i) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_9genexpr26__pyx_v_i);
                __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
                if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 2097, __pyx_L173_error)
                __Pyx_GOTREF(__pyx_t_14);
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                if (unlikely(__Pyx_ListComp_Append(__pyx_t_15, (PyObject*)__pyx_t_14))) __PYX_ERR(2, 2097, __pyx_L173_error)
                __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
              }
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
              __Pyx_XDECREF(__pyx_9genexpr26__pyx_v_i); __pyx_9genexpr26__pyx_v_i = 0;
              goto __pyx_L176_exit_scope;
              __pyx_L173_error:;
              __Pyx_XDECREF(__pyx_9genexpr26__pyx_v_i); __pyx_9genexpr26__pyx_v_i = 0;
              goto __pyx_L3_error;
              __pyx_L176_exit_scope:;
            } /* exit inner scope */
            __pyx_t_5 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
              __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_10);
              if (likely(__pyx_t_5)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
                __Pyx_INCREF(__pyx_t_5);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_10, function);
              }
            }
            __pyx_t_8 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_5, __pyx_t_15) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_15);
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2097, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

            /* "src/pygcgopt/decomposition.pxi":2098
 *                         cbar.set_ticks([(boundaries[i]+boundaries[i+1])/(2) for i in range(len(boundaries)) if i != len(boundaries)-1])
 *                         cbar.set_ticklabels([self.scipVarMap(i) for i in uniqueMatrixSCIPVarTypeList])
 *                         cbar.ax.set_ylabel("SCIP vartypes", rotation=90)             # <<<<<<<<<<<<<<
 *                     else:
 *                         if norm == None:
 */
            __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_cbar, __pyx_n_s_ax); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2098, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_8);
            __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_set_ylabel); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 2098, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __pyx_t_8 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2098, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_8);
            if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_rotation, __pyx_int_90) < 0) __PYX_ERR(2, 2098, __pyx_L3_error)
            __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_tuple__16, __pyx_t_8); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2098, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

            /* "src/pygcgopt/decomposition.pxi":2086
 *                         fig.colorbar(scatter)
 *                 elif matrixType == "scipvartype":
 *                     if cmap == None:             # <<<<<<<<<<<<<<
 *                         uniqueMatrixSCIPVarTypeList = list(self.uniqueMatrixSCIPVarType(obj=obj, bcoef=bcoef))
 *                         uniqueMatrixSCIPVarTypeList.sort()
 */
            goto __pyx_L149;
          }

          /* "src/pygcgopt/decomposition.pxi":2100
 *                         cbar.ax.set_ylabel("SCIP vartypes", rotation=90)
 *                     else:
 *                         if norm == None:             # <<<<<<<<<<<<<<
 *                             scatter=ax.scatter([y+0.5 for y in Y], [x+0.5 for x in X], c=vals, cmap=cmap, s=s, alpha=1, zorder=zorderForBoxes)
 *                         else:
 */
          /*else*/ {
            __pyx_t_15 = PyObject_RichCompare(__pyx_v_norm, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_15); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2100, __pyx_L3_error)
            __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_15); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 2100, __pyx_L3_error)
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            if (__pyx_t_6) {

              /* "src/pygcgopt/decomposition.pxi":2101
 *                     else:
 *                         if norm == None:
 *                             scatter=ax.scatter([y+0.5 for y in Y], [x+0.5 for x in X], c=vals, cmap=cmap, s=s, alpha=1, zorder=zorderForBoxes)             # <<<<<<<<<<<<<<
 *                         else:
 *                             scatter=ax.scatter([y+0.5 for y in Y], [x+0.5 for x in X], c=vals, cmap=cmap, norm=norm, s=s, alpha=1, zorder=zorderForBoxes)
 */
              __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_scatter); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2101, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_15);
              { /* enter inner scope */
                __pyx_t_8 = PyList_New(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2101, __pyx_L180_error)
                __Pyx_GOTREF(__pyx_t_8);
                if (unlikely(!__pyx_v_Y)) { __Pyx_RaiseUnboundLocalError("Y"); __PYX_ERR(2, 2101, __pyx_L180_error) }
                if (likely(PyList_CheckExact(__pyx_v_Y)) || PyTuple_CheckExact(__pyx_v_Y)) {
                  __pyx_t_10 = __pyx_v_Y; __Pyx_INCREF(__pyx_t_10); __pyx_t_12 = 0;
                  __pyx_t_13 = NULL;
                } else {
                  __pyx_t_12 = -1; __pyx_t_10 = PyObject_GetIter(__pyx_v_Y); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 2101, __pyx_L180_error)
                  __Pyx_GOTREF(__pyx_t_10);
                  __pyx_t_13 = Py_TYPE(__pyx_t_10)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(2, 2101, __pyx_L180_error)
                }
                for (;;) {
                  if (likely(!__pyx_t_13)) {
                    if (likely(PyList_CheckExact(__pyx_t_10))) {
                      if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_10)) break;
                      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                      __pyx_t_5 = PyList_GET_ITEM(__pyx_t_10, __pyx_t_12); __Pyx_INCREF(__pyx_t_5); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(2, 2101, __pyx_L180_error)
                      #else
                      __pyx_t_5 = PySequence_ITEM(__pyx_t_10, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2101, __pyx_L180_error)
                      __Pyx_GOTREF(__pyx_t_5);
                      #endif
                    } else {
                      if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_10)) break;
                      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                      __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_10, __pyx_t_12); __Pyx_INCREF(__pyx_t_5); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(2, 2101, __pyx_L180_error)
                      #else
                      __pyx_t_5 = PySequence_ITEM(__pyx_t_10, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2101, __pyx_L180_error)
                      __Pyx_GOTREF(__pyx_t_5);
                      #endif
                    }
                  } else {
                    __pyx_t_5 = __pyx_t_13(__pyx_t_10);
                    if (unlikely(!__pyx_t_5)) {
                      PyObject* exc_type = PyErr_Occurred();
                      if (exc_type) {
                        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                        else __PYX_ERR(2, 2101, __pyx_L180_error)
                      }
                      break;
                    }
                    __Pyx_GOTREF(__pyx_t_5);
                  }
                  __Pyx_XDECREF_SET(__pyx_9genexpr27__pyx_v_y, __pyx_t_5);
                  __pyx_t_5 = 0;
                  __pyx_t_5 = __Pyx_PyFloat_AddObjC(__pyx_9genexpr27__pyx_v_y, __pyx_float_0_5, 0.5, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2101, __pyx_L180_error)
                  __Pyx_GOTREF(__pyx_t_5);
                  if (unlikely(__Pyx_ListComp_Append(__pyx_t_8, (PyObject*)__pyx_t_5))) __PYX_ERR(2, 2101, __pyx_L180_error)
                  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                }
                __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                __Pyx_XDECREF(__pyx_9genexpr27__pyx_v_y); __pyx_9genexpr27__pyx_v_y = 0;
                goto __pyx_L183_exit_scope;
                __pyx_L180_error:;
                __Pyx_XDECREF(__pyx_9genexpr27__pyx_v_y); __pyx_9genexpr27__pyx_v_y = 0;
                goto __pyx_L3_error;
                __pyx_L183_exit_scope:;
              } /* exit inner scope */
              { /* enter inner scope */
                __pyx_t_10 = PyList_New(0); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 2101, __pyx_L186_error)
                __Pyx_GOTREF(__pyx_t_10);
                if (unlikely(!__pyx_v_X)) { __Pyx_RaiseUnboundLocalError("X"); __PYX_ERR(2, 2101, __pyx_L186_error) }
                if (likely(PyList_CheckExact(__pyx_v_X)) || PyTuple_CheckExact(__pyx_v_X)) {
                  __pyx_t_5 = __pyx_v_X; __Pyx_INCREF(__pyx_t_5); __pyx_t_12 = 0;
                  __pyx_t_13 = NULL;
                } else {
                  __pyx_t_12 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_v_X); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2101, __pyx_L186_error)
                  __Pyx_GOTREF(__pyx_t_5);
                  __pyx_t_13 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(2, 2101, __pyx_L186_error)
                }
                for (;;) {
                  if (likely(!__pyx_t_13)) {
                    if (likely(PyList_CheckExact(__pyx_t_5))) {
                      if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_5)) break;
                      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                      __pyx_t_14 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_12); __Pyx_INCREF(__pyx_t_14); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(2, 2101, __pyx_L186_error)
                      #else
                      __pyx_t_14 = PySequence_ITEM(__pyx_t_5, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 2101, __pyx_L186_error)
                      __Pyx_GOTREF(__pyx_t_14);
                      #endif
                    } else {
                      if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
                      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                      __pyx_t_14 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_12); __Pyx_INCREF(__pyx_t_14); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(2, 2101, __pyx_L186_error)
                      #else
                      __pyx_t_14 = PySequence_ITEM(__pyx_t_5, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 2101, __pyx_L186_error)
                      __Pyx_GOTREF(__pyx_t_14);
                      #endif
                    }
                  } else {
                    __pyx_t_14 = __pyx_t_13(__pyx_t_5);
                    if (unlikely(!__pyx_t_14)) {
                      PyObject* exc_type = PyErr_Occurred();
                      if (exc_type) {
                        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                        else __PYX_ERR(2, 2101, __pyx_L186_error)
                      }
                      break;
                    }
                    __Pyx_GOTREF(__pyx_t_14);
                  }
                  __Pyx_XDECREF_SET(__pyx_9genexpr28__pyx_v_x, __pyx_t_14);
                  __pyx_t_14 = 0;
                  __pyx_t_14 = __Pyx_PyFloat_AddObjC(__pyx_9genexpr28__pyx_v_x, __pyx_float_0_5, 0.5, 0, 0); if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 2101, __pyx_L186_error)
                  __Pyx_GOTREF(__pyx_t_14);
                  if (unlikely(__Pyx_ListComp_Append(__pyx_t_10, (PyObject*)__pyx_t_14))) __PYX_ERR(2, 2101, __pyx_L186_error)
                  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
                }
                __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                __Pyx_XDECREF(__pyx_9genexpr28__pyx_v_x); __pyx_9genexpr28__pyx_v_x = 0;
                goto __pyx_L189_exit_scope;
                __pyx_L186_error:;
                __Pyx_XDECREF(__pyx_9genexpr28__pyx_v_x); __pyx_9genexpr28__pyx_v_x = 0;
                goto __pyx_L3_error;
                __pyx_L189_exit_scope:;
              } /* exit inner scope */
              __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2101, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_5);
              __Pyx_GIVEREF(__pyx_t_8);
              PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_8);
              __Pyx_GIVEREF(__pyx_t_10);
              PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_10);
              __pyx_t_8 = 0;
              __pyx_t_10 = 0;
              __pyx_t_10 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 2101, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_10);
              if (unlikely(!__pyx_v_vals)) { __Pyx_RaiseUnboundLocalError("vals"); __PYX_ERR(2, 2101, __pyx_L3_error) }
              if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_c, __pyx_v_vals) < 0) __PYX_ERR(2, 2101, __pyx_L3_error)
              if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_cmap, __pyx_v_cmap) < 0) __PYX_ERR(2, 2101, __pyx_L3_error)
              if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_s, __pyx_v_s) < 0) __PYX_ERR(2, 2101, __pyx_L3_error)
              if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_alpha, __pyx_int_1) < 0) __PYX_ERR(2, 2101, __pyx_L3_error)
              __pyx_t_8 = __Pyx_PyInt_From_long(__pyx_v_zorderForBoxes); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2101, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_8);
              if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_zorder, __pyx_t_8) < 0) __PYX_ERR(2, 2101, __pyx_L3_error)
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_t_5, __pyx_t_10); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2101, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_8);
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              __pyx_v_scatter = __pyx_t_8;
              __pyx_t_8 = 0;

              /* "src/pygcgopt/decomposition.pxi":2100
 *                         cbar.ax.set_ylabel("SCIP vartypes", rotation=90)
 *                     else:
 *                         if norm == None:             # <<<<<<<<<<<<<<
 *                             scatter=ax.scatter([y+0.5 for y in Y], [x+0.5 for x in X], c=vals, cmap=cmap, s=s, alpha=1, zorder=zorderForBoxes)
 *                         else:
 */
              goto __pyx_L177;
            }

            /* "src/pygcgopt/decomposition.pxi":2103
 *                             scatter=ax.scatter([y+0.5 for y in Y], [x+0.5 for x in X], c=vals, cmap=cmap, s=s, alpha=1, zorder=zorderForBoxes)
 *                         else:
 *                             scatter=ax.scatter([y+0.5 for y in Y], [x+0.5 for x in X], c=vals, cmap=cmap, norm=norm, s=s, alpha=1, zorder=zorderForBoxes)             # <<<<<<<<<<<<<<
 *                         fig.colorbar(scatter)
 * 
 */
            /*else*/ {
              __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_scatter); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2103, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_8);
              { /* enter inner scope */
                __pyx_t_10 = PyList_New(0); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 2103, __pyx_L192_error)
                __Pyx_GOTREF(__pyx_t_10);
                if (unlikely(!__pyx_v_Y)) { __Pyx_RaiseUnboundLocalError("Y"); __PYX_ERR(2, 2103, __pyx_L192_error) }
                if (likely(PyList_CheckExact(__pyx_v_Y)) || PyTuple_CheckExact(__pyx_v_Y)) {
                  __pyx_t_5 = __pyx_v_Y; __Pyx_INCREF(__pyx_t_5); __pyx_t_12 = 0;
                  __pyx_t_13 = NULL;
                } else {
                  __pyx_t_12 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_v_Y); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2103, __pyx_L192_error)
                  __Pyx_GOTREF(__pyx_t_5);
                  __pyx_t_13 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(2, 2103, __pyx_L192_error)
                }
                for (;;) {
                  if (likely(!__pyx_t_13)) {
                    if (likely(PyList_CheckExact(__pyx_t_5))) {
                      if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_5)) break;
                      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                      __pyx_t_15 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_12); __Pyx_INCREF(__pyx_t_15); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(2, 2103, __pyx_L192_error)
                      #else
                      __pyx_t_15 = PySequence_ITEM(__pyx_t_5, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2103, __pyx_L192_error)
                      __Pyx_GOTREF(__pyx_t_15);
                      #endif
                    } else {
                      if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
                      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                      __pyx_t_15 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_12); __Pyx_INCREF(__pyx_t_15); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(2, 2103, __pyx_L192_error)
                      #else
                      __pyx_t_15 = PySequence_ITEM(__pyx_t_5, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2103, __pyx_L192_error)
                      __Pyx_GOTREF(__pyx_t_15);
                      #endif
                    }
                  } else {
                    __pyx_t_15 = __pyx_t_13(__pyx_t_5);
                    if (unlikely(!__pyx_t_15)) {
                      PyObject* exc_type = PyErr_Occurred();
                      if (exc_type) {
                        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                        else __PYX_ERR(2, 2103, __pyx_L192_error)
                      }
                      break;
                    }
                    __Pyx_GOTREF(__pyx_t_15);
                  }
                  __Pyx_XDECREF_SET(__pyx_9genexpr29__pyx_v_y, __pyx_t_15);
                  __pyx_t_15 = 0;
                  __pyx_t_15 = __Pyx_PyFloat_AddObjC(__pyx_9genexpr29__pyx_v_y, __pyx_float_0_5, 0.5, 0, 0); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2103, __pyx_L192_error)
                  __Pyx_GOTREF(__pyx_t_15);
                  if (unlikely(__Pyx_ListComp_Append(__pyx_t_10, (PyObject*)__pyx_t_15))) __PYX_ERR(2, 2103, __pyx_L192_error)
                  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                }
                __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                __Pyx_XDECREF(__pyx_9genexpr29__pyx_v_y); __pyx_9genexpr29__pyx_v_y = 0;
                goto __pyx_L195_exit_scope;
                __pyx_L192_error:;
                __Pyx_XDECREF(__pyx_9genexpr29__pyx_v_y); __pyx_9genexpr29__pyx_v_y = 0;
                goto __pyx_L3_error;
                __pyx_L195_exit_scope:;
              } /* exit inner scope */
              { /* enter inner scope */
                __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2103, __pyx_L198_error)
                __Pyx_GOTREF(__pyx_t_5);
                if (unlikely(!__pyx_v_X)) { __Pyx_RaiseUnboundLocalError("X"); __PYX_ERR(2, 2103, __pyx_L198_error) }
                if (likely(PyList_CheckExact(__pyx_v_X)) || PyTuple_CheckExact(__pyx_v_X)) {
                  __pyx_t_15 = __pyx_v_X; __Pyx_INCREF(__pyx_t_15); __pyx_t_12 = 0;
                  __pyx_t_13 = NULL;
                } else {
                  __pyx_t_12 = -1; __pyx_t_15 = PyObject_GetIter(__pyx_v_X); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2103, __pyx_L198_error)
                  __Pyx_GOTREF(__pyx_t_15);
                  __pyx_t_13 = Py_TYPE(__pyx_t_15)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(2, 2103, __pyx_L198_error)
                }
                for (;;) {
                  if (likely(!__pyx_t_13)) {
                    if (likely(PyList_CheckExact(__pyx_t_15))) {
                      if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_15)) break;
                      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                      __pyx_t_14 = PyList_GET_ITEM(__pyx_t_15, __pyx_t_12); __Pyx_INCREF(__pyx_t_14); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(2, 2103, __pyx_L198_error)
                      #else
                      __pyx_t_14 = PySequence_ITEM(__pyx_t_15, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 2103, __pyx_L198_error)
                      __Pyx_GOTREF(__pyx_t_14);
                      #endif
                    } else {
                      if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_15)) break;
                      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                      __pyx_t_14 = PyTuple_GET_ITEM(__pyx_t_15, __pyx_t_12); __Pyx_INCREF(__pyx_t_14); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(2, 2103, __pyx_L198_error)
                      #else
                      __pyx_t_14 = PySequence_ITEM(__pyx_t_15, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 2103, __pyx_L198_error)
                      __Pyx_GOTREF(__pyx_t_14);
                      #endif
                    }
                  } else {
                    __pyx_t_14 = __pyx_t_13(__pyx_t_15);
                    if (unlikely(!__pyx_t_14)) {
                      PyObject* exc_type = PyErr_Occurred();
                      if (exc_type) {
                        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                        else __PYX_ERR(2, 2103, __pyx_L198_error)
                      }
                      break;
                    }
                    __Pyx_GOTREF(__pyx_t_14);
                  }
                  __Pyx_XDECREF_SET(__pyx_9genexpr30__pyx_v_x, __pyx_t_14);
                  __pyx_t_14 = 0;
                  __pyx_t_14 = __Pyx_PyFloat_AddObjC(__pyx_9genexpr30__pyx_v_x, __pyx_float_0_5, 0.5, 0, 0); if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 2103, __pyx_L198_error)
                  __Pyx_GOTREF(__pyx_t_14);
                  if (unlikely(__Pyx_ListComp_Append(__pyx_t_5, (PyObject*)__pyx_t_14))) __PYX_ERR(2, 2103, __pyx_L198_error)
                  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
                }
                __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                __Pyx_XDECREF(__pyx_9genexpr30__pyx_v_x); __pyx_9genexpr30__pyx_v_x = 0;
                goto __pyx_L201_exit_scope;
                __pyx_L198_error:;
                __Pyx_XDECREF(__pyx_9genexpr30__pyx_v_x); __pyx_9genexpr30__pyx_v_x = 0;
                goto __pyx_L3_error;
                __pyx_L201_exit_scope:;
              } /* exit inner scope */
              __pyx_t_15 = PyTuple_New(2); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2103, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_15);
              __Pyx_GIVEREF(__pyx_t_10);
              PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_10);
              __Pyx_GIVEREF(__pyx_t_5);
              PyTuple_SET_ITEM(__pyx_t_15, 1, __pyx_t_5);
              __pyx_t_10 = 0;
              __pyx_t_5 = 0;
              __pyx_t_5 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2103, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_5);
              if (unlikely(!__pyx_v_vals)) { __Pyx_RaiseUnboundLocalError("vals"); __PYX_ERR(2, 2103, __pyx_L3_error) }
              if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_c, __pyx_v_vals) < 0) __PYX_ERR(2, 2103, __pyx_L3_error)
              if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_cmap, __pyx_v_cmap) < 0) __PYX_ERR(2, 2103, __pyx_L3_error)
              if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_norm, __pyx_v_norm) < 0) __PYX_ERR(2, 2103, __pyx_L3_error)
              if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_s, __pyx_v_s) < 0) __PYX_ERR(2, 2103, __pyx_L3_error)
              if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_alpha, __pyx_int_1) < 0) __PYX_ERR(2, 2103, __pyx_L3_error)
              __pyx_t_10 = __Pyx_PyInt_From_long(__pyx_v_zorderForBoxes); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 2103, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_10);
              if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_zorder, __pyx_t_10) < 0) __PYX_ERR(2, 2103, __pyx_L3_error)
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_15, __pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 2103, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_10);
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
              __pyx_v_scatter = __pyx_t_10;
              __pyx_t_10 = 0;
            }
            __pyx_L177:;

            /* "src/pygcgopt/decomposition.pxi":2104
 *                         else:
 *                             scatter=ax.scatter([y+0.5 for y in Y], [x+0.5 for x in X], c=vals, cmap=cmap, norm=norm, s=s, alpha=1, zorder=zorderForBoxes)
 *                         fig.colorbar(scatter)             # <<<<<<<<<<<<<<
 * 
 *             #adjust x-axis and y-axis
 */
            __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_fig, __pyx_n_s_colorbar); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2104, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_15 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
              __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_5);
              if (likely(__pyx_t_15)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
                __Pyx_INCREF(__pyx_t_15);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_5, function);
              }
            }
            __pyx_t_10 = (__pyx_t_15) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_15, __pyx_v_scatter) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_scatter);
            __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
            if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 2104, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          }
          __pyx_L149:;

          /* "src/pygcgopt/decomposition.pxi":2085
 *                             scatter=ax.scatter([y+0.5 for y in Y], [x+0.5 for x in X], c=vals, cmap=cmap, norm=norm, s=s, alpha=1, zorder=zorderForBoxes)
 *                         fig.colorbar(scatter)
 *                 elif matrixType == "scipvartype":             # <<<<<<<<<<<<<<
 *                     if cmap == None:
 *                         uniqueMatrixSCIPVarTypeList = list(self.uniqueMatrixSCIPVarType(obj=obj, bcoef=bcoef))
 */
        }
        __pyx_L32:;

        /* "src/pygcgopt/decomposition.pxi":2049
 * 
 *             #plot the coefficients
 *             if dots == True:             # <<<<<<<<<<<<<<
 *                 if matrixType == "nonzero":
 *                     if cmap == None:
 */
      }

      /* "src/pygcgopt/decomposition.pxi":2107
 * 
 *             #adjust x-axis and y-axis
 *             ax.xaxis.get_major_locator().set_params(integer=True)             # <<<<<<<<<<<<<<
 *             if bcoef == True:
 *                 ax.set_xlim(xmin=-1, xmax=self.getNVars()+1)
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_xaxis); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2107, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_get_major_locator); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2107, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_15);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_15, function);
        }
      }
      __pyx_t_10 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_15);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 2107, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_set_params); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2107, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 2107, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_10);
      if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_integer, Py_True) < 0) __PYX_ERR(2, 2107, __pyx_L3_error)
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_empty_tuple, __pyx_t_10); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2107, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "src/pygcgopt/decomposition.pxi":2108
 *             #adjust x-axis and y-axis
 *             ax.xaxis.get_major_locator().set_params(integer=True)
 *             if bcoef == True:             # <<<<<<<<<<<<<<
 *                 ax.set_xlim(xmin=-1, xmax=self.getNVars()+1)
 *             else:
 */
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_bcoef, Py_True, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2108, __pyx_L3_error)
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 2108, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_6) {

        /* "src/pygcgopt/decomposition.pxi":2109
 *             ax.xaxis.get_major_locator().set_params(integer=True)
 *             if bcoef == True:
 *                 ax.set_xlim(xmin=-1, xmax=self.getNVars()+1)             # <<<<<<<<<<<<<<
 *             else:
 *                 ax.set_xlim(xmin=0, xmax=self.getNVars())
 */
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_set_xlim); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2109, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_10 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 2109, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_10);
        if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_xmin, __pyx_int_neg_1) < 0) __PYX_ERR(2, 2109, __pyx_L3_error)
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNVars); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2109, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_14 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_14)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_14);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
          }
        }
        __pyx_t_15 = (__pyx_t_14) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_14) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2109, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyInt_AddObjC(__pyx_t_15, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2109, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_xmax, __pyx_t_8) < 0) __PYX_ERR(2, 2109, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_empty_tuple, __pyx_t_10); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2109, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "src/pygcgopt/decomposition.pxi":2108
 *             #adjust x-axis and y-axis
 *             ax.xaxis.get_major_locator().set_params(integer=True)
 *             if bcoef == True:             # <<<<<<<<<<<<<<
 *                 ax.set_xlim(xmin=-1, xmax=self.getNVars()+1)
 *             else:
 */
        goto __pyx_L202;
      }

      /* "src/pygcgopt/decomposition.pxi":2111
 *                 ax.set_xlim(xmin=-1, xmax=self.getNVars()+1)
 *             else:
 *                 ax.set_xlim(xmin=0, xmax=self.getNVars())             # <<<<<<<<<<<<<<
 * 
 *             ax.yaxis.get_major_locator().set_params(integer=True)
 */
      /*else*/ {
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_set_xlim); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2111, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_10 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 2111, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_10);
        if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_xmin, __pyx_int_0) < 0) __PYX_ERR(2, 2111, __pyx_L3_error)
        __pyx_t_15 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNVars); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2111, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_15);
        __pyx_t_14 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
          __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_15);
          if (likely(__pyx_t_14)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
            __Pyx_INCREF(__pyx_t_14);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_15, function);
          }
        }
        __pyx_t_5 = (__pyx_t_14) ? __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_t_14) : __Pyx_PyObject_CallNoArg(__pyx_t_15);
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2111, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_xmax, __pyx_t_5) < 0) __PYX_ERR(2, 2111, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_empty_tuple, __pyx_t_10); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2111, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __pyx_L202:;

      /* "src/pygcgopt/decomposition.pxi":2113
 *                 ax.set_xlim(xmin=0, xmax=self.getNVars())
 * 
 *             ax.yaxis.get_major_locator().set_params(integer=True)             # <<<<<<<<<<<<<<
 *             if obj == True:
 *                 ax.set_ylim(bottom=-1, top=self.getNConss())
 */
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_yaxis); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 2113, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_get_major_locator); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2113, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      __pyx_t_5 = (__pyx_t_10) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_10) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2113, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_set_params); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2113, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2113, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_integer, Py_True) < 0) __PYX_ERR(2, 2113, __pyx_L3_error)
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_empty_tuple, __pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 2113, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "src/pygcgopt/decomposition.pxi":2114
 * 
 *             ax.yaxis.get_major_locator().set_params(integer=True)
 *             if obj == True:             # <<<<<<<<<<<<<<
 *                 ax.set_ylim(bottom=-1, top=self.getNConss())
 *             else:
 */
      __pyx_t_10 = PyObject_RichCompare(__pyx_v_obj, Py_True, Py_EQ); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 2114, __pyx_L3_error)
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 2114, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (__pyx_t_6) {

        /* "src/pygcgopt/decomposition.pxi":2115
 *             ax.yaxis.get_major_locator().set_params(integer=True)
 *             if obj == True:
 *                 ax.set_ylim(bottom=-1, top=self.getNConss())             # <<<<<<<<<<<<<<
 *             else:
 *                 ax.set_ylim(bottom=0, top=self.getNConss())
 */
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_set_ylim); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 2115, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_5 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2115, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_5);
        if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_bottom, __pyx_int_neg_1) < 0) __PYX_ERR(2, 2115, __pyx_L3_error)
        __pyx_t_15 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNConss); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2115, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_15);
        __pyx_t_14 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
          __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_15);
          if (likely(__pyx_t_14)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
            __Pyx_INCREF(__pyx_t_14);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_15, function);
          }
        }
        __pyx_t_8 = (__pyx_t_14) ? __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_t_14) : __Pyx_PyObject_CallNoArg(__pyx_t_15);
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2115, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_top, __pyx_t_8) < 0) __PYX_ERR(2, 2115, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_empty_tuple, __pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2115, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "src/pygcgopt/decomposition.pxi":2114
 * 
 *             ax.yaxis.get_major_locator().set_params(integer=True)
 *             if obj == True:             # <<<<<<<<<<<<<<
 *                 ax.set_ylim(bottom=-1, top=self.getNConss())
 *             else:
 */
        goto __pyx_L203;
      }

      /* "src/pygcgopt/decomposition.pxi":2117
 *                 ax.set_ylim(bottom=-1, top=self.getNConss())
 *             else:
 *                 ax.set_ylim(bottom=0, top=self.getNConss())             # <<<<<<<<<<<<<<
 * 
 *             ax.xaxis.tick_top()
 */
      /*else*/ {
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_set_ylim); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2117, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_5 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2117, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_5);
        if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_bottom, __pyx_int_0) < 0) __PYX_ERR(2, 2117, __pyx_L3_error)
        __pyx_t_15 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNConss); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2117, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_15);
        __pyx_t_14 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
          __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_15);
          if (likely(__pyx_t_14)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
            __Pyx_INCREF(__pyx_t_14);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_15, function);
          }
        }
        __pyx_t_10 = (__pyx_t_14) ? __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_t_14) : __Pyx_PyObject_CallNoArg(__pyx_t_15);
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 2117, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_top, __pyx_t_10) < 0) __PYX_ERR(2, 2117, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_empty_tuple, __pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 2117, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      __pyx_L203:;

      /* "src/pygcgopt/decomposition.pxi":2119
 *                 ax.set_ylim(bottom=0, top=self.getNConss())
 * 
 *             ax.xaxis.tick_top()             # <<<<<<<<<<<<<<
 *             ax.invert_yaxis()
 * 
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_xaxis); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2119, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_tick_top); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2119, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      __pyx_t_10 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 2119, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "src/pygcgopt/decomposition.pxi":2120
 * 
 *             ax.xaxis.tick_top()
 *             ax.invert_yaxis()             # <<<<<<<<<<<<<<
 * 
 *             if fname != None:
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_ax, __pyx_n_s_invert_yaxis); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2120, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      __pyx_t_10 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 2120, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "src/pygcgopt/decomposition.pxi":2122
 *             ax.invert_yaxis()
 * 
 *             if fname != None:             # <<<<<<<<<<<<<<
 *                 plt.savefig(fname=fname, dpi=dpi)
 *                 plt.close()
 */
      __pyx_t_10 = PyObject_RichCompare(__pyx_v_fname, Py_None, Py_NE); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 2122, __pyx_L3_error)
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 2122, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (__pyx_t_6) {

        /* "src/pygcgopt/decomposition.pxi":2123
 * 
 *             if fname != None:
 *                 plt.savefig(fname=fname, dpi=dpi)             # <<<<<<<<<<<<<<
 *                 plt.close()
 *             else:
 */
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_plt, __pyx_n_s_savefig); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 2123, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_8 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2123, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_fname, __pyx_v_fname) < 0) __PYX_ERR(2, 2123, __pyx_L3_error)
        if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_dpi, __pyx_v_dpi) < 0) __PYX_ERR(2, 2123, __pyx_L3_error)
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_empty_tuple, __pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2123, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "src/pygcgopt/decomposition.pxi":2124
 *             if fname != None:
 *                 plt.savefig(fname=fname, dpi=dpi)
 *                 plt.close()             # <<<<<<<<<<<<<<
 *             else:
 *                 plt.show()
 */
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_plt, __pyx_n_s_close); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2124, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_10 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
          }
        }
        __pyx_t_5 = (__pyx_t_10) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_10) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2124, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "src/pygcgopt/decomposition.pxi":2122
 *             ax.invert_yaxis()
 * 
 *             if fname != None:             # <<<<<<<<<<<<<<
 *                 plt.savefig(fname=fname, dpi=dpi)
 *                 plt.close()
 */
        goto __pyx_L204;
      }

      /* "src/pygcgopt/decomposition.pxi":2126
 *                 plt.close()
 *             else:
 *                 plt.show()             # <<<<<<<<<<<<<<
 * 
 *         except ImportError:
 */
      /*else*/ {
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_plt, __pyx_n_s_show); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2126, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_10 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
          }
        }
        __pyx_t_5 = (__pyx_t_10) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_10) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2126, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __pyx_L204:;

      /* "src/pygcgopt/decomposition.pxi":1988
 * 
 *     def visualize(PartialDecomposition self, fname=None, figsize=(12, 8), dpi=None, title=None, matrixType="nonzero", obj=False, bcoef=False, dots=True, boxes=True, s=1, alpha=1, cmap=None, norm=None, linkingcolor="#FFB72D", mastercolor="#1340C7", blockcolor="#718CDB", stairlinkingcolor="#886100", opencolor="#FFD88F", linecolor="#000000", linewidth=0.8):
 *         try:             # <<<<<<<<<<<<<<
 *             import matplotlib.pyplot as plt
 *             import matplotlib.patches as patches
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "src/pygcgopt/decomposition.pxi":2128
 *                 plt.show()
 * 
 *         except ImportError:             # <<<<<<<<<<<<<<
 *             print("matplotlib is needed")
 * 
 */
    __pyx_t_19 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ImportError);
    if (__pyx_t_19) {
      __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.visualize", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_8, &__pyx_t_10) < 0) __PYX_ERR(2, 2128, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GOTREF(__pyx_t_10);

      /* "src/pygcgopt/decomposition.pxi":2129
 * 
 *         except ImportError:
 *             print("matplotlib is needed")             # <<<<<<<<<<<<<<
 * 
 *     def _repr_svg_(self):
 */
      __pyx_t_15 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2129, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "src/pygcgopt/decomposition.pxi":1988
 * 
 *     def visualize(PartialDecomposition self, fname=None, figsize=(12, 8), dpi=None, title=None, matrixType="nonzero", obj=False, bcoef=False, dots=True, boxes=True, s=1, alpha=1, cmap=None, norm=None, linkingcolor="#FFB72D", mastercolor="#1340C7", blockcolor="#718CDB", stairlinkingcolor="#886100", opencolor="#FFD88F", linecolor="#000000", linewidth=0.8):
 *         try:             # <<<<<<<<<<<<<<
 *             import matplotlib.pyplot as plt
 *             import matplotlib.patches as patches
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L8_try_end:;
  }

  /* "src/pygcgopt/decomposition.pxi":1987
 *             return "NONE"
 * 
 *     def visualize(PartialDecomposition self, fname=None, figsize=(12, 8), dpi=None, title=None, matrixType="nonzero", obj=False, bcoef=False, dots=True, boxes=True, s=1, alpha=1, cmap=None, norm=None, linkingcolor="#FFB72D", mastercolor="#1340C7", blockcolor="#718CDB", stairlinkingcolor="#886100", opencolor="#FFD88F", linecolor="#000000", linewidth=0.8):             # <<<<<<<<<<<<<<
 *         try:
 *             import matplotlib.pyplot as plt
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.visualize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_plt);
  __Pyx_XDECREF(__pyx_v_patches);
  __Pyx_XDECREF(__pyx_v_colors);
  __Pyx_XDECREF(__pyx_v_X);
  __Pyx_XDECREF(__pyx_v_Y);
  __Pyx_XDECREF(__pyx_v_vals);
  __Pyx_XDECREF(__pyx_v_fig);
  __Pyx_XDECREF(__pyx_v_ax);
  __Pyx_XDECREF(__pyx_v_rowboxcounter);
  __Pyx_XDECREF(__pyx_v_colboxcounter);
  __Pyx_XDECREF(__pyx_v_lvars);
  __Pyx_XDECREF(__pyx_v_master);
  __Pyx_XDECREF(__pyx_v_b);
  __Pyx_XDECREF(__pyx_v_block);
  __Pyx_XDECREF(__pyx_v_stairlinking);
  __Pyx_XDECREF(__pyx_v_openrec);
  __Pyx_XDECREF(__pyx_v_scatter);
  __Pyx_XDECREF(__pyx_v_cbar);
  __Pyx_XDECREF(__pyx_v_uniqueMatrixMIPLIBConsTypeList);
  __Pyx_XDECREF(__pyx_v_selfcolors);
  __Pyx_XDECREF(__pyx_v_colors_used);
  __Pyx_XDECREF(__pyx_v_cmap_self);
  __Pyx_XDECREF(__pyx_v_boundaries);
  __Pyx_XDECREF(__pyx_v_uniqueMatrixSCIPVarTypeList);
  __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_y);
  __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_x);
  __Pyx_XDECREF(__pyx_8genexpr5__pyx_v_y);
  __Pyx_XDECREF(__pyx_8genexpr6__pyx_v_x);
  __Pyx_XDECREF(__pyx_8genexpr7__pyx_v_y);
  __Pyx_XDECREF(__pyx_8genexpr8__pyx_v_x);
  __Pyx_XDECREF(__pyx_8genexpr9__pyx_v_y);
  __Pyx_XDECREF(__pyx_9genexpr10__pyx_v_x);
  __Pyx_XDECREF(__pyx_9genexpr11__pyx_v_y);
  __Pyx_XDECREF(__pyx_9genexpr12__pyx_v_x);
  __Pyx_XDECREF(__pyx_9genexpr13__pyx_v_i);
  __Pyx_XDECREF(__pyx_9genexpr14__pyx_v_y);
  __Pyx_XDECREF(__pyx_9genexpr15__pyx_v_x);
  __Pyx_XDECREF(__pyx_9genexpr17__pyx_v_i);
  __Pyx_XDECREF(__pyx_9genexpr18__pyx_v_y);
  __Pyx_XDECREF(__pyx_9genexpr19__pyx_v_x);
  __Pyx_XDECREF(__pyx_9genexpr20__pyx_v_y);
  __Pyx_XDECREF(__pyx_9genexpr21__pyx_v_x);
  __Pyx_XDECREF(__pyx_9genexpr22__pyx_v_i);
  __Pyx_XDECREF(__pyx_9genexpr23__pyx_v_y);
  __Pyx_XDECREF(__pyx_9genexpr24__pyx_v_x);
  __Pyx_XDECREF(__pyx_9genexpr26__pyx_v_i);
  __Pyx_XDECREF(__pyx_9genexpr27__pyx_v_y);
  __Pyx_XDECREF(__pyx_9genexpr28__pyx_v_x);
  __Pyx_XDECREF(__pyx_9genexpr29__pyx_v_y);
  __Pyx_XDECREF(__pyx_9genexpr30__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_norm);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":2131
 *             print("matplotlib is needed")
 * 
 *     def _repr_svg_(self):             # <<<<<<<<<<<<<<
 *         return self.__generate_visualization("svg")
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_333_repr_svg_(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_332_repr_svg_[] = "PartialDecomposition._repr_svg_(self)";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_333_repr_svg_(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_repr_svg_ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_332_repr_svg_(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_332_repr_svg_(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_8pygcgopt_3gcg_20PartialDecomposition___generate_visualization __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_repr_svg_", 0);

  /* "src/pygcgopt/decomposition.pxi":2132
 * 
 *     def _repr_svg_(self):
 *         return self.__generate_visualization("svg")             # <<<<<<<<<<<<<<
 * 
 *     def _repr_png_(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.format = __pyx_n_u_svg;
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self->__pyx_vtab)->__pyx___generate_visualization(__pyx_v_self, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":2131
 *             print("matplotlib is needed")
 * 
 *     def _repr_svg_(self):             # <<<<<<<<<<<<<<
 *         return self.__generate_visualization("svg")
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition._repr_svg_", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":2134
 *         return self.__generate_visualization("svg")
 * 
 *     def _repr_png_(self):             # <<<<<<<<<<<<<<
 *         return self.__generate_visualization("png")
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_335_repr_png_(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_334_repr_png_[] = "PartialDecomposition._repr_png_(self)";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_335_repr_png_(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_repr_png_ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_334_repr_png_(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_334_repr_png_(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_8pygcgopt_3gcg_20PartialDecomposition___generate_visualization __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_repr_png_", 0);

  /* "src/pygcgopt/decomposition.pxi":2135
 * 
 *     def _repr_png_(self):
 *         return self.__generate_visualization("png")             # <<<<<<<<<<<<<<
 * 
 *     cdef __generate_visualization(self, format="svg"):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.format = __pyx_n_u_png;
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self->__pyx_vtab)->__pyx___generate_visualization(__pyx_v_self, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":2134
 *         return self.__generate_visualization("svg")
 * 
 *     def _repr_png_(self):             # <<<<<<<<<<<<<<
 *         return self.__generate_visualization("png")
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition._repr_png_", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":2137
 *         return self.__generate_visualization("png")
 * 
 *     cdef __generate_visualization(self, format="svg"):             # <<<<<<<<<<<<<<
 *         format = format.lower()
 *         if format not in ["svg", "png"]:
 */

static PyObject *__pyx_f_8pygcgopt_3gcg_20PartialDecomposition___generate_visualization(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, struct __pyx_opt_args_8pygcgopt_3gcg_20PartialDecomposition___generate_visualization *__pyx_optional_args) {
  PyObject *__pyx_v_format = ((PyObject *)__pyx_n_u_svg);
  PyObject *__pyx_v_td = NULL;
  PyObject *__pyx_v_temp_path = NULL;
  PyObject *__pyx_v_gp_filename = NULL;
  PyObject *__pyx_v_outfile = NULL;
  PyObject *__pyx_v_c_gp_filename = NULL;
  PyObject *__pyx_v_c_outfile = NULL;
  GP_OUTPUT_FORMAT __pyx_v_c_output_format;
  PyObject *__pyx_v_data = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_UCS4 __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  char *__pyx_t_13;
  char *__pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__generate_visualization", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_format = __pyx_optional_args->format;
    }
  }
  __Pyx_INCREF(__pyx_v_format);

  /* "src/pygcgopt/decomposition.pxi":2138
 * 
 *     cdef __generate_visualization(self, format="svg"):
 *         format = format.lower()             # <<<<<<<<<<<<<<
 *         if format not in ["svg", "png"]:
 *             raise ValueError(f"Format {format} is not supported. Only \"svg\" and \"png\" are supported.")
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_format, __pyx_n_s_lower); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 2138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_format, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/pygcgopt/decomposition.pxi":2139
 *     cdef __generate_visualization(self, format="svg"):
 *         format = format.lower()
 *         if format not in ["svg", "png"]:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Format {format} is not supported. Only \"svg\" and \"png\" are supported.")
 * 
 */
  __Pyx_INCREF(__pyx_v_format);
  __pyx_t_1 = __pyx_v_format;
  __pyx_t_5 = (__Pyx_PyUnicode_Equals(__pyx_t_1, __pyx_n_u_svg, Py_NE)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(2, 2139, __pyx_L1_error)
  if (__pyx_t_5) {
  } else {
    __pyx_t_4 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = (__Pyx_PyUnicode_Equals(__pyx_t_1, __pyx_n_u_png, Py_NE)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(2, 2139, __pyx_L1_error)
  __pyx_t_4 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (unlikely(__pyx_t_5)) {

    /* "src/pygcgopt/decomposition.pxi":2140
 *         format = format.lower()
 *         if format not in ["svg", "png"]:
 *             raise ValueError(f"Format {format} is not supported. Only \"svg\" and \"png\" are supported.")             # <<<<<<<<<<<<<<
 * 
 *         if format not in self._visualizations:
 */
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = 0;
    __pyx_t_7 = 127;
    __Pyx_INCREF(__pyx_kp_u_Format);
    __pyx_t_6 += 7;
    __Pyx_GIVEREF(__pyx_kp_u_Format);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Format);
    __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_v_format, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 2140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_7;
    __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
    __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_kp_u_is_not_supported_Only_svg_and_p);
    __pyx_t_6 += 54;
    __Pyx_GIVEREF(__pyx_kp_u_is_not_supported_Only_svg_and_p);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_is_not_supported_Only_svg_and_p);
    __pyx_t_2 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 2140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(2, 2140, __pyx_L1_error)

    /* "src/pygcgopt/decomposition.pxi":2139
 *     cdef __generate_visualization(self, format="svg"):
 *         format = format.lower()
 *         if format not in ["svg", "png"]:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Format {format} is not supported. Only \"svg\" and \"png\" are supported.")
 * 
 */
  }

  /* "src/pygcgopt/decomposition.pxi":2142
 *             raise ValueError(f"Format {format} is not supported. Only \"svg\" and \"png\" are supported.")
 * 
 *         if format not in self._visualizations:             # <<<<<<<<<<<<<<
 *             with tempfile.TemporaryDirectory() as td:
 *                 temp_path = Path(td)
 */
  if (unlikely(__pyx_v_self->_visualizations == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(2, 2142, __pyx_L1_error)
  }
  __pyx_t_5 = (__Pyx_PyDict_ContainsTF(__pyx_v_format, __pyx_v_self->_visualizations, Py_NE)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(2, 2142, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_5 != 0);
  if (__pyx_t_4) {

    /* "src/pygcgopt/decomposition.pxi":2143
 * 
 *         if format not in self._visualizations:
 *             with tempfile.TemporaryDirectory() as td:             # <<<<<<<<<<<<<<
 *                 temp_path = Path(td)
 * 
 */
    /*with:*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_tempfile); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 2143, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_TemporaryDirectory); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 2143, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2143, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_8 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_n_s_exit); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 2143, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_2 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_n_s_enter); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 2143, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_9 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      __pyx_t_3 = (__pyx_t_9) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_9) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 2143, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __pyx_t_3;
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      /*try:*/ {
        {
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __Pyx_ExceptionSave(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
          __Pyx_XGOTREF(__pyx_t_10);
          __Pyx_XGOTREF(__pyx_t_11);
          __Pyx_XGOTREF(__pyx_t_12);
          /*try:*/ {
            __pyx_v_td = __pyx_t_2;
            __pyx_t_2 = 0;

            /* "src/pygcgopt/decomposition.pxi":2144
 *         if format not in self._visualizations:
 *             with tempfile.TemporaryDirectory() as td:
 *                 temp_path = Path(td)             # <<<<<<<<<<<<<<
 * 
 *                 gp_filename = temp_path.joinpath("vis.gp")
 */
            __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Path); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2144, __pyx_L11_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_3 = NULL;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
              __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
              if (likely(__pyx_t_3)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                __Pyx_INCREF(__pyx_t_3);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_1, function);
              }
            }
            __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_3, __pyx_v_td) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_td);
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 2144, __pyx_L11_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_v_temp_path = __pyx_t_2;
            __pyx_t_2 = 0;

            /* "src/pygcgopt/decomposition.pxi":2146
 *                 temp_path = Path(td)
 * 
 *                 gp_filename = temp_path.joinpath("vis.gp")             # <<<<<<<<<<<<<<
 *                 outfile = temp_path.joinpath("vis").with_suffix(f".{format}")
 * 
 */
            __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_temp_path, __pyx_n_s_joinpath); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2146, __pyx_L11_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_3 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
              __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
              if (likely(__pyx_t_3)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                __Pyx_INCREF(__pyx_t_3);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_1, function);
              }
            }
            __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_3, __pyx_kp_u_vis_gp) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_kp_u_vis_gp);
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 2146, __pyx_L11_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_v_gp_filename = __pyx_t_2;
            __pyx_t_2 = 0;

            /* "src/pygcgopt/decomposition.pxi":2147
 * 
 *                 gp_filename = temp_path.joinpath("vis.gp")
 *                 outfile = temp_path.joinpath("vis").with_suffix(f".{format}")             # <<<<<<<<<<<<<<
 * 
 *                 c_gp_filename = str_conversion(str(gp_filename))
 */
            __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_temp_path, __pyx_n_s_joinpath); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 2147, __pyx_L11_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_9 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
              __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
              if (likely(__pyx_t_9)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                __Pyx_INCREF(__pyx_t_9);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_3, function);
              }
            }
            __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_9, __pyx_n_u_vis) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_n_u_vis);
            __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
            if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2147, __pyx_L11_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_with_suffix); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 2147, __pyx_L11_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_v_format, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2147, __pyx_L11_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_9 = __Pyx_PyUnicode_Concat(__pyx_kp_u__18, __pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 2147, __pyx_L11_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_1 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
              __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
              if (likely(__pyx_t_1)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                __Pyx_INCREF(__pyx_t_1);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_3, function);
              }
            }
            __pyx_t_2 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_1, __pyx_t_9) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_9);
            __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 2147, __pyx_L11_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_v_outfile = __pyx_t_2;
            __pyx_t_2 = 0;

            /* "src/pygcgopt/decomposition.pxi":2149
 *                 outfile = temp_path.joinpath("vis").with_suffix(f".{format}")
 * 
 *                 c_gp_filename = str_conversion(str(gp_filename))             # <<<<<<<<<<<<<<
 *                 c_outfile = str_conversion(str(outfile))
 * 
 */
            __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_str_conversion); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 2149, __pyx_L11_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_9 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_v_gp_filename); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 2149, __pyx_L11_error)
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_1 = NULL;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
              __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
              if (likely(__pyx_t_1)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                __Pyx_INCREF(__pyx_t_1);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_3, function);
              }
            }
            __pyx_t_2 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_1, __pyx_t_9) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_9);
            __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 2149, __pyx_L11_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_v_c_gp_filename = __pyx_t_2;
            __pyx_t_2 = 0;

            /* "src/pygcgopt/decomposition.pxi":2150
 * 
 *                 c_gp_filename = str_conversion(str(gp_filename))
 *                 c_outfile = str_conversion(str(outfile))             # <<<<<<<<<<<<<<
 * 
 *                 if format == "svg":
 */
            __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_str_conversion); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 2150, __pyx_L11_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_9 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_v_outfile); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 2150, __pyx_L11_error)
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_1 = NULL;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
              __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
              if (likely(__pyx_t_1)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                __Pyx_INCREF(__pyx_t_1);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_3, function);
              }
            }
            __pyx_t_2 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_1, __pyx_t_9) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_9);
            __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 2150, __pyx_L11_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_v_c_outfile = __pyx_t_2;
            __pyx_t_2 = 0;

            /* "src/pygcgopt/decomposition.pxi":2152
 *                 c_outfile = str_conversion(str(outfile))
 * 
 *                 if format == "svg":             # <<<<<<<<<<<<<<
 *                     c_output_format = GP_OUTPUT_FORMAT_SVG
 *                 elif format == "png":
 */
            __pyx_t_4 = (__Pyx_PyUnicode_Equals(__pyx_v_format, __pyx_n_u_svg, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(2, 2152, __pyx_L11_error)
            if (__pyx_t_4) {

              /* "src/pygcgopt/decomposition.pxi":2153
 * 
 *                 if format == "svg":
 *                     c_output_format = GP_OUTPUT_FORMAT_SVG             # <<<<<<<<<<<<<<
 *                 elif format == "png":
 *                     c_output_format = GP_OUTPUT_FORMAT_PNG
 */
              __pyx_v_c_output_format = GP_OUTPUT_FORMAT_SVG;

              /* "src/pygcgopt/decomposition.pxi":2152
 *                 c_outfile = str_conversion(str(outfile))
 * 
 *                 if format == "svg":             # <<<<<<<<<<<<<<
 *                     c_output_format = GP_OUTPUT_FORMAT_SVG
 *                 elif format == "png":
 */
              goto __pyx_L17;
            }

            /* "src/pygcgopt/decomposition.pxi":2154
 *                 if format == "svg":
 *                     c_output_format = GP_OUTPUT_FORMAT_SVG
 *                 elif format == "png":             # <<<<<<<<<<<<<<
 *                     c_output_format = GP_OUTPUT_FORMAT_PNG
 * 
 */
            __pyx_t_4 = (__Pyx_PyUnicode_Equals(__pyx_v_format, __pyx_n_u_png, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(2, 2154, __pyx_L11_error)
            if (__pyx_t_4) {

              /* "src/pygcgopt/decomposition.pxi":2155
 *                     c_output_format = GP_OUTPUT_FORMAT_SVG
 *                 elif format == "png":
 *                     c_output_format = GP_OUTPUT_FORMAT_PNG             # <<<<<<<<<<<<<<
 * 
 *                 self.thisptr.generateVisualization(c_gp_filename, c_outfile, c_output_format)
 */
              __pyx_v_c_output_format = GP_OUTPUT_FORMAT_PNG;

              /* "src/pygcgopt/decomposition.pxi":2154
 *                 if format == "svg":
 *                     c_output_format = GP_OUTPUT_FORMAT_SVG
 *                 elif format == "png":             # <<<<<<<<<<<<<<
 *                     c_output_format = GP_OUTPUT_FORMAT_PNG
 * 
 */
            }
            __pyx_L17:;

            /* "src/pygcgopt/decomposition.pxi":2157
 *                     c_output_format = GP_OUTPUT_FORMAT_PNG
 * 
 *                 self.thisptr.generateVisualization(c_gp_filename, c_outfile, c_output_format)             # <<<<<<<<<<<<<<
 * 
 *                 if format == "svg":
 */
            __pyx_t_13 = __Pyx_PyObject_AsWritableString(__pyx_v_c_gp_filename); if (unlikely((!__pyx_t_13) && PyErr_Occurred())) __PYX_ERR(2, 2157, __pyx_L11_error)
            __pyx_t_14 = __Pyx_PyObject_AsWritableString(__pyx_v_c_outfile); if (unlikely((!__pyx_t_14) && PyErr_Occurred())) __PYX_ERR(2, 2157, __pyx_L11_error)
            try {
              __pyx_v_self->thisptr->generateVisualization(__pyx_t_13, __pyx_t_14, __pyx_v_c_output_format);
            } catch(...) {
              __Pyx_CppExn2PyErr();
              __PYX_ERR(2, 2157, __pyx_L11_error)
            }

            /* "src/pygcgopt/decomposition.pxi":2159
 *                 self.thisptr.generateVisualization(c_gp_filename, c_outfile, c_output_format)
 * 
 *                 if format == "svg":             # <<<<<<<<<<<<<<
 *                     data = outfile.read_text()
 *                 elif format == "png":
 */
            __pyx_t_4 = (__Pyx_PyUnicode_Equals(__pyx_v_format, __pyx_n_u_svg, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(2, 2159, __pyx_L11_error)
            if (__pyx_t_4) {

              /* "src/pygcgopt/decomposition.pxi":2160
 * 
 *                 if format == "svg":
 *                     data = outfile.read_text()             # <<<<<<<<<<<<<<
 *                 elif format == "png":
 *                     data = outfile.read_bytes()
 */
              __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_outfile, __pyx_n_s_read_text); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 2160, __pyx_L11_error)
              __Pyx_GOTREF(__pyx_t_3);
              __pyx_t_9 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
                __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
                if (likely(__pyx_t_9)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                  __Pyx_INCREF(__pyx_t_9);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_3, function);
                }
              }
              __pyx_t_2 = (__pyx_t_9) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_9) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
              __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
              if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 2160, __pyx_L11_error)
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              __pyx_v_data = __pyx_t_2;
              __pyx_t_2 = 0;

              /* "src/pygcgopt/decomposition.pxi":2159
 *                 self.thisptr.generateVisualization(c_gp_filename, c_outfile, c_output_format)
 * 
 *                 if format == "svg":             # <<<<<<<<<<<<<<
 *                     data = outfile.read_text()
 *                 elif format == "png":
 */
              goto __pyx_L18;
            }

            /* "src/pygcgopt/decomposition.pxi":2161
 *                 if format == "svg":
 *                     data = outfile.read_text()
 *                 elif format == "png":             # <<<<<<<<<<<<<<
 *                     data = outfile.read_bytes()
 *                 self._visualizations[format] = data
 */
            __pyx_t_4 = (__Pyx_PyUnicode_Equals(__pyx_v_format, __pyx_n_u_png, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(2, 2161, __pyx_L11_error)
            if (__pyx_t_4) {

              /* "src/pygcgopt/decomposition.pxi":2162
 *                     data = outfile.read_text()
 *                 elif format == "png":
 *                     data = outfile.read_bytes()             # <<<<<<<<<<<<<<
 *                 self._visualizations[format] = data
 * 
 */
              __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_outfile, __pyx_n_s_read_bytes); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 2162, __pyx_L11_error)
              __Pyx_GOTREF(__pyx_t_3);
              __pyx_t_9 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
                __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
                if (likely(__pyx_t_9)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                  __Pyx_INCREF(__pyx_t_9);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_3, function);
                }
              }
              __pyx_t_2 = (__pyx_t_9) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_9) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
              __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
              if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 2162, __pyx_L11_error)
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              __pyx_v_data = __pyx_t_2;
              __pyx_t_2 = 0;

              /* "src/pygcgopt/decomposition.pxi":2161
 *                 if format == "svg":
 *                     data = outfile.read_text()
 *                 elif format == "png":             # <<<<<<<<<<<<<<
 *                     data = outfile.read_bytes()
 *                 self._visualizations[format] = data
 */
            }
            __pyx_L18:;

            /* "src/pygcgopt/decomposition.pxi":2163
 *                 elif format == "png":
 *                     data = outfile.read_bytes()
 *                 self._visualizations[format] = data             # <<<<<<<<<<<<<<
 * 
 *         return self._visualizations[format]
 */
            if (unlikely(!__pyx_v_data)) { __Pyx_RaiseUnboundLocalError("data"); __PYX_ERR(2, 2163, __pyx_L11_error) }
            if (unlikely(__pyx_v_self->_visualizations == Py_None)) {
              PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
              __PYX_ERR(2, 2163, __pyx_L11_error)
            }
            if (unlikely(PyDict_SetItem(__pyx_v_self->_visualizations, __pyx_v_format, __pyx_v_data) < 0)) __PYX_ERR(2, 2163, __pyx_L11_error)

            /* "src/pygcgopt/decomposition.pxi":2143
 * 
 *         if format not in self._visualizations:
 *             with tempfile.TemporaryDirectory() as td:             # <<<<<<<<<<<<<<
 *                 temp_path = Path(td)
 * 
 */
          }
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          goto __pyx_L16_try_end;
          __pyx_L11_error:;
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          /*except:*/ {
            __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.__generate_visualization", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_3, &__pyx_t_9) < 0) __PYX_ERR(2, 2143, __pyx_L13_except_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_1 = PyTuple_Pack(3, __pyx_t_2, __pyx_t_3, __pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2143, __pyx_L13_except_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_1, NULL);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 2143, __pyx_L13_except_error)
            __Pyx_GOTREF(__pyx_t_15);
            __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            if (__pyx_t_4 < 0) __PYX_ERR(2, 2143, __pyx_L13_except_error)
            __pyx_t_5 = ((!(__pyx_t_4 != 0)) != 0);
            if (__pyx_t_5) {
              __Pyx_GIVEREF(__pyx_t_2);
              __Pyx_GIVEREF(__pyx_t_3);
              __Pyx_XGIVEREF(__pyx_t_9);
              __Pyx_ErrRestoreWithState(__pyx_t_2, __pyx_t_3, __pyx_t_9);
              __pyx_t_2 = 0; __pyx_t_3 = 0; __pyx_t_9 = 0; 
              __PYX_ERR(2, 2143, __pyx_L13_except_error)
            }
            __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
            goto __pyx_L12_exception_handled;
          }
          __pyx_L13_except_error:;
          __Pyx_XGIVEREF(__pyx_t_10);
          __Pyx_XGIVEREF(__pyx_t_11);
          __Pyx_XGIVEREF(__pyx_t_12);
          __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
          goto __pyx_L1_error;
          __pyx_L12_exception_handled:;
          __Pyx_XGIVEREF(__pyx_t_10);
          __Pyx_XGIVEREF(__pyx_t_11);
          __Pyx_XGIVEREF(__pyx_t_12);
          __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
          __pyx_L16_try_end:;
        }
      }
      /*finally:*/ {
        /*normal exit:*/{
          if (__pyx_t_8) {
            __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_tuple__19, NULL);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            if (unlikely(!__pyx_t_12)) __PYX_ERR(2, 2143, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_12);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          }
          goto __pyx_L10;
        }
        __pyx_L10:;
      }
      goto __pyx_L22;
      __pyx_L7_error:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L1_error;
      __pyx_L22:;
    }

    /* "src/pygcgopt/decomposition.pxi":2142
 *             raise ValueError(f"Format {format} is not supported. Only \"svg\" and \"png\" are supported.")
 * 
 *         if format not in self._visualizations:             # <<<<<<<<<<<<<<
 *             with tempfile.TemporaryDirectory() as td:
 *                 temp_path = Path(td)
 */
  }

  /* "src/pygcgopt/decomposition.pxi":2165
 *                 self._visualizations[format] = data
 * 
 *         return self._visualizations[format]             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(PartialDecomposition self):
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_self->_visualizations == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 2165, __pyx_L1_error)
  }
  __pyx_t_9 = __Pyx_PyDict_GetItem(__pyx_v_self->_visualizations, __pyx_v_format); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 2165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_r = __pyx_t_9;
  __pyx_t_9 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":2137
 *         return self.__generate_visualization("png")
 * 
 *     cdef __generate_visualization(self, format="svg"):             # <<<<<<<<<<<<<<
 *         format = format.lower()
 *         if format not in ["svg", "png"]:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.__generate_visualization", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_td);
  __Pyx_XDECREF(__pyx_v_temp_path);
  __Pyx_XDECREF(__pyx_v_gp_filename);
  __Pyx_XDECREF(__pyx_v_outfile);
  __Pyx_XDECREF(__pyx_v_c_gp_filename);
  __Pyx_XDECREF(__pyx_v_c_outfile);
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XDECREF(__pyx_v_format);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":2167
 *         return self._visualizations[format]
 * 
 *     def __repr__(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         return f"<PartialDecomposition: nBlocks={self.getNBlocks()}, nMasterConss={self.getNMasterconss()}, nMasterVars={self.getNMastervars()}, nLinkingVars={self.getNLinkingvars()}, maxForWhiteScore={self.maxForWhiteScore}>"
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_337__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_337__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_336__repr__(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_336__repr__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "src/pygcgopt/decomposition.pxi":2168
 * 
 *     def __repr__(PartialDecomposition self):
 *         return f"<PartialDecomposition: nBlocks={self.getNBlocks()}, nMasterConss={self.getNMasterconss()}, nMasterVars={self.getNMastervars()}, nLinkingVars={self.getNLinkingvars()}, maxForWhiteScore={self.maxForWhiteScore}>"             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(11); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __Pyx_INCREF(__pyx_kp_u_PartialDecomposition_nBlocks);
  __pyx_t_2 += 31;
  __Pyx_GIVEREF(__pyx_kp_u_PartialDecomposition_nBlocks);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_PartialDecomposition_nBlocks);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNBlocks); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_kp_u_nMasterConss);
  __pyx_t_2 += 15;
  __Pyx_GIVEREF(__pyx_kp_u_nMasterConss);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_nMasterConss);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNMasterconss); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_5 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_5, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u_nMasterVars);
  __pyx_t_2 += 14;
  __Pyx_GIVEREF(__pyx_kp_u_nMasterVars);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u_nMasterVars);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNMastervars); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_kp_u_nLinkingVars);
  __pyx_t_2 += 15;
  __Pyx_GIVEREF(__pyx_kp_u_nLinkingVars);
  PyTuple_SET_ITEM(__pyx_t_1, 6, __pyx_kp_u_nLinkingVars);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getNLinkingvars); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_5 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_5, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 7, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u_maxForWhiteScore);
  __pyx_t_2 += 19;
  __Pyx_GIVEREF(__pyx_kp_u_maxForWhiteScore);
  PyTuple_SET_ITEM(__pyx_t_1, 8, __pyx_kp_u_maxForWhiteScore);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_maxForWhiteScore_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 2168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 9, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_kp_u__3);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__3);
  PyTuple_SET_ITEM(__pyx_t_1, 10, __pyx_kp_u__3);
  __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_1, 11, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 2168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/decomposition.pxi":2167
 *         return self._visualizations[format]
 * 
 *     def __repr__(PartialDecomposition self):             # <<<<<<<<<<<<<<
 *         return f"<PartialDecomposition: nBlocks={self.getNBlocks()}, nMasterConss={self.getNMasterconss()}, nMasterVars={self.getNMastervars()}, nLinkingVars={self.getNLinkingvars()}, maxForWhiteScore={self.maxForWhiteScore}>"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/decomposition.pxi":10
 *     cdef bool delete_thisptr
 * 
 *     cdef public dict _visualizations             # <<<<<<<<<<<<<<
 * 
 *     # Stores the objects used by the user for referencing the decomposition blocks.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_15_visualizations_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_15_visualizations_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_15_visualizations___get__(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_15_visualizations___get__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_visualizations);
  __pyx_r = __pyx_v_self->_visualizations;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_15_visualizations_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_15_visualizations_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_15_visualizations_2__set__(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_15_visualizations_2__set__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyDict_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(2, 10, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_visualizations);
  __Pyx_DECREF(__pyx_v_self->_visualizations);
  __pyx_v_self->_visualizations = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition._visualizations.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_15_visualizations_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_15_visualizations_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_15_visualizations_4__del__(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_15_visualizations_4__del__(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_visualizations);
  __Pyx_DECREF(__pyx_v_self->_visualizations);
  __pyx_v_self->_visualizations = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_339__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_338__reduce_cython__[] = "PartialDecomposition.__reduce_cython__(self)";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_339__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_338__reduce_cython__(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_338__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(4, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_341__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_340__setstate_cython__[] = "PartialDecomposition.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_341__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_340__setstate_cython__(((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PartialDecomposition_340__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(4, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygcgopt.gcg.PartialDecomposition.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":10
 *     cdef object __weakref__
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 *         self.delete_thisptr = True
 */

/* Python wrapper */
static int __pyx_pw_8pygcgopt_3gcg_11DetProbData_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pygcgopt_3gcg_11DetProbData_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData___cinit__(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygcgopt_3gcg_11DetProbData___cinit__(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "src/pygcgopt/detprobdata.pxi":11
 * 
 *     def __cinit__(self):
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 *         self.delete_thisptr = True
 * 
 */
  __pyx_v_self->thisptr = NULL;

  /* "src/pygcgopt/detprobdata.pxi":12
 *     def __cinit__(self):
 *         self.thisptr = NULL
 *         self.delete_thisptr = True             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->delete_thisptr = 1;

  /* "src/pygcgopt/detprobdata.pxi":10
 *     cdef object __weakref__
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 *         self.delete_thisptr = True
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":14
 *         self.delete_thisptr = True
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.delete_thisptr and self.thisptr != NULL:
 *             del self.thisptr
 */

/* Python wrapper */
static void __pyx_pw_8pygcgopt_3gcg_11DetProbData_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pygcgopt_3gcg_11DetProbData_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pygcgopt_3gcg_11DetProbData_2__dealloc__(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pygcgopt_3gcg_11DetProbData_2__dealloc__(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "src/pygcgopt/detprobdata.pxi":15
 * 
 *     def __dealloc__(self):
 *         if self.delete_thisptr and self.thisptr != NULL:             # <<<<<<<<<<<<<<
 *             del self.thisptr
 * 
 */
  __pyx_t_2 = (__pyx_v_self->delete_thisptr != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_self->thisptr != NULL) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "src/pygcgopt/detprobdata.pxi":16
 *     def __dealloc__(self):
 *         if self.delete_thisptr and self.thisptr != NULL:
 *             del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    delete __pyx_v_self->thisptr;

    /* "src/pygcgopt/detprobdata.pxi":15
 * 
 *     def __dealloc__(self):
 *         if self.delete_thisptr and self.thisptr != NULL:             # <<<<<<<<<<<<<<
 *             del self.thisptr
 * 
 */
  }

  /* "src/pygcgopt/detprobdata.pxi":14
 *         self.delete_thisptr = True
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.delete_thisptr and self.thisptr != NULL:
 *             del self.thisptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "src/pygcgopt/detprobdata.pxi":19
 * 
 *     @staticmethod
 *     cdef create(DETPROBDATA* thisptr):             # <<<<<<<<<<<<<<
 *         if thisptr == NULL:
 *             raise Warning("cannot create DetProbData with DETPROBDATA* == NULL")
 */

static PyObject *__pyx_f_8pygcgopt_3gcg_11DetProbData_create(gcg::DETPROBDATA *__pyx_v_thisptr) {
  struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_new_DetProbData = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create", 0);

  /* "src/pygcgopt/detprobdata.pxi":20
 *     @staticmethod
 *     cdef create(DETPROBDATA* thisptr):
 *         if thisptr == NULL:             # <<<<<<<<<<<<<<
 *             raise Warning("cannot create DetProbData with DETPROBDATA* == NULL")
 *         new_DetProbData = DetProbData()
 */
  __pyx_t_1 = ((__pyx_v_thisptr == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "src/pygcgopt/detprobdata.pxi":21
 *     cdef create(DETPROBDATA* thisptr):
 *         if thisptr == NULL:
 *             raise Warning("cannot create DetProbData with DETPROBDATA* == NULL")             # <<<<<<<<<<<<<<
 *         new_DetProbData = DetProbData()
 *         new_DetProbData.thisptr = thisptr
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_Warning, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 21, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(6, 21, __pyx_L1_error)

    /* "src/pygcgopt/detprobdata.pxi":20
 *     @staticmethod
 *     cdef create(DETPROBDATA* thisptr):
 *         if thisptr == NULL:             # <<<<<<<<<<<<<<
 *             raise Warning("cannot create DetProbData with DETPROBDATA* == NULL")
 *         new_DetProbData = DetProbData()
 */
  }

  /* "src/pygcgopt/detprobdata.pxi":22
 *         if thisptr == NULL:
 *             raise Warning("cannot create DetProbData with DETPROBDATA* == NULL")
 *         new_DetProbData = DetProbData()             # <<<<<<<<<<<<<<
 *         new_DetProbData.thisptr = thisptr
 *         new_DetProbData.delete_thisptr = False
 */
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygcgopt_3gcg_DetProbData)); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_new_DetProbData = ((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "src/pygcgopt/detprobdata.pxi":23
 *             raise Warning("cannot create DetProbData with DETPROBDATA* == NULL")
 *         new_DetProbData = DetProbData()
 *         new_DetProbData.thisptr = thisptr             # <<<<<<<<<<<<<<
 *         new_DetProbData.delete_thisptr = False
 *         return new_DetProbData
 */
  __pyx_v_new_DetProbData->thisptr = __pyx_v_thisptr;

  /* "src/pygcgopt/detprobdata.pxi":24
 *         new_DetProbData = DetProbData()
 *         new_DetProbData.thisptr = thisptr
 *         new_DetProbData.delete_thisptr = False             # <<<<<<<<<<<<<<
 *         return new_DetProbData
 * 
 */
  __pyx_v_new_DetProbData->delete_thisptr = 0;

  /* "src/pygcgopt/detprobdata.pxi":25
 *         new_DetProbData.thisptr = thisptr
 *         new_DetProbData.delete_thisptr = False
 *         return new_DetProbData             # <<<<<<<<<<<<<<
 * 
 *     # def __init__(DetProbData self, SCIP * scip, unsigned int _originalProblem):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_new_DetProbData));
  __pyx_r = ((PyObject *)__pyx_v_new_DetProbData);
  goto __pyx_L0;

  /* "src/pygcgopt/detprobdata.pxi":19
 * 
 *     @staticmethod
 *     cdef create(DETPROBDATA* thisptr):             # <<<<<<<<<<<<<<
 *         if thisptr == NULL:
 *             raise Warning("cannot create DetProbData with DETPROBDATA* == NULL")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.create", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_new_DetProbData);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":36
 * 
 *     @property
 *     def candidatesNBlocks(DetProbData self):             # <<<<<<<<<<<<<<
 *         """candidate for the number of blocks, second int indicates how often a candidate was added.
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_17candidatesNBlocks_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_17candidatesNBlocks_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_17candidatesNBlocks___get__(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_17candidatesNBlocks___get__(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self) {
  std::vector<std::pair<int,int> >  __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<std::pair<int,int> >  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "src/pygcgopt/detprobdata.pxi":39
 *         """candidate for the number of blocks, second int indicates how often a candidate was added.
 *         """
 *         cdef vector[pair[int, int]] result = self.thisptr.candidatesNBlocks             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_t_1 = __pyx_v_self->thisptr->candidatesNBlocks;
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/detprobdata.pxi":40
 *         """
 *         cdef vector[pair[int, int]] result = self.thisptr.candidatesNBlocks
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @candidatesNBlocks.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e___(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/detprobdata.pxi":36
 * 
 *     @property
 *     def candidatesNBlocks(DetProbData self):             # <<<<<<<<<<<<<<
 *         """candidate for the number of blocks, second int indicates how often a candidate was added.
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.candidatesNBlocks.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":43
 * 
 *     @candidatesNBlocks.setter
 *     def candidatesNBlocks(DetProbData self, object candidatesNBlocks):             # <<<<<<<<<<<<<<
 *         cdef vector[pair[int, int]] cpp_candidatesNBlocks = candidatesNBlocks
 *         self.thisptr.candidatesNBlocks = cpp_candidatesNBlocks
 */

/* Python wrapper */
static int __pyx_pw_8pygcgopt_3gcg_11DetProbData_17candidatesNBlocks_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_candidatesNBlocks); /*proto*/
static int __pyx_pw_8pygcgopt_3gcg_11DetProbData_17candidatesNBlocks_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_candidatesNBlocks) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_17candidatesNBlocks_2__set__(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self), ((PyObject *)__pyx_v_candidatesNBlocks));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygcgopt_3gcg_11DetProbData_17candidatesNBlocks_2__set__(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, PyObject *__pyx_v_candidatesNBlocks) {
  std::vector<std::pair<int,int> >  __pyx_v_cpp_candidatesNBlocks;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::vector<std::pair<int,int> >  __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "src/pygcgopt/detprobdata.pxi":44
 *     @candidatesNBlocks.setter
 *     def candidatesNBlocks(DetProbData self, object candidatesNBlocks):
 *         cdef vector[pair[int, int]] cpp_candidatesNBlocks = candidatesNBlocks             # <<<<<<<<<<<<<<
 *         self.thisptr.candidatesNBlocks = cpp_candidatesNBlocks
 * 
 */
  __pyx_t_1 = __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e___(__pyx_v_candidatesNBlocks); if (unlikely(PyErr_Occurred())) __PYX_ERR(6, 44, __pyx_L1_error)
  __pyx_v_cpp_candidatesNBlocks = __pyx_t_1;

  /* "src/pygcgopt/detprobdata.pxi":45
 *     def candidatesNBlocks(DetProbData self, object candidatesNBlocks):
 *         cdef vector[pair[int, int]] cpp_candidatesNBlocks = candidatesNBlocks
 *         self.thisptr.candidatesNBlocks = cpp_candidatesNBlocks             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->thisptr->candidatesNBlocks = __pyx_v_cpp_candidatesNBlocks;

  /* "src/pygcgopt/detprobdata.pxi":43
 * 
 *     @candidatesNBlocks.setter
 *     def candidatesNBlocks(DetProbData self, object candidatesNBlocks):             # <<<<<<<<<<<<<<
 *         cdef vector[pair[int, int]] cpp_candidatesNBlocks = candidatesNBlocks
 *         self.thisptr.candidatesNBlocks = cpp_candidatesNBlocks
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.candidatesNBlocks.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":48
 * 
 *     @property
 *     def conspartitioncollection(DetProbData self):             # <<<<<<<<<<<<<<
 *         """collection of different constraint class distributions.
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_23conspartitioncollection_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_23conspartitioncollection_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_23conspartitioncollection___get__(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_23conspartitioncollection___get__(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self) {
  std::vector<gcg::ConsPartition *>  __pyx_v_result;
  gcg::ConsPartition *__pyx_9genexpr31__pyx_v_r;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<gcg::ConsPartition *>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  std::vector<gcg::ConsPartition *> ::iterator __pyx_t_3;
  gcg::ConsPartition *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "src/pygcgopt/detprobdata.pxi":51
 *         """collection of different constraint class distributions.
 *         """
 *         cdef vector[ConsPartition *] result = self.thisptr.conspartitioncollection             # <<<<<<<<<<<<<<
 *         return [ConsPart.create(r, <DetProbData>weakref.proxy(self)) for r in result]
 * 
 */
  __pyx_t_1 = __pyx_v_self->thisptr->conspartitioncollection;
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/detprobdata.pxi":52
 *         """
 *         cdef vector[ConsPartition *] result = self.thisptr.conspartitioncollection
 *         return [ConsPart.create(r, <DetProbData>weakref.proxy(self)) for r in result]             # <<<<<<<<<<<<<<
 * 
 *     @conspartitioncollection.setter
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 52, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_v_result.begin();
    for (;;) {
      if (!(__pyx_t_3 != __pyx_v_result.end())) break;
      __pyx_t_4 = *__pyx_t_3;
      ++__pyx_t_3;
      __pyx_9genexpr31__pyx_v_r = __pyx_t_4;
      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_weakref); if (unlikely(!__pyx_t_6)) __PYX_ERR(6, 52, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_proxy); if (unlikely(!__pyx_t_7)) __PYX_ERR(6, 52, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_5 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_6, ((PyObject *)__pyx_v_self)) : __Pyx_PyObject_CallOneArg(__pyx_t_7, ((PyObject *)__pyx_v_self));
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 52, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __pyx_f_8pygcgopt_3gcg_8ConsPart_create(__pyx_9genexpr31__pyx_v_r, ((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_t_5)); if (unlikely(!__pyx_t_7)) __PYX_ERR(6, 52, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_7))) __PYX_ERR(6, 52, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  } /* exit inner scope */
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/detprobdata.pxi":48
 * 
 *     @property
 *     def conspartitioncollection(DetProbData self):             # <<<<<<<<<<<<<<
 *         """collection of different constraint class distributions.
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.conspartitioncollection.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":55
 * 
 *     @conspartitioncollection.setter
 *     def conspartitioncollection(DetProbData self, object conspartitioncollection):             # <<<<<<<<<<<<<<
 *         # this seems to be possible only when we use C++11 (-std=c++11)
 *         # maybe it will be fixed in a future version of Cython
 */

/* Python wrapper */
static int __pyx_pw_8pygcgopt_3gcg_11DetProbData_23conspartitioncollection_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_conspartitioncollection); /*proto*/
static int __pyx_pw_8pygcgopt_3gcg_11DetProbData_23conspartitioncollection_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_conspartitioncollection) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_23conspartitioncollection_2__set__(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self), ((PyObject *)__pyx_v_conspartitioncollection));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygcgopt_3gcg_11DetProbData_23conspartitioncollection_2__set__(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, PyObject *__pyx_v_conspartitioncollection) {
  std::vector<gcg::ConsPartition *>  __pyx_v_cpp_conspartitioncollection;
  gcg::ConsPartition *__pyx_v_conspartitioncollection_ptr;
  struct __pyx_obj_8pygcgopt_3gcg_ConsPart *__pyx_v_conspartitioncollection_element = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "src/pygcgopt/detprobdata.pxi":59
 *         # maybe it will be fixed in a future version of Cython
 *         cdef vector[ConsPartition *] cpp_conspartitioncollection
 *         cdef ConsPartition * conspartitioncollection_ptr = NULL             # <<<<<<<<<<<<<<
 *         cdef ConsPart conspartitioncollection_element
 *         for conspartitioncollection_element in conspartitioncollection:
 */
  __pyx_v_conspartitioncollection_ptr = NULL;

  /* "src/pygcgopt/detprobdata.pxi":61
 *         cdef ConsPartition * conspartitioncollection_ptr = NULL
 *         cdef ConsPart conspartitioncollection_element
 *         for conspartitioncollection_element in conspartitioncollection:             # <<<<<<<<<<<<<<
 *             conspartitioncollection_ptr = <ConsPartition*> conspartitioncollection_element.thisptr
 *             cpp_conspartitioncollection.push_back(conspartitioncollection_ptr)
 */
  if (likely(PyList_CheckExact(__pyx_v_conspartitioncollection)) || PyTuple_CheckExact(__pyx_v_conspartitioncollection)) {
    __pyx_t_1 = __pyx_v_conspartitioncollection; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_conspartitioncollection); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 61, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(6, 61, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 61, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(6, 61, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 61, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(6, 61, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_8pygcgopt_3gcg_ConsPart))))) __PYX_ERR(6, 61, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_conspartitioncollection_element, ((struct __pyx_obj_8pygcgopt_3gcg_ConsPart *)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "src/pygcgopt/detprobdata.pxi":62
 *         cdef ConsPart conspartitioncollection_element
 *         for conspartitioncollection_element in conspartitioncollection:
 *             conspartitioncollection_ptr = <ConsPartition*> conspartitioncollection_element.thisptr             # <<<<<<<<<<<<<<
 *             cpp_conspartitioncollection.push_back(conspartitioncollection_ptr)
 *         self.thisptr.conspartitioncollection = cpp_conspartitioncollection
 */
    __pyx_v_conspartitioncollection_ptr = ((gcg::ConsPartition *)__pyx_v_conspartitioncollection_element->thisptr);

    /* "src/pygcgopt/detprobdata.pxi":63
 *         for conspartitioncollection_element in conspartitioncollection:
 *             conspartitioncollection_ptr = <ConsPartition*> conspartitioncollection_element.thisptr
 *             cpp_conspartitioncollection.push_back(conspartitioncollection_ptr)             # <<<<<<<<<<<<<<
 *         self.thisptr.conspartitioncollection = cpp_conspartitioncollection
 * 
 */
    try {
      __pyx_v_cpp_conspartitioncollection.push_back(__pyx_v_conspartitioncollection_ptr);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(6, 63, __pyx_L1_error)
    }

    /* "src/pygcgopt/detprobdata.pxi":61
 *         cdef ConsPartition * conspartitioncollection_ptr = NULL
 *         cdef ConsPart conspartitioncollection_element
 *         for conspartitioncollection_element in conspartitioncollection:             # <<<<<<<<<<<<<<
 *             conspartitioncollection_ptr = <ConsPartition*> conspartitioncollection_element.thisptr
 *             cpp_conspartitioncollection.push_back(conspartitioncollection_ptr)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/pygcgopt/detprobdata.pxi":64
 *             conspartitioncollection_ptr = <ConsPartition*> conspartitioncollection_element.thisptr
 *             cpp_conspartitioncollection.push_back(conspartitioncollection_ptr)
 *         self.thisptr.conspartitioncollection = cpp_conspartitioncollection             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->thisptr->conspartitioncollection = __pyx_v_cpp_conspartitioncollection;

  /* "src/pygcgopt/detprobdata.pxi":55
 * 
 *     @conspartitioncollection.setter
 *     def conspartitioncollection(DetProbData self, object conspartitioncollection):             # <<<<<<<<<<<<<<
 *         # this seems to be possible only when we use C++11 (-std=c++11)
 *         # maybe it will be fixed in a future version of Cython
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.conspartitioncollection.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_conspartitioncollection_element);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":67
 * 
 *     @property
 *     def varpartitioncollection(DetProbData self):             # <<<<<<<<<<<<<<
 *         """collection of different variable class distributions.
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_22varpartitioncollection_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_22varpartitioncollection_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_22varpartitioncollection___get__(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_22varpartitioncollection___get__(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self) {
  std::vector<gcg::VarPartition *>  __pyx_v_result;
  gcg::VarPartition *__pyx_9genexpr32__pyx_v_r;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<gcg::VarPartition *>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  std::vector<gcg::VarPartition *> ::iterator __pyx_t_3;
  gcg::VarPartition *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "src/pygcgopt/detprobdata.pxi":70
 *         """collection of different variable class distributions.
 *         """
 *         cdef vector[VarPartition *] result = self.thisptr.varpartitioncollection             # <<<<<<<<<<<<<<
 *         return [VarPart.create(r) for r in result]
 * 
 */
  __pyx_t_1 = __pyx_v_self->thisptr->varpartitioncollection;
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/detprobdata.pxi":71
 *         """
 *         cdef vector[VarPartition *] result = self.thisptr.varpartitioncollection
 *         return [VarPart.create(r) for r in result]             # <<<<<<<<<<<<<<
 * 
 *     @varpartitioncollection.setter
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 71, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_v_result.begin();
    for (;;) {
      if (!(__pyx_t_3 != __pyx_v_result.end())) break;
      __pyx_t_4 = *__pyx_t_3;
      ++__pyx_t_3;
      __pyx_9genexpr32__pyx_v_r = __pyx_t_4;
      __pyx_t_5 = __pyx_f_8pygcgopt_3gcg_7VarPart_create(__pyx_9genexpr32__pyx_v_r); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 71, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_5))) __PYX_ERR(6, 71, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  } /* exit inner scope */
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/detprobdata.pxi":67
 * 
 *     @property
 *     def varpartitioncollection(DetProbData self):             # <<<<<<<<<<<<<<
 *         """collection of different variable class distributions.
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.varpartitioncollection.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":74
 * 
 *     @varpartitioncollection.setter
 *     def varpartitioncollection(DetProbData self, object varpartitioncollection):             # <<<<<<<<<<<<<<
 *         # this seems to be possible only when we use C++11 (-std=c++11)
 *         # maybe it will be fixed in a future version of Cython
 */

/* Python wrapper */
static int __pyx_pw_8pygcgopt_3gcg_11DetProbData_22varpartitioncollection_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_varpartitioncollection); /*proto*/
static int __pyx_pw_8pygcgopt_3gcg_11DetProbData_22varpartitioncollection_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_varpartitioncollection) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_22varpartitioncollection_2__set__(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self), ((PyObject *)__pyx_v_varpartitioncollection));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygcgopt_3gcg_11DetProbData_22varpartitioncollection_2__set__(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, PyObject *__pyx_v_varpartitioncollection) {
  std::vector<gcg::VarPartition *>  __pyx_v_cpp_varpartitioncollection;
  gcg::VarPartition *__pyx_v_varpartitioncollection_ptr;
  struct __pyx_obj_8pygcgopt_3gcg_VarPart *__pyx_v_varpartitioncollection_element = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "src/pygcgopt/detprobdata.pxi":78
 *         # maybe it will be fixed in a future version of Cython
 *         cdef vector[VarPartition *] cpp_varpartitioncollection
 *         cdef VarPartition * varpartitioncollection_ptr = NULL             # <<<<<<<<<<<<<<
 *         cdef VarPart varpartitioncollection_element
 *         for varpartitioncollection_element in varpartitioncollection:
 */
  __pyx_v_varpartitioncollection_ptr = NULL;

  /* "src/pygcgopt/detprobdata.pxi":80
 *         cdef VarPartition * varpartitioncollection_ptr = NULL
 *         cdef VarPart varpartitioncollection_element
 *         for varpartitioncollection_element in varpartitioncollection:             # <<<<<<<<<<<<<<
 *             varpartitioncollection_ptr = <VarPartition*> varpartitioncollection_element.thisptr
 *             cpp_varpartitioncollection.push_back(varpartitioncollection_ptr)
 */
  if (likely(PyList_CheckExact(__pyx_v_varpartitioncollection)) || PyTuple_CheckExact(__pyx_v_varpartitioncollection)) {
    __pyx_t_1 = __pyx_v_varpartitioncollection; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_varpartitioncollection); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 80, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(6, 80, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 80, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(6, 80, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 80, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(6, 80, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_8pygcgopt_3gcg_VarPart))))) __PYX_ERR(6, 80, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_varpartitioncollection_element, ((struct __pyx_obj_8pygcgopt_3gcg_VarPart *)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "src/pygcgopt/detprobdata.pxi":81
 *         cdef VarPart varpartitioncollection_element
 *         for varpartitioncollection_element in varpartitioncollection:
 *             varpartitioncollection_ptr = <VarPartition*> varpartitioncollection_element.thisptr             # <<<<<<<<<<<<<<
 *             cpp_varpartitioncollection.push_back(varpartitioncollection_ptr)
 *         self.thisptr.varpartitioncollection = cpp_varpartitioncollection
 */
    __pyx_v_varpartitioncollection_ptr = ((gcg::VarPartition *)__pyx_v_varpartitioncollection_element->thisptr);

    /* "src/pygcgopt/detprobdata.pxi":82
 *         for varpartitioncollection_element in varpartitioncollection:
 *             varpartitioncollection_ptr = <VarPartition*> varpartitioncollection_element.thisptr
 *             cpp_varpartitioncollection.push_back(varpartitioncollection_ptr)             # <<<<<<<<<<<<<<
 *         self.thisptr.varpartitioncollection = cpp_varpartitioncollection
 * 
 */
    try {
      __pyx_v_cpp_varpartitioncollection.push_back(__pyx_v_varpartitioncollection_ptr);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(6, 82, __pyx_L1_error)
    }

    /* "src/pygcgopt/detprobdata.pxi":80
 *         cdef VarPartition * varpartitioncollection_ptr = NULL
 *         cdef VarPart varpartitioncollection_element
 *         for varpartitioncollection_element in varpartitioncollection:             # <<<<<<<<<<<<<<
 *             varpartitioncollection_ptr = <VarPartition*> varpartitioncollection_element.thisptr
 *             cpp_varpartitioncollection.push_back(varpartitioncollection_ptr)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/pygcgopt/detprobdata.pxi":83
 *             varpartitioncollection_ptr = <VarPartition*> varpartitioncollection_element.thisptr
 *             cpp_varpartitioncollection.push_back(varpartitioncollection_ptr)
 *         self.thisptr.varpartitioncollection = cpp_varpartitioncollection             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->thisptr->varpartitioncollection = __pyx_v_cpp_varpartitioncollection;

  /* "src/pygcgopt/detprobdata.pxi":74
 * 
 *     @varpartitioncollection.setter
 *     def varpartitioncollection(DetProbData self, object varpartitioncollection):             # <<<<<<<<<<<<<<
 *         # this seems to be possible only when we use C++11 (-std=c++11)
 *         # maybe it will be fixed in a future version of Cython
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.varpartitioncollection.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_varpartitioncollection_element);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":86
 * 
 *     @property
 *     def classificationtime(DetProbData self):             # <<<<<<<<<<<<<<
 *         """time that was consumed by the classification of the constraint and variables classifiers.
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_18classificationtime_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_18classificationtime_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_18classificationtime___get__(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_18classificationtime___get__(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self) {
  double __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "src/pygcgopt/detprobdata.pxi":89
 *         """time that was consumed by the classification of the constraint and variables classifiers.
 *         """
 *         cdef double result = self.thisptr.classificationtime             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_t_1 = __pyx_v_self->thisptr->classificationtime;
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/detprobdata.pxi":90
 *         """
 *         cdef double result = self.thisptr.classificationtime
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @classificationtime.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/detprobdata.pxi":86
 * 
 *     @property
 *     def classificationtime(DetProbData self):             # <<<<<<<<<<<<<<
 *         """time that was consumed by the classification of the constraint and variables classifiers.
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.classificationtime.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":93
 * 
 *     @classificationtime.setter
 *     def classificationtime(DetProbData self, double classificationtime):             # <<<<<<<<<<<<<<
 *         cdef double cpp_classificationtime = classificationtime
 *         self.thisptr.classificationtime = cpp_classificationtime
 */

/* Python wrapper */
static int __pyx_pw_8pygcgopt_3gcg_11DetProbData_18classificationtime_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_classificationtime); /*proto*/
static int __pyx_pw_8pygcgopt_3gcg_11DetProbData_18classificationtime_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_classificationtime) {
  double __pyx_v_classificationtime;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_classificationtime); {
    __pyx_v_classificationtime = __pyx_PyFloat_AsDouble(__pyx_arg_classificationtime); if (unlikely((__pyx_v_classificationtime == (double)-1) && PyErr_Occurred())) __PYX_ERR(6, 93, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.classificationtime.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_18classificationtime_2__set__(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self), ((double)__pyx_v_classificationtime));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygcgopt_3gcg_11DetProbData_18classificationtime_2__set__(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, double __pyx_v_classificationtime) {
  double __pyx_v_cpp_classificationtime;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "src/pygcgopt/detprobdata.pxi":94
 *     @classificationtime.setter
 *     def classificationtime(DetProbData self, double classificationtime):
 *         cdef double cpp_classificationtime = classificationtime             # <<<<<<<<<<<<<<
 *         self.thisptr.classificationtime = cpp_classificationtime
 * 
 */
  __pyx_v_cpp_classificationtime = __pyx_v_classificationtime;

  /* "src/pygcgopt/detprobdata.pxi":95
 *     def classificationtime(DetProbData self, double classificationtime):
 *         cdef double cpp_classificationtime = classificationtime
 *         self.thisptr.classificationtime = cpp_classificationtime             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->thisptr->classificationtime = __pyx_v_cpp_classificationtime;

  /* "src/pygcgopt/detprobdata.pxi":93
 * 
 *     @classificationtime.setter
 *     def classificationtime(DetProbData self, double classificationtime):             # <<<<<<<<<<<<<<
 *         cdef double cpp_classificationtime = classificationtime
 *         self.thisptr.classificationtime = cpp_classificationtime
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":98
 * 
 *     @property
 *     def nblockscandidatescalctime(DetProbData self):             # <<<<<<<<<<<<<<
 *         """time that was used to calulate the candidates of te block number.
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_25nblockscandidatescalctime_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_25nblockscandidatescalctime_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_25nblockscandidatescalctime___get__(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_25nblockscandidatescalctime___get__(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self) {
  double __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "src/pygcgopt/detprobdata.pxi":101
 *         """time that was used to calulate the candidates of te block number.
 *         """
 *         cdef double result = self.thisptr.nblockscandidatescalctime             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_t_1 = __pyx_v_self->thisptr->nblockscandidatescalctime;
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/detprobdata.pxi":102
 *         """
 *         cdef double result = self.thisptr.nblockscandidatescalctime
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @nblockscandidatescalctime.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/detprobdata.pxi":98
 * 
 *     @property
 *     def nblockscandidatescalctime(DetProbData self):             # <<<<<<<<<<<<<<
 *         """time that was used to calulate the candidates of te block number.
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.nblockscandidatescalctime.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":105
 * 
 *     @nblockscandidatescalctime.setter
 *     def nblockscandidatescalctime(DetProbData self, double nblockscandidatescalctime):             # <<<<<<<<<<<<<<
 *         cdef double cpp_nblockscandidatescalctime = nblockscandidatescalctime
 *         self.thisptr.nblockscandidatescalctime = cpp_nblockscandidatescalctime
 */

/* Python wrapper */
static int __pyx_pw_8pygcgopt_3gcg_11DetProbData_25nblockscandidatescalctime_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_nblockscandidatescalctime); /*proto*/
static int __pyx_pw_8pygcgopt_3gcg_11DetProbData_25nblockscandidatescalctime_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_nblockscandidatescalctime) {
  double __pyx_v_nblockscandidatescalctime;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_nblockscandidatescalctime); {
    __pyx_v_nblockscandidatescalctime = __pyx_PyFloat_AsDouble(__pyx_arg_nblockscandidatescalctime); if (unlikely((__pyx_v_nblockscandidatescalctime == (double)-1) && PyErr_Occurred())) __PYX_ERR(6, 105, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.nblockscandidatescalctime.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_25nblockscandidatescalctime_2__set__(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self), ((double)__pyx_v_nblockscandidatescalctime));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygcgopt_3gcg_11DetProbData_25nblockscandidatescalctime_2__set__(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, double __pyx_v_nblockscandidatescalctime) {
  double __pyx_v_cpp_nblockscandidatescalctime;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "src/pygcgopt/detprobdata.pxi":106
 *     @nblockscandidatescalctime.setter
 *     def nblockscandidatescalctime(DetProbData self, double nblockscandidatescalctime):
 *         cdef double cpp_nblockscandidatescalctime = nblockscandidatescalctime             # <<<<<<<<<<<<<<
 *         self.thisptr.nblockscandidatescalctime = cpp_nblockscandidatescalctime
 * 
 */
  __pyx_v_cpp_nblockscandidatescalctime = __pyx_v_nblockscandidatescalctime;

  /* "src/pygcgopt/detprobdata.pxi":107
 *     def nblockscandidatescalctime(DetProbData self, double nblockscandidatescalctime):
 *         cdef double cpp_nblockscandidatescalctime = nblockscandidatescalctime
 *         self.thisptr.nblockscandidatescalctime = cpp_nblockscandidatescalctime             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->thisptr->nblockscandidatescalctime = __pyx_v_cpp_nblockscandidatescalctime;

  /* "src/pygcgopt/detprobdata.pxi":105
 * 
 *     @nblockscandidatescalctime.setter
 *     def nblockscandidatescalctime(DetProbData self, double nblockscandidatescalctime):             # <<<<<<<<<<<<<<
 *         cdef double cpp_nblockscandidatescalctime = nblockscandidatescalctime
 *         self.thisptr.nblockscandidatescalctime = cpp_nblockscandidatescalctime
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":110
 * 
 *     @property
 *     def postprocessingtime(DetProbData self):             # <<<<<<<<<<<<<<
 *         """time that was spent in postproceesing decomposigtions.
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_18postprocessingtime_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_18postprocessingtime_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_18postprocessingtime___get__(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_18postprocessingtime___get__(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self) {
  double __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "src/pygcgopt/detprobdata.pxi":113
 *         """time that was spent in postproceesing decomposigtions.
 *         """
 *         cdef double result = self.thisptr.postprocessingtime             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_t_1 = __pyx_v_self->thisptr->postprocessingtime;
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/detprobdata.pxi":114
 *         """
 *         cdef double result = self.thisptr.postprocessingtime
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @postprocessingtime.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/detprobdata.pxi":110
 * 
 *     @property
 *     def postprocessingtime(DetProbData self):             # <<<<<<<<<<<<<<
 *         """time that was spent in postproceesing decomposigtions.
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.postprocessingtime.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":117
 * 
 *     @postprocessingtime.setter
 *     def postprocessingtime(DetProbData self, double postprocessingtime):             # <<<<<<<<<<<<<<
 *         cdef double cpp_postprocessingtime = postprocessingtime
 *         self.thisptr.postprocessingtime = cpp_postprocessingtime
 */

/* Python wrapper */
static int __pyx_pw_8pygcgopt_3gcg_11DetProbData_18postprocessingtime_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_postprocessingtime); /*proto*/
static int __pyx_pw_8pygcgopt_3gcg_11DetProbData_18postprocessingtime_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_postprocessingtime) {
  double __pyx_v_postprocessingtime;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_postprocessingtime); {
    __pyx_v_postprocessingtime = __pyx_PyFloat_AsDouble(__pyx_arg_postprocessingtime); if (unlikely((__pyx_v_postprocessingtime == (double)-1) && PyErr_Occurred())) __PYX_ERR(6, 117, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.postprocessingtime.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_18postprocessingtime_2__set__(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self), ((double)__pyx_v_postprocessingtime));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygcgopt_3gcg_11DetProbData_18postprocessingtime_2__set__(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, double __pyx_v_postprocessingtime) {
  double __pyx_v_cpp_postprocessingtime;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "src/pygcgopt/detprobdata.pxi":118
 *     @postprocessingtime.setter
 *     def postprocessingtime(DetProbData self, double postprocessingtime):
 *         cdef double cpp_postprocessingtime = postprocessingtime             # <<<<<<<<<<<<<<
 *         self.thisptr.postprocessingtime = cpp_postprocessingtime
 * 
 */
  __pyx_v_cpp_postprocessingtime = __pyx_v_postprocessingtime;

  /* "src/pygcgopt/detprobdata.pxi":119
 *     def postprocessingtime(DetProbData self, double postprocessingtime):
 *         cdef double cpp_postprocessingtime = postprocessingtime
 *         self.thisptr.postprocessingtime = cpp_postprocessingtime             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->thisptr->postprocessingtime = __pyx_v_cpp_postprocessingtime;

  /* "src/pygcgopt/detprobdata.pxi":117
 * 
 *     @postprocessingtime.setter
 *     def postprocessingtime(DetProbData self, double postprocessingtime):             # <<<<<<<<<<<<<<
 *         cdef double cpp_postprocessingtime = postprocessingtime
 *         self.thisptr.postprocessingtime = cpp_postprocessingtime
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":122
 * 
 *     @property
 *     def translatingtime(DetProbData self):             # <<<<<<<<<<<<<<
 *         """time that was spent by transforming partialdecs between presolved and orig problem.
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_15translatingtime_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_15translatingtime_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_15translatingtime___get__(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_15translatingtime___get__(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self) {
  double __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "src/pygcgopt/detprobdata.pxi":125
 *         """time that was spent by transforming partialdecs between presolved and orig problem.
 *         """
 *         cdef double result = self.thisptr.translatingtime             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_t_1 = __pyx_v_self->thisptr->translatingtime;
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/detprobdata.pxi":126
 *         """
 *         cdef double result = self.thisptr.translatingtime
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @translatingtime.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/detprobdata.pxi":122
 * 
 *     @property
 *     def translatingtime(DetProbData self):             # <<<<<<<<<<<<<<
 *         """time that was spent by transforming partialdecs between presolved and orig problem.
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.translatingtime.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":129
 * 
 *     @translatingtime.setter
 *     def translatingtime(DetProbData self, double translatingtime):             # <<<<<<<<<<<<<<
 *         cdef double cpp_translatingtime = translatingtime
 *         self.thisptr.translatingtime = cpp_translatingtime
 */

/* Python wrapper */
static int __pyx_pw_8pygcgopt_3gcg_11DetProbData_15translatingtime_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_translatingtime); /*proto*/
static int __pyx_pw_8pygcgopt_3gcg_11DetProbData_15translatingtime_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_translatingtime) {
  double __pyx_v_translatingtime;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_translatingtime); {
    __pyx_v_translatingtime = __pyx_PyFloat_AsDouble(__pyx_arg_translatingtime); if (unlikely((__pyx_v_translatingtime == (double)-1) && PyErr_Occurred())) __PYX_ERR(6, 129, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.translatingtime.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_15translatingtime_2__set__(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self), ((double)__pyx_v_translatingtime));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygcgopt_3gcg_11DetProbData_15translatingtime_2__set__(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, double __pyx_v_translatingtime) {
  double __pyx_v_cpp_translatingtime;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "src/pygcgopt/detprobdata.pxi":130
 *     @translatingtime.setter
 *     def translatingtime(DetProbData self, double translatingtime):
 *         cdef double cpp_translatingtime = translatingtime             # <<<<<<<<<<<<<<
 *         self.thisptr.translatingtime = cpp_translatingtime
 * 
 */
  __pyx_v_cpp_translatingtime = __pyx_v_translatingtime;

  /* "src/pygcgopt/detprobdata.pxi":131
 *     def translatingtime(DetProbData self, double translatingtime):
 *         cdef double cpp_translatingtime = translatingtime
 *         self.thisptr.translatingtime = cpp_translatingtime             # <<<<<<<<<<<<<<
 * 
 *     def addConsPartition(DetProbData self, ConsPart partition):
 */
  __pyx_v_self->thisptr->translatingtime = __pyx_v_cpp_translatingtime;

  /* "src/pygcgopt/detprobdata.pxi":129
 * 
 *     @translatingtime.setter
 *     def translatingtime(DetProbData self, double translatingtime):             # <<<<<<<<<<<<<<
 *         cdef double cpp_translatingtime = translatingtime
 *         self.thisptr.translatingtime = cpp_translatingtime
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":133
 *         self.thisptr.translatingtime = cpp_translatingtime
 * 
 *     def addConsPartition(DetProbData self, ConsPart partition):             # <<<<<<<<<<<<<<
 *         """adds a constraint partition if it is no duplicate of an existing constraint partition.
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_5addConsPartition(PyObject *__pyx_v_self, PyObject *__pyx_v_partition); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_11DetProbData_4addConsPartition[] = "DetProbData.addConsPartition(self, ConsPart partition)\nadds a constraint partition if it is no duplicate of an existing constraint partition.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_5addConsPartition(PyObject *__pyx_v_self, PyObject *__pyx_v_partition) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addConsPartition (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_partition), __pyx_ptype_8pygcgopt_3gcg_ConsPart, 1, "partition", 0))) __PYX_ERR(6, 133, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_4addConsPartition(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self), ((struct __pyx_obj_8pygcgopt_3gcg_ConsPart *)__pyx_v_partition));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_4addConsPartition(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, struct __pyx_obj_8pygcgopt_3gcg_ConsPart *__pyx_v_partition) {
  gcg::ConsPartition *__pyx_v_cpp_partition;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  gcg::ConsPartition *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addConsPartition", 0);

  /* "src/pygcgopt/detprobdata.pxi":136
 *         """adds a constraint partition if it is no duplicate of an existing constraint partition.
 *         """
 *         cdef ConsPartition * cpp_partition = partition.thisptr             # <<<<<<<<<<<<<<
 *         self.thisptr.addConsPartition(cpp_partition)
 * 
 */
  __pyx_t_1 = __pyx_v_partition->thisptr;
  __pyx_v_cpp_partition = __pyx_t_1;

  /* "src/pygcgopt/detprobdata.pxi":137
 *         """
 *         cdef ConsPartition * cpp_partition = partition.thisptr
 *         self.thisptr.addConsPartition(cpp_partition)             # <<<<<<<<<<<<<<
 * 
 *     def addCandidatesNBlocksNVotes(DetProbData self, int candidate, int nvotes):
 */
  try {
    __pyx_v_self->thisptr->addConsPartition(__pyx_v_cpp_partition);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 137, __pyx_L1_error)
  }

  /* "src/pygcgopt/detprobdata.pxi":133
 *         self.thisptr.translatingtime = cpp_translatingtime
 * 
 *     def addConsPartition(DetProbData self, ConsPart partition):             # <<<<<<<<<<<<<<
 *         """adds a constraint partition if it is no duplicate of an existing constraint partition.
 *         """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.addConsPartition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":139
 *         self.thisptr.addConsPartition(cpp_partition)
 * 
 *     def addCandidatesNBlocksNVotes(DetProbData self, int candidate, int nvotes):             # <<<<<<<<<<<<<<
 *         """adds a candidate for block number and counts how often a candidate is added.
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_7addCandidatesNBlocksNVotes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_11DetProbData_6addCandidatesNBlocksNVotes[] = "DetProbData.addCandidatesNBlocksNVotes(self, int candidate, int nvotes)\nadds a candidate for block number and counts how often a candidate is added.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_7addCandidatesNBlocksNVotes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_candidate;
  int __pyx_v_nvotes;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addCandidatesNBlocksNVotes (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_candidate,&__pyx_n_s_nvotes,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_candidate)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nvotes)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addCandidatesNBlocksNVotes", 1, 2, 2, 1); __PYX_ERR(6, 139, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "addCandidatesNBlocksNVotes") < 0)) __PYX_ERR(6, 139, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_candidate = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_candidate == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 139, __pyx_L3_error)
    __pyx_v_nvotes = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_nvotes == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 139, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addCandidatesNBlocksNVotes", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(6, 139, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.addCandidatesNBlocksNVotes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_6addCandidatesNBlocksNVotes(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self), __pyx_v_candidate, __pyx_v_nvotes);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_6addCandidatesNBlocksNVotes(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, int __pyx_v_candidate, int __pyx_v_nvotes) {
  int __pyx_v_cpp_candidate;
  int __pyx_v_cpp_nvotes;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addCandidatesNBlocksNVotes", 0);

  /* "src/pygcgopt/detprobdata.pxi":142
 *         """adds a candidate for block number and counts how often a candidate is added.
 *         """
 *         cdef int cpp_candidate = candidate             # <<<<<<<<<<<<<<
 *         cdef int cpp_nvotes = nvotes
 *         self.thisptr.addCandidatesNBlocksNVotes(cpp_candidate, cpp_nvotes)
 */
  __pyx_v_cpp_candidate = __pyx_v_candidate;

  /* "src/pygcgopt/detprobdata.pxi":143
 *         """
 *         cdef int cpp_candidate = candidate
 *         cdef int cpp_nvotes = nvotes             # <<<<<<<<<<<<<<
 *         self.thisptr.addCandidatesNBlocksNVotes(cpp_candidate, cpp_nvotes)
 * 
 */
  __pyx_v_cpp_nvotes = __pyx_v_nvotes;

  /* "src/pygcgopt/detprobdata.pxi":144
 *         cdef int cpp_candidate = candidate
 *         cdef int cpp_nvotes = nvotes
 *         self.thisptr.addCandidatesNBlocksNVotes(cpp_candidate, cpp_nvotes)             # <<<<<<<<<<<<<<
 * 
 *     def addPartialdecToAncestor(DetProbData self, PartialDecomposition partialdec):
 */
  try {
    __pyx_v_self->thisptr->addCandidatesNBlocksNVotes(__pyx_v_cpp_candidate, __pyx_v_cpp_nvotes);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 144, __pyx_L1_error)
  }

  /* "src/pygcgopt/detprobdata.pxi":139
 *         self.thisptr.addConsPartition(cpp_partition)
 * 
 *     def addCandidatesNBlocksNVotes(DetProbData self, int candidate, int nvotes):             # <<<<<<<<<<<<<<
 *         """adds a candidate for block number and counts how often a candidate is added.
 *         """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.addCandidatesNBlocksNVotes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":146
 *         self.thisptr.addCandidatesNBlocksNVotes(cpp_candidate, cpp_nvotes)
 * 
 *     def addPartialdecToAncestor(DetProbData self, PartialDecomposition partialdec):             # <<<<<<<<<<<<<<
 *         """adds a partialdec to ancestor partialdecs
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_9addPartialdecToAncestor(PyObject *__pyx_v_self, PyObject *__pyx_v_partialdec); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_11DetProbData_8addPartialdecToAncestor[] = "DetProbData.addPartialdecToAncestor(self, PartialDecomposition partialdec)\nadds a partialdec to ancestor partialdecs\n\n        :param partialdec: partialdec that is added to the ancestor partialdecs.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_9addPartialdecToAncestor(PyObject *__pyx_v_self, PyObject *__pyx_v_partialdec) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addPartialdecToAncestor (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_partialdec), __pyx_ptype_8pygcgopt_3gcg_PartialDecomposition, 1, "partialdec", 0))) __PYX_ERR(6, 146, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_8addPartialdecToAncestor(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self), ((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_partialdec));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_8addPartialdecToAncestor(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_partialdec) {
  gcg::PARTIALDECOMP *__pyx_v_cpp_partialdec;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  gcg::PARTIALDECOMP *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addPartialdecToAncestor", 0);

  /* "src/pygcgopt/detprobdata.pxi":151
 *         :param partialdec: partialdec that is added to the ancestor partialdecs.
 *         """
 *         cdef PARTIALDECOMP * cpp_partialdec = partialdec.thisptr             # <<<<<<<<<<<<<<
 *         self.thisptr.addPartialdecToAncestor(cpp_partialdec)
 * 
 */
  __pyx_t_1 = __pyx_v_partialdec->thisptr;
  __pyx_v_cpp_partialdec = __pyx_t_1;

  /* "src/pygcgopt/detprobdata.pxi":152
 *         """
 *         cdef PARTIALDECOMP * cpp_partialdec = partialdec.thisptr
 *         self.thisptr.addPartialdecToAncestor(cpp_partialdec)             # <<<<<<<<<<<<<<
 * 
 *     def addPartialdecToOpen(DetProbData self, PartialDecomposition partialdec):
 */
  try {
    __pyx_v_self->thisptr->addPartialdecToAncestor(__pyx_v_cpp_partialdec);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 152, __pyx_L1_error)
  }

  /* "src/pygcgopt/detprobdata.pxi":146
 *         self.thisptr.addCandidatesNBlocksNVotes(cpp_candidate, cpp_nvotes)
 * 
 *     def addPartialdecToAncestor(DetProbData self, PartialDecomposition partialdec):             # <<<<<<<<<<<<<<
 *         """adds a partialdec to ancestor partialdecs
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.addPartialdecToAncestor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":154
 *         self.thisptr.addPartialdecToAncestor(cpp_partialdec)
 * 
 *     def addPartialdecToOpen(DetProbData self, PartialDecomposition partialdec):             # <<<<<<<<<<<<<<
 *         """adds a partialdec to current partialdecs (data structure for partialdecs that are goin to processed in the propagation rounds)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_11addPartialdecToOpen(PyObject *__pyx_v_self, PyObject *__pyx_v_partialdec); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_11DetProbData_10addPartialdecToOpen[] = "DetProbData.addPartialdecToOpen(self, PartialDecomposition partialdec)\nadds a partialdec to current partialdecs (data structure for partialdecs that are goin to processed in the propagation rounds)\n\n        :param partialdec: pointer of partialdec to be added\n        :return: True if the partialdecs was successfully added (i.e. it is no duplicate of a known partialdec)\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_11addPartialdecToOpen(PyObject *__pyx_v_self, PyObject *__pyx_v_partialdec) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addPartialdecToOpen (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_partialdec), __pyx_ptype_8pygcgopt_3gcg_PartialDecomposition, 1, "partialdec", 0))) __PYX_ERR(6, 154, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_10addPartialdecToOpen(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self), ((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_partialdec));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_10addPartialdecToOpen(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_partialdec) {
  gcg::PARTIALDECOMP *__pyx_v_cpp_partialdec;
  bool __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  gcg::PARTIALDECOMP *__pyx_t_1;
  bool __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addPartialdecToOpen", 0);

  /* "src/pygcgopt/detprobdata.pxi":160
 *         :return: True if the partialdecs was successfully added (i.e. it is no duplicate of a known partialdec)
 *         """
 *         cdef PARTIALDECOMP * cpp_partialdec = partialdec.thisptr             # <<<<<<<<<<<<<<
 *         cdef bool result = self.thisptr.addPartialdecToOpen(cpp_partialdec)
 *         return result
 */
  __pyx_t_1 = __pyx_v_partialdec->thisptr;
  __pyx_v_cpp_partialdec = __pyx_t_1;

  /* "src/pygcgopt/detprobdata.pxi":161
 *         """
 *         cdef PARTIALDECOMP * cpp_partialdec = partialdec.thisptr
 *         cdef bool result = self.thisptr.addPartialdecToOpen(cpp_partialdec)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_2 = __pyx_v_self->thisptr->addPartialdecToOpen(__pyx_v_cpp_partialdec);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 161, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_2;

  /* "src/pygcgopt/detprobdata.pxi":162
 *         cdef PARTIALDECOMP * cpp_partialdec = partialdec.thisptr
 *         cdef bool result = self.thisptr.addPartialdecToOpen(cpp_partialdec)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def addPartialdecToFinished(DetProbData self, PartialDecomposition partialdec):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_result); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/detprobdata.pxi":154
 *         self.thisptr.addPartialdecToAncestor(cpp_partialdec)
 * 
 *     def addPartialdecToOpen(DetProbData self, PartialDecomposition partialdec):             # <<<<<<<<<<<<<<
 *         """adds a partialdec to current partialdecs (data structure for partialdecs that are goin to processed in the propagation rounds)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.addPartialdecToOpen", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":164
 *         return result
 * 
 *     def addPartialdecToFinished(DetProbData self, PartialDecomposition partialdec):             # <<<<<<<<<<<<<<
 *         """adds a partialdec to finished partialdecs
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_13addPartialdecToFinished(PyObject *__pyx_v_self, PyObject *__pyx_v_partialdec); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_11DetProbData_12addPartialdecToFinished[] = "DetProbData.addPartialdecToFinished(self, PartialDecomposition partialdec)\nadds a partialdec to finished partialdecs\n\n        :param partialdec: pointer of partialdec that is going to be added to the finished partialdecs (data structure to carry finished decompositions)\n        :return: True if the partialdecs was successfully added (i.e. it is no duplicate of a known partialdec)\n\n        .. seealso:: * :meth:`addPartialdecToFinishedUnchecked()`\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_13addPartialdecToFinished(PyObject *__pyx_v_self, PyObject *__pyx_v_partialdec) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addPartialdecToFinished (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_partialdec), __pyx_ptype_8pygcgopt_3gcg_PartialDecomposition, 1, "partialdec", 0))) __PYX_ERR(6, 164, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_12addPartialdecToFinished(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self), ((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_partialdec));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_12addPartialdecToFinished(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_partialdec) {
  gcg::PARTIALDECOMP *__pyx_v_cpp_partialdec;
  bool __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  gcg::PARTIALDECOMP *__pyx_t_1;
  bool __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addPartialdecToFinished", 0);

  /* "src/pygcgopt/detprobdata.pxi":172
 *         .. seealso:: * :meth:`addPartialdecToFinishedUnchecked()`
 *         """
 *         cdef PARTIALDECOMP * cpp_partialdec = partialdec.thisptr             # <<<<<<<<<<<<<<
 *         cdef bool result = self.thisptr.addPartialdecToFinished(cpp_partialdec)
 *         return result
 */
  __pyx_t_1 = __pyx_v_partialdec->thisptr;
  __pyx_v_cpp_partialdec = __pyx_t_1;

  /* "src/pygcgopt/detprobdata.pxi":173
 *         """
 *         cdef PARTIALDECOMP * cpp_partialdec = partialdec.thisptr
 *         cdef bool result = self.thisptr.addPartialdecToFinished(cpp_partialdec)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_2 = __pyx_v_self->thisptr->addPartialdecToFinished(__pyx_v_cpp_partialdec);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 173, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_2;

  /* "src/pygcgopt/detprobdata.pxi":174
 *         cdef PARTIALDECOMP * cpp_partialdec = partialdec.thisptr
 *         cdef bool result = self.thisptr.addPartialdecToFinished(cpp_partialdec)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def addPartialdecToFinishedUnchecked(DetProbData self, PartialDecomposition partialdec):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_result); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/detprobdata.pxi":164
 *         return result
 * 
 *     def addPartialdecToFinished(DetProbData self, PartialDecomposition partialdec):             # <<<<<<<<<<<<<<
 *         """adds a partialdec to finished partialdecs
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.addPartialdecToFinished", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":176
 *         return result
 * 
 *     def addPartialdecToFinishedUnchecked(DetProbData self, PartialDecomposition partialdec):             # <<<<<<<<<<<<<<
 *         """adds a partialdec to finished partialdecs without checking for duplicates, dev has to check this on his own
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_15addPartialdecToFinishedUnchecked(PyObject *__pyx_v_self, PyObject *__pyx_v_partialdec); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_11DetProbData_14addPartialdecToFinishedUnchecked[] = "DetProbData.addPartialdecToFinishedUnchecked(self, PartialDecomposition partialdec)\nadds a partialdec to finished partialdecs without checking for duplicates, dev has to check this on his own\n\n        :param partialdec: pointer of partialdec that is going to be added unchecked to the finished partialdecs (data structure to carry finished decompositions)\n\n        .. seealso:: * :meth:`addPartialdecToFinished()`\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_15addPartialdecToFinishedUnchecked(PyObject *__pyx_v_self, PyObject *__pyx_v_partialdec) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addPartialdecToFinishedUnchecked (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_partialdec), __pyx_ptype_8pygcgopt_3gcg_PartialDecomposition, 1, "partialdec", 0))) __PYX_ERR(6, 176, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_14addPartialdecToFinishedUnchecked(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self), ((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_partialdec));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_14addPartialdecToFinishedUnchecked(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_partialdec) {
  gcg::PARTIALDECOMP *__pyx_v_cpp_partialdec;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  gcg::PARTIALDECOMP *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addPartialdecToFinishedUnchecked", 0);

  /* "src/pygcgopt/detprobdata.pxi":183
 *         .. seealso:: * :meth:`addPartialdecToFinished()`
 *         """
 *         cdef PARTIALDECOMP * cpp_partialdec = partialdec.thisptr             # <<<<<<<<<<<<<<
 *         self.thisptr.addPartialdecToFinishedUnchecked(cpp_partialdec)
 * 
 */
  __pyx_t_1 = __pyx_v_partialdec->thisptr;
  __pyx_v_cpp_partialdec = __pyx_t_1;

  /* "src/pygcgopt/detprobdata.pxi":184
 *         """
 *         cdef PARTIALDECOMP * cpp_partialdec = partialdec.thisptr
 *         self.thisptr.addPartialdecToFinishedUnchecked(cpp_partialdec)             # <<<<<<<<<<<<<<
 * 
 *     def addVarPartition(DetProbData self, VarPart partition):
 */
  try {
    __pyx_v_self->thisptr->addPartialdecToFinishedUnchecked(__pyx_v_cpp_partialdec);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 184, __pyx_L1_error)
  }

  /* "src/pygcgopt/detprobdata.pxi":176
 *         return result
 * 
 *     def addPartialdecToFinishedUnchecked(DetProbData self, PartialDecomposition partialdec):             # <<<<<<<<<<<<<<
 *         """adds a partialdec to finished partialdecs without checking for duplicates, dev has to check this on his own
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.addPartialdecToFinishedUnchecked", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":186
 *         self.thisptr.addPartialdecToFinishedUnchecked(cpp_partialdec)
 * 
 *     def addVarPartition(DetProbData self, VarPart partition):             # <<<<<<<<<<<<<<
 *         """adds a variable partition if it is no duplicate of an existing variable partition
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_17addVarPartition(PyObject *__pyx_v_self, PyObject *__pyx_v_partition); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_11DetProbData_16addVarPartition[] = "DetProbData.addVarPartition(self, VarPart partition)\nadds a variable partition if it is no duplicate of an existing variable partition\n\n        :param partition: varpartition to be added.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_17addVarPartition(PyObject *__pyx_v_self, PyObject *__pyx_v_partition) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addVarPartition (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_partition), __pyx_ptype_8pygcgopt_3gcg_VarPart, 1, "partition", 0))) __PYX_ERR(6, 186, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_16addVarPartition(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self), ((struct __pyx_obj_8pygcgopt_3gcg_VarPart *)__pyx_v_partition));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_16addVarPartition(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, struct __pyx_obj_8pygcgopt_3gcg_VarPart *__pyx_v_partition) {
  gcg::VarPartition *__pyx_v_cpp_partition;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  gcg::VarPartition *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addVarPartition", 0);

  /* "src/pygcgopt/detprobdata.pxi":191
 *         :param partition: varpartition to be added.
 *         """
 *         cdef VarPartition * cpp_partition = partition.thisptr             # <<<<<<<<<<<<<<
 *         self.thisptr.addVarPartition(cpp_partition)
 * 
 */
  __pyx_t_1 = __pyx_v_partition->thisptr;
  __pyx_v_cpp_partition = __pyx_t_1;

  /* "src/pygcgopt/detprobdata.pxi":192
 *         """
 *         cdef VarPartition * cpp_partition = partition.thisptr
 *         self.thisptr.addVarPartition(cpp_partition)             # <<<<<<<<<<<<<<
 * 
 *     def clearAncestorPartialdecs(DetProbData self):
 */
  try {
    __pyx_v_self->thisptr->addVarPartition(__pyx_v_cpp_partition);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 192, __pyx_L1_error)
  }

  /* "src/pygcgopt/detprobdata.pxi":186
 *         self.thisptr.addPartialdecToFinishedUnchecked(cpp_partialdec)
 * 
 *     def addVarPartition(DetProbData self, VarPart partition):             # <<<<<<<<<<<<<<
 *         """adds a variable partition if it is no duplicate of an existing variable partition
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.addVarPartition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":194
 *         self.thisptr.addVarPartition(cpp_partition)
 * 
 *     def clearAncestorPartialdecs(DetProbData self):             # <<<<<<<<<<<<<<
 *         """clears ancestor partialdec data structure,
 *         .. note:: does not free the partialdecs themselves.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_19clearAncestorPartialdecs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_11DetProbData_18clearAncestorPartialdecs[] = "DetProbData.clearAncestorPartialdecs(self)\nclears ancestor partialdec data structure,\n        .. note:: does not free the partialdecs themselves.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_19clearAncestorPartialdecs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clearAncestorPartialdecs (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_18clearAncestorPartialdecs(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_18clearAncestorPartialdecs(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clearAncestorPartialdecs", 0);

  /* "src/pygcgopt/detprobdata.pxi":198
 *         .. note:: does not free the partialdecs themselves.
 *         """
 *         self.thisptr.clearAncestorPartialdecs()             # <<<<<<<<<<<<<<
 * 
 *     def clearCurrentPartialdecs(DetProbData self):
 */
  try {
    __pyx_v_self->thisptr->clearAncestorPartialdecs();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 198, __pyx_L1_error)
  }

  /* "src/pygcgopt/detprobdata.pxi":194
 *         self.thisptr.addVarPartition(cpp_partition)
 * 
 *     def clearAncestorPartialdecs(DetProbData self):             # <<<<<<<<<<<<<<
 *         """clears ancestor partialdec data structure,
 *         .. note:: does not free the partialdecs themselves.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.clearAncestorPartialdecs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":200
 *         self.thisptr.clearAncestorPartialdecs()
 * 
 *     def clearCurrentPartialdecs(DetProbData self):             # <<<<<<<<<<<<<<
 *         """clears current partialdec data structure
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_21clearCurrentPartialdecs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_11DetProbData_20clearCurrentPartialdecs[] = "DetProbData.clearCurrentPartialdecs(self)\nclears current partialdec data structure\n\n        .. note:: does not free the partialdecs themselves.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_21clearCurrentPartialdecs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clearCurrentPartialdecs (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_20clearCurrentPartialdecs(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_20clearCurrentPartialdecs(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clearCurrentPartialdecs", 0);

  /* "src/pygcgopt/detprobdata.pxi":205
 *         .. note:: does not free the partialdecs themselves.
 *         """
 *         self.thisptr.clearCurrentPartialdecs()             # <<<<<<<<<<<<<<
 * 
 *     def clearFinishedPartialdecs(DetProbData self):
 */
  try {
    __pyx_v_self->thisptr->clearCurrentPartialdecs();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 205, __pyx_L1_error)
  }

  /* "src/pygcgopt/detprobdata.pxi":200
 *         self.thisptr.clearAncestorPartialdecs()
 * 
 *     def clearCurrentPartialdecs(DetProbData self):             # <<<<<<<<<<<<<<
 *         """clears current partialdec data structure
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.clearCurrentPartialdecs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":207
 *         self.thisptr.clearCurrentPartialdecs()
 * 
 *     def clearFinishedPartialdecs(DetProbData self):             # <<<<<<<<<<<<<<
 *         """clears finished partialdec data structure
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_23clearFinishedPartialdecs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_11DetProbData_22clearFinishedPartialdecs[] = "DetProbData.clearFinishedPartialdecs(self)\nclears finished partialdec data structure\n\n        .. note:: does not free the partialdecs themselves.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_23clearFinishedPartialdecs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clearFinishedPartialdecs (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_22clearFinishedPartialdecs(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_22clearFinishedPartialdecs(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clearFinishedPartialdecs", 0);

  /* "src/pygcgopt/detprobdata.pxi":212
 *         .. note:: does not free the partialdecs themselves.
 *         """
 *         self.thisptr.clearFinishedPartialdecs()             # <<<<<<<<<<<<<<
 * 
 *     def createConssAdjacency(DetProbData self):
 */
  try {
    __pyx_v_self->thisptr->clearFinishedPartialdecs();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 212, __pyx_L1_error)
  }

  /* "src/pygcgopt/detprobdata.pxi":207
 *         self.thisptr.clearCurrentPartialdecs()
 * 
 *     def clearFinishedPartialdecs(DetProbData self):             # <<<<<<<<<<<<<<
 *         """clears finished partialdec data structure
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.clearFinishedPartialdecs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":214
 *         self.thisptr.clearFinishedPartialdecs()
 * 
 *     def createConssAdjacency(DetProbData self):             # <<<<<<<<<<<<<<
 *         """create the constraint adjacency datastructure that is used (if created) for some methods to faster access the constarints that have variables in common.
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_25createConssAdjacency(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_11DetProbData_24createConssAdjacency[] = "DetProbData.createConssAdjacency(self)\ncreate the constraint adjacency datastructure that is used (if created) for some methods to faster access the constarints that have variables in common.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_25createConssAdjacency(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("createConssAdjacency (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_24createConssAdjacency(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_24createConssAdjacency(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("createConssAdjacency", 0);

  /* "src/pygcgopt/detprobdata.pxi":217
 *         """create the constraint adjacency datastructure that is used (if created) for some methods to faster access the constarints that have variables in common.
 *         """
 *         self.thisptr.createConssAdjacency()             # <<<<<<<<<<<<<<
 * 
 *     def freeTemporaryData(DetProbData self):
 */
  try {
    __pyx_v_self->thisptr->createConssAdjacency();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 217, __pyx_L1_error)
  }

  /* "src/pygcgopt/detprobdata.pxi":214
 *         self.thisptr.clearFinishedPartialdecs()
 * 
 *     def createConssAdjacency(DetProbData self):             # <<<<<<<<<<<<<<
 *         """create the constraint adjacency datastructure that is used (if created) for some methods to faster access the constarints that have variables in common.
 *         """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.createConssAdjacency", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":219
 *         self.thisptr.createConssAdjacency()
 * 
 *     def freeTemporaryData(DetProbData self):             # <<<<<<<<<<<<<<
 *         """frees temporary data that is only needed during the detection process.
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_27freeTemporaryData(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_11DetProbData_26freeTemporaryData[] = "DetProbData.freeTemporaryData(self)\nfrees temporary data that is only needed during the detection process.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_27freeTemporaryData(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("freeTemporaryData (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_26freeTemporaryData(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_26freeTemporaryData(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("freeTemporaryData", 0);

  /* "src/pygcgopt/detprobdata.pxi":222
 *         """frees temporary data that is only needed during the detection process.
 *         """
 *         self.thisptr.freeTemporaryData()             # <<<<<<<<<<<<<<
 * 
 *     def getAncestorPartialdec(DetProbData self, int partialdecindex):
 */
  try {
    __pyx_v_self->thisptr->freeTemporaryData();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 222, __pyx_L1_error)
  }

  /* "src/pygcgopt/detprobdata.pxi":219
 *         self.thisptr.createConssAdjacency()
 * 
 *     def freeTemporaryData(DetProbData self):             # <<<<<<<<<<<<<<
 *         """frees temporary data that is only needed during the detection process.
 *         """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.freeTemporaryData", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":224
 *         self.thisptr.freeTemporaryData()
 * 
 *     def getAncestorPartialdec(DetProbData self, int partialdecindex):             # <<<<<<<<<<<<<<
 *         """returns a partialdec from ancestor partialdec data structure with given index
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_29getAncestorPartialdec(PyObject *__pyx_v_self, PyObject *__pyx_arg_partialdecindex); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_11DetProbData_28getAncestorPartialdec[] = "DetProbData.getAncestorPartialdec(self, int partialdecindex)\nreturns a partialdec from ancestor partialdec data structure with given index\n\n        :return: partialdec from ancestor partialdec data structure.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_29getAncestorPartialdec(PyObject *__pyx_v_self, PyObject *__pyx_arg_partialdecindex) {
  int __pyx_v_partialdecindex;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getAncestorPartialdec (wrapper)", 0);
  assert(__pyx_arg_partialdecindex); {
    __pyx_v_partialdecindex = __Pyx_PyInt_As_int(__pyx_arg_partialdecindex); if (unlikely((__pyx_v_partialdecindex == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 224, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.getAncestorPartialdec", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_28getAncestorPartialdec(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self), ((int)__pyx_v_partialdecindex));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_28getAncestorPartialdec(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, int __pyx_v_partialdecindex) {
  int __pyx_v_cpp_partialdecindex;
  gcg::PARTIALDECOMP *__pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  gcg::PARTIALDECOMP *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getAncestorPartialdec", 0);

  /* "src/pygcgopt/detprobdata.pxi":229
 *         :return: partialdec from ancestor partialdec data structure.
 *         """
 *         cdef int cpp_partialdecindex = partialdecindex             # <<<<<<<<<<<<<<
 *         cdef PARTIALDECOMP * result = self.thisptr.getAncestorPartialdec(cpp_partialdecindex)
 *         return PartialDecomposition.create(result)
 */
  __pyx_v_cpp_partialdecindex = __pyx_v_partialdecindex;

  /* "src/pygcgopt/detprobdata.pxi":230
 *         """
 *         cdef int cpp_partialdecindex = partialdecindex
 *         cdef PARTIALDECOMP * result = self.thisptr.getAncestorPartialdec(cpp_partialdecindex)             # <<<<<<<<<<<<<<
 *         return PartialDecomposition.create(result)
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getAncestorPartialdec(__pyx_v_cpp_partialdecindex);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 230, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/detprobdata.pxi":231
 *         cdef int cpp_partialdecindex = partialdecindex
 *         cdef PARTIALDECOMP * result = self.thisptr.getAncestorPartialdec(cpp_partialdecindex)
 *         return PartialDecomposition.create(result)             # <<<<<<<<<<<<<<
 * 
 *     def getConsPartition(DetProbData self, int partitionIndex):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_8pygcgopt_3gcg_20PartialDecomposition_create(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/detprobdata.pxi":224
 *         self.thisptr.freeTemporaryData()
 * 
 *     def getAncestorPartialdec(DetProbData self, int partialdecindex):             # <<<<<<<<<<<<<<
 *         """returns a partialdec from ancestor partialdec data structure with given index
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.getAncestorPartialdec", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":233
 *         return PartialDecomposition.create(result)
 * 
 *     def getConsPartition(DetProbData self, int partitionIndex):             # <<<<<<<<<<<<<<
 *         """returns pointer to a constraint partition
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_31getConsPartition(PyObject *__pyx_v_self, PyObject *__pyx_arg_partitionIndex); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_11DetProbData_30getConsPartition[] = "DetProbData.getConsPartition(self, int partitionIndex)\nreturns pointer to a constraint partition\n\n        :return: pointer to a cosntraint partition with the given index.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_31getConsPartition(PyObject *__pyx_v_self, PyObject *__pyx_arg_partitionIndex) {
  int __pyx_v_partitionIndex;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getConsPartition (wrapper)", 0);
  assert(__pyx_arg_partitionIndex); {
    __pyx_v_partitionIndex = __Pyx_PyInt_As_int(__pyx_arg_partitionIndex); if (unlikely((__pyx_v_partitionIndex == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 233, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.getConsPartition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_30getConsPartition(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self), ((int)__pyx_v_partitionIndex));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_30getConsPartition(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, int __pyx_v_partitionIndex) {
  int __pyx_v_cpp_partitionIndex;
  gcg::ConsPartition *__pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  gcg::ConsPartition *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getConsPartition", 0);

  /* "src/pygcgopt/detprobdata.pxi":238
 *         :return: pointer to a cosntraint partition with the given index.
 *         """
 *         cdef int cpp_partitionIndex = partitionIndex             # <<<<<<<<<<<<<<
 *         cdef ConsPartition * result = self.thisptr.getConsPartition(cpp_partitionIndex)
 *         return ConsPart.create(result, <DetProbData>weakref.proxy(self))
 */
  __pyx_v_cpp_partitionIndex = __pyx_v_partitionIndex;

  /* "src/pygcgopt/detprobdata.pxi":239
 *         """
 *         cdef int cpp_partitionIndex = partitionIndex
 *         cdef ConsPartition * result = self.thisptr.getConsPartition(cpp_partitionIndex)             # <<<<<<<<<<<<<<
 *         return ConsPart.create(result, <DetProbData>weakref.proxy(self))
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getConsPartition(__pyx_v_cpp_partitionIndex);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 239, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/detprobdata.pxi":240
 *         cdef int cpp_partitionIndex = partitionIndex
 *         cdef ConsPartition * result = self.thisptr.getConsPartition(cpp_partitionIndex)
 *         return ConsPart.create(result, <DetProbData>weakref.proxy(self))             # <<<<<<<<<<<<<<
 * 
 *     def getCons(DetProbData self, int consIndex):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_weakref); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_proxy); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, ((PyObject *)__pyx_v_self)) : __Pyx_PyObject_CallOneArg(__pyx_t_4, ((PyObject *)__pyx_v_self));
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __pyx_f_8pygcgopt_3gcg_8ConsPart_create(__pyx_v_result, ((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_t_2)); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/detprobdata.pxi":233
 *         return PartialDecomposition.create(result)
 * 
 *     def getConsPartition(DetProbData self, int partitionIndex):             # <<<<<<<<<<<<<<
 *         """returns pointer to a constraint partition
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.getConsPartition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":242
 *         return ConsPart.create(result, <DetProbData>weakref.proxy(self))
 * 
 *     def getCons(DetProbData self, int consIndex):             # <<<<<<<<<<<<<<
 *         """returns the SCIP constraint related to a constraint index
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_33getCons(PyObject *__pyx_v_self, PyObject *__pyx_arg_consIndex); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_11DetProbData_32getCons[] = "DetProbData.getCons(self, int consIndex)\nreturns the SCIP constraint related to a constraint index\n\n        :return: the SCIP constraint related to a constraint index.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_33getCons(PyObject *__pyx_v_self, PyObject *__pyx_arg_consIndex) {
  int __pyx_v_consIndex;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getCons (wrapper)", 0);
  assert(__pyx_arg_consIndex); {
    __pyx_v_consIndex = __Pyx_PyInt_As_int(__pyx_arg_consIndex); if (unlikely((__pyx_v_consIndex == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 242, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.getCons", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_32getCons(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self), ((int)__pyx_v_consIndex));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_32getCons(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, int __pyx_v_consIndex) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  SCIP_CONS *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getCons", 0);

  /* "src/pygcgopt/detprobdata.pxi":247
 *         :return: the SCIP constraint related to a constraint index.
 *         """
 *         return Constraint.create(self.thisptr.getCons(consIndex))             # <<<<<<<<<<<<<<
 * 
 *     def getConssForCons(DetProbData self, int consIndex):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getCons(__pyx_v_consIndex);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 247, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_vtabptr_9pyscipopt_4scip_Constraint->create(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/detprobdata.pxi":242
 *         return ConsPart.create(result, <DetProbData>weakref.proxy(self))
 * 
 *     def getCons(DetProbData self, int consIndex):             # <<<<<<<<<<<<<<
 *         """returns the SCIP constraint related to a constraint index
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.getCons", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":249
 *         return Constraint.create(self.thisptr.getCons(consIndex))
 * 
 *     def getConssForCons(DetProbData self, int consIndex):             # <<<<<<<<<<<<<<
 *         """return array of constraint indices that have a common variable with the given constraint
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_35getConssForCons(PyObject *__pyx_v_self, PyObject *__pyx_arg_consIndex); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_11DetProbData_34getConssForCons[] = "DetProbData.getConssForCons(self, int consIndex)\nreturn array of constraint indices that have a common variable with the given constraint\n\n        :return: return vector of constraint indices that have a common variable with the given constraint\n\n        .. note:: constraint adjacency data structure has to initilized.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_35getConssForCons(PyObject *__pyx_v_self, PyObject *__pyx_arg_consIndex) {
  int __pyx_v_consIndex;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getConssForCons (wrapper)", 0);
  assert(__pyx_arg_consIndex); {
    __pyx_v_consIndex = __Pyx_PyInt_As_int(__pyx_arg_consIndex); if (unlikely((__pyx_v_consIndex == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 249, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.getConssForCons", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_34getConssForCons(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self), ((int)__pyx_v_consIndex));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_34getConssForCons(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, int __pyx_v_consIndex) {
  int __pyx_v_cpp_consIndex;
  std::vector<int>  __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<int>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getConssForCons", 0);

  /* "src/pygcgopt/detprobdata.pxi":256
 *         .. note:: constraint adjacency data structure has to initilized.
 *         """
 *         cdef int cpp_consIndex = consIndex             # <<<<<<<<<<<<<<
 *         cdef vector[int] result = self.thisptr.getConssForCons(cpp_consIndex)
 *         return result
 */
  __pyx_v_cpp_consIndex = __pyx_v_consIndex;

  /* "src/pygcgopt/detprobdata.pxi":257
 *         """
 *         cdef int cpp_consIndex = consIndex
 *         cdef vector[int] result = self.thisptr.getConssForCons(cpp_consIndex)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getConssForCons(__pyx_v_cpp_consIndex);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 257, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/detprobdata.pxi":258
 *         cdef int cpp_consIndex = consIndex
 *         cdef vector[int] result = self.thisptr.getConssForCons(cpp_consIndex)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getConssForVar(DetProbData self, int varIndex):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_vector_to_py_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/detprobdata.pxi":249
 *         return Constraint.create(self.thisptr.getCons(consIndex))
 * 
 *     def getConssForCons(DetProbData self, int consIndex):             # <<<<<<<<<<<<<<
 *         """return array of constraint indices that have a common variable with the given constraint
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.getConssForCons", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":260
 *         return result
 * 
 *     def getConssForVar(DetProbData self, int varIndex):             # <<<<<<<<<<<<<<
 *         """returns the constraint indices of the coefficient matrix for a variable
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_37getConssForVar(PyObject *__pyx_v_self, PyObject *__pyx_arg_varIndex); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_11DetProbData_36getConssForVar[] = "DetProbData.getConssForVar(self, int varIndex)\nreturns the constraint indices of the coefficient matrix for a variable\n\n        :return: vector of constraint indices that have a nonzero entry with this variable.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_37getConssForVar(PyObject *__pyx_v_self, PyObject *__pyx_arg_varIndex) {
  int __pyx_v_varIndex;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getConssForVar (wrapper)", 0);
  assert(__pyx_arg_varIndex); {
    __pyx_v_varIndex = __Pyx_PyInt_As_int(__pyx_arg_varIndex); if (unlikely((__pyx_v_varIndex == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 260, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.getConssForVar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_36getConssForVar(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self), ((int)__pyx_v_varIndex));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_36getConssForVar(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, int __pyx_v_varIndex) {
  int __pyx_v_cpp_varIndex;
  std::vector<int>  __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<int>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getConssForVar", 0);

  /* "src/pygcgopt/detprobdata.pxi":265
 *         :return: vector of constraint indices that have a nonzero entry with this variable.
 *         """
 *         cdef int cpp_varIndex = varIndex             # <<<<<<<<<<<<<<
 *         cdef vector[int] result = self.thisptr.getConssForVar(cpp_varIndex)
 *         return result
 */
  __pyx_v_cpp_varIndex = __pyx_v_varIndex;

  /* "src/pygcgopt/detprobdata.pxi":266
 *         """
 *         cdef int cpp_varIndex = varIndex
 *         cdef vector[int] result = self.thisptr.getConssForVar(cpp_varIndex)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getConssForVar(__pyx_v_cpp_varIndex);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 266, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/detprobdata.pxi":267
 *         cdef int cpp_varIndex = varIndex
 *         cdef vector[int] result = self.thisptr.getConssForVar(cpp_varIndex)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getOpenPartialdecs(DetProbData self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_vector_to_py_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/detprobdata.pxi":260
 *         return result
 * 
 *     def getConssForVar(DetProbData self, int varIndex):             # <<<<<<<<<<<<<<
 *         """returns the constraint indices of the coefficient matrix for a variable
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.getConssForVar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":269
 *         return result
 * 
 *     def getOpenPartialdecs(DetProbData self):             # <<<<<<<<<<<<<<
 *         """determines all partialdecs from current (open) partialdec data structure
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_39getOpenPartialdecs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_11DetProbData_38getOpenPartialdecs[] = "DetProbData.getOpenPartialdecs(self)\ndetermines all partialdecs from current (open) partialdec data structure\n\n        :return:  all partialdecs in current (open) partialdec data structure\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_39getOpenPartialdecs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getOpenPartialdecs (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_38getOpenPartialdecs(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_38getOpenPartialdecs(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self) {
  std::vector<gcg::PARTIALDECOMP *>  __pyx_v_result;
  gcg::PARTIALDECOMP *__pyx_9genexpr33__pyx_v_r;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<gcg::PARTIALDECOMP *>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  std::vector<gcg::PARTIALDECOMP *> ::iterator __pyx_t_3;
  gcg::PARTIALDECOMP *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getOpenPartialdecs", 0);

  /* "src/pygcgopt/detprobdata.pxi":274
 *         :return:  all partialdecs in current (open) partialdec data structure
 *         """
 *         cdef vector[PARTIALDECOMP *] result = self.thisptr.getOpenPartialdecs()             # <<<<<<<<<<<<<<
 *         return [PartialDecomposition.create(r) for r in result]
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getOpenPartialdecs();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 274, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/detprobdata.pxi":275
 *         """
 *         cdef vector[PARTIALDECOMP *] result = self.thisptr.getOpenPartialdecs()
 *         return [PartialDecomposition.create(r) for r in result]             # <<<<<<<<<<<<<<
 * 
 *     def getFinishedPartialdec(DetProbData self, int partialdecindex):
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 275, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_v_result.begin();
    for (;;) {
      if (!(__pyx_t_3 != __pyx_v_result.end())) break;
      __pyx_t_4 = *__pyx_t_3;
      ++__pyx_t_3;
      __pyx_9genexpr33__pyx_v_r = __pyx_t_4;
      __pyx_t_5 = __pyx_f_8pygcgopt_3gcg_20PartialDecomposition_create(__pyx_9genexpr33__pyx_v_r); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 275, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_5))) __PYX_ERR(6, 275, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  } /* exit inner scope */
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/detprobdata.pxi":269
 *         return result
 * 
 *     def getOpenPartialdecs(DetProbData self):             # <<<<<<<<<<<<<<
 *         """determines all partialdecs from current (open) partialdec data structure
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.getOpenPartialdecs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":277
 *         return [PartialDecomposition.create(r) for r in result]
 * 
 *     def getFinishedPartialdec(DetProbData self, int partialdecindex):             # <<<<<<<<<<<<<<
 *         """returns a partialdec from finished partialdec data structure
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_41getFinishedPartialdec(PyObject *__pyx_v_self, PyObject *__pyx_arg_partialdecindex); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_11DetProbData_40getFinishedPartialdec[] = "DetProbData.getFinishedPartialdec(self, int partialdecindex)\nreturns a partialdec from finished partialdec data structure\n\n        :return:  partialdec from finished partialdec data structure.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_41getFinishedPartialdec(PyObject *__pyx_v_self, PyObject *__pyx_arg_partialdecindex) {
  int __pyx_v_partialdecindex;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getFinishedPartialdec (wrapper)", 0);
  assert(__pyx_arg_partialdecindex); {
    __pyx_v_partialdecindex = __Pyx_PyInt_As_int(__pyx_arg_partialdecindex); if (unlikely((__pyx_v_partialdecindex == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 277, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.getFinishedPartialdec", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_40getFinishedPartialdec(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self), ((int)__pyx_v_partialdecindex));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_40getFinishedPartialdec(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, int __pyx_v_partialdecindex) {
  int __pyx_v_cpp_partialdecindex;
  gcg::PARTIALDECOMP *__pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  gcg::PARTIALDECOMP *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getFinishedPartialdec", 0);

  /* "src/pygcgopt/detprobdata.pxi":282
 *         :return:  partialdec from finished partialdec data structure.
 *         """
 *         cdef int cpp_partialdecindex = partialdecindex             # <<<<<<<<<<<<<<
 *         cdef PARTIALDECOMP * result = self.thisptr.getFinishedPartialdec(cpp_partialdecindex)
 *         return PartialDecomposition.create(result)
 */
  __pyx_v_cpp_partialdecindex = __pyx_v_partialdecindex;

  /* "src/pygcgopt/detprobdata.pxi":283
 *         """
 *         cdef int cpp_partialdecindex = partialdecindex
 *         cdef PARTIALDECOMP * result = self.thisptr.getFinishedPartialdec(cpp_partialdecindex)             # <<<<<<<<<<<<<<
 *         return PartialDecomposition.create(result)
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getFinishedPartialdec(__pyx_v_cpp_partialdecindex);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 283, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/detprobdata.pxi":284
 *         cdef int cpp_partialdecindex = partialdecindex
 *         cdef PARTIALDECOMP * result = self.thisptr.getFinishedPartialdec(cpp_partialdecindex)
 *         return PartialDecomposition.create(result)             # <<<<<<<<<<<<<<
 * 
 *     def getFinishedPartialdecs(DetProbData self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_8pygcgopt_3gcg_20PartialDecomposition_create(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/detprobdata.pxi":277
 *         return [PartialDecomposition.create(r) for r in result]
 * 
 *     def getFinishedPartialdec(DetProbData self, int partialdecindex):             # <<<<<<<<<<<<<<
 *         """returns a partialdec from finished partialdec data structure
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.getFinishedPartialdec", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":286
 *         return PartialDecomposition.create(result)
 * 
 *     def getFinishedPartialdecs(DetProbData self):             # <<<<<<<<<<<<<<
 *         """gets all finished partialdecs
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_43getFinishedPartialdecs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_11DetProbData_42getFinishedPartialdecs[] = "DetProbData.getFinishedPartialdecs(self)\ngets all finished partialdecs\n\n        :return: all finished partialdecs.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_43getFinishedPartialdecs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getFinishedPartialdecs (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_42getFinishedPartialdecs(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_42getFinishedPartialdecs(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self) {
  std::vector<gcg::PARTIALDECOMP *>  __pyx_v_result;
  gcg::PARTIALDECOMP *__pyx_9genexpr34__pyx_v_r;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<gcg::PARTIALDECOMP *>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  std::vector<gcg::PARTIALDECOMP *> ::iterator __pyx_t_3;
  gcg::PARTIALDECOMP *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getFinishedPartialdecs", 0);

  /* "src/pygcgopt/detprobdata.pxi":291
 *         :return: all finished partialdecs.
 *         """
 *         cdef vector[PARTIALDECOMP *] result = self.thisptr.getFinishedPartialdecs()             # <<<<<<<<<<<<<<
 *         return [PartialDecomposition.create(r) for r in result]
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getFinishedPartialdecs();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 291, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/detprobdata.pxi":292
 *         """
 *         cdef vector[PARTIALDECOMP *] result = self.thisptr.getFinishedPartialdecs()
 *         return [PartialDecomposition.create(r) for r in result]             # <<<<<<<<<<<<<<
 * 
 *     def getIndexForCons(DetProbData self, Constraint cons):
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 292, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_v_result.begin();
    for (;;) {
      if (!(__pyx_t_3 != __pyx_v_result.end())) break;
      __pyx_t_4 = *__pyx_t_3;
      ++__pyx_t_3;
      __pyx_9genexpr34__pyx_v_r = __pyx_t_4;
      __pyx_t_5 = __pyx_f_8pygcgopt_3gcg_20PartialDecomposition_create(__pyx_9genexpr34__pyx_v_r); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 292, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_5))) __PYX_ERR(6, 292, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  } /* exit inner scope */
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/detprobdata.pxi":286
 *         return PartialDecomposition.create(result)
 * 
 *     def getFinishedPartialdecs(DetProbData self):             # <<<<<<<<<<<<<<
 *         """gets all finished partialdecs
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.getFinishedPartialdecs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":294
 *         return [PartialDecomposition.create(r) for r in result]
 * 
 *     def getIndexForCons(DetProbData self, Constraint cons):             # <<<<<<<<<<<<<<
 *         """returns the constraint index related to a SCIP constraint
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_45getIndexForCons(PyObject *__pyx_v_self, PyObject *__pyx_v_cons); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_11DetProbData_44getIndexForCons[] = "DetProbData.getIndexForCons(self, Constraint cons)\nreturns the constraint index related to a SCIP constraint\n\n        :param cons: the SCIP constraint pointer the index is asked for\n        :return: the constraint index related to a SCIP constraint.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_45getIndexForCons(PyObject *__pyx_v_self, PyObject *__pyx_v_cons) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getIndexForCons (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_cons), __pyx_ptype_9pyscipopt_4scip_Constraint, 1, "cons", 0))) __PYX_ERR(6, 294, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_44getIndexForCons(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self), ((struct __pyx_obj_9pyscipopt_4scip_Constraint *)__pyx_v_cons));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_44getIndexForCons(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, struct __pyx_obj_9pyscipopt_4scip_Constraint *__pyx_v_cons) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getIndexForCons", 0);

  /* "src/pygcgopt/detprobdata.pxi":300
 *         :return: the constraint index related to a SCIP constraint.
 *         """
 *         return self.thisptr.getIndexForCons(cons.scip_cons)             # <<<<<<<<<<<<<<
 * 
 *     # def getIndexForVar(DetProbData self, SCIP_VAR * var):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getIndexForCons(__pyx_v_cons->scip_cons);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 300, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/detprobdata.pxi":294
 *         return [PartialDecomposition.create(r) for r in result]
 * 
 *     def getIndexForCons(DetProbData self, Constraint cons):             # <<<<<<<<<<<<<<
 *         """returns the constraint index related to a SCIP constraint
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.getIndexForCons", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":310
 *     #     raise NotImplementedError()
 * 
 *     def getNAncestorPartialdecs(DetProbData self):             # <<<<<<<<<<<<<<
 *         """returns size of ancestor partialdec data structure
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_47getNAncestorPartialdecs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_11DetProbData_46getNAncestorPartialdecs[] = "DetProbData.getNAncestorPartialdecs(self)\nreturns size of ancestor partialdec data structure\n\n        :return: size of ancestor partialdec data structure.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_47getNAncestorPartialdecs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNAncestorPartialdecs (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_46getNAncestorPartialdecs(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_46getNAncestorPartialdecs(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self) {
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNAncestorPartialdecs", 0);

  /* "src/pygcgopt/detprobdata.pxi":315
 *         :return: size of ancestor partialdec data structure.
 *         """
 *         cdef int result = self.thisptr.getNAncestorPartialdecs()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getNAncestorPartialdecs();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 315, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/detprobdata.pxi":316
 *         """
 *         cdef int result = self.thisptr.getNAncestorPartialdecs()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getNConsPartitions(DetProbData self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/detprobdata.pxi":310
 *     #     raise NotImplementedError()
 * 
 *     def getNAncestorPartialdecs(DetProbData self):             # <<<<<<<<<<<<<<
 *         """returns size of ancestor partialdec data structure
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.getNAncestorPartialdecs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":318
 *         return result
 * 
 *     def getNConsPartitions(DetProbData self):             # <<<<<<<<<<<<<<
 *         """returns number of different constraint partitions
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_49getNConsPartitions(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_11DetProbData_48getNConsPartitions[] = "DetProbData.getNConsPartitions(self)\nreturns number of different constraint partitions\n\n        :return: number of different constraint partitions.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_49getNConsPartitions(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNConsPartitions (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_48getNConsPartitions(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_48getNConsPartitions(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self) {
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNConsPartitions", 0);

  /* "src/pygcgopt/detprobdata.pxi":323
 *         :return: number of different constraint partitions.
 *         """
 *         cdef int result = self.thisptr.getNConsPartitions()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getNConsPartitions();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 323, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/detprobdata.pxi":324
 *         """
 *         cdef int result = self.thisptr.getNConsPartitions()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getNConss(DetProbData self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/detprobdata.pxi":318
 *         return result
 * 
 *     def getNConsPartitions(DetProbData self):             # <<<<<<<<<<<<<<
 *         """returns number of different constraint partitions
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.getNConsPartitions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":326
 *         return result
 * 
 *     def getNConss(DetProbData self):             # <<<<<<<<<<<<<<
 *         """returns the number of variables considered in the detprobdata
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_51getNConss(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_11DetProbData_50getNConss[] = "DetProbData.getNConss(self)\nreturns the number of variables considered in the detprobdata\n\n        :return: number of variables considered in the detprobdata.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_51getNConss(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNConss (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_50getNConss(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_50getNConss(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self) {
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNConss", 0);

  /* "src/pygcgopt/detprobdata.pxi":331
 *         :return: number of variables considered in the detprobdata.
 *         """
 *         cdef int result = self.thisptr.getNConss()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getNConss();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 331, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/detprobdata.pxi":332
 *         """
 *         cdef int result = self.thisptr.getNConss()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getNConssForCons(DetProbData self, int consIndex):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/detprobdata.pxi":326
 *         return result
 * 
 *     def getNConss(DetProbData self):             # <<<<<<<<<<<<<<
 *         """returns the number of variables considered in the detprobdata
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.getNConss", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":334
 *         return result
 * 
 *     def getNConssForCons(DetProbData self, int consIndex):             # <<<<<<<<<<<<<<
 *         """returns the number of constraints for a given constraint
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_53getNConssForCons(PyObject *__pyx_v_self, PyObject *__pyx_arg_consIndex); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_11DetProbData_52getNConssForCons[] = "DetProbData.getNConssForCons(self, int consIndex)\nreturns the number of constraints for a given constraint\n\n        :return: the number of constraints for a given constraint.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_53getNConssForCons(PyObject *__pyx_v_self, PyObject *__pyx_arg_consIndex) {
  int __pyx_v_consIndex;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNConssForCons (wrapper)", 0);
  assert(__pyx_arg_consIndex); {
    __pyx_v_consIndex = __Pyx_PyInt_As_int(__pyx_arg_consIndex); if (unlikely((__pyx_v_consIndex == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 334, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.getNConssForCons", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_52getNConssForCons(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self), ((int)__pyx_v_consIndex));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_52getNConssForCons(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, int __pyx_v_consIndex) {
  int __pyx_v_cpp_consIndex;
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNConssForCons", 0);

  /* "src/pygcgopt/detprobdata.pxi":339
 *         :return: the number of constraints for a given constraint.
 *         """
 *         cdef int cpp_consIndex = consIndex             # <<<<<<<<<<<<<<
 *         cdef int result = self.thisptr.getNConssForCons(cpp_consIndex)
 *         return result
 */
  __pyx_v_cpp_consIndex = __pyx_v_consIndex;

  /* "src/pygcgopt/detprobdata.pxi":340
 *         """
 *         cdef int cpp_consIndex = consIndex
 *         cdef int result = self.thisptr.getNConssForCons(cpp_consIndex)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getNConssForCons(__pyx_v_cpp_consIndex);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 340, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/detprobdata.pxi":341
 *         cdef int cpp_consIndex = consIndex
 *         cdef int result = self.thisptr.getNConssForCons(cpp_consIndex)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getNConssForVar(DetProbData self, int varIndex):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/detprobdata.pxi":334
 *         return result
 * 
 *     def getNConssForCons(DetProbData self, int consIndex):             # <<<<<<<<<<<<<<
 *         """returns the number of constraints for a given constraint
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.getNConssForCons", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":343
 *         return result
 * 
 *     def getNConssForVar(DetProbData self, int varIndex):             # <<<<<<<<<<<<<<
 *         """returns the number of constraints for a given variable where the var has a nonzero entry in
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_55getNConssForVar(PyObject *__pyx_v_self, PyObject *__pyx_arg_varIndex); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_11DetProbData_54getNConssForVar[] = "DetProbData.getNConssForVar(self, int varIndex)\nreturns the number of constraints for a given variable where the var has a nonzero entry in\n\n        :return: the number of constraints for a given variable.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_55getNConssForVar(PyObject *__pyx_v_self, PyObject *__pyx_arg_varIndex) {
  int __pyx_v_varIndex;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNConssForVar (wrapper)", 0);
  assert(__pyx_arg_varIndex); {
    __pyx_v_varIndex = __Pyx_PyInt_As_int(__pyx_arg_varIndex); if (unlikely((__pyx_v_varIndex == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 343, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.getNConssForVar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_54getNConssForVar(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self), ((int)__pyx_v_varIndex));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_54getNConssForVar(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, int __pyx_v_varIndex) {
  int __pyx_v_cpp_varIndex;
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNConssForVar", 0);

  /* "src/pygcgopt/detprobdata.pxi":348
 *         :return: the number of constraints for a given variable.
 *         """
 *         cdef int cpp_varIndex = varIndex             # <<<<<<<<<<<<<<
 *         cdef int result = self.thisptr.getNConssForVar(cpp_varIndex)
 *         return result
 */
  __pyx_v_cpp_varIndex = __pyx_v_varIndex;

  /* "src/pygcgopt/detprobdata.pxi":349
 *         """
 *         cdef int cpp_varIndex = varIndex
 *         cdef int result = self.thisptr.getNConssForVar(cpp_varIndex)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getNConssForVar(__pyx_v_cpp_varIndex);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 349, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/detprobdata.pxi":350
 *         cdef int cpp_varIndex = varIndex
 *         cdef int result = self.thisptr.getNConssForVar(cpp_varIndex)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getNOpenPartialdecs(DetProbData self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/detprobdata.pxi":343
 *         return result
 * 
 *     def getNConssForVar(DetProbData self, int varIndex):             # <<<<<<<<<<<<<<
 *         """returns the number of constraints for a given variable where the var has a nonzero entry in
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.getNConssForVar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":352
 *         return result
 * 
 *     def getNOpenPartialdecs(DetProbData self):             # <<<<<<<<<<<<<<
 *         """returns size of current (open) partialdec data structure
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_57getNOpenPartialdecs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_11DetProbData_56getNOpenPartialdecs[] = "DetProbData.getNOpenPartialdecs(self)\nreturns size of current (open) partialdec data structure\n\n        :return: size of current (open) partialdec data structure.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_57getNOpenPartialdecs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNOpenPartialdecs (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_56getNOpenPartialdecs(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_56getNOpenPartialdecs(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self) {
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNOpenPartialdecs", 0);

  /* "src/pygcgopt/detprobdata.pxi":357
 *         :return: size of current (open) partialdec data structure.
 *         """
 *         cdef int result = self.thisptr.getNOpenPartialdecs()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getNOpenPartialdecs();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 357, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/detprobdata.pxi":358
 *         """
 *         cdef int result = self.thisptr.getNOpenPartialdecs()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getNFinishedPartialdecs(DetProbData self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/detprobdata.pxi":352
 *         return result
 * 
 *     def getNOpenPartialdecs(DetProbData self):             # <<<<<<<<<<<<<<
 *         """returns size of current (open) partialdec data structure
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.getNOpenPartialdecs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":360
 *         return result
 * 
 *     def getNFinishedPartialdecs(DetProbData self):             # <<<<<<<<<<<<<<
 *         """size of finished partialdec data structure
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_59getNFinishedPartialdecs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_11DetProbData_58getNFinishedPartialdecs[] = "DetProbData.getNFinishedPartialdecs(self)\nsize of finished partialdec data structure\n\n        :return:  size of finished partialdec data structure.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_59getNFinishedPartialdecs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNFinishedPartialdecs (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_58getNFinishedPartialdecs(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_58getNFinishedPartialdecs(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self) {
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNFinishedPartialdecs", 0);

  /* "src/pygcgopt/detprobdata.pxi":365
 *         :return:  size of finished partialdec data structure.
 *         """
 *         cdef int result = self.thisptr.getNFinishedPartialdecs()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getNFinishedPartialdecs();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 365, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/detprobdata.pxi":366
 *         """
 *         cdef int result = self.thisptr.getNFinishedPartialdecs()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getNPartialdecs(DetProbData self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/detprobdata.pxi":360
 *         return result
 * 
 *     def getNFinishedPartialdecs(DetProbData self):             # <<<<<<<<<<<<<<
 *         """size of finished partialdec data structure
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.getNFinishedPartialdecs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":368
 *         return result
 * 
 *     def getNPartialdecs(DetProbData self):             # <<<<<<<<<<<<<<
 *         """returns the number of stored partialdecs
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_61getNPartialdecs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_11DetProbData_60getNPartialdecs[] = "DetProbData.getNPartialdecs(self)\nreturns the number of stored partialdecs\n\n        :return:  number of stored partialdecs.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_61getNPartialdecs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNPartialdecs (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_60getNPartialdecs(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_60getNPartialdecs(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self) {
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNPartialdecs", 0);

  /* "src/pygcgopt/detprobdata.pxi":373
 *         :return:  number of stored partialdecs.
 *         """
 *         cdef int result = self.thisptr.getNPartialdecs()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getNPartialdecs();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 373, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/detprobdata.pxi":374
 *         """
 *         cdef int result = self.thisptr.getNPartialdecs()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getNNonzeros(DetProbData self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/detprobdata.pxi":368
 *         return result
 * 
 *     def getNPartialdecs(DetProbData self):             # <<<<<<<<<<<<<<
 *         """returns the number of stored partialdecs
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.getNPartialdecs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":376
 *         return result
 * 
 *     def getNNonzeros(DetProbData self):             # <<<<<<<<<<<<<<
 *         """returns the number of nonzero entries in the coefficient matrix
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_63getNNonzeros(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_11DetProbData_62getNNonzeros[] = "DetProbData.getNNonzeros(self)\nreturns the number of nonzero entries in the coefficient matrix\n\n        :return: the number of nonzero entries in the coefficient matrix.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_63getNNonzeros(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNNonzeros (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_62getNNonzeros(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_62getNNonzeros(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self) {
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNNonzeros", 0);

  /* "src/pygcgopt/detprobdata.pxi":381
 *         :return: the number of nonzero entries in the coefficient matrix.
 *         """
 *         cdef int result = self.thisptr.getNNonzeros()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getNNonzeros();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 381, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/detprobdata.pxi":382
 *         """
 *         cdef int result = self.thisptr.getNNonzeros()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getNVarPartitions(DetProbData self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/detprobdata.pxi":376
 *         return result
 * 
 *     def getNNonzeros(DetProbData self):             # <<<<<<<<<<<<<<
 *         """returns the number of nonzero entries in the coefficient matrix
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.getNNonzeros", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":384
 *         return result
 * 
 *     def getNVarPartitions(DetProbData self):             # <<<<<<<<<<<<<<
 *         """returns number of different variable partitions
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_65getNVarPartitions(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_11DetProbData_64getNVarPartitions[] = "DetProbData.getNVarPartitions(self)\nreturns number of different variable partitions\n\n        :return:  number of different variable partitions.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_65getNVarPartitions(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNVarPartitions (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_64getNVarPartitions(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_64getNVarPartitions(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self) {
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNVarPartitions", 0);

  /* "src/pygcgopt/detprobdata.pxi":389
 *         :return:  number of different variable partitions.
 *         """
 *         cdef int result = self.thisptr.getNVarPartitions()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getNVarPartitions();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 389, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/detprobdata.pxi":390
 *         """
 *         cdef int result = self.thisptr.getNVarPartitions()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getNVars(DetProbData self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/detprobdata.pxi":384
 *         return result
 * 
 *     def getNVarPartitions(DetProbData self):             # <<<<<<<<<<<<<<
 *         """returns number of different variable partitions
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.getNVarPartitions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":392
 *         return result
 * 
 *     def getNVars(DetProbData self):             # <<<<<<<<<<<<<<
 *         """return the number of variables considered in the detprobdata
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_67getNVars(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_11DetProbData_66getNVars[] = "DetProbData.getNVars(self)\nreturn the number of variables considered in the detprobdata\n\n        :return: the number of variables considered in the detprobdata.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_67getNVars(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNVars (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_66getNVars(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_66getNVars(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self) {
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNVars", 0);

  /* "src/pygcgopt/detprobdata.pxi":397
 *         :return: the number of variables considered in the detprobdata.
 *         """
 *         cdef int result = self.thisptr.getNVars()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getNVars();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 397, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/detprobdata.pxi":398
 *         """
 *         cdef int result = self.thisptr.getNVars()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getNVarsForCons(DetProbData self, int consIndex):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/detprobdata.pxi":392
 *         return result
 * 
 *     def getNVars(DetProbData self):             # <<<<<<<<<<<<<<
 *         """return the number of variables considered in the detprobdata
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.getNVars", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":400
 *         return result
 * 
 *     def getNVarsForCons(DetProbData self, int consIndex):             # <<<<<<<<<<<<<<
 *         """returns the number of variables for a given constraint
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_69getNVarsForCons(PyObject *__pyx_v_self, PyObject *__pyx_arg_consIndex); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_11DetProbData_68getNVarsForCons[] = "DetProbData.getNVarsForCons(self, int consIndex)\nreturns the number of variables for a given constraint\n\n        :return: the number of variables for a given constraint.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_69getNVarsForCons(PyObject *__pyx_v_self, PyObject *__pyx_arg_consIndex) {
  int __pyx_v_consIndex;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNVarsForCons (wrapper)", 0);
  assert(__pyx_arg_consIndex); {
    __pyx_v_consIndex = __Pyx_PyInt_As_int(__pyx_arg_consIndex); if (unlikely((__pyx_v_consIndex == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 400, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.getNVarsForCons", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_68getNVarsForCons(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self), ((int)__pyx_v_consIndex));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_68getNVarsForCons(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, int __pyx_v_consIndex) {
  int __pyx_v_cpp_consIndex;
  int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNVarsForCons", 0);

  /* "src/pygcgopt/detprobdata.pxi":405
 *         :return: the number of variables for a given constraint.
 *         """
 *         cdef int cpp_consIndex = consIndex             # <<<<<<<<<<<<<<
 *         cdef int result = self.thisptr.getNVarsForCons(cpp_consIndex)
 *         return result
 */
  __pyx_v_cpp_consIndex = __pyx_v_consIndex;

  /* "src/pygcgopt/detprobdata.pxi":406
 *         """
 *         cdef int cpp_consIndex = consIndex
 *         cdef int result = self.thisptr.getNVarsForCons(cpp_consIndex)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getNVarsForCons(__pyx_v_cpp_consIndex);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 406, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/detprobdata.pxi":407
 *         cdef int cpp_consIndex = consIndex
 *         cdef int result = self.thisptr.getNVarsForCons(cpp_consIndex)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getOrigVarsFixedZero(DetProbData self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/detprobdata.pxi":400
 *         return result
 * 
 *     def getNVarsForCons(DetProbData self, int consIndex):             # <<<<<<<<<<<<<<
 *         """returns the number of variables for a given constraint
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.getNVarsForCons", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":409
 *         return result
 * 
 *     def getOrigVarsFixedZero(DetProbData self):             # <<<<<<<<<<<<<<
 *         """returns pointers to all orig vars that are fixed to zero
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_71getOrigVarsFixedZero(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_11DetProbData_70getOrigVarsFixedZero[] = "DetProbData.getOrigVarsFixedZero(self)\nreturns pointers to all orig vars that are fixed to zero\n\n        :return: vector of vars.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_71getOrigVarsFixedZero(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getOrigVarsFixedZero (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_70getOrigVarsFixedZero(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_70getOrigVarsFixedZero(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self) {
  std::vector<SCIP_VAR *>  __pyx_v_result;
  SCIP_VAR *__pyx_9genexpr35__pyx_v_v;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<SCIP_VAR *>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  std::vector<SCIP_VAR *> ::iterator __pyx_t_3;
  SCIP_VAR *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getOrigVarsFixedZero", 0);

  /* "src/pygcgopt/detprobdata.pxi":414
 *         :return: vector of vars.
 *         """
 *         cdef vector[SCIP_VAR *] result = self.thisptr.getOrigVarsFixedZero()             # <<<<<<<<<<<<<<
 *         return [Variable.create(v) for v in result]
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getOrigVarsFixedZero();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 414, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/detprobdata.pxi":415
 *         """
 *         cdef vector[SCIP_VAR *] result = self.thisptr.getOrigVarsFixedZero()
 *         return [Variable.create(v) for v in result]             # <<<<<<<<<<<<<<
 * 
 *     def getRelevantConss(DetProbData self):
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 415, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_v_result.begin();
    for (;;) {
      if (!(__pyx_t_3 != __pyx_v_result.end())) break;
      __pyx_t_4 = *__pyx_t_3;
      ++__pyx_t_3;
      __pyx_9genexpr35__pyx_v_v = __pyx_t_4;
      __pyx_t_5 = __pyx_vtabptr_9pyscipopt_4scip_Variable->create(__pyx_9genexpr35__pyx_v_v); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 415, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_5))) __PYX_ERR(6, 415, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  } /* exit inner scope */
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/detprobdata.pxi":409
 *         return result
 * 
 *     def getOrigVarsFixedZero(DetProbData self):             # <<<<<<<<<<<<<<
 *         """returns pointers to all orig vars that are fixed to zero
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.getOrigVarsFixedZero", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":417
 *         return [Variable.create(v) for v in result]
 * 
 *     def getRelevantConss(DetProbData self):             # <<<<<<<<<<<<<<
 *         """returns pointers to all constraints that are not marked as deleted or obsolete
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_73getRelevantConss(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_11DetProbData_72getRelevantConss[] = "DetProbData.getRelevantConss(self)\nreturns pointers to all constraints that are not marked as deleted or obsolete\n\n        :return: vector of conss.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_73getRelevantConss(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getRelevantConss (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_72getRelevantConss(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_72getRelevantConss(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self) {
  std::vector<SCIP_CONS *>  __pyx_v_result;
  SCIP_CONS *__pyx_9genexpr36__pyx_v_c;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<SCIP_CONS *>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  std::vector<SCIP_CONS *> ::iterator __pyx_t_3;
  SCIP_CONS *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getRelevantConss", 0);

  /* "src/pygcgopt/detprobdata.pxi":422
 *         :return: vector of conss.
 *         """
 *         cdef vector[SCIP_CONS *] result = self.thisptr.getRelevantConss()             # <<<<<<<<<<<<<<
 *         return [Constraint.create(c) for c in result]
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getRelevantConss();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 422, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/detprobdata.pxi":423
 *         """
 *         cdef vector[SCIP_CONS *] result = self.thisptr.getRelevantConss()
 *         return [Constraint.create(c) for c in result]             # <<<<<<<<<<<<<<
 * 
 *     def getRelevantVars(DetProbData self):
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 423, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_v_result.begin();
    for (;;) {
      if (!(__pyx_t_3 != __pyx_v_result.end())) break;
      __pyx_t_4 = *__pyx_t_3;
      ++__pyx_t_3;
      __pyx_9genexpr36__pyx_v_c = __pyx_t_4;
      __pyx_t_5 = __pyx_vtabptr_9pyscipopt_4scip_Constraint->create(__pyx_9genexpr36__pyx_v_c); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 423, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_5))) __PYX_ERR(6, 423, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  } /* exit inner scope */
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/detprobdata.pxi":417
 *         return [Variable.create(v) for v in result]
 * 
 *     def getRelevantConss(DetProbData self):             # <<<<<<<<<<<<<<
 *         """returns pointers to all constraints that are not marked as deleted or obsolete
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.getRelevantConss", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":425
 *         return [Constraint.create(c) for c in result]
 * 
 *     def getRelevantVars(DetProbData self):             # <<<<<<<<<<<<<<
 *         """returns pointers to all problem vars that are not fixed to 0
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_75getRelevantVars(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_11DetProbData_74getRelevantVars[] = "DetProbData.getRelevantVars(self)\nreturns pointers to all problem vars that are not fixed to 0\n\n        :return: vector of vars.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_75getRelevantVars(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getRelevantVars (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_74getRelevantVars(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_74getRelevantVars(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self) {
  std::vector<SCIP_VAR *>  __pyx_v_result;
  SCIP_VAR *__pyx_9genexpr37__pyx_v_v;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<SCIP_VAR *>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  std::vector<SCIP_VAR *> ::iterator __pyx_t_3;
  SCIP_VAR *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getRelevantVars", 0);

  /* "src/pygcgopt/detprobdata.pxi":430
 *         :return: vector of vars.
 *         """
 *         cdef vector[SCIP_VAR *] result = self.thisptr.getRelevantVars()             # <<<<<<<<<<<<<<
 *         return [Variable.create(v) for v in result]
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getRelevantVars();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 430, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/detprobdata.pxi":431
 *         """
 *         cdef vector[SCIP_VAR *] result = self.thisptr.getRelevantVars()
 *         return [Variable.create(v) for v in result]             # <<<<<<<<<<<<<<
 * 
 *     def getModel(DetProbData self):
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 431, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_v_result.begin();
    for (;;) {
      if (!(__pyx_t_3 != __pyx_v_result.end())) break;
      __pyx_t_4 = *__pyx_t_3;
      ++__pyx_t_3;
      __pyx_9genexpr37__pyx_v_v = __pyx_t_4;
      __pyx_t_5 = __pyx_vtabptr_9pyscipopt_4scip_Variable->create(__pyx_9genexpr37__pyx_v_v); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 431, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_5))) __PYX_ERR(6, 431, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  } /* exit inner scope */
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/detprobdata.pxi":425
 *         return [Constraint.create(c) for c in result]
 * 
 *     def getRelevantVars(DetProbData self):             # <<<<<<<<<<<<<<
 *         """returns pointers to all problem vars that are not fixed to 0
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.getRelevantVars", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":433
 *         return [Variable.create(v) for v in result]
 * 
 *     def getModel(DetProbData self):             # <<<<<<<<<<<<<<
 *         """returns the corresponding Model instance wrapping the scip data structure
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_77getModel(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_11DetProbData_76getModel[] = "DetProbData.getModel(self)\nreturns the corresponding Model instance wrapping the scip data structure\n\n        :return: the corresponding Model instance wrapping scip data structure.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_77getModel(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getModel (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_76getModel(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_76getModel(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self) {
  SCIP *__pyx_v_scip;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getModel", 0);

  /* "src/pygcgopt/detprobdata.pxi":438
 *         :return: the corresponding Model instance wrapping scip data structure.
 *         """
 *         cdef SCIP * scip = self.thisptr.getScip()             # <<<<<<<<<<<<<<
 *         return Model.create(scip)
 * 
 */
  __pyx_v_scip = __pyx_v_self->thisptr->getScip();

  /* "src/pygcgopt/detprobdata.pxi":439
 *         """
 *         cdef SCIP * scip = self.thisptr.getScip()
 *         return Model.create(scip)             # <<<<<<<<<<<<<<
 * 
 *     def getSortedCandidatesNBlocks(DetProbData self, object candidates):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_vtabptr_9pyscipopt_4scip_Model->create(__pyx_v_scip); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/detprobdata.pxi":433
 *         return [Variable.create(v) for v in result]
 * 
 *     def getModel(DetProbData self):             # <<<<<<<<<<<<<<
 *         """returns the corresponding Model instance wrapping the scip data structure
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.getModel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":441
 *         return Model.create(scip)
 * 
 *     def getSortedCandidatesNBlocks(DetProbData self, object candidates):             # <<<<<<<<<<<<<<
 *         """gets the candidates for number of blocks added by the user followed by the found ones sorted in descending order by how often a candidate was proposed
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_79getSortedCandidatesNBlocks(PyObject *__pyx_v_self, PyObject *__pyx_v_candidates); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_11DetProbData_78getSortedCandidatesNBlocks[] = "DetProbData.getSortedCandidatesNBlocks(self, candidates)\ngets the candidates for number of blocks added by the user followed by the found ones sorted in descending order by how often a candidate was proposed\n\n        :param candidates: will contain the candidates for number of blocks sorted in descending order by how often a candidate was added.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_79getSortedCandidatesNBlocks(PyObject *__pyx_v_self, PyObject *__pyx_v_candidates) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getSortedCandidatesNBlocks (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_78getSortedCandidatesNBlocks(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self), ((PyObject *)__pyx_v_candidates));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_78getSortedCandidatesNBlocks(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, PyObject *__pyx_v_candidates) {
  std::vector<int>  __pyx_v_cpp_candidates;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<int>  __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getSortedCandidatesNBlocks", 0);

  /* "src/pygcgopt/detprobdata.pxi":446
 *         :param candidates: will contain the candidates for number of blocks sorted in descending order by how often a candidate was added.
 *         """
 *         cdef vector[int] cpp_candidates = candidates             # <<<<<<<<<<<<<<
 *         self.thisptr.getSortedCandidatesNBlocks(cpp_candidates)
 * 
 */
  __pyx_t_1 = __pyx_convert_vector_from_py_int(__pyx_v_candidates); if (unlikely(PyErr_Occurred())) __PYX_ERR(6, 446, __pyx_L1_error)
  __pyx_v_cpp_candidates = __pyx_t_1;

  /* "src/pygcgopt/detprobdata.pxi":447
 *         """
 *         cdef vector[int] cpp_candidates = candidates
 *         self.thisptr.getSortedCandidatesNBlocks(cpp_candidates)             # <<<<<<<<<<<<<<
 * 
 *     def getVal(DetProbData self, int row, int col):
 */
  try {
    __pyx_v_self->thisptr->getSortedCandidatesNBlocks(__pyx_v_cpp_candidates);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 447, __pyx_L1_error)
  }

  /* "src/pygcgopt/detprobdata.pxi":441
 *         return Model.create(scip)
 * 
 *     def getSortedCandidatesNBlocks(DetProbData self, object candidates):             # <<<<<<<<<<<<<<
 *         """gets the candidates for number of blocks added by the user followed by the found ones sorted in descending order by how often a candidate was proposed
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.getSortedCandidatesNBlocks", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":449
 *         self.thisptr.getSortedCandidatesNBlocks(cpp_candidates)
 * 
 *     def getVal(DetProbData self, int row, int col):             # <<<<<<<<<<<<<<
 *         """returns a coefficient from the coefficient matrix
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_81getVal(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_11DetProbData_80getVal[] = "DetProbData.getVal(self, int row, int col)\nreturns a coefficient from the coefficient matrix\n\n        :return: a coefficient from the coefficient matrix.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_81getVal(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_row;
  int __pyx_v_col;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getVal (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_row,&__pyx_n_s_col,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_row)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_col)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getVal", 1, 2, 2, 1); __PYX_ERR(6, 449, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getVal") < 0)) __PYX_ERR(6, 449, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_row = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_row == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 449, __pyx_L3_error)
    __pyx_v_col = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_col == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 449, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getVal", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(6, 449, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.getVal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_80getVal(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self), __pyx_v_row, __pyx_v_col);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_80getVal(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, int __pyx_v_row, int __pyx_v_col) {
  int __pyx_v_cpp_row;
  int __pyx_v_cpp_col;
  double __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getVal", 0);

  /* "src/pygcgopt/detprobdata.pxi":454
 *         :return: a coefficient from the coefficient matrix.
 *         """
 *         cdef int cpp_row = row             # <<<<<<<<<<<<<<
 *         cdef int cpp_col = col
 *         cdef double result = self.thisptr.getVal(cpp_row, cpp_col)
 */
  __pyx_v_cpp_row = __pyx_v_row;

  /* "src/pygcgopt/detprobdata.pxi":455
 *         """
 *         cdef int cpp_row = row
 *         cdef int cpp_col = col             # <<<<<<<<<<<<<<
 *         cdef double result = self.thisptr.getVal(cpp_row, cpp_col)
 *         return result
 */
  __pyx_v_cpp_col = __pyx_v_col;

  /* "src/pygcgopt/detprobdata.pxi":456
 *         cdef int cpp_row = row
 *         cdef int cpp_col = col
 *         cdef double result = self.thisptr.getVal(cpp_row, cpp_col)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getVal(__pyx_v_cpp_row, __pyx_v_cpp_col);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 456, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/detprobdata.pxi":457
 *         cdef int cpp_col = col
 *         cdef double result = self.thisptr.getVal(cpp_row, cpp_col)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getValsForCons(DetProbData self, int consIndex):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 457, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/detprobdata.pxi":449
 *         self.thisptr.getSortedCandidatesNBlocks(cpp_candidates)
 * 
 *     def getVal(DetProbData self, int row, int col):             # <<<<<<<<<<<<<<
 *         """returns a coefficient from the coefficient matrix
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.getVal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":459
 *         return result
 * 
 *     def getValsForCons(DetProbData self, int consIndex):             # <<<<<<<<<<<<<<
 *         """returns the nonzero coefficients of the coefficient matrix for a constraint
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_83getValsForCons(PyObject *__pyx_v_self, PyObject *__pyx_arg_consIndex); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_11DetProbData_82getValsForCons[] = "DetProbData.getValsForCons(self, int consIndex)\nreturns the nonzero coefficients of the coefficient matrix for a constraint\n\n        :return: vector of coefficients of in matrix for constraints\n\n        :note: same order as in :meth:`getVarsForCons`.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_83getValsForCons(PyObject *__pyx_v_self, PyObject *__pyx_arg_consIndex) {
  int __pyx_v_consIndex;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getValsForCons (wrapper)", 0);
  assert(__pyx_arg_consIndex); {
    __pyx_v_consIndex = __Pyx_PyInt_As_int(__pyx_arg_consIndex); if (unlikely((__pyx_v_consIndex == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 459, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.getValsForCons", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_82getValsForCons(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self), ((int)__pyx_v_consIndex));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_82getValsForCons(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, int __pyx_v_consIndex) {
  int __pyx_v_cpp_consIndex;
  std::vector<double>  __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<double>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getValsForCons", 0);

  /* "src/pygcgopt/detprobdata.pxi":466
 *         :note: same order as in :meth:`getVarsForCons`.
 *         """
 *         cdef int cpp_consIndex = consIndex             # <<<<<<<<<<<<<<
 *         cdef vector[double] result = self.thisptr.getValsForCons(cpp_consIndex)
 *         return result
 */
  __pyx_v_cpp_consIndex = __pyx_v_consIndex;

  /* "src/pygcgopt/detprobdata.pxi":467
 *         """
 *         cdef int cpp_consIndex = consIndex
 *         cdef vector[double] result = self.thisptr.getValsForCons(cpp_consIndex)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getValsForCons(__pyx_v_cpp_consIndex);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 467, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/detprobdata.pxi":468
 *         cdef int cpp_consIndex = consIndex
 *         cdef vector[double] result = self.thisptr.getValsForCons(cpp_consIndex)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def getVarPartition(DetProbData self, int partitionIndex):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_vector_to_py_double(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/detprobdata.pxi":459
 *         return result
 * 
 *     def getValsForCons(DetProbData self, int consIndex):             # <<<<<<<<<<<<<<
 *         """returns the nonzero coefficients of the coefficient matrix for a constraint
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.getValsForCons", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":470
 *         return result
 * 
 *     def getVarPartition(DetProbData self, int partitionIndex):             # <<<<<<<<<<<<<<
 *         """returns pointer to a variable partition with given index
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_85getVarPartition(PyObject *__pyx_v_self, PyObject *__pyx_arg_partitionIndex); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_11DetProbData_84getVarPartition[] = "DetProbData.getVarPartition(self, int partitionIndex)\nreturns pointer to a variable partition with given index\n\n        :return: pointer to a variable partition with given index.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_85getVarPartition(PyObject *__pyx_v_self, PyObject *__pyx_arg_partitionIndex) {
  int __pyx_v_partitionIndex;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getVarPartition (wrapper)", 0);
  assert(__pyx_arg_partitionIndex); {
    __pyx_v_partitionIndex = __Pyx_PyInt_As_int(__pyx_arg_partitionIndex); if (unlikely((__pyx_v_partitionIndex == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 470, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.getVarPartition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_84getVarPartition(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self), ((int)__pyx_v_partitionIndex));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_84getVarPartition(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, int __pyx_v_partitionIndex) {
  int __pyx_v_cpp_partitionIndex;
  gcg::VarPartition *__pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  gcg::VarPartition *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getVarPartition", 0);

  /* "src/pygcgopt/detprobdata.pxi":475
 *         :return: pointer to a variable partition with given index.
 *         """
 *         cdef int cpp_partitionIndex = partitionIndex             # <<<<<<<<<<<<<<
 *         cdef VarPartition * result = self.thisptr.getVarPartition(cpp_partitionIndex)
 *         return VarPart.create(result)
 */
  __pyx_v_cpp_partitionIndex = __pyx_v_partitionIndex;

  /* "src/pygcgopt/detprobdata.pxi":476
 *         """
 *         cdef int cpp_partitionIndex = partitionIndex
 *         cdef VarPartition * result = self.thisptr.getVarPartition(cpp_partitionIndex)             # <<<<<<<<<<<<<<
 *         return VarPart.create(result)
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getVarPartition(__pyx_v_cpp_partitionIndex);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 476, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/detprobdata.pxi":477
 *         cdef int cpp_partitionIndex = partitionIndex
 *         cdef VarPartition * result = self.thisptr.getVarPartition(cpp_partitionIndex)
 *         return VarPart.create(result)             # <<<<<<<<<<<<<<
 * 
 *     def getVarPartitions(DetProbData self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_8pygcgopt_3gcg_7VarPart_create(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/detprobdata.pxi":470
 *         return result
 * 
 *     def getVarPartition(DetProbData self, int partitionIndex):             # <<<<<<<<<<<<<<
 *         """returns pointer to a variable partition with given index
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.getVarPartition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":479
 *         return VarPart.create(result)
 * 
 *     def getVarPartitions(DetProbData self):             # <<<<<<<<<<<<<<
 *         """returns vector to stored variable partitions
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_87getVarPartitions(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_11DetProbData_86getVarPartitions[] = "DetProbData.getVarPartitions(self)\nreturns vector to stored variable partitions\n\n        :return: returns vector to stored variable partitions.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_87getVarPartitions(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getVarPartitions (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_86getVarPartitions(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_86getVarPartitions(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self) {
  std::vector<gcg::VarPartition *>  __pyx_v_result;
  gcg::VarPartition *__pyx_9genexpr38__pyx_v_r;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<gcg::VarPartition *>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  std::vector<gcg::VarPartition *> ::iterator __pyx_t_3;
  gcg::VarPartition *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getVarPartitions", 0);

  /* "src/pygcgopt/detprobdata.pxi":484
 *         :return: returns vector to stored variable partitions.
 *         """
 *         cdef vector[VarPartition *] result = self.thisptr.getVarPartitions()             # <<<<<<<<<<<<<<
 *         return [VarPart.create(r) for r in result]
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getVarPartitions();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 484, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/detprobdata.pxi":485
 *         """
 *         cdef vector[VarPartition *] result = self.thisptr.getVarPartitions()
 *         return [VarPart.create(r) for r in result]             # <<<<<<<<<<<<<<
 * 
 *     def getVar(DetProbData self, int varIndex):
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 485, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_v_result.begin();
    for (;;) {
      if (!(__pyx_t_3 != __pyx_v_result.end())) break;
      __pyx_t_4 = *__pyx_t_3;
      ++__pyx_t_3;
      __pyx_9genexpr38__pyx_v_r = __pyx_t_4;
      __pyx_t_5 = __pyx_f_8pygcgopt_3gcg_7VarPart_create(__pyx_9genexpr38__pyx_v_r); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 485, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_5))) __PYX_ERR(6, 485, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  } /* exit inner scope */
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/detprobdata.pxi":479
 *         return VarPart.create(result)
 * 
 *     def getVarPartitions(DetProbData self):             # <<<<<<<<<<<<<<
 *         """returns vector to stored variable partitions
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.getVarPartitions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":487
 *         return [VarPart.create(r) for r in result]
 * 
 *     def getVar(DetProbData self, int varIndex):             # <<<<<<<<<<<<<<
 *         """returns SCIP variable related to a variable index
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_89getVar(PyObject *__pyx_v_self, PyObject *__pyx_arg_varIndex); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_11DetProbData_88getVar[] = "DetProbData.getVar(self, int varIndex)\nreturns SCIP variable related to a variable index\n\n        :return: SCIP variable pointer related to a variable index.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_89getVar(PyObject *__pyx_v_self, PyObject *__pyx_arg_varIndex) {
  int __pyx_v_varIndex;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getVar (wrapper)", 0);
  assert(__pyx_arg_varIndex); {
    __pyx_v_varIndex = __Pyx_PyInt_As_int(__pyx_arg_varIndex); if (unlikely((__pyx_v_varIndex == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 487, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.getVar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_88getVar(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self), ((int)__pyx_v_varIndex));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_88getVar(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, int __pyx_v_varIndex) {
  CYTHON_UNUSED int __pyx_v_cpp_varIndex;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getVar", 0);

  /* "src/pygcgopt/detprobdata.pxi":492
 *         :return: SCIP variable pointer related to a variable index.
 *         """
 *         cdef int cpp_varIndex = varIndex             # <<<<<<<<<<<<<<
 *         # TODO implement function
 *         raise NotImplementedError()
 */
  __pyx_v_cpp_varIndex = __pyx_v_varIndex;

  /* "src/pygcgopt/detprobdata.pxi":494
 *         cdef int cpp_varIndex = varIndex
 *         # TODO implement function
 *         raise NotImplementedError()             # <<<<<<<<<<<<<<
 * 
 *     def getVarsForCons(DetProbData self, int consIndex):
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_builtin_NotImplementedError); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 494, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(6, 494, __pyx_L1_error)

  /* "src/pygcgopt/detprobdata.pxi":487
 *         return [VarPart.create(r) for r in result]
 * 
 *     def getVar(DetProbData self, int varIndex):             # <<<<<<<<<<<<<<
 *         """returns SCIP variable related to a variable index
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.getVar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":496
 *         raise NotImplementedError()
 * 
 *     def getVarsForCons(DetProbData self, int consIndex):             # <<<<<<<<<<<<<<
 *         """returns the variable indices of the coefficient matrix for a constraint
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_91getVarsForCons(PyObject *__pyx_v_self, PyObject *__pyx_arg_consIndex); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_11DetProbData_90getVarsForCons[] = "DetProbData.getVarsForCons(self, int consIndex)\nreturns the variable indices of the coefficient matrix for a constraint\n\n        :return: the variable indices of the coefficient matrix for a constraint.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_91getVarsForCons(PyObject *__pyx_v_self, PyObject *__pyx_arg_consIndex) {
  int __pyx_v_consIndex;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getVarsForCons (wrapper)", 0);
  assert(__pyx_arg_consIndex); {
    __pyx_v_consIndex = __Pyx_PyInt_As_int(__pyx_arg_consIndex); if (unlikely((__pyx_v_consIndex == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 496, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.getVarsForCons", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_90getVarsForCons(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self), ((int)__pyx_v_consIndex));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_90getVarsForCons(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, int __pyx_v_consIndex) {
  int __pyx_v_cpp_consIndex;
  std::vector<int>  __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<int>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getVarsForCons", 0);

  /* "src/pygcgopt/detprobdata.pxi":501
 *         :return: the variable indices of the coefficient matrix for a constraint.
 *         """
 *         cdef int cpp_consIndex = consIndex             # <<<<<<<<<<<<<<
 *         cdef vector[int] result = self.thisptr.getVarsForCons(cpp_consIndex)
 *         return result
 */
  __pyx_v_cpp_consIndex = __pyx_v_consIndex;

  /* "src/pygcgopt/detprobdata.pxi":502
 *         """
 *         cdef int cpp_consIndex = consIndex
 *         cdef vector[int] result = self.thisptr.getVarsForCons(cpp_consIndex)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getVarsForCons(__pyx_v_cpp_consIndex);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 502, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/detprobdata.pxi":503
 *         cdef int cpp_consIndex = consIndex
 *         cdef vector[int] result = self.thisptr.getVarsForCons(cpp_consIndex)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def isConsCardinalityCons(DetProbData self, int consindexd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_vector_to_py_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/detprobdata.pxi":496
 *         raise NotImplementedError()
 * 
 *     def getVarsForCons(DetProbData self, int consIndex):             # <<<<<<<<<<<<<<
 *         """returns the variable indices of the coefficient matrix for a constraint
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.getVarsForCons", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":505
 *         return result
 * 
 *     def isConsCardinalityCons(DetProbData self, int consindexd):             # <<<<<<<<<<<<<<
 *         """returns whether a constraint is a cardinality constraint, i.e. of the .. math::`\\sum_{i} x_i = b`
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_93isConsCardinalityCons(PyObject *__pyx_v_self, PyObject *__pyx_arg_consindexd); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_11DetProbData_92isConsCardinalityCons[] = "DetProbData.isConsCardinalityCons(self, int consindexd)\nreturns whether a constraint is a cardinality constraint, i.e. of the .. math::`\\sum_{i} x_i = b`\n\n        :param consindexd: index of constraint that is be checked\n        :return: returns whether a constraint is a cardinality constraint\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_93isConsCardinalityCons(PyObject *__pyx_v_self, PyObject *__pyx_arg_consindexd) {
  int __pyx_v_consindexd;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isConsCardinalityCons (wrapper)", 0);
  assert(__pyx_arg_consindexd); {
    __pyx_v_consindexd = __Pyx_PyInt_As_int(__pyx_arg_consindexd); if (unlikely((__pyx_v_consindexd == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 505, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.isConsCardinalityCons", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_92isConsCardinalityCons(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self), ((int)__pyx_v_consindexd));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_92isConsCardinalityCons(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, int __pyx_v_consindexd) {
  int __pyx_v_cpp_consindexd;
  bool __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isConsCardinalityCons", 0);

  /* "src/pygcgopt/detprobdata.pxi":511
 *         :return: returns whether a constraint is a cardinality constraint
 *         """
 *         cdef int cpp_consindexd = consindexd             # <<<<<<<<<<<<<<
 *         cdef bool result = self.thisptr.isConsCardinalityCons(cpp_consindexd)
 *         return result
 */
  __pyx_v_cpp_consindexd = __pyx_v_consindexd;

  /* "src/pygcgopt/detprobdata.pxi":512
 *         """
 *         cdef int cpp_consindexd = consindexd
 *         cdef bool result = self.thisptr.isConsCardinalityCons(cpp_consindexd)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->isConsCardinalityCons(__pyx_v_cpp_consindexd);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 512, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/detprobdata.pxi":513
 *         cdef int cpp_consindexd = consindexd
 *         cdef bool result = self.thisptr.isConsCardinalityCons(cpp_consindexd)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def isConssAdjInitialized(DetProbData self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/detprobdata.pxi":505
 *         return result
 * 
 *     def isConsCardinalityCons(DetProbData self, int consindexd):             # <<<<<<<<<<<<<<
 *         """returns whether a constraint is a cardinality constraint, i.e. of the .. math::`\\sum_{i} x_i = b`
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.isConsCardinalityCons", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":515
 *         return result
 * 
 *     def isConssAdjInitialized(DetProbData self):             # <<<<<<<<<<<<<<
 *         """determines whether or not the constraint-constraint adjacency data structure is initilized
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_95isConssAdjInitialized(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_11DetProbData_94isConssAdjInitialized[] = "DetProbData.isConssAdjInitialized(self)\ndetermines whether or not the constraint-constraint adjacency data structure is initilized\n\n        :return: True iff the constraint-constraint adjacency data structure is initilized.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_95isConssAdjInitialized(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isConssAdjInitialized (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_94isConssAdjInitialized(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_94isConssAdjInitialized(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self) {
  unsigned int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isConssAdjInitialized", 0);

  /* "src/pygcgopt/detprobdata.pxi":520
 *         :return: True iff the constraint-constraint adjacency data structure is initilized.
 *         """
 *         cdef unsigned int result = self.thisptr.isConssAdjInitialized()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->isConssAdjInitialized();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 520, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/detprobdata.pxi":521
 *         """
 *         cdef unsigned int result = self.thisptr.isConssAdjInitialized()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def isConsSetpp(DetProbData self, int consindexd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/detprobdata.pxi":515
 *         return result
 * 
 *     def isConssAdjInitialized(DetProbData self):             # <<<<<<<<<<<<<<
 *         """determines whether or not the constraint-constraint adjacency data structure is initilized
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.isConssAdjInitialized", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":523
 *         return result
 * 
 *     def isConsSetpp(DetProbData self, int consindexd):             # <<<<<<<<<<<<<<
 *         """is cons with specified indec partitioning, or packing covering constraint?
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_97isConsSetpp(PyObject *__pyx_v_self, PyObject *__pyx_arg_consindexd); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_11DetProbData_96isConsSetpp[] = "DetProbData.isConsSetpp(self, int consindexd)\nis cons with specified indec partitioning, or packing covering constraint?\n\n        :param consindexd: index of the given cons\n        :return: is cons with specified indec partitioning, or packing covering constraint.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_97isConsSetpp(PyObject *__pyx_v_self, PyObject *__pyx_arg_consindexd) {
  int __pyx_v_consindexd;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isConsSetpp (wrapper)", 0);
  assert(__pyx_arg_consindexd); {
    __pyx_v_consindexd = __Pyx_PyInt_As_int(__pyx_arg_consindexd); if (unlikely((__pyx_v_consindexd == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 523, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.isConsSetpp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_96isConsSetpp(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self), ((int)__pyx_v_consindexd));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_96isConsSetpp(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, int __pyx_v_consindexd) {
  int __pyx_v_cpp_consindexd;
  bool __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isConsSetpp", 0);

  /* "src/pygcgopt/detprobdata.pxi":529
 *         :return: is cons with specified indec partitioning, or packing covering constraint.
 *         """
 *         cdef int cpp_consindexd = consindexd             # <<<<<<<<<<<<<<
 *         cdef bool result = self.thisptr.isConsSetpp(cpp_consindexd)
 *         return result
 */
  __pyx_v_cpp_consindexd = __pyx_v_consindexd;

  /* "src/pygcgopt/detprobdata.pxi":530
 *         """
 *         cdef int cpp_consindexd = consindexd
 *         cdef bool result = self.thisptr.isConsSetpp(cpp_consindexd)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->isConsSetpp(__pyx_v_cpp_consindexd);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 530, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/detprobdata.pxi":531
 *         cdef int cpp_consindexd = consindexd
 *         cdef bool result = self.thisptr.isConsSetpp(cpp_consindexd)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def isConsSetppc(DetProbData self, int consindexd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/detprobdata.pxi":523
 *         return result
 * 
 *     def isConsSetpp(DetProbData self, int consindexd):             # <<<<<<<<<<<<<<
 *         """is cons with specified indec partitioning, or packing covering constraint?
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.isConsSetpp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":533
 *         return result
 * 
 *     def isConsSetppc(DetProbData self, int consindexd):             # <<<<<<<<<<<<<<
 *         """is cons with specified index partitioning packing, or covering constraint?
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_99isConsSetppc(PyObject *__pyx_v_self, PyObject *__pyx_arg_consindexd); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_11DetProbData_98isConsSetppc[] = "DetProbData.isConsSetppc(self, int consindexd)\nis cons with specified index partitioning packing, or covering constraint?\n\n        :param consindexd: index of cons to be checked\n        :return: whether a constraint is partitioning packing, or covering constraint?.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_99isConsSetppc(PyObject *__pyx_v_self, PyObject *__pyx_arg_consindexd) {
  int __pyx_v_consindexd;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isConsSetppc (wrapper)", 0);
  assert(__pyx_arg_consindexd); {
    __pyx_v_consindexd = __Pyx_PyInt_As_int(__pyx_arg_consindexd); if (unlikely((__pyx_v_consindexd == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 533, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.isConsSetppc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_98isConsSetppc(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self), ((int)__pyx_v_consindexd));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_98isConsSetppc(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, int __pyx_v_consindexd) {
  int __pyx_v_cpp_consindexd;
  bool __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isConsSetppc", 0);

  /* "src/pygcgopt/detprobdata.pxi":539
 *         :return: whether a constraint is partitioning packing, or covering constraint?.
 *         """
 *         cdef int cpp_consindexd = consindexd             # <<<<<<<<<<<<<<
 *         cdef bool result = self.thisptr.isConsSetppc(cpp_consindexd)
 *         return result
 */
  __pyx_v_cpp_consindexd = __pyx_v_consindexd;

  /* "src/pygcgopt/detprobdata.pxi":540
 *         """
 *         cdef int cpp_consindexd = consindexd
 *         cdef bool result = self.thisptr.isConsSetppc(cpp_consindexd)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->isConsSetppc(__pyx_v_cpp_consindexd);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 540, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/detprobdata.pxi":541
 *         cdef int cpp_consindexd = consindexd
 *         cdef bool result = self.thisptr.isConsSetppc(cpp_consindexd)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     # def isFiniteNonnegativeIntegral(DetProbData self, SCIP * scip, double x):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/detprobdata.pxi":533
 *         return result
 * 
 *     def isConsSetppc(DetProbData self, int consindexd):             # <<<<<<<<<<<<<<
 *         """is cons with specified index partitioning packing, or covering constraint?
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.isConsSetppc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":553
 *     #     raise NotImplementedError()
 * 
 *     def isPartialdecDuplicateofFinished(DetProbData self, PartialDecomposition partialdec):             # <<<<<<<<<<<<<<
 *         """check if partialdec is a duplicate of an existing finished partialdec
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_101isPartialdecDuplicateofFinished(PyObject *__pyx_v_self, PyObject *__pyx_v_partialdec); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_11DetProbData_100isPartialdecDuplicateofFinished[] = "DetProbData.isPartialdecDuplicateofFinished(self, PartialDecomposition partialdec)\ncheck if partialdec is a duplicate of an existing finished partialdec\n\n        :param partialdec: partialdec to be checked\n        :return: True iff partialdec is a duplicate of an existing finished partialdec.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_101isPartialdecDuplicateofFinished(PyObject *__pyx_v_self, PyObject *__pyx_v_partialdec) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isPartialdecDuplicateofFinished (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_partialdec), __pyx_ptype_8pygcgopt_3gcg_PartialDecomposition, 1, "partialdec", 0))) __PYX_ERR(6, 553, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_100isPartialdecDuplicateofFinished(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self), ((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_partialdec));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_100isPartialdecDuplicateofFinished(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_partialdec) {
  gcg::PARTIALDECOMP *__pyx_v_cpp_partialdec;
  unsigned int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  gcg::PARTIALDECOMP *__pyx_t_1;
  unsigned int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isPartialdecDuplicateofFinished", 0);

  /* "src/pygcgopt/detprobdata.pxi":559
 *         :return: True iff partialdec is a duplicate of an existing finished partialdec.
 *         """
 *         cdef PARTIALDECOMP * cpp_partialdec = partialdec.thisptr             # <<<<<<<<<<<<<<
 *         cdef unsigned int result = self.thisptr.isPartialdecDuplicateofFinished(cpp_partialdec)
 *         return result
 */
  __pyx_t_1 = __pyx_v_partialdec->thisptr;
  __pyx_v_cpp_partialdec = __pyx_t_1;

  /* "src/pygcgopt/detprobdata.pxi":560
 *         """
 *         cdef PARTIALDECOMP * cpp_partialdec = partialdec.thisptr
 *         cdef unsigned int result = self.thisptr.isPartialdecDuplicateofFinished(cpp_partialdec)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_2 = __pyx_v_self->thisptr->isPartialdecDuplicateofFinished(__pyx_v_cpp_partialdec);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 560, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_2;

  /* "src/pygcgopt/detprobdata.pxi":561
 *         cdef PARTIALDECOMP * cpp_partialdec = partialdec.thisptr
 *         cdef unsigned int result = self.thisptr.isPartialdecDuplicateofFinished(cpp_partialdec)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def isAssignedToOrigProb(DetProbData self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_unsigned_int(__pyx_v_result); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/detprobdata.pxi":553
 *     #     raise NotImplementedError()
 * 
 *     def isPartialdecDuplicateofFinished(DetProbData self, PartialDecomposition partialdec):             # <<<<<<<<<<<<<<
 *         """check if partialdec is a duplicate of an existing finished partialdec
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.isPartialdecDuplicateofFinished", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":563
 *         return result
 * 
 *     def isAssignedToOrigProb(DetProbData self):             # <<<<<<<<<<<<<<
 *         """returns True if the matrix structure corresponds to the presolved problem
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_103isAssignedToOrigProb(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_11DetProbData_102isAssignedToOrigProb[] = "DetProbData.isAssignedToOrigProb(self)\nreturns True if the matrix structure corresponds to the presolved problem\n\n        :return: True if the matrix structure corresponds to the presolved problem.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_103isAssignedToOrigProb(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isAssignedToOrigProb (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_102isAssignedToOrigProb(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_102isAssignedToOrigProb(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self) {
  unsigned int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isAssignedToOrigProb", 0);

  /* "src/pygcgopt/detprobdata.pxi":568
 *         :return: True if the matrix structure corresponds to the presolved problem.
 *         """
 *         cdef unsigned int result = self.thisptr.isAssignedToOrigProb()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->isAssignedToOrigProb();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 568, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "src/pygcgopt/detprobdata.pxi":569
 *         """
 *         cdef unsigned int result = self.thisptr.isAssignedToOrigProb()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     # def isRangedRow(DetProbData self, SCIP * scip, double lhs, double rhs):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 569, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/detprobdata.pxi":563
 *         return result
 * 
 *     def isAssignedToOrigProb(DetProbData self):             # <<<<<<<<<<<<<<
 *         """returns True if the matrix structure corresponds to the presolved problem
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.isAssignedToOrigProb", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":580
 *     #     raise NotImplementedError()
 * 
 *     def partialdecIsNoDuplicateOfPartialdecs(DetProbData self, PartialDecomposition comppartialdec, object partialdecs, bool sort):             # <<<<<<<<<<<<<<
 *         """check if partialdec is a duplicate of any given partialdecs
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_105partialdecIsNoDuplicateOfPartialdecs(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_11DetProbData_104partialdecIsNoDuplicateOfPartialdecs[] = "DetProbData.partialdecIsNoDuplicateOfPartialdecs(self, PartialDecomposition comppartialdec, partialdecs, bool sort)\ncheck if partialdec is a duplicate of any given partialdecs\n\n        :param comppartialdec: partialdec to be checked\n        :param partialdecs: partialdecs to compare with\n        :param sort: sort the vars and conss data structures in the partialdecs by their indices\n        :return: True iff partialdec is no duplicate of any given partialdecs.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_105partialdecIsNoDuplicateOfPartialdecs(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_comppartialdec = 0;
  PyObject *__pyx_v_partialdecs = 0;
  bool __pyx_v_sort;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("partialdecIsNoDuplicateOfPartialdecs (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_comppartialdec,&__pyx_n_s_partialdecs,&__pyx_n_s_sort,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_comppartialdec)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_partialdecs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("partialdecIsNoDuplicateOfPartialdecs", 1, 3, 3, 1); __PYX_ERR(6, 580, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sort)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("partialdecIsNoDuplicateOfPartialdecs", 1, 3, 3, 2); __PYX_ERR(6, 580, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "partialdecIsNoDuplicateOfPartialdecs") < 0)) __PYX_ERR(6, 580, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_comppartialdec = ((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)values[0]);
    __pyx_v_partialdecs = values[1];
    __pyx_v_sort = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_sort == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(6, 580, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("partialdecIsNoDuplicateOfPartialdecs", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(6, 580, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.partialdecIsNoDuplicateOfPartialdecs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_comppartialdec), __pyx_ptype_8pygcgopt_3gcg_PartialDecomposition, 1, "comppartialdec", 0))) __PYX_ERR(6, 580, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_104partialdecIsNoDuplicateOfPartialdecs(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self), __pyx_v_comppartialdec, __pyx_v_partialdecs, __pyx_v_sort);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_104partialdecIsNoDuplicateOfPartialdecs(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_comppartialdec, PyObject *__pyx_v_partialdecs, bool __pyx_v_sort) {
  gcg::PARTIALDECOMP *__pyx_v_cpp_comppartialdec;
  std::vector<gcg::PARTIALDECOMP *>  __pyx_v_cpp_partialdecs;
  gcg::PARTIALDECOMP *__pyx_v_partialdecs_ptr;
  struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_partialdecs_element = 0;
  bool __pyx_v_cpp_sort;
  unsigned int __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  gcg::PARTIALDECOMP *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  unsigned int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("partialdecIsNoDuplicateOfPartialdecs", 0);

  /* "src/pygcgopt/detprobdata.pxi":588
 *         :return: True iff partialdec is no duplicate of any given partialdecs.
 *         """
 *         cdef PARTIALDECOMP * cpp_comppartialdec = comppartialdec.thisptr             # <<<<<<<<<<<<<<
 *         # this seems to be possible only when we use C++11 (-std=c++11)
 *         # maybe it will be fixed in a future version of Cython
 */
  __pyx_t_1 = __pyx_v_comppartialdec->thisptr;
  __pyx_v_cpp_comppartialdec = __pyx_t_1;

  /* "src/pygcgopt/detprobdata.pxi":592
 *         # maybe it will be fixed in a future version of Cython
 *         cdef vector[PARTIALDECOMP *] cpp_partialdecs
 *         cdef PARTIALDECOMP * partialdecs_ptr = NULL             # <<<<<<<<<<<<<<
 *         cdef PartialDecomposition partialdecs_element
 *         for partialdecs_element in partialdecs:
 */
  __pyx_v_partialdecs_ptr = NULL;

  /* "src/pygcgopt/detprobdata.pxi":594
 *         cdef PARTIALDECOMP * partialdecs_ptr = NULL
 *         cdef PartialDecomposition partialdecs_element
 *         for partialdecs_element in partialdecs:             # <<<<<<<<<<<<<<
 *             partialdecs_ptr = <PARTIALDECOMP*> partialdecs_element.thisptr
 *             cpp_partialdecs.push_back(partialdecs_ptr)
 */
  if (likely(PyList_CheckExact(__pyx_v_partialdecs)) || PyTuple_CheckExact(__pyx_v_partialdecs)) {
    __pyx_t_2 = __pyx_v_partialdecs; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_partialdecs); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 594, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 594, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(6, 594, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 594, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(6, 594, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 594, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(6, 594, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_8pygcgopt_3gcg_PartialDecomposition))))) __PYX_ERR(6, 594, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_partialdecs_element, ((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "src/pygcgopt/detprobdata.pxi":595
 *         cdef PartialDecomposition partialdecs_element
 *         for partialdecs_element in partialdecs:
 *             partialdecs_ptr = <PARTIALDECOMP*> partialdecs_element.thisptr             # <<<<<<<<<<<<<<
 *             cpp_partialdecs.push_back(partialdecs_ptr)
 *         cdef bool cpp_sort = sort
 */
    __pyx_v_partialdecs_ptr = ((gcg::PARTIALDECOMP *)__pyx_v_partialdecs_element->thisptr);

    /* "src/pygcgopt/detprobdata.pxi":596
 *         for partialdecs_element in partialdecs:
 *             partialdecs_ptr = <PARTIALDECOMP*> partialdecs_element.thisptr
 *             cpp_partialdecs.push_back(partialdecs_ptr)             # <<<<<<<<<<<<<<
 *         cdef bool cpp_sort = sort
 *         cdef unsigned int result = self.thisptr.partialdecIsNoDuplicateOfPartialdecs(cpp_comppartialdec, cpp_partialdecs, cpp_sort)
 */
    try {
      __pyx_v_cpp_partialdecs.push_back(__pyx_v_partialdecs_ptr);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(6, 596, __pyx_L1_error)
    }

    /* "src/pygcgopt/detprobdata.pxi":594
 *         cdef PARTIALDECOMP * partialdecs_ptr = NULL
 *         cdef PartialDecomposition partialdecs_element
 *         for partialdecs_element in partialdecs:             # <<<<<<<<<<<<<<
 *             partialdecs_ptr = <PARTIALDECOMP*> partialdecs_element.thisptr
 *             cpp_partialdecs.push_back(partialdecs_ptr)
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/pygcgopt/detprobdata.pxi":597
 *             partialdecs_ptr = <PARTIALDECOMP*> partialdecs_element.thisptr
 *             cpp_partialdecs.push_back(partialdecs_ptr)
 *         cdef bool cpp_sort = sort             # <<<<<<<<<<<<<<
 *         cdef unsigned int result = self.thisptr.partialdecIsNoDuplicateOfPartialdecs(cpp_comppartialdec, cpp_partialdecs, cpp_sort)
 *         return result
 */
  __pyx_v_cpp_sort = __pyx_v_sort;

  /* "src/pygcgopt/detprobdata.pxi":598
 *             cpp_partialdecs.push_back(partialdecs_ptr)
 *         cdef bool cpp_sort = sort
 *         cdef unsigned int result = self.thisptr.partialdecIsNoDuplicateOfPartialdecs(cpp_comppartialdec, cpp_partialdecs, cpp_sort)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_6 = __pyx_v_self->thisptr->partialdecIsNoDuplicateOfPartialdecs(__pyx_v_cpp_comppartialdec, __pyx_v_cpp_partialdecs, __pyx_v_cpp_sort);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 598, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_6;

  /* "src/pygcgopt/detprobdata.pxi":599
 *         cdef bool cpp_sort = sort
 *         cdef unsigned int result = self.thisptr.partialdecIsNoDuplicateOfPartialdecs(cpp_comppartialdec, cpp_partialdecs, cpp_sort)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     # def printBlockcandidateInformation(DetProbData self, SCIP * scip, FILE * file):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/detprobdata.pxi":580
 *     #     raise NotImplementedError()
 * 
 *     def partialdecIsNoDuplicateOfPartialdecs(DetProbData self, PartialDecomposition comppartialdec, object partialdecs, bool sort):             # <<<<<<<<<<<<<<
 *         """check if partialdec is a duplicate of any given partialdecs
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.partialdecIsNoDuplicateOfPartialdecs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_partialdecs_element);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":616
 *     #     raise NotImplementedError()
 * 
 *     def sortFinishedForScore(DetProbData self):             # <<<<<<<<<<<<<<
 *         """sorts partialdecs in finished partialdecs data structure according to the current scoretype.
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_107sortFinishedForScore(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_11DetProbData_106sortFinishedForScore[] = "DetProbData.sortFinishedForScore(self)\nsorts partialdecs in finished partialdecs data structure according to the current scoretype.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_107sortFinishedForScore(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sortFinishedForScore (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_106sortFinishedForScore(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_106sortFinishedForScore(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sortFinishedForScore", 0);

  /* "src/pygcgopt/detprobdata.pxi":619
 *         """sorts partialdecs in finished partialdecs data structure according to the current scoretype.
 *         """
 *         self.thisptr.sortFinishedForScore()             # <<<<<<<<<<<<<<
 * 
 *     def translatePartialdecs(DetProbData self, DetProbData otherdata, object otherpartialdecs):
 */
  try {
    __pyx_v_self->thisptr->sortFinishedForScore();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 619, __pyx_L1_error)
  }

  /* "src/pygcgopt/detprobdata.pxi":616
 *     #     raise NotImplementedError()
 * 
 *     def sortFinishedForScore(DetProbData self):             # <<<<<<<<<<<<<<
 *         """sorts partialdecs in finished partialdecs data structure according to the current scoretype.
 *         """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.sortFinishedForScore", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pygcgopt/detprobdata.pxi":621
 *         self.thisptr.sortFinishedForScore()
 * 
 *     def translatePartialdecs(DetProbData self, DetProbData otherdata, object otherpartialdecs):             # <<<<<<<<<<<<<<
 *         """translates partialdecs if the index structure of the problem has changed, e.g. due to presolving
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_109translatePartialdecs(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_11DetProbData_108translatePartialdecs[] = "DetProbData.translatePartialdecs(self, DetProbData otherdata, otherpartialdecs)\ntranslates partialdecs if the index structure of the problem has changed, e.g. due to presolving\n\n        :return: translated partialdecs\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_109translatePartialdecs(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_otherdata = 0;
  PyObject *__pyx_v_otherpartialdecs = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("translatePartialdecs (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_otherdata,&__pyx_n_s_otherpartialdecs,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_otherdata)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_otherpartialdecs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("translatePartialdecs", 1, 2, 2, 1); __PYX_ERR(6, 621, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "translatePartialdecs") < 0)) __PYX_ERR(6, 621, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_otherdata = ((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)values[0]);
    __pyx_v_otherpartialdecs = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("translatePartialdecs", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(6, 621, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.translatePartialdecs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_otherdata), __pyx_ptype_8pygcgopt_3gcg_DetProbData, 1, "otherdata", 0))) __PYX_ERR(6, 621, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_108translatePartialdecs(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self), __pyx_v_otherdata, __pyx_v_otherpartialdecs);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_108translatePartialdecs(struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_otherdata, PyObject *__pyx_v_otherpartialdecs) {
  gcg::DETPROBDATA *__pyx_v_cpp_otherdata;
  std::vector<gcg::PARTIALDECOMP *>  __pyx_v_cpp_otherpartialdecs;
  gcg::PARTIALDECOMP *__pyx_v_otherpartialdecs_ptr;
  struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_otherpartialdecs_element = 0;
  std::vector<gcg::PARTIALDECOMP *>  __pyx_v_result;
  gcg::PARTIALDECOMP *__pyx_9genexpr39__pyx_v_r;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  gcg::DETPROBDATA *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  std::vector<gcg::PARTIALDECOMP *>  __pyx_t_6;
  std::vector<gcg::PARTIALDECOMP *> ::iterator __pyx_t_7;
  gcg::PARTIALDECOMP *__pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("translatePartialdecs", 0);

  /* "src/pygcgopt/detprobdata.pxi":626
 *         :return: translated partialdecs
 *         """
 *         cdef DETPROBDATA * cpp_otherdata = otherdata.thisptr             # <<<<<<<<<<<<<<
 *         # this seems to be possible only when we use C++11 (-std=c++11)
 *         # maybe it will be fixed in a future version of Cython
 */
  __pyx_t_1 = __pyx_v_otherdata->thisptr;
  __pyx_v_cpp_otherdata = __pyx_t_1;

  /* "src/pygcgopt/detprobdata.pxi":630
 *         # maybe it will be fixed in a future version of Cython
 *         cdef vector[PARTIALDECOMP *] cpp_otherpartialdecs
 *         cdef PARTIALDECOMP * otherpartialdecs_ptr = NULL             # <<<<<<<<<<<<<<
 *         cdef PartialDecomposition otherpartialdecs_element
 *         for otherpartialdecs_element in otherpartialdecs:
 */
  __pyx_v_otherpartialdecs_ptr = NULL;

  /* "src/pygcgopt/detprobdata.pxi":632
 *         cdef PARTIALDECOMP * otherpartialdecs_ptr = NULL
 *         cdef PartialDecomposition otherpartialdecs_element
 *         for otherpartialdecs_element in otherpartialdecs:             # <<<<<<<<<<<<<<
 *             otherpartialdecs_ptr = <PARTIALDECOMP*> otherpartialdecs_element.thisptr
 *             cpp_otherpartialdecs.push_back(otherpartialdecs_ptr)
 */
  if (likely(PyList_CheckExact(__pyx_v_otherpartialdecs)) || PyTuple_CheckExact(__pyx_v_otherpartialdecs)) {
    __pyx_t_2 = __pyx_v_otherpartialdecs; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_otherpartialdecs); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 632, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 632, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(6, 632, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 632, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(6, 632, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 632, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(6, 632, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_8pygcgopt_3gcg_PartialDecomposition))))) __PYX_ERR(6, 632, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_otherpartialdecs_element, ((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "src/pygcgopt/detprobdata.pxi":633
 *         cdef PartialDecomposition otherpartialdecs_element
 *         for otherpartialdecs_element in otherpartialdecs:
 *             otherpartialdecs_ptr = <PARTIALDECOMP*> otherpartialdecs_element.thisptr             # <<<<<<<<<<<<<<
 *             cpp_otherpartialdecs.push_back(otherpartialdecs_ptr)
 *         cdef vector[PARTIALDECOMP *] result = self.thisptr.translatePartialdecs(cpp_otherdata, cpp_otherpartialdecs)
 */
    __pyx_v_otherpartialdecs_ptr = ((gcg::PARTIALDECOMP *)__pyx_v_otherpartialdecs_element->thisptr);

    /* "src/pygcgopt/detprobdata.pxi":634
 *         for otherpartialdecs_element in otherpartialdecs:
 *             otherpartialdecs_ptr = <PARTIALDECOMP*> otherpartialdecs_element.thisptr
 *             cpp_otherpartialdecs.push_back(otherpartialdecs_ptr)             # <<<<<<<<<<<<<<
 *         cdef vector[PARTIALDECOMP *] result = self.thisptr.translatePartialdecs(cpp_otherdata, cpp_otherpartialdecs)
 *         return [PartialDecomposition.create(r) for r in result]
 */
    try {
      __pyx_v_cpp_otherpartialdecs.push_back(__pyx_v_otherpartialdecs_ptr);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(6, 634, __pyx_L1_error)
    }

    /* "src/pygcgopt/detprobdata.pxi":632
 *         cdef PARTIALDECOMP * otherpartialdecs_ptr = NULL
 *         cdef PartialDecomposition otherpartialdecs_element
 *         for otherpartialdecs_element in otherpartialdecs:             # <<<<<<<<<<<<<<
 *             otherpartialdecs_ptr = <PARTIALDECOMP*> otherpartialdecs_element.thisptr
 *             cpp_otherpartialdecs.push_back(otherpartialdecs_ptr)
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/pygcgopt/detprobdata.pxi":635
 *             otherpartialdecs_ptr = <PARTIALDECOMP*> otherpartialdecs_element.thisptr
 *             cpp_otherpartialdecs.push_back(otherpartialdecs_ptr)
 *         cdef vector[PARTIALDECOMP *] result = self.thisptr.translatePartialdecs(cpp_otherdata, cpp_otherpartialdecs)             # <<<<<<<<<<<<<<
 *         return [PartialDecomposition.create(r) for r in result]
 */
  try {
    __pyx_t_6 = __pyx_v_self->thisptr->translatePartialdecs(__pyx_v_cpp_otherdata, __pyx_v_cpp_otherpartialdecs);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 635, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_6;

  /* "src/pygcgopt/detprobdata.pxi":636
 *             cpp_otherpartialdecs.push_back(otherpartialdecs_ptr)
 *         cdef vector[PARTIALDECOMP *] result = self.thisptr.translatePartialdecs(cpp_otherdata, cpp_otherpartialdecs)
 *         return [PartialDecomposition.create(r) for r in result]             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 636, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = __pyx_v_result.begin();
    for (;;) {
      if (!(__pyx_t_7 != __pyx_v_result.end())) break;
      __pyx_t_8 = *__pyx_t_7;
      ++__pyx_t_7;
      __pyx_9genexpr39__pyx_v_r = __pyx_t_8;
      __pyx_t_5 = __pyx_f_8pygcgopt_3gcg_20PartialDecomposition_create(__pyx_9genexpr39__pyx_v_r); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 636, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_5))) __PYX_ERR(6, 636, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  } /* exit inner scope */
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pygcgopt/detprobdata.pxi":621
 *         self.thisptr.sortFinishedForScore()
 * 
 *     def translatePartialdecs(DetProbData self, DetProbData otherdata, object otherpartialdecs):             # <<<<<<<<<<<<<<
 *         """translates partialdecs if the index structure of the problem has changed, e.g. due to presolving
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.translatePartialdecs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_otherpartialdecs_element);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_111__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_11DetProbData_110__reduce_cython__[] = "DetProbData.__reduce_cython__(self)";
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_111__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_110__reduce_cython__(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_110__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(4, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_113__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_11DetProbData_112__setstate_cython__[] = "DetProbData.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_8pygcgopt_3gcg_11DetProbData_113__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_11DetProbData_112__setstate_cython__(((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_11DetProbData_112__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_DetProbData *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(4, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygcgopt.gcg.DetProbData.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygcgopt/gcg.pyx":30
 * 
 * 
 * cdef SCIP_CLOCK* start_new_clock(SCIP* scip):             # <<<<<<<<<<<<<<
 *     cdef SCIP_CLOCK* clock
 *     PY_SCIP_CALL(SCIPcreateClock(scip, &clock))
 */

static SCIP_CLOCK *__pyx_f_8pygcgopt_3gcg_start_new_clock(SCIP *__pyx_v_scip) {
  SCIP_CLOCK *__pyx_v_clock;
  SCIP_CLOCK *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("start_new_clock", 0);

  /* "pygcgopt/gcg.pyx":32
 * cdef SCIP_CLOCK* start_new_clock(SCIP* scip):
 *     cdef SCIP_CLOCK* clock
 *     PY_SCIP_CALL(SCIPcreateClock(scip, &clock))             # <<<<<<<<<<<<<<
 *     PY_SCIP_CALL(SCIPstartClock(scip, clock))
 *     return clock
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_PY_SCIP_CALL); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_SCIP_RETCODE(SCIPcreateClock(__pyx_v_scip, (&__pyx_v_clock))); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygcgopt/gcg.pyx":33
 *     cdef SCIP_CLOCK* clock
 *     PY_SCIP_CALL(SCIPcreateClock(scip, &clock))
 *     PY_SCIP_CALL(SCIPstartClock(scip, clock))             # <<<<<<<<<<<<<<
 *     return clock
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_PY_SCIP_CALL); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_SCIP_RETCODE(SCIPstartClock(__pyx_v_scip, __pyx_v_clock)); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygcgopt/gcg.pyx":34
 *     PY_SCIP_CALL(SCIPcreateClock(scip, &clock))
 *     PY_SCIP_CALL(SCIPstartClock(scip, clock))
 *     return clock             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_clock;
  goto __pyx_L0;

  /* "pygcgopt/gcg.pyx":30
 * 
 * 
 * cdef SCIP_CLOCK* start_new_clock(SCIP* scip):             # <<<<<<<<<<<<<<
 *     cdef SCIP_CLOCK* clock
 *     PY_SCIP_CALL(SCIPcreateClock(scip, &clock))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("pygcgopt.gcg.start_new_clock", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygcgopt/gcg.pyx":37
 * 
 * 
 * cdef double stop_and_free_clock(SCIP* scip, SCIP_CLOCK* clock):             # <<<<<<<<<<<<<<
 *     PY_SCIP_CALL(SCIPstopClock(scip, clock))
 *     cdef double detection_time = SCIPgetClockTime(scip, clock)
 */

static double __pyx_f_8pygcgopt_3gcg_stop_and_free_clock(SCIP *__pyx_v_scip, SCIP_CLOCK *__pyx_v_clock) {
  double __pyx_v_detection_time;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("stop_and_free_clock", 0);

  /* "pygcgopt/gcg.pyx":38
 * 
 * cdef double stop_and_free_clock(SCIP* scip, SCIP_CLOCK* clock):
 *     PY_SCIP_CALL(SCIPstopClock(scip, clock))             # <<<<<<<<<<<<<<
 *     cdef double detection_time = SCIPgetClockTime(scip, clock)
 *     PY_SCIP_CALL(SCIPfreeClock(scip, &clock))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_PY_SCIP_CALL); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_SCIP_RETCODE(SCIPstopClock(__pyx_v_scip, __pyx_v_clock)); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygcgopt/gcg.pyx":39
 * cdef double stop_and_free_clock(SCIP* scip, SCIP_CLOCK* clock):
 *     PY_SCIP_CALL(SCIPstopClock(scip, clock))
 *     cdef double detection_time = SCIPgetClockTime(scip, clock)             # <<<<<<<<<<<<<<
 *     PY_SCIP_CALL(SCIPfreeClock(scip, &clock))
 *     return detection_time
 */
  __pyx_v_detection_time = SCIPgetClockTime(__pyx_v_scip, __pyx_v_clock);

  /* "pygcgopt/gcg.pyx":40
 *     PY_SCIP_CALL(SCIPstopClock(scip, clock))
 *     cdef double detection_time = SCIPgetClockTime(scip, clock)
 *     PY_SCIP_CALL(SCIPfreeClock(scip, &clock))             # <<<<<<<<<<<<<<
 *     return detection_time
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_PY_SCIP_CALL); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_SCIP_RETCODE(SCIPfreeClock(__pyx_v_scip, (&__pyx_v_clock))); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygcgopt/gcg.pyx":41
 *     cdef double detection_time = SCIPgetClockTime(scip, clock)
 *     PY_SCIP_CALL(SCIPfreeClock(scip, &clock))
 *     return detection_time             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_detection_time;
  goto __pyx_L0;

  /* "pygcgopt/gcg.pyx":37
 * 
 * 
 * cdef double stop_and_free_clock(SCIP* scip, SCIP_CLOCK* clock):             # <<<<<<<<<<<<<<
 *     PY_SCIP_CALL(SCIPstopClock(scip, clock))
 *     cdef double detection_time = SCIPgetClockTime(scip, clock)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("pygcgopt.gcg.stop_and_free_clock", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PY_GCG_PRICINGSTATUS_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PY_GCG_PRICINGSTATUS___reduce_cython__[] = "PY_GCG_PRICINGSTATUS.__reduce_cython__(self)";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PY_GCG_PRICINGSTATUS_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PY_GCG_PRICINGSTATUS___reduce_cython__(((struct __pyx_obj_8pygcgopt_3gcg_PY_GCG_PRICINGSTATUS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PY_GCG_PRICINGSTATUS___reduce_cython__(struct __pyx_obj_8pygcgopt_3gcg_PY_GCG_PRICINGSTATUS *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = ()             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_v_state = __pyx_empty_tuple;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_PY_GCG_PRICINGSTATUS, (type(self), 0xd41d8cd, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_PY_GCG_PRICINGSTATUS, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_PY_GCG_PRICINGSTATUS, (type(self), 0xd41d8cd, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_PY_GCG_PRICINGSTATUS, (type(self), 0xd41d8cd, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_PY_GCG_PRICINGSTA); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_PY_GCG_PRICINGSTATUS, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_PY_GCG_PRICINGSTATUS, (type(self), 0xd41d8cd, None), state
 *     else:
 *         return __pyx_unpickle_PY_GCG_PRICINGSTATUS, (type(self), 0xd41d8cd, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_PY_GCG_PRICINGSTATUS__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_PY_GCG_PRICINGSTA); if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygcgopt.gcg.PY_GCG_PRICINGSTATUS.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PY_GCG_PRICINGSTATUS, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PY_GCG_PRICINGSTATUS__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PY_GCG_PRICINGSTATUS_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_20PY_GCG_PRICINGSTATUS_2__setstate_cython__[] = "PY_GCG_PRICINGSTATUS.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_8pygcgopt_3gcg_20PY_GCG_PRICINGSTATUS_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_20PY_GCG_PRICINGSTATUS_2__setstate_cython__(((struct __pyx_obj_8pygcgopt_3gcg_PY_GCG_PRICINGSTATUS *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_20PY_GCG_PRICINGSTATUS_2__setstate_cython__(struct __pyx_obj_8pygcgopt_3gcg_PY_GCG_PRICINGSTATUS *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_PY_GCG_PRICINGSTATUS, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_PY_GCG_PRICINGSTATUS__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(4, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_8pygcgopt_3gcg___pyx_unpickle_PY_GCG_PRICINGSTATUS__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PY_GCG_PRICINGSTATUS, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PY_GCG_PRICINGSTATUS__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygcgopt.gcg.PY_GCG_PRICINGSTATUS.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygcgopt/gcg.pyx":56
 *     """Main class for interaction with the GCG solver."""
 * 
 *     def includeDefaultPlugins(self):             # <<<<<<<<<<<<<<
 *         """Includes all default plug-ins of GCG into SCIP
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_1includeDefaultPlugins(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_8GCGModel_includeDefaultPlugins[] = "GCGModel.includeDefaultPlugins(self)\nIncludes all default plug-ins of GCG into SCIP\n\n        Called automatically during initialization of the model.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_1includeDefaultPlugins(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("includeDefaultPlugins (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8GCGModel_includeDefaultPlugins(((struct __pyx_obj_8pygcgopt_3gcg_GCGModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_includeDefaultPlugins(struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("includeDefaultPlugins", 0);

  /* "pygcgopt/gcg.pyx":61
 *         Called automatically during initialization of the model.
 *         """
 *         PY_SCIP_CALL(SCIPincludeGcgPlugins(self._scip))             # <<<<<<<<<<<<<<
 * 
 *     def addVar(self, *args, **kwargs):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_PY_SCIP_CALL); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_SCIP_RETCODE(SCIPincludeGcgPlugins(__pyx_v_self->__pyx_base._scip)); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygcgopt/gcg.pyx":56
 *     """Main class for interaction with the GCG solver."""
 * 
 *     def includeDefaultPlugins(self):             # <<<<<<<<<<<<<<
 *         """Includes all default plug-ins of GCG into SCIP
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pygcgopt.gcg.GCGModel.includeDefaultPlugins", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygcgopt/gcg.pyx":63
 *         PY_SCIP_CALL(SCIPincludeGcgPlugins(self._scip))
 * 
 *     def addVar(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         pyVar = <Variable>super().addVar(*args, **kwargs)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_3addVar(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_8GCGModel_2addVar[] = "GCGModel.addVar(self, *args, **kwargs)";
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_3addVar(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addVar (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "addVar", 1))) return NULL;
  __pyx_v_kwargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8GCGModel_2addVar(((struct __pyx_obj_8pygcgopt_3gcg_GCGModel *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_2addVar(struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  struct __pyx_obj_9pyscipopt_4scip_Variable *__pyx_v_pyVar = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addVar", 0);

  /* "pygcgopt/gcg.pyx":64
 * 
 *     def addVar(self, *args, **kwargs):
 *         pyVar = <Variable>super().addVar(*args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         SCIPvarSetData(pyVar.scip_var, NULL)
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_8pygcgopt_3gcg_GCGModel));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_8pygcgopt_3gcg_GCGModel));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_ptype_8pygcgopt_3gcg_GCGModel));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_addVar); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyDict_Copy(__pyx_v_kwargs); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_v_args, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __pyx_t_3;
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_pyVar = ((struct __pyx_obj_9pyscipopt_4scip_Variable *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pygcgopt/gcg.pyx":66
 *         pyVar = <Variable>super().addVar(*args, **kwargs)
 * 
 *         SCIPvarSetData(pyVar.scip_var, NULL)             # <<<<<<<<<<<<<<
 * 
 *         return pyVar
 */
  SCIPvarSetData(__pyx_v_pyVar->scip_var, NULL);

  /* "pygcgopt/gcg.pyx":68
 *         SCIPvarSetData(pyVar.scip_var, NULL)
 * 
 *         return pyVar             # <<<<<<<<<<<<<<
 * 
 *     def presolve(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_pyVar));
  __pyx_r = ((PyObject *)__pyx_v_pyVar);
  goto __pyx_L0;

  /* "pygcgopt/gcg.pyx":63
 *         PY_SCIP_CALL(SCIPincludeGcgPlugins(self._scip))
 * 
 *     def addVar(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         pyVar = <Variable>super().addVar(*args, **kwargs)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygcgopt.gcg.GCGModel.addVar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_pyVar);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygcgopt/gcg.pyx":70
 *         return pyVar
 * 
 *     def presolve(self):             # <<<<<<<<<<<<<<
 *         """Presolve the problem."""
 *         PY_SCIP_CALL(GCGpresolve(self._scip))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_5presolve(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_8GCGModel_4presolve[] = "GCGModel.presolve(self)\nPresolve the problem.";
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_5presolve(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("presolve (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8GCGModel_4presolve(((struct __pyx_obj_8pygcgopt_3gcg_GCGModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_4presolve(struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("presolve", 0);

  /* "pygcgopt/gcg.pyx":72
 *     def presolve(self):
 *         """Presolve the problem."""
 *         PY_SCIP_CALL(GCGpresolve(self._scip))             # <<<<<<<<<<<<<<
 * 
 *     def detect(self):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_PY_SCIP_CALL); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_SCIP_RETCODE(GCGpresolve(__pyx_v_self->__pyx_base._scip)); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygcgopt/gcg.pyx":70
 *         return pyVar
 * 
 *     def presolve(self):             # <<<<<<<<<<<<<<
 *         """Presolve the problem."""
 *         PY_SCIP_CALL(GCGpresolve(self._scip))
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pygcgopt.gcg.GCGModel.presolve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygcgopt/gcg.pyx":74
 *         PY_SCIP_CALL(GCGpresolve(self._scip))
 * 
 *     def detect(self):             # <<<<<<<<<<<<<<
 *         """Detect the problem.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_7detect(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_8GCGModel_6detect[] = "GCGModel.detect(self)\nDetect the problem.\n\n        Can be executed before or after presolving. If executed before presolving, the structure is detected on the original problem and presolving is skiped when solving the problem later.\n\n        .. seealso:: * :meth:`presolve`\n                     * :meth:`optimize`\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_7detect(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("detect (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8GCGModel_6detect(((struct __pyx_obj_8pygcgopt_3gcg_GCGModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_6detect(struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("detect", 0);

  /* "pygcgopt/gcg.pyx":82
 *                      * :meth:`optimize`
 *         """
 *         PY_SCIP_CALL(GCGdetect(self._scip))             # <<<<<<<<<<<<<<
 * 
 *     def printStatistics(self):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_PY_SCIP_CALL); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_SCIP_RETCODE(GCGdetect(__pyx_v_self->__pyx_base._scip)); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygcgopt/gcg.pyx":74
 *         PY_SCIP_CALL(GCGpresolve(self._scip))
 * 
 *     def detect(self):             # <<<<<<<<<<<<<<
 *         """Detect the problem.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pygcgopt.gcg.GCGModel.detect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygcgopt/gcg.pyx":84
 *         PY_SCIP_CALL(GCGdetect(self._scip))
 * 
 *     def printStatistics(self):             # <<<<<<<<<<<<<<
 *         """Print solving statistics of GCG to stdout."""
 *         PY_SCIP_CALL(GCGprintStatistics(self._scip, NULL))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_9printStatistics(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_8GCGModel_8printStatistics[] = "GCGModel.printStatistics(self)\nPrint solving statistics of GCG to stdout.";
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_9printStatistics(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("printStatistics (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8GCGModel_8printStatistics(((struct __pyx_obj_8pygcgopt_3gcg_GCGModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_8printStatistics(struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("printStatistics", 0);

  /* "pygcgopt/gcg.pyx":86
 *     def printStatistics(self):
 *         """Print solving statistics of GCG to stdout."""
 *         PY_SCIP_CALL(GCGprintStatistics(self._scip, NULL))             # <<<<<<<<<<<<<<
 * 
 *     def printVersion(self):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_PY_SCIP_CALL); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 86, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_SCIP_RETCODE(GCGprintStatistics(__pyx_v_self->__pyx_base._scip, NULL)); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 86, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 86, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygcgopt/gcg.pyx":84
 *         PY_SCIP_CALL(GCGdetect(self._scip))
 * 
 *     def printStatistics(self):             # <<<<<<<<<<<<<<
 *         """Print solving statistics of GCG to stdout."""
 *         PY_SCIP_CALL(GCGprintStatistics(self._scip, NULL))
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pygcgopt.gcg.GCGModel.printStatistics", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygcgopt/gcg.pyx":88
 *         PY_SCIP_CALL(GCGprintStatistics(self._scip, NULL))
 * 
 *     def printVersion(self):             # <<<<<<<<<<<<<<
 *         """Print version, copyright information and compile mode of GCG and SCIP"""
 *         GCGprintVersion(self._scip, NULL)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_11printVersion(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_8GCGModel_10printVersion[] = "GCGModel.printVersion(self)\nPrint version, copyright information and compile mode of GCG and SCIP";
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_11printVersion(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("printVersion (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8GCGModel_10printVersion(((struct __pyx_obj_8pygcgopt_3gcg_GCGModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_10printVersion(struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("printVersion", 0);

  /* "pygcgopt/gcg.pyx":90
 *     def printVersion(self):
 *         """Print version, copyright information and compile mode of GCG and SCIP"""
 *         GCGprintVersion(self._scip, NULL)             # <<<<<<<<<<<<<<
 * 
 *         super().printVersion()
 */
  GCGprintVersion(__pyx_v_self->__pyx_base._scip, NULL);

  /* "pygcgopt/gcg.pyx":92
 *         GCGprintVersion(self._scip, NULL)
 * 
 *         super().printVersion()             # <<<<<<<<<<<<<<
 * 
 *     def optimize(self):
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_8pygcgopt_3gcg_GCGModel));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_8pygcgopt_3gcg_GCGModel));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_8pygcgopt_3gcg_GCGModel));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_printVersion); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygcgopt/gcg.pyx":88
 *         PY_SCIP_CALL(GCGprintStatistics(self._scip, NULL))
 * 
 *     def printVersion(self):             # <<<<<<<<<<<<<<
 *         """Print version, copyright information and compile mode of GCG and SCIP"""
 *         GCGprintVersion(self._scip, NULL)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygcgopt.gcg.GCGModel.printVersion", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygcgopt/gcg.pyx":94
 *         super().printVersion()
 * 
 *     def optimize(self):             # <<<<<<<<<<<<<<
 *         """Optimize the problem.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_13optimize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_8GCGModel_12optimize[] = "GCGModel.optimize(self)\nOptimize the problem.\n\n        This will transform, presolve and detect the problem if neccessary.\n        Otherwise, GCG will solve the problem directly.";
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_13optimize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("optimize (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8GCGModel_12optimize(((struct __pyx_obj_8pygcgopt_3gcg_GCGModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_12optimize(struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("optimize", 0);

  /* "pygcgopt/gcg.pyx":99
 *         This will transform, presolve and detect the problem if neccessary.
 *         Otherwise, GCG will solve the problem directly."""
 *         PY_SCIP_CALL(GCGsolve(self._scip))             # <<<<<<<<<<<<<<
 *         self._bestSol = Solution.create(self._scip, SCIPgetBestSol(self._scip))
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_PY_SCIP_CALL); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_SCIP_RETCODE(GCGsolve(__pyx_v_self->__pyx_base._scip)); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygcgopt/gcg.pyx":100
 *         Otherwise, GCG will solve the problem directly."""
 *         PY_SCIP_CALL(GCGsolve(self._scip))
 *         self._bestSol = Solution.create(self._scip, SCIPgetBestSol(self._scip))             # <<<<<<<<<<<<<<
 * 
 *     def getDualbound(self):
 */
  __pyx_t_1 = __pyx_vtabptr_9pyscipopt_4scip_Solution->create(__pyx_v_self->__pyx_base._scip, SCIPgetBestSol(__pyx_v_self->__pyx_base._scip)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9pyscipopt_4scip_Solution))))) __PYX_ERR(3, 100, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base._bestSol);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base._bestSol));
  __pyx_v_self->__pyx_base._bestSol = ((struct __pyx_obj_9pyscipopt_4scip_Solution *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygcgopt/gcg.pyx":94
 *         super().printVersion()
 * 
 *     def optimize(self):             # <<<<<<<<<<<<<<
 *         """Optimize the problem.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pygcgopt.gcg.GCGModel.optimize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygcgopt/gcg.pyx":102
 *         self._bestSol = Solution.create(self._scip, SCIPgetBestSol(self._scip))
 * 
 *     def getDualbound(self):             # <<<<<<<<<<<<<<
 *         """Retrieve the best dual bound.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_15getDualbound(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_8GCGModel_14getDualbound[] = "GCGModel.getDualbound(self)\nRetrieve the best dual bound.\n\n        This retrieves the same dual bound that GCG reports in the console log. The dual bound is based on the\n        objective value of the optimized linear programming relaxation at the current node.\n\n        .. note:: The dual bound at the root node is *not* always equal to the solution of the restricted master problem LP relaxation. This can be due to master cuts or abortion of the pricing loop *before* the restricted master problem is optimal.\n\n        :return: The best dual bound of the current node.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_15getDualbound(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDualbound (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8GCGModel_14getDualbound(((struct __pyx_obj_8pygcgopt_3gcg_GCGModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_14getDualbound(struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getDualbound", 0);

  /* "pygcgopt/gcg.pyx":112
 *         :return: The best dual bound of the current node.
 *         """
 *         return GCGgetDualbound(self._scip)             # <<<<<<<<<<<<<<
 * 
 *     def listDecompositions(self) -> List[PartialDecomposition]:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(GCGgetDualbound(__pyx_v_self->__pyx_base._scip)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pygcgopt/gcg.pyx":102
 *         self._bestSol = Solution.create(self._scip, SCIPgetBestSol(self._scip))
 * 
 *     def getDualbound(self):             # <<<<<<<<<<<<<<
 *         """Retrieve the best dual bound.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygcgopt.gcg.GCGModel.getDualbound", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygcgopt/gcg.pyx":114
 *         return GCGgetDualbound(self._scip)
 * 
 *     def listDecompositions(self) -> List[PartialDecomposition]:             # <<<<<<<<<<<<<<
 *         """Lists all finnished decompositions found during the detection loop or provided by the user."""
 *         cdef int npartialdecs = GCGconshdlrDecompGetNPartialdecs(self._scip)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_17listDecompositions(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_8GCGModel_16listDecompositions[] = "GCGModel.listDecompositions(self) -> List[PartialDecomposition]\nLists all finnished decompositions found during the detection loop or provided by the user.";
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_17listDecompositions(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("listDecompositions (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8GCGModel_16listDecompositions(((struct __pyx_obj_8pygcgopt_3gcg_GCGModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_16listDecompositions(struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self) {
  int __pyx_v_npartialdecs;
  int *__pyx_v_decids;
  PyObject *__pyx_v_decomps = NULL;
  int __pyx_9genexpr40__pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("listDecompositions", 0);

  /* "pygcgopt/gcg.pyx":116
 *     def listDecompositions(self) -> List[PartialDecomposition]:
 *         """Lists all finnished decompositions found during the detection loop or provided by the user."""
 *         cdef int npartialdecs = GCGconshdlrDecompGetNPartialdecs(self._scip)             # <<<<<<<<<<<<<<
 *         cdef int* decids = <int*>malloc(npartialdecs * sizeof(int))
 * 
 */
  __pyx_v_npartialdecs = GCGconshdlrDecompGetNPartialdecs(__pyx_v_self->__pyx_base._scip);

  /* "pygcgopt/gcg.pyx":117
 *         """Lists all finnished decompositions found during the detection loop or provided by the user."""
 *         cdef int npartialdecs = GCGconshdlrDecompGetNPartialdecs(self._scip)
 *         cdef int* decids = <int*>malloc(npartialdecs * sizeof(int))             # <<<<<<<<<<<<<<
 * 
 *         GCGconshdlrDecompGetFinishedPartialdecsList(self._scip, &decids, &npartialdecs)
 */
  __pyx_v_decids = ((int *)malloc((__pyx_v_npartialdecs * (sizeof(int)))));

  /* "pygcgopt/gcg.pyx":119
 *         cdef int* decids = <int*>malloc(npartialdecs * sizeof(int))
 * 
 *         GCGconshdlrDecompGetFinishedPartialdecsList(self._scip, &decids, &npartialdecs)             # <<<<<<<<<<<<<<
 * 
 *         decomps = [PartialDecomposition.create(GCGconshdlrDecompGetPartialdecFromID(self._scip, decids[i])) for i in range(npartialdecs)]
 */
  (void)(GCGconshdlrDecompGetFinishedPartialdecsList(__pyx_v_self->__pyx_base._scip, (&__pyx_v_decids), (&__pyx_v_npartialdecs)));

  /* "pygcgopt/gcg.pyx":121
 *         GCGconshdlrDecompGetFinishedPartialdecsList(self._scip, &decids, &npartialdecs)
 * 
 *         decomps = [PartialDecomposition.create(GCGconshdlrDecompGetPartialdecFromID(self._scip, decids[i])) for i in range(npartialdecs)]             # <<<<<<<<<<<<<<
 * 
 *         free(decids)
 */
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 121, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_v_npartialdecs;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_9genexpr40__pyx_v_i = __pyx_t_4;
      __pyx_t_5 = __pyx_f_8pygcgopt_3gcg_20PartialDecomposition_create(GCGconshdlrDecompGetPartialdecFromID(__pyx_v_self->__pyx_base._scip, (__pyx_v_decids[__pyx_9genexpr40__pyx_v_i]))); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 121, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(3, 121, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  } /* exit inner scope */
  __pyx_v_decomps = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygcgopt/gcg.pyx":123
 *         decomps = [PartialDecomposition.create(GCGconshdlrDecompGetPartialdecFromID(self._scip, decids[i])) for i in range(npartialdecs)]
 * 
 *         free(decids)             # <<<<<<<<<<<<<<
 * 
 *         return decomps
 */
  free(__pyx_v_decids);

  /* "pygcgopt/gcg.pyx":125
 *         free(decids)
 * 
 *         return decomps             # <<<<<<<<<<<<<<
 * 
 *     def addDecompositionFromConss(self, master_conss, *block_conss):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_decomps);
  __pyx_r = __pyx_v_decomps;
  goto __pyx_L0;

  /* "pygcgopt/gcg.pyx":114
 *         return GCGgetDualbound(self._scip)
 * 
 *     def listDecompositions(self) -> List[PartialDecomposition]:             # <<<<<<<<<<<<<<
 *         """Lists all finnished decompositions found during the detection loop or provided by the user."""
 *         cdef int npartialdecs = GCGconshdlrDecompGetNPartialdecs(self._scip)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygcgopt.gcg.GCGModel.listDecompositions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_decomps);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygcgopt/gcg.pyx":127
 *         return decomps
 * 
 *     def addDecompositionFromConss(self, master_conss, *block_conss):             # <<<<<<<<<<<<<<
 *         """Adds a user specified decomposition to GCG based on constraints.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_19addDecompositionFromConss(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_8GCGModel_18addDecompositionFromConss[] = "GCGModel.addDecompositionFromConss(self, master_conss, *block_conss)\nAdds a user specified decomposition to GCG based on constraints.\n\n        :param master_conss: An iterable of Constraint objects. Can be the empty list.\n        :param block_conss: Any number of lists. The Constraints from each list will be turned into their own block. (optional)\n        :return: The created PartialDecomposition object\n\n        Creates a PartialDecomposition object using createDecomposition(). Fixes the master constraints with\n        fixMasterConss() and the block constraints with fixBlockConss(). The decomposition is added with addDecomposition().\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_19addDecompositionFromConss(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_master_conss = 0;
  PyObject *__pyx_v_block_conss = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addDecompositionFromConss (wrapper)", 0);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_block_conss = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_block_conss)) {
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_block_conss);
  } else {
    __pyx_v_block_conss = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_master_conss,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_master_conss)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, used_pos_args, "addDecompositionFromConss") < 0)) __PYX_ERR(3, 127, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_master_conss = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addDecompositionFromConss", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 127, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_block_conss); __pyx_v_block_conss = 0;
  __Pyx_AddTraceback("pygcgopt.gcg.GCGModel.addDecompositionFromConss", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8GCGModel_18addDecompositionFromConss(((struct __pyx_obj_8pygcgopt_3gcg_GCGModel *)__pyx_v_self), __pyx_v_master_conss, __pyx_v_block_conss);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_block_conss);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_18addDecompositionFromConss(struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self, PyObject *__pyx_v_master_conss, PyObject *__pyx_v_block_conss) {
  struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_pd = 0;
  PyObject *__pyx_v_idx = NULL;
  PyObject *__pyx_v_conss = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addDecompositionFromConss", 0);

  /* "pygcgopt/gcg.pyx":137
 *         fixMasterConss() and the block constraints with fixBlockConss(). The decomposition is added with addDecomposition().
 *         """
 *         cdef PartialDecomposition pd = self.createDecomposition()             # <<<<<<<<<<<<<<
 *         pd.fixConssToMaster(master_conss)
 *         for idx, conss in enumerate(block_conss):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_createDecomposition); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_8pygcgopt_3gcg_PartialDecomposition))))) __PYX_ERR(3, 137, __pyx_L1_error)
  __pyx_v_pd = ((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygcgopt/gcg.pyx":138
 *         """
 *         cdef PartialDecomposition pd = self.createDecomposition()
 *         pd.fixConssToMaster(master_conss)             # <<<<<<<<<<<<<<
 *         for idx, conss in enumerate(block_conss):
 *             if not isinstance(conss, Iterable):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_pd), __pyx_n_s_fixConssToMaster); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_master_conss) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_master_conss);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygcgopt/gcg.pyx":139
 *         cdef PartialDecomposition pd = self.createDecomposition()
 *         pd.fixConssToMaster(master_conss)
 *         for idx, conss in enumerate(block_conss):             # <<<<<<<<<<<<<<
 *             if not isinstance(conss, Iterable):
 *                 pd.fixConsToBlock(conss, idx)
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_1 = __pyx_int_0;
  __pyx_t_2 = __pyx_v_block_conss; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
  for (;;) {
    if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(3, 139, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_conss, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_1);
    __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "pygcgopt/gcg.pyx":140
 *         pd.fixConssToMaster(master_conss)
 *         for idx, conss in enumerate(block_conss):
 *             if not isinstance(conss, Iterable):             # <<<<<<<<<<<<<<
 *                 pd.fixConsToBlock(conss, idx)
 *             else:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Iterable); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyObject_IsInstance(__pyx_v_conss, __pyx_t_3); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(3, 140, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = ((!(__pyx_t_5 != 0)) != 0);
    if (__pyx_t_6) {

      /* "pygcgopt/gcg.pyx":141
 *         for idx, conss in enumerate(block_conss):
 *             if not isinstance(conss, Iterable):
 *                 pd.fixConsToBlock(conss, idx)             # <<<<<<<<<<<<<<
 *             else:
 *                 pd.fixConssToBlock(conss, idx)
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_pd), __pyx_n_s_fixConsToBlock); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 141, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = NULL;
      __pyx_t_9 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
          __pyx_t_9 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_conss, __pyx_v_idx};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 141, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_conss, __pyx_v_idx};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 141, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      {
        __pyx_t_10 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(3, 141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        if (__pyx_t_8) {
          __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_8); __pyx_t_8 = NULL;
        }
        __Pyx_INCREF(__pyx_v_conss);
        __Pyx_GIVEREF(__pyx_v_conss);
        PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_9, __pyx_v_conss);
        __Pyx_INCREF(__pyx_v_idx);
        __Pyx_GIVEREF(__pyx_v_idx);
        PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_9, __pyx_v_idx);
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_10, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "pygcgopt/gcg.pyx":140
 *         pd.fixConssToMaster(master_conss)
 *         for idx, conss in enumerate(block_conss):
 *             if not isinstance(conss, Iterable):             # <<<<<<<<<<<<<<
 *                 pd.fixConsToBlock(conss, idx)
 *             else:
 */
      goto __pyx_L5;
    }

    /* "pygcgopt/gcg.pyx":143
 *                 pd.fixConsToBlock(conss, idx)
 *             else:
 *                 pd.fixConssToBlock(conss, idx)             # <<<<<<<<<<<<<<
 *         self.addDecomposition(pd)
 *         return pd
 */
    /*else*/ {
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_pd), __pyx_n_s_fixConssToBlock); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 143, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_10 = NULL;
      __pyx_t_9 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
          __pyx_t_9 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_v_conss, __pyx_v_idx};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 143, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_v_conss, __pyx_v_idx};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 143, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 143, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (__pyx_t_10) {
          __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_10); __pyx_t_10 = NULL;
        }
        __Pyx_INCREF(__pyx_v_conss);
        __Pyx_GIVEREF(__pyx_v_conss);
        PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_9, __pyx_v_conss);
        __Pyx_INCREF(__pyx_v_idx);
        __Pyx_GIVEREF(__pyx_v_idx);
        PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_9, __pyx_v_idx);
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 143, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_L5:;

    /* "pygcgopt/gcg.pyx":139
 *         cdef PartialDecomposition pd = self.createDecomposition()
 *         pd.fixConssToMaster(master_conss)
 *         for idx, conss in enumerate(block_conss):             # <<<<<<<<<<<<<<
 *             if not isinstance(conss, Iterable):
 *                 pd.fixConsToBlock(conss, idx)
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygcgopt/gcg.pyx":144
 *             else:
 *                 pd.fixConssToBlock(conss, idx)
 *         self.addDecomposition(pd)             # <<<<<<<<<<<<<<
 *         return pd
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_addDecomposition); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, ((PyObject *)__pyx_v_pd)) : __Pyx_PyObject_CallOneArg(__pyx_t_2, ((PyObject *)__pyx_v_pd));
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygcgopt/gcg.pyx":145
 *                 pd.fixConssToBlock(conss, idx)
 *         self.addDecomposition(pd)
 *         return pd             # <<<<<<<<<<<<<<
 * 
 *     def addPreexistingPartialDecomposition(self, PartialDecomposition partialdec):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_pd));
  __pyx_r = ((PyObject *)__pyx_v_pd);
  goto __pyx_L0;

  /* "pygcgopt/gcg.pyx":127
 *         return decomps
 * 
 *     def addDecompositionFromConss(self, master_conss, *block_conss):             # <<<<<<<<<<<<<<
 *         """Adds a user specified decomposition to GCG based on constraints.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("pygcgopt.gcg.GCGModel.addDecompositionFromConss", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_pd);
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_XDECREF(__pyx_v_conss);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygcgopt/gcg.pyx":147
 *         return pd
 * 
 *     def addPreexistingPartialDecomposition(self, PartialDecomposition partialdec):             # <<<<<<<<<<<<<<
 *         self.addDecomposition(partialdec)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_21addPreexistingPartialDecomposition(PyObject *__pyx_v_self, PyObject *__pyx_v_partialdec); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_8GCGModel_20addPreexistingPartialDecomposition[] = "GCGModel.addPreexistingPartialDecomposition(self, PartialDecomposition partialdec)";
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_21addPreexistingPartialDecomposition(PyObject *__pyx_v_self, PyObject *__pyx_v_partialdec) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addPreexistingPartialDecomposition (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_partialdec), __pyx_ptype_8pygcgopt_3gcg_PartialDecomposition, 1, "partialdec", 0))) __PYX_ERR(3, 147, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8GCGModel_20addPreexistingPartialDecomposition(((struct __pyx_obj_8pygcgopt_3gcg_GCGModel *)__pyx_v_self), ((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_partialdec));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_20addPreexistingPartialDecomposition(struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self, struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_partialdec) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addPreexistingPartialDecomposition", 0);

  /* "pygcgopt/gcg.pyx":148
 * 
 *     def addPreexistingPartialDecomposition(self, PartialDecomposition partialdec):
 *         self.addDecomposition(partialdec)             # <<<<<<<<<<<<<<
 * 
 *     def addDecomposition(self, PartialDecomposition partialdec):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_addDecomposition); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, ((PyObject *)__pyx_v_partialdec)) : __Pyx_PyObject_CallOneArg(__pyx_t_2, ((PyObject *)__pyx_v_partialdec));
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygcgopt/gcg.pyx":147
 *         return pd
 * 
 *     def addPreexistingPartialDecomposition(self, PartialDecomposition partialdec):             # <<<<<<<<<<<<<<
 *         self.addDecomposition(partialdec)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygcgopt.gcg.GCGModel.addPreexistingPartialDecomposition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygcgopt/gcg.pyx":150
 *         self.addDecomposition(partialdec)
 * 
 *     def addDecomposition(self, PartialDecomposition partialdec):             # <<<<<<<<<<<<<<
 *         """Adds a user specified decomposition to GCG.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_23addDecomposition(PyObject *__pyx_v_self, PyObject *__pyx_v_partialdec); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_8GCGModel_22addDecomposition[] = "GCGModel.addDecomposition(self, PartialDecomposition partialdec)\nAdds a user specified decomposition to GCG.\n\n        The passed PartialDecomposition can be partial or finnished. A partial decomposition will be completed by GCG using\n        its detector loop. If a finnished decomposition is passed, GCG will skip the detection loop and use the\n        provided decomposition right away.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_23addDecomposition(PyObject *__pyx_v_self, PyObject *__pyx_v_partialdec) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addDecomposition (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_partialdec), __pyx_ptype_8pygcgopt_3gcg_PartialDecomposition, 1, "partialdec", 0))) __PYX_ERR(3, 150, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8GCGModel_22addDecomposition(((struct __pyx_obj_8pygcgopt_3gcg_GCGModel *)__pyx_v_self), ((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)__pyx_v_partialdec));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_22addDecomposition(struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self, struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *__pyx_v_partialdec) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addDecomposition", 0);

  /* "pygcgopt/gcg.pyx":157
 *         provided decomposition right away.
 *         """
 *         partialdec.prepare()             # <<<<<<<<<<<<<<
 *         partialdec.setUsergiven()
 *         GCGconshdlrDecompAddPreexisitingPartialDec(self._scip, partialdec.thisptr)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_partialdec), __pyx_n_s_prepare); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygcgopt/gcg.pyx":158
 *         """
 *         partialdec.prepare()
 *         partialdec.setUsergiven()             # <<<<<<<<<<<<<<
 *         GCGconshdlrDecompAddPreexisitingPartialDec(self._scip, partialdec.thisptr)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_partialdec), __pyx_n_s_setUsergiven); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygcgopt/gcg.pyx":159
 *         partialdec.prepare()
 *         partialdec.setUsergiven()
 *         GCGconshdlrDecompAddPreexisitingPartialDec(self._scip, partialdec.thisptr)             # <<<<<<<<<<<<<<
 * 
 *     def createPartialDecomposition(self):
 */
  (void)(GCGconshdlrDecompAddPreexisitingPartialDec(__pyx_v_self->__pyx_base._scip, __pyx_v_partialdec->thisptr));

  /* "pygcgopt/gcg.pyx":150
 *         self.addDecomposition(partialdec)
 * 
 *     def addDecomposition(self, PartialDecomposition partialdec):             # <<<<<<<<<<<<<<
 *         """Adds a user specified decomposition to GCG.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygcgopt.gcg.GCGModel.addDecomposition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygcgopt/gcg.pyx":161
 *         GCGconshdlrDecompAddPreexisitingPartialDec(self._scip, partialdec.thisptr)
 * 
 *     def createPartialDecomposition(self):             # <<<<<<<<<<<<<<
 *         return self.createDecomposition()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_25createPartialDecomposition(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_8GCGModel_24createPartialDecomposition[] = "GCGModel.createPartialDecomposition(self)";
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_25createPartialDecomposition(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("createPartialDecomposition (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8GCGModel_24createPartialDecomposition(((struct __pyx_obj_8pygcgopt_3gcg_GCGModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_24createPartialDecomposition(struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("createPartialDecomposition", 0);

  /* "pygcgopt/gcg.pyx":162
 * 
 *     def createPartialDecomposition(self):
 *         return self.createDecomposition()             # <<<<<<<<<<<<<<
 * 
 *     def createDecomposition(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_createDecomposition); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pygcgopt/gcg.pyx":161
 *         GCGconshdlrDecompAddPreexisitingPartialDec(self._scip, partialdec.thisptr)
 * 
 *     def createPartialDecomposition(self):             # <<<<<<<<<<<<<<
 *         return self.createDecomposition()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygcgopt.gcg.GCGModel.createPartialDecomposition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygcgopt/gcg.pyx":164
 *         return self.createDecomposition()
 * 
 *     def createDecomposition(self):             # <<<<<<<<<<<<<<
 *         """Creates a new empty PartialDecomposition.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_27createDecomposition(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_8GCGModel_26createDecomposition[] = "GCGModel.createDecomposition(self)\nCreates a new empty PartialDecomposition.\n\n        The created PartialDecomposition object can be used to fix constraints and variables. Afterwards, it can be\n        passed to the model through addPreexistingPartialDecomposition().\n\n        .. seealso:: * :meth:`PartialDecomposition.fixConsToMaster`\n                     * :meth:`PartialDecomposition.fixConssToMaster`\n                     * :meth:`PartialDecomposition.fixConsToBlock`\n                     * :meth:`PartialDecomposition.fixConssToBlock`\n                     * :meth:`PartialDecomposition.fixConsToBlockId`\n                     * :meth:`PartialDecomposition.fixConssToBlockId`\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_27createDecomposition(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("createDecomposition (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8GCGModel_26createDecomposition(((struct __pyx_obj_8pygcgopt_3gcg_GCGModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_26createDecomposition(struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self) {
  bool __pyx_v_is_presolved;
  gcg::PARTIALDECOMP *__pyx_v_decomp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  bool __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("createDecomposition", 0);

  /* "pygcgopt/gcg.pyx":177
 *                      * :meth:`PartialDecomposition.fixConssToBlockId`
 *         """
 *         cdef bool is_presolved = self.getStage() >= SCIP_STAGE_PRESOLVED             # <<<<<<<<<<<<<<
 *         cdef PARTIALDECOMP *decomp = new PARTIALDECOMP(self._scip, not is_presolved)
 *         return PartialDecomposition.create(decomp)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getStage); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_SCIP_STAGE(SCIP_STAGE_PRESOLVED); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_GE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 177, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(3, 177, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_is_presolved = __pyx_t_4;

  /* "pygcgopt/gcg.pyx":178
 *         """
 *         cdef bool is_presolved = self.getStage() >= SCIP_STAGE_PRESOLVED
 *         cdef PARTIALDECOMP *decomp = new PARTIALDECOMP(self._scip, not is_presolved)             # <<<<<<<<<<<<<<
 *         return PartialDecomposition.create(decomp)
 * 
 */
  __pyx_v_decomp = new gcg::PARTIALDECOMP(__pyx_v_self->__pyx_base._scip, (!(__pyx_v_is_presolved != 0)));

  /* "pygcgopt/gcg.pyx":179
 *         cdef bool is_presolved = self.getStage() >= SCIP_STAGE_PRESOLVED
 *         cdef PARTIALDECOMP *decomp = new PARTIALDECOMP(self._scip, not is_presolved)
 *         return PartialDecomposition.create(decomp)             # <<<<<<<<<<<<<<
 * 
 *     def includePricingSolver(self, PricingSolver pricingSolver, solvername, desc, priority=0, heuristicEnabled=False, exactEnabled=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __pyx_f_8pygcgopt_3gcg_20PartialDecomposition_create(__pyx_v_decomp); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pygcgopt/gcg.pyx":164
 *         return self.createDecomposition()
 * 
 *     def createDecomposition(self):             # <<<<<<<<<<<<<<
 *         """Creates a new empty PartialDecomposition.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygcgopt.gcg.GCGModel.createDecomposition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygcgopt/gcg.pyx":181
 *         return PartialDecomposition.create(decomp)
 * 
 *     def includePricingSolver(self, PricingSolver pricingSolver, solvername, desc, priority=0, heuristicEnabled=False, exactEnabled=False):             # <<<<<<<<<<<<<<
 *         c_solvername = str_conversion(solvername)
 *         c_desc = str_conversion(desc)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_29includePricingSolver(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_8GCGModel_28includePricingSolver[] = "GCGModel.includePricingSolver(self, PricingSolver pricingSolver, solvername, desc, priority=0, heuristicEnabled=False, exactEnabled=False)";
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_29includePricingSolver(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *__pyx_v_pricingSolver = 0;
  PyObject *__pyx_v_solvername = 0;
  PyObject *__pyx_v_desc = 0;
  PyObject *__pyx_v_priority = 0;
  PyObject *__pyx_v_heuristicEnabled = 0;
  PyObject *__pyx_v_exactEnabled = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("includePricingSolver (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pricingSolver,&__pyx_n_s_solvername,&__pyx_n_s_desc,&__pyx_n_s_priority,&__pyx_n_s_heuristicEnabled,&__pyx_n_s_exactEnabled,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[3] = ((PyObject *)__pyx_int_0);
    values[4] = ((PyObject *)Py_False);
    values[5] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pricingSolver)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_solvername)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("includePricingSolver", 0, 3, 6, 1); __PYX_ERR(3, 181, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_desc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("includePricingSolver", 0, 3, 6, 2); __PYX_ERR(3, 181, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_priority);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_heuristicEnabled);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_exactEnabled);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "includePricingSolver") < 0)) __PYX_ERR(3, 181, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_pricingSolver = ((struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *)values[0]);
    __pyx_v_solvername = values[1];
    __pyx_v_desc = values[2];
    __pyx_v_priority = values[3];
    __pyx_v_heuristicEnabled = values[4];
    __pyx_v_exactEnabled = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("includePricingSolver", 0, 3, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 181, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.GCGModel.includePricingSolver", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pricingSolver), __pyx_ptype_8pygcgopt_3gcg_PricingSolver, 1, "pricingSolver", 0))) __PYX_ERR(3, 181, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8GCGModel_28includePricingSolver(((struct __pyx_obj_8pygcgopt_3gcg_GCGModel *)__pyx_v_self), __pyx_v_pricingSolver, __pyx_v_solvername, __pyx_v_desc, __pyx_v_priority, __pyx_v_heuristicEnabled, __pyx_v_exactEnabled);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_28includePricingSolver(struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self, struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *__pyx_v_pricingSolver, PyObject *__pyx_v_solvername, PyObject *__pyx_v_desc, PyObject *__pyx_v_priority, PyObject *__pyx_v_heuristicEnabled, PyObject *__pyx_v_exactEnabled) {
  PyObject *__pyx_v_c_solvername = NULL;
  PyObject *__pyx_v_c_desc = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char const *__pyx_t_6;
  char const *__pyx_t_7;
  int __pyx_t_8;
  SCIP_Bool __pyx_t_9;
  SCIP_Bool __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("includePricingSolver", 0);

  /* "pygcgopt/gcg.pyx":182
 * 
 *     def includePricingSolver(self, PricingSolver pricingSolver, solvername, desc, priority=0, heuristicEnabled=False, exactEnabled=False):
 *         c_solvername = str_conversion(solvername)             # <<<<<<<<<<<<<<
 *         c_desc = str_conversion(desc)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_str_conversion); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_solvername) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_solvername);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_c_solvername = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pygcgopt/gcg.pyx":183
 *     def includePricingSolver(self, PricingSolver pricingSolver, solvername, desc, priority=0, heuristicEnabled=False, exactEnabled=False):
 *         c_solvername = str_conversion(solvername)
 *         c_desc = str_conversion(desc)             # <<<<<<<<<<<<<<
 * 
 *         PY_SCIP_CALL(GCGpricerIncludeSolver(
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_str_conversion); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_desc) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_desc);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_c_desc = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pygcgopt/gcg.pyx":185
 *         c_desc = str_conversion(desc)
 * 
 *         PY_SCIP_CALL(GCGpricerIncludeSolver(             # <<<<<<<<<<<<<<
 *             (<Model>self.getMasterProb())._scip, c_solvername, c_desc, priority, heuristicEnabled, exactEnabled, PyPricingSolverUpdate,
 *             PyPricingSolverSolve, PyPricingSolverSolveHeur, PyPricingSolverFree, PyPricingSolverInit, PyPricingSolverExit,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_PY_SCIP_CALL); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "pygcgopt/gcg.pyx":186
 * 
 *         PY_SCIP_CALL(GCGpricerIncludeSolver(
 *             (<Model>self.getMasterProb())._scip, c_solvername, c_desc, priority, heuristicEnabled, exactEnabled, PyPricingSolverUpdate,             # <<<<<<<<<<<<<<
 *             PyPricingSolverSolve, PyPricingSolverSolveHeur, PyPricingSolverFree, PyPricingSolverInit, PyPricingSolverExit,
 *             PyPricingSolverInitSol, PyPricingSolverExitSol, <GCG_SOLVERDATA*>pricingSolver))
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getMasterProb); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_v_c_solvername); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(3, 186, __pyx_L1_error)
  __pyx_t_7 = __Pyx_PyObject_AsString(__pyx_v_c_desc); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(3, 186, __pyx_L1_error)
  __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_v_priority); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 186, __pyx_L1_error)
  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_v_heuristicEnabled); if (unlikely((__pyx_t_9 == ((SCIP_Bool)-1)) && PyErr_Occurred())) __PYX_ERR(3, 186, __pyx_L1_error)
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_v_exactEnabled); if (unlikely((__pyx_t_10 == ((SCIP_Bool)-1)) && PyErr_Occurred())) __PYX_ERR(3, 186, __pyx_L1_error)

  /* "pygcgopt/gcg.pyx":185
 *         c_desc = str_conversion(desc)
 * 
 *         PY_SCIP_CALL(GCGpricerIncludeSolver(             # <<<<<<<<<<<<<<
 *             (<Model>self.getMasterProb())._scip, c_solvername, c_desc, priority, heuristicEnabled, exactEnabled, PyPricingSolverUpdate,
 *             PyPricingSolverSolve, PyPricingSolverSolveHeur, PyPricingSolverFree, PyPricingSolverInit, PyPricingSolverExit,
 */
  __pyx_t_4 = __Pyx_PyInt_From_SCIP_RETCODE(GCGpricerIncludeSolver(((struct __pyx_obj_9pyscipopt_4scip_Model *)__pyx_t_3)->_scip, __pyx_t_6, __pyx_t_7, __pyx_t_8, __pyx_t_9, __pyx_t_10, __pyx_f_8pygcgopt_3gcg_PyPricingSolverUpdate, __pyx_f_8pygcgopt_3gcg_PyPricingSolverSolve, __pyx_f_8pygcgopt_3gcg_PyPricingSolverSolveHeur, __pyx_f_8pygcgopt_3gcg_PyPricingSolverFree, __pyx_f_8pygcgopt_3gcg_PyPricingSolverInit, __pyx_f_8pygcgopt_3gcg_PyPricingSolverExit, __pyx_f_8pygcgopt_3gcg_PyPricingSolverInitSol, __pyx_f_8pygcgopt_3gcg_PyPricingSolverExitSol, ((GCG_SOLVERDATA *)__pyx_v_pricingSolver))); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygcgopt/gcg.pyx":190
 *             PyPricingSolverInitSol, PyPricingSolverExitSol, <GCG_SOLVERDATA*>pricingSolver))
 * 
 *         pricingSolver.model = <Model>weakref.proxy(self)             # <<<<<<<<<<<<<<
 *         pricingSolver.solvername = solvername
 *         Py_INCREF(pricingSolver)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_weakref); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_proxy); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, ((PyObject *)__pyx_v_self)) : __Pyx_PyObject_CallOneArg(__pyx_t_4, ((PyObject *)__pyx_v_self));
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __pyx_t_1;
  __Pyx_INCREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_GOTREF(__pyx_v_pricingSolver->model);
  __Pyx_DECREF(((PyObject *)__pyx_v_pricingSolver->model));
  __pyx_v_pricingSolver->model = ((struct __pyx_obj_9pyscipopt_4scip_Model *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "pygcgopt/gcg.pyx":191
 * 
 *         pricingSolver.model = <Model>weakref.proxy(self)
 *         pricingSolver.solvername = solvername             # <<<<<<<<<<<<<<
 *         Py_INCREF(pricingSolver)
 * 
 */
  if (!(likely(PyUnicode_CheckExact(__pyx_v_solvername))||((__pyx_v_solvername) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_solvername)->tp_name), 0))) __PYX_ERR(3, 191, __pyx_L1_error)
  __pyx_t_4 = __pyx_v_solvername;
  __Pyx_INCREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_GOTREF(__pyx_v_pricingSolver->solvername);
  __Pyx_DECREF(__pyx_v_pricingSolver->solvername);
  __pyx_v_pricingSolver->solvername = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "pygcgopt/gcg.pyx":192
 *         pricingSolver.model = <Model>weakref.proxy(self)
 *         pricingSolver.solvername = solvername
 *         Py_INCREF(pricingSolver)             # <<<<<<<<<<<<<<
 * 
 *     def listPricingSolvers(self):
 */
  Py_INCREF(((PyObject *)__pyx_v_pricingSolver));

  /* "pygcgopt/gcg.pyx":181
 *         return PartialDecomposition.create(decomp)
 * 
 *     def includePricingSolver(self, PricingSolver pricingSolver, solvername, desc, priority=0, heuristicEnabled=False, exactEnabled=False):             # <<<<<<<<<<<<<<
 *         c_solvername = str_conversion(solvername)
 *         c_desc = str_conversion(desc)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygcgopt.gcg.GCGModel.includePricingSolver", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_c_solvername);
  __Pyx_XDECREF(__pyx_v_c_desc);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygcgopt/gcg.pyx":194
 *         Py_INCREF(pricingSolver)
 * 
 *     def listPricingSolvers(self):             # <<<<<<<<<<<<<<
 *         cdef Model mp = <Model>self.getMasterProb()
 *         cdef int n_pricing_solvers = GCGpricerGetNSolvers(mp._scip)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_31listPricingSolvers(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_8GCGModel_30listPricingSolvers[] = "GCGModel.listPricingSolvers(self)";
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_31listPricingSolvers(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("listPricingSolvers (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8GCGModel_30listPricingSolvers(((struct __pyx_obj_8pygcgopt_3gcg_GCGModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_30listPricingSolvers(struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self) {
  struct __pyx_obj_9pyscipopt_4scip_Model *__pyx_v_mp = 0;
  int __pyx_v_n_pricing_solvers;
  GCG_SOLVER **__pyx_v_pricing_solvers;
  int __pyx_9genexpr41__pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  char const *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("listPricingSolvers", 0);

  /* "pygcgopt/gcg.pyx":195
 * 
 *     def listPricingSolvers(self):
 *         cdef Model mp = <Model>self.getMasterProb()             # <<<<<<<<<<<<<<
 *         cdef int n_pricing_solvers = GCGpricerGetNSolvers(mp._scip)
 *         cdef GCG_SOLVER** pricing_solvers = GCGpricerGetSolvers(mp._scip)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getMasterProb); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __pyx_t_1;
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_mp = ((struct __pyx_obj_9pyscipopt_4scip_Model *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pygcgopt/gcg.pyx":196
 *     def listPricingSolvers(self):
 *         cdef Model mp = <Model>self.getMasterProb()
 *         cdef int n_pricing_solvers = GCGpricerGetNSolvers(mp._scip)             # <<<<<<<<<<<<<<
 *         cdef GCG_SOLVER** pricing_solvers = GCGpricerGetSolvers(mp._scip)
 * 
 */
  __pyx_v_n_pricing_solvers = GCGpricerGetNSolvers(__pyx_v_mp->_scip);

  /* "pygcgopt/gcg.pyx":197
 *         cdef Model mp = <Model>self.getMasterProb()
 *         cdef int n_pricing_solvers = GCGpricerGetNSolvers(mp._scip)
 *         cdef GCG_SOLVER** pricing_solvers = GCGpricerGetSolvers(mp._scip)             # <<<<<<<<<<<<<<
 * 
 *         return [GCGsolverGetName(pricing_solvers[i]).decode('utf-8') for i in range(n_pricing_solvers)]
 */
  __pyx_v_pricing_solvers = GCGpricerGetSolvers(__pyx_v_mp->_scip);

  /* "pygcgopt/gcg.pyx":199
 *         cdef GCG_SOLVER** pricing_solvers = GCGpricerGetSolvers(mp._scip)
 * 
 *         return [GCGsolverGetName(pricing_solvers[i]).decode('utf-8') for i in range(n_pricing_solvers)]             # <<<<<<<<<<<<<<
 * 
 *     def setPricingSolverEnabled(self, pricing_solver_name, is_enabled=True):
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 199, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __pyx_v_n_pricing_solvers;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_9genexpr41__pyx_v_i = __pyx_t_6;
      __pyx_t_7 = GCGsolverGetName((__pyx_v_pricing_solvers[__pyx_9genexpr41__pyx_v_i]));
      __pyx_t_1 = __Pyx_decode_c_string(__pyx_t_7, 0, strlen(__pyx_t_7), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 199, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_1))) __PYX_ERR(3, 199, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
  } /* exit inner scope */
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pygcgopt/gcg.pyx":194
 *         Py_INCREF(pricingSolver)
 * 
 *     def listPricingSolvers(self):             # <<<<<<<<<<<<<<
 *         cdef Model mp = <Model>self.getMasterProb()
 *         cdef int n_pricing_solvers = GCGpricerGetNSolvers(mp._scip)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygcgopt.gcg.GCGModel.listPricingSolvers", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_mp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygcgopt/gcg.pyx":201
 *         return [GCGsolverGetName(pricing_solvers[i]).decode('utf-8') for i in range(n_pricing_solvers)]
 * 
 *     def setPricingSolverEnabled(self, pricing_solver_name, is_enabled=True):             # <<<<<<<<<<<<<<
 *         """Enables or disables exact and heuristic solving for the specified pricing solver.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_33setPricingSolverEnabled(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_8GCGModel_32setPricingSolverEnabled[] = "GCGModel.setPricingSolverEnabled(self, pricing_solver_name, is_enabled=True)\nEnables or disables exact and heuristic solving for the specified pricing solver.\n\n        :param pricing_solver_name: The name of the pricing solver.\n        :param is_enabled: Decides weather the pricing solver should be enabled or diabled.\n\n        This is a convenience method to access the boolean parameters \"pricingsolver/<name>/exactenabled\" and\n        \"pricingsolver/<name>/heurenabled\".\n\n        Use :meth:`listPricingSolvers()` to obtain a list of all pricing solvers.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_33setPricingSolverEnabled(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pricing_solver_name = 0;
  PyObject *__pyx_v_is_enabled = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setPricingSolverEnabled (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pricing_solver_name,&__pyx_n_s_is_enabled,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pricing_solver_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_is_enabled);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setPricingSolverEnabled") < 0)) __PYX_ERR(3, 201, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_pricing_solver_name = values[0];
    __pyx_v_is_enabled = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setPricingSolverEnabled", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 201, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.GCGModel.setPricingSolverEnabled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8GCGModel_32setPricingSolverEnabled(((struct __pyx_obj_8pygcgopt_3gcg_GCGModel *)__pyx_v_self), __pyx_v_pricing_solver_name, __pyx_v_is_enabled);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_32setPricingSolverEnabled(struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self, PyObject *__pyx_v_pricing_solver_name, PyObject *__pyx_v_is_enabled) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setPricingSolverEnabled", 0);

  /* "pygcgopt/gcg.pyx":212
 *         Use :meth:`listPricingSolvers()` to obtain a list of all pricing solvers.
 *         """
 *         self.setPricingSolverExactEnabled(pricing_solver_name, is_enabled)             # <<<<<<<<<<<<<<
 *         self.setPricingSolverHeuristicEnabled(pricing_solver_name, is_enabled)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_setPricingSolverExactEnabled); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_pricing_solver_name, __pyx_v_is_enabled};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 212, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_pricing_solver_name, __pyx_v_is_enabled};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 212, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 212, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_pricing_solver_name);
    __Pyx_GIVEREF(__pyx_v_pricing_solver_name);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_pricing_solver_name);
    __Pyx_INCREF(__pyx_v_is_enabled);
    __Pyx_GIVEREF(__pyx_v_is_enabled);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_is_enabled);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 212, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygcgopt/gcg.pyx":213
 *         """
 *         self.setPricingSolverExactEnabled(pricing_solver_name, is_enabled)
 *         self.setPricingSolverHeuristicEnabled(pricing_solver_name, is_enabled)             # <<<<<<<<<<<<<<
 * 
 *     def setPricingSolverExactEnabled(self, pricing_solver_name, is_enabled=True):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_setPricingSolverHeuristicEnabled); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_pricing_solver_name, __pyx_v_is_enabled};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 213, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_pricing_solver_name, __pyx_v_is_enabled};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 213, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 213, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_pricing_solver_name);
    __Pyx_GIVEREF(__pyx_v_pricing_solver_name);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_pricing_solver_name);
    __Pyx_INCREF(__pyx_v_is_enabled);
    __Pyx_GIVEREF(__pyx_v_is_enabled);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, __pyx_v_is_enabled);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 213, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygcgopt/gcg.pyx":201
 *         return [GCGsolverGetName(pricing_solvers[i]).decode('utf-8') for i in range(n_pricing_solvers)]
 * 
 *     def setPricingSolverEnabled(self, pricing_solver_name, is_enabled=True):             # <<<<<<<<<<<<<<
 *         """Enables or disables exact and heuristic solving for the specified pricing solver.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygcgopt.gcg.GCGModel.setPricingSolverEnabled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygcgopt/gcg.pyx":215
 *         self.setPricingSolverHeuristicEnabled(pricing_solver_name, is_enabled)
 * 
 *     def setPricingSolverExactEnabled(self, pricing_solver_name, is_enabled=True):             # <<<<<<<<<<<<<<
 *         """Enables or disables exact solving for the specified pricing solver.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_35setPricingSolverExactEnabled(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_8GCGModel_34setPricingSolverExactEnabled[] = "GCGModel.setPricingSolverExactEnabled(self, pricing_solver_name, is_enabled=True)\nEnables or disables exact solving for the specified pricing solver.\n\n        :param pricing_solver_name: The name of the pricing solver.\n        :param is_enabled: Decides weather the pricing solver should be enabled or diabled.\n\n        This is a convenience method to access the boolean parameter \"pricingsolver/<name>/exactenabled\".\n\n        Use :meth:`listPricingSolvers()` to obtain a list of all pricing solvers.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_35setPricingSolverExactEnabled(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pricing_solver_name = 0;
  PyObject *__pyx_v_is_enabled = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setPricingSolverExactEnabled (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pricing_solver_name,&__pyx_n_s_is_enabled,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pricing_solver_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_is_enabled);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setPricingSolverExactEnabled") < 0)) __PYX_ERR(3, 215, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_pricing_solver_name = values[0];
    __pyx_v_is_enabled = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setPricingSolverExactEnabled", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 215, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.GCGModel.setPricingSolverExactEnabled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8GCGModel_34setPricingSolverExactEnabled(((struct __pyx_obj_8pygcgopt_3gcg_GCGModel *)__pyx_v_self), __pyx_v_pricing_solver_name, __pyx_v_is_enabled);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_34setPricingSolverExactEnabled(struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self, PyObject *__pyx_v_pricing_solver_name, PyObject *__pyx_v_is_enabled) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setPricingSolverExactEnabled", 0);

  /* "pygcgopt/gcg.pyx":225
 *         Use :meth:`listPricingSolvers()` to obtain a list of all pricing solvers.
 *         """
 *         self.setBoolParam("pricingsolver/{}/exactenabled".format(pricing_solver_name), is_enabled)             # <<<<<<<<<<<<<<
 * 
 *     def setPricingSolverHeuristicEnabled(self, pricing_solver_name, is_enabled=True):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_setBoolParam); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_pricingsolver_exactenabled, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_pricing_solver_name) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_pricing_solver_name);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_v_is_enabled};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 225, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_v_is_enabled};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 225, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 225, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_6, __pyx_t_3);
    __Pyx_INCREF(__pyx_v_is_enabled);
    __Pyx_GIVEREF(__pyx_v_is_enabled);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_6, __pyx_v_is_enabled);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 225, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygcgopt/gcg.pyx":215
 *         self.setPricingSolverHeuristicEnabled(pricing_solver_name, is_enabled)
 * 
 *     def setPricingSolverExactEnabled(self, pricing_solver_name, is_enabled=True):             # <<<<<<<<<<<<<<
 *         """Enables or disables exact solving for the specified pricing solver.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygcgopt.gcg.GCGModel.setPricingSolverExactEnabled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygcgopt/gcg.pyx":227
 *         self.setBoolParam("pricingsolver/{}/exactenabled".format(pricing_solver_name), is_enabled)
 * 
 *     def setPricingSolverHeuristicEnabled(self, pricing_solver_name, is_enabled=True):             # <<<<<<<<<<<<<<
 *         """Enables or disables heuristic solving for the specified pricing solver.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_37setPricingSolverHeuristicEnabled(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_8GCGModel_36setPricingSolverHeuristicEnabled[] = "GCGModel.setPricingSolverHeuristicEnabled(self, pricing_solver_name, is_enabled=True)\nEnables or disables heuristic solving for the specified pricing solver.\n\n        :param pricing_solver_name: The name of the pricing solver.\n        :param is_enabled: Decides weather the pricing solver should be enabled or diabled.\n\n        This is a convenience method to access the boolean parameter \"pricingsolver/<name>/heurenabled\".\n\n        Use :meth:`listPricingSolvers()` to obtain a list of all pricing solvers.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_37setPricingSolverHeuristicEnabled(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pricing_solver_name = 0;
  PyObject *__pyx_v_is_enabled = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setPricingSolverHeuristicEnabled (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pricing_solver_name,&__pyx_n_s_is_enabled,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pricing_solver_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_is_enabled);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setPricingSolverHeuristicEnabled") < 0)) __PYX_ERR(3, 227, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_pricing_solver_name = values[0];
    __pyx_v_is_enabled = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setPricingSolverHeuristicEnabled", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 227, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.GCGModel.setPricingSolverHeuristicEnabled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8GCGModel_36setPricingSolverHeuristicEnabled(((struct __pyx_obj_8pygcgopt_3gcg_GCGModel *)__pyx_v_self), __pyx_v_pricing_solver_name, __pyx_v_is_enabled);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_36setPricingSolverHeuristicEnabled(struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self, PyObject *__pyx_v_pricing_solver_name, PyObject *__pyx_v_is_enabled) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setPricingSolverHeuristicEnabled", 0);

  /* "pygcgopt/gcg.pyx":237
 *         Use :meth:`listPricingSolvers()` to obtain a list of all pricing solvers.
 *         """
 *         self.setBoolParam("pricingsolver/{}/heurenabled".format(pricing_solver_name), is_enabled)             # <<<<<<<<<<<<<<
 * 
 *     def includeDetector(self, Detector detector, detectorname, decchar, desc, freqcallround=1, maxcallround=INT_MAX, mincallround=0, freqcallroundoriginal=1, maxcallroundoriginal=INT_MAX, mincallroundoriginal=0, priority=0, enabled=True, enabledfinishing=False, enabledpostprocessing=False, skip=False, usefulrecall=False):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_setBoolParam); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_pricingsolver_heurenabled, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_pricing_solver_name) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_pricing_solver_name);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_v_is_enabled};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 237, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_v_is_enabled};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 237, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 237, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_6, __pyx_t_3);
    __Pyx_INCREF(__pyx_v_is_enabled);
    __Pyx_GIVEREF(__pyx_v_is_enabled);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_6, __pyx_v_is_enabled);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 237, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygcgopt/gcg.pyx":227
 *         self.setBoolParam("pricingsolver/{}/exactenabled".format(pricing_solver_name), is_enabled)
 * 
 *     def setPricingSolverHeuristicEnabled(self, pricing_solver_name, is_enabled=True):             # <<<<<<<<<<<<<<
 *         """Enables or disables heuristic solving for the specified pricing solver.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygcgopt.gcg.GCGModel.setPricingSolverHeuristicEnabled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygcgopt/gcg.pyx":239
 *         self.setBoolParam("pricingsolver/{}/heurenabled".format(pricing_solver_name), is_enabled)
 * 
 *     def includeDetector(self, Detector detector, detectorname, decchar, desc, freqcallround=1, maxcallround=INT_MAX, mincallround=0, freqcallroundoriginal=1, maxcallroundoriginal=INT_MAX, mincallroundoriginal=0, priority=0, enabled=True, enabledfinishing=False, enabledpostprocessing=False, skip=False, usefulrecall=False):             # <<<<<<<<<<<<<<
 *         """includes a detector
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_39includeDetector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_8GCGModel_38includeDetector[] = "GCGModel.includeDetector(self, Detector detector, detectorname, decchar, desc, freqcallround=1, maxcallround=INT_MAX, mincallround=0, freqcallroundoriginal=1, maxcallroundoriginal=INT_MAX, mincallroundoriginal=0, priority=0, enabled=True, enabledfinishing=False, enabledpostprocessing=False, skip=False, usefulrecall=False)\nincludes a detector\n\n        :param detector: An object of a subclass of detector#Detector.\n        :param detectorname: name of the detector\n\n        For an explanation for all arguments, see :meth:`DECincludeDetector()`.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_39includeDetector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pygcgopt_3gcg_Detector *__pyx_v_detector = 0;
  PyObject *__pyx_v_detectorname = 0;
  PyObject *__pyx_v_decchar = 0;
  PyObject *__pyx_v_desc = 0;
  PyObject *__pyx_v_freqcallround = 0;
  PyObject *__pyx_v_maxcallround = 0;
  PyObject *__pyx_v_mincallround = 0;
  PyObject *__pyx_v_freqcallroundoriginal = 0;
  PyObject *__pyx_v_maxcallroundoriginal = 0;
  PyObject *__pyx_v_mincallroundoriginal = 0;
  PyObject *__pyx_v_priority = 0;
  PyObject *__pyx_v_enabled = 0;
  PyObject *__pyx_v_enabledfinishing = 0;
  PyObject *__pyx_v_enabledpostprocessing = 0;
  PyObject *__pyx_v_skip = 0;
  PyObject *__pyx_v_usefulrecall = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("includeDetector (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_detector,&__pyx_n_s_detectorname,&__pyx_n_s_decchar,&__pyx_n_s_desc,&__pyx_n_s_freqcallround,&__pyx_n_s_maxcallround,&__pyx_n_s_mincallround,&__pyx_n_s_freqcallroundoriginal,&__pyx_n_s_maxcallroundoriginal,&__pyx_n_s_mincallroundoriginal,&__pyx_n_s_priority,&__pyx_n_s_enabled,&__pyx_n_s_enabledfinishing,&__pyx_n_s_enabledpostprocessing,&__pyx_n_s_skip,&__pyx_n_s_usefulrecall,0};
    PyObject* values[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    values[4] = ((PyObject *)__pyx_int_1);
    values[5] = __pyx_k__25;
    values[6] = ((PyObject *)__pyx_int_0);
    values[7] = ((PyObject *)__pyx_int_1);
    values[8] = __pyx_k__26;
    values[9] = ((PyObject *)__pyx_int_0);
    values[10] = ((PyObject *)__pyx_int_0);
    values[11] = ((PyObject *)Py_True);
    values[12] = ((PyObject *)Py_False);
    values[13] = ((PyObject *)Py_False);
    values[14] = ((PyObject *)Py_False);
    values[15] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        CYTHON_FALLTHROUGH;
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_detector)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_detectorname)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("includeDetector", 0, 4, 16, 1); __PYX_ERR(3, 239, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_decchar)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("includeDetector", 0, 4, 16, 2); __PYX_ERR(3, 239, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_desc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("includeDetector", 0, 4, 16, 3); __PYX_ERR(3, 239, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_freqcallround);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_maxcallround);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mincallround);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_freqcallroundoriginal);
          if (value) { values[7] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_maxcallroundoriginal);
          if (value) { values[8] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mincallroundoriginal);
          if (value) { values[9] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_priority);
          if (value) { values[10] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_enabled);
          if (value) { values[11] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_enabledfinishing);
          if (value) { values[12] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_enabledpostprocessing);
          if (value) { values[13] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 14:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_skip);
          if (value) { values[14] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 15:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_usefulrecall);
          if (value) { values[15] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "includeDetector") < 0)) __PYX_ERR(3, 239, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        CYTHON_FALLTHROUGH;
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_detector = ((struct __pyx_obj_8pygcgopt_3gcg_Detector *)values[0]);
    __pyx_v_detectorname = values[1];
    __pyx_v_decchar = values[2];
    __pyx_v_desc = values[3];
    __pyx_v_freqcallround = values[4];
    __pyx_v_maxcallround = values[5];
    __pyx_v_mincallround = values[6];
    __pyx_v_freqcallroundoriginal = values[7];
    __pyx_v_maxcallroundoriginal = values[8];
    __pyx_v_mincallroundoriginal = values[9];
    __pyx_v_priority = values[10];
    __pyx_v_enabled = values[11];
    __pyx_v_enabledfinishing = values[12];
    __pyx_v_enabledpostprocessing = values[13];
    __pyx_v_skip = values[14];
    __pyx_v_usefulrecall = values[15];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("includeDetector", 0, 4, 16, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 239, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.GCGModel.includeDetector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_detector), __pyx_ptype_8pygcgopt_3gcg_Detector, 1, "detector", 0))) __PYX_ERR(3, 239, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8GCGModel_38includeDetector(((struct __pyx_obj_8pygcgopt_3gcg_GCGModel *)__pyx_v_self), __pyx_v_detector, __pyx_v_detectorname, __pyx_v_decchar, __pyx_v_desc, __pyx_v_freqcallround, __pyx_v_maxcallround, __pyx_v_mincallround, __pyx_v_freqcallroundoriginal, __pyx_v_maxcallroundoriginal, __pyx_v_mincallroundoriginal, __pyx_v_priority, __pyx_v_enabled, __pyx_v_enabledfinishing, __pyx_v_enabledpostprocessing, __pyx_v_skip, __pyx_v_usefulrecall);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_38includeDetector(struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self, struct __pyx_obj_8pygcgopt_3gcg_Detector *__pyx_v_detector, PyObject *__pyx_v_detectorname, PyObject *__pyx_v_decchar, PyObject *__pyx_v_desc, PyObject *__pyx_v_freqcallround, PyObject *__pyx_v_maxcallround, PyObject *__pyx_v_mincallround, PyObject *__pyx_v_freqcallroundoriginal, PyObject *__pyx_v_maxcallroundoriginal, PyObject *__pyx_v_mincallroundoriginal, PyObject *__pyx_v_priority, PyObject *__pyx_v_enabled, PyObject *__pyx_v_enabledfinishing, PyObject *__pyx_v_enabledpostprocessing, PyObject *__pyx_v_skip, PyObject *__pyx_v_usefulrecall) {
  PyObject *__pyx_v_c_detectorname = NULL;
  long __pyx_v_c_decchar;
  PyObject *__pyx_v_c_desc = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  long __pyx_t_6;
  char const *__pyx_t_7;
  char const *__pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  SCIP_Bool __pyx_t_16;
  SCIP_Bool __pyx_t_17;
  SCIP_Bool __pyx_t_18;
  SCIP_Bool __pyx_t_19;
  SCIP_Bool __pyx_t_20;
  PyObject *__pyx_t_21 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("includeDetector", 0);

  /* "pygcgopt/gcg.pyx":247
 *         For an explanation for all arguments, see :meth:`DECincludeDetector()`.
 *         """
 *         if len(decchar) != 1:             # <<<<<<<<<<<<<<
 *             raise ValueError("Length of value for 'decchar' must be 1")
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_decchar); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(3, 247, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 1) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "pygcgopt/gcg.pyx":248
 *         """
 *         if len(decchar) != 1:
 *             raise ValueError("Length of value for 'decchar' must be 1")             # <<<<<<<<<<<<<<
 * 
 *         c_detectorname = str_conversion(detectorname)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(3, 248, __pyx_L1_error)

    /* "pygcgopt/gcg.pyx":247
 *         For an explanation for all arguments, see :meth:`DECincludeDetector()`.
 *         """
 *         if len(decchar) != 1:             # <<<<<<<<<<<<<<
 *             raise ValueError("Length of value for 'decchar' must be 1")
 * 
 */
  }

  /* "pygcgopt/gcg.pyx":250
 *             raise ValueError("Length of value for 'decchar' must be 1")
 * 
 *         c_detectorname = str_conversion(detectorname)             # <<<<<<<<<<<<<<
 *         c_decchar = ord(str_conversion(decchar))
 *         c_desc = str_conversion(desc)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_str_conversion); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_detectorname) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_detectorname);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_c_detectorname = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pygcgopt/gcg.pyx":251
 * 
 *         c_detectorname = str_conversion(detectorname)
 *         c_decchar = ord(str_conversion(decchar))             # <<<<<<<<<<<<<<
 *         c_desc = str_conversion(desc)
 *         PY_SCIP_CALL(DECincludeDetector(
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_str_conversion); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_decchar) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_decchar);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyObject_Ord(__pyx_t_3); if (unlikely(__pyx_t_6 == ((long)(long)(Py_UCS4)-1))) __PYX_ERR(3, 251, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_c_decchar = __pyx_t_6;

  /* "pygcgopt/gcg.pyx":252
 *         c_detectorname = str_conversion(detectorname)
 *         c_decchar = ord(str_conversion(decchar))
 *         c_desc = str_conversion(desc)             # <<<<<<<<<<<<<<
 *         PY_SCIP_CALL(DECincludeDetector(
 *             self._scip, c_detectorname, c_decchar, c_desc, freqcallround, maxcallround, mincallround,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_str_conversion); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_desc) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_desc);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_c_desc = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pygcgopt/gcg.pyx":253
 *         c_decchar = ord(str_conversion(decchar))
 *         c_desc = str_conversion(desc)
 *         PY_SCIP_CALL(DECincludeDetector(             # <<<<<<<<<<<<<<
 *             self._scip, c_detectorname, c_decchar, c_desc, freqcallround, maxcallround, mincallround,
 *             freqcallroundoriginal, maxcallroundoriginal, mincallroundoriginal, priority, enabled, enabledfinishing,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_PY_SCIP_CALL); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "pygcgopt/gcg.pyx":254
 *         c_desc = str_conversion(desc)
 *         PY_SCIP_CALL(DECincludeDetector(
 *             self._scip, c_detectorname, c_decchar, c_desc, freqcallround, maxcallround, mincallround,             # <<<<<<<<<<<<<<
 *             freqcallroundoriginal, maxcallroundoriginal, mincallroundoriginal, priority, enabled, enabledfinishing,
 *             enabledpostprocessing, skip, usefulrecall, <DEC_DETECTORDATA*>detector, PyDetectorFree, PyDetectorInit,
 */
  __pyx_t_7 = __Pyx_PyObject_AsString(__pyx_v_c_detectorname); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(3, 254, __pyx_L1_error)
  __pyx_t_8 = __Pyx_PyObject_AsString(__pyx_v_c_desc); if (unlikely((!__pyx_t_8) && PyErr_Occurred())) __PYX_ERR(3, 254, __pyx_L1_error)
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_v_freqcallround); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 254, __pyx_L1_error)
  __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_v_maxcallround); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 254, __pyx_L1_error)
  __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_v_mincallround); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 254, __pyx_L1_error)

  /* "pygcgopt/gcg.pyx":255
 *         PY_SCIP_CALL(DECincludeDetector(
 *             self._scip, c_detectorname, c_decchar, c_desc, freqcallround, maxcallround, mincallround,
 *             freqcallroundoriginal, maxcallroundoriginal, mincallroundoriginal, priority, enabled, enabledfinishing,             # <<<<<<<<<<<<<<
 *             enabledpostprocessing, skip, usefulrecall, <DEC_DETECTORDATA*>detector, PyDetectorFree, PyDetectorInit,
 *             PyDetectorExit, PyDetectorPropagatePartialdec, PyDetectorFinishPartialdec, PyDetectorPostprocessPartialdec,
 */
  __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_v_freqcallroundoriginal); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 255, __pyx_L1_error)
  __pyx_t_13 = __Pyx_PyInt_As_int(__pyx_v_maxcallroundoriginal); if (unlikely((__pyx_t_13 == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 255, __pyx_L1_error)
  __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_v_mincallroundoriginal); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 255, __pyx_L1_error)
  __pyx_t_15 = __Pyx_PyInt_As_int(__pyx_v_priority); if (unlikely((__pyx_t_15 == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 255, __pyx_L1_error)
  __pyx_t_16 = __Pyx_PyObject_IsTrue(__pyx_v_enabled); if (unlikely((__pyx_t_16 == ((SCIP_Bool)-1)) && PyErr_Occurred())) __PYX_ERR(3, 255, __pyx_L1_error)
  __pyx_t_17 = __Pyx_PyObject_IsTrue(__pyx_v_enabledfinishing); if (unlikely((__pyx_t_17 == ((SCIP_Bool)-1)) && PyErr_Occurred())) __PYX_ERR(3, 255, __pyx_L1_error)

  /* "pygcgopt/gcg.pyx":256
 *             self._scip, c_detectorname, c_decchar, c_desc, freqcallround, maxcallround, mincallround,
 *             freqcallroundoriginal, maxcallroundoriginal, mincallroundoriginal, priority, enabled, enabledfinishing,
 *             enabledpostprocessing, skip, usefulrecall, <DEC_DETECTORDATA*>detector, PyDetectorFree, PyDetectorInit,             # <<<<<<<<<<<<<<
 *             PyDetectorExit, PyDetectorPropagatePartialdec, PyDetectorFinishPartialdec, PyDetectorPostprocessPartialdec,
 *             PyDetectorSetParamAggressive, PyDetectorSetParamDefault, PyDetectorSetParamFast))
 */
  __pyx_t_18 = __Pyx_PyObject_IsTrue(__pyx_v_enabledpostprocessing); if (unlikely((__pyx_t_18 == ((SCIP_Bool)-1)) && PyErr_Occurred())) __PYX_ERR(3, 256, __pyx_L1_error)
  __pyx_t_19 = __Pyx_PyObject_IsTrue(__pyx_v_skip); if (unlikely((__pyx_t_19 == ((SCIP_Bool)-1)) && PyErr_Occurred())) __PYX_ERR(3, 256, __pyx_L1_error)
  __pyx_t_20 = __Pyx_PyObject_IsTrue(__pyx_v_usefulrecall); if (unlikely((__pyx_t_20 == ((SCIP_Bool)-1)) && PyErr_Occurred())) __PYX_ERR(3, 256, __pyx_L1_error)

  /* "pygcgopt/gcg.pyx":253
 *         c_decchar = ord(str_conversion(decchar))
 *         c_desc = str_conversion(desc)
 *         PY_SCIP_CALL(DECincludeDetector(             # <<<<<<<<<<<<<<
 *             self._scip, c_detectorname, c_decchar, c_desc, freqcallround, maxcallround, mincallround,
 *             freqcallroundoriginal, maxcallroundoriginal, mincallroundoriginal, priority, enabled, enabledfinishing,
 */
  __pyx_t_5 = __Pyx_PyInt_From_SCIP_RETCODE(DECincludeDetector(__pyx_v_self->__pyx_base._scip, __pyx_t_7, __pyx_v_c_decchar, __pyx_t_8, __pyx_t_9, __pyx_t_10, __pyx_t_11, __pyx_t_12, __pyx_t_13, __pyx_t_14, __pyx_t_15, __pyx_t_16, __pyx_t_17, __pyx_t_18, __pyx_t_19, __pyx_t_20, ((DEC_DETECTORDATA *)__pyx_v_detector), __pyx_f_8pygcgopt_3gcg_PyDetectorFree, __pyx_f_8pygcgopt_3gcg_PyDetectorInit, __pyx_f_8pygcgopt_3gcg_PyDetectorExit, __pyx_f_8pygcgopt_3gcg_PyDetectorPropagatePartialdec, __pyx_f_8pygcgopt_3gcg_PyDetectorFinishPartialdec, __pyx_f_8pygcgopt_3gcg_PyDetectorPostprocessPartialdec, __pyx_f_8pygcgopt_3gcg_PyDetectorSetParamAggressive, __pyx_f_8pygcgopt_3gcg_PyDetectorSetParamDefault, __pyx_f_8pygcgopt_3gcg_PyDetectorSetParamFast)); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_21 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_21 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_21)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_21);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_21) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_21, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5);
  __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pygcgopt/gcg.pyx":260
 *             PyDetectorSetParamAggressive, PyDetectorSetParamDefault, PyDetectorSetParamFast))
 * 
 *         detector.model = <Model>weakref.proxy(self)             # <<<<<<<<<<<<<<
 *         detector.detectorname = detectorname
 *         Py_INCREF(detector)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_weakref); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_proxy); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_4, ((PyObject *)__pyx_v_self)) : __Pyx_PyObject_CallOneArg(__pyx_t_5, ((PyObject *)__pyx_v_self));
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __pyx_t_3;
  __Pyx_INCREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_GOTREF(__pyx_v_detector->model);
  __Pyx_DECREF(((PyObject *)__pyx_v_detector->model));
  __pyx_v_detector->model = ((struct __pyx_obj_9pyscipopt_4scip_Model *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "pygcgopt/gcg.pyx":261
 * 
 *         detector.model = <Model>weakref.proxy(self)
 *         detector.detectorname = detectorname             # <<<<<<<<<<<<<<
 *         Py_INCREF(detector)
 * 
 */
  if (!(likely(PyUnicode_CheckExact(__pyx_v_detectorname))||((__pyx_v_detectorname) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_detectorname)->tp_name), 0))) __PYX_ERR(3, 261, __pyx_L1_error)
  __pyx_t_5 = __pyx_v_detectorname;
  __Pyx_INCREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_GOTREF(__pyx_v_detector->detectorname);
  __Pyx_DECREF(__pyx_v_detector->detectorname);
  __pyx_v_detector->detectorname = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "pygcgopt/gcg.pyx":262
 *         detector.model = <Model>weakref.proxy(self)
 *         detector.detectorname = detectorname
 *         Py_INCREF(detector)             # <<<<<<<<<<<<<<
 * 
 *     def listDetectors(self):
 */
  Py_INCREF(((PyObject *)__pyx_v_detector));

  /* "pygcgopt/gcg.pyx":239
 *         self.setBoolParam("pricingsolver/{}/heurenabled".format(pricing_solver_name), is_enabled)
 * 
 *     def includeDetector(self, Detector detector, detectorname, decchar, desc, freqcallround=1, maxcallround=INT_MAX, mincallround=0, freqcallroundoriginal=1, maxcallroundoriginal=INT_MAX, mincallroundoriginal=0, priority=0, enabled=True, enabledfinishing=False, enabledpostprocessing=False, skip=False, usefulrecall=False):             # <<<<<<<<<<<<<<
 *         """includes a detector
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_AddTraceback("pygcgopt.gcg.GCGModel.includeDetector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_c_detectorname);
  __Pyx_XDECREF(__pyx_v_c_desc);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygcgopt/gcg.pyx":264
 *         Py_INCREF(detector)
 * 
 *     def listDetectors(self):             # <<<<<<<<<<<<<<
 *         """Lists all detectors that are currently included
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_41listDetectors(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_8GCGModel_40listDetectors[] = "GCGModel.listDetectors(self)\nLists all detectors that are currently included\n\n        :return: A list of strings of the detector names\n\n        .. note:: The detectors can be enabled or disabled using the appropriate methods by passing the name.\n\n        .. seealso:: * :meth:`setDetectorEnabled`\n                     * :meth:`setDetectorFinishingEnabled`\n                     * :meth:`setDetectorPostprocessingEnabled`\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_41listDetectors(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("listDetectors (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8GCGModel_40listDetectors(((struct __pyx_obj_8pygcgopt_3gcg_GCGModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_40listDetectors(struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self) {
  int __pyx_v_n_detectors;
  DEC_DETECTOR **__pyx_v_detectors;
  int __pyx_9genexpr42__pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  char const *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("listDetectors", 0);

  /* "pygcgopt/gcg.pyx":275
 *                      * :meth:`setDetectorPostprocessingEnabled`
 *         """
 *         cdef int n_detectors = GCGconshdlrDecompGetNDetectors(self._scip)             # <<<<<<<<<<<<<<
 *         cdef DEC_DETECTOR** detectors = GCGconshdlrDecompGetDetectors(self._scip)
 * 
 */
  __pyx_v_n_detectors = GCGconshdlrDecompGetNDetectors(__pyx_v_self->__pyx_base._scip);

  /* "pygcgopt/gcg.pyx":276
 *         """
 *         cdef int n_detectors = GCGconshdlrDecompGetNDetectors(self._scip)
 *         cdef DEC_DETECTOR** detectors = GCGconshdlrDecompGetDetectors(self._scip)             # <<<<<<<<<<<<<<
 * 
 *         return [DECdetectorGetName(detectors[i]).decode('utf-8') for i in range(n_detectors)]
 */
  __pyx_v_detectors = GCGconshdlrDecompGetDetectors(__pyx_v_self->__pyx_base._scip);

  /* "pygcgopt/gcg.pyx":278
 *         cdef DEC_DETECTOR** detectors = GCGconshdlrDecompGetDetectors(self._scip)
 * 
 *         return [DECdetectorGetName(detectors[i]).decode('utf-8') for i in range(n_detectors)]             # <<<<<<<<<<<<<<
 * 
 *     def setDetectorEnabled(self, detector_name, is_enabled=True):
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 278, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_v_n_detectors;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_9genexpr42__pyx_v_i = __pyx_t_4;
      __pyx_t_5 = DECdetectorGetName((__pyx_v_detectors[__pyx_9genexpr42__pyx_v_i]));
      __pyx_t_6 = __Pyx_decode_c_string(__pyx_t_5, 0, strlen(__pyx_t_5), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_6))) __PYX_ERR(3, 278, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  } /* exit inner scope */
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pygcgopt/gcg.pyx":264
 *         Py_INCREF(detector)
 * 
 *     def listDetectors(self):             # <<<<<<<<<<<<<<
 *         """Lists all detectors that are currently included
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pygcgopt.gcg.GCGModel.listDetectors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygcgopt/gcg.pyx":280
 *         return [DECdetectorGetName(detectors[i]).decode('utf-8') for i in range(n_detectors)]
 * 
 *     def setDetectorEnabled(self, detector_name, is_enabled=True):             # <<<<<<<<<<<<<<
 *         """Enables or disables a detector for detecting partial decompositions.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_43setDetectorEnabled(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_8GCGModel_42setDetectorEnabled[] = "GCGModel.setDetectorEnabled(self, detector_name, is_enabled=True)\nEnables or disables a detector for detecting partial decompositions.\n\n        :param detector_name: The name of the detector.\n        :param is_enabled: Decides weather the detector should be enabled or diabled.\n\n        This is a convenience method to access the boolean parameter \"detection/detectors/<name>/enabled\".\n\n        .. note:: Disabling a detector using this method is not enough to ensure that it will not run. In addition setDetectorFinishingEnabled() and setDetectorPostProcessingEnabled() have to be used.\n\n        Use listDetectors() to obtain a list of all detectors.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_43setDetectorEnabled(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_detector_name = 0;
  PyObject *__pyx_v_is_enabled = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setDetectorEnabled (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_detector_name,&__pyx_n_s_is_enabled,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_detector_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_is_enabled);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setDetectorEnabled") < 0)) __PYX_ERR(3, 280, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_detector_name = values[0];
    __pyx_v_is_enabled = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setDetectorEnabled", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 280, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.GCGModel.setDetectorEnabled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8GCGModel_42setDetectorEnabled(((struct __pyx_obj_8pygcgopt_3gcg_GCGModel *)__pyx_v_self), __pyx_v_detector_name, __pyx_v_is_enabled);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_42setDetectorEnabled(struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self, PyObject *__pyx_v_detector_name, PyObject *__pyx_v_is_enabled) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setDetectorEnabled", 0);

  /* "pygcgopt/gcg.pyx":293
 *         """
 *         # TODO test if detector_name exists
 *         self.setBoolParam("detection/detectors/{}/enabled".format(detector_name), is_enabled)             # <<<<<<<<<<<<<<
 * 
 *     def setDetectorFinishingEnabled(self, detector_name, is_enabled=True):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_setBoolParam); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_detection_detectors_enabled, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_detector_name) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_detector_name);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_v_is_enabled};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 293, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_v_is_enabled};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 293, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 293, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_6, __pyx_t_3);
    __Pyx_INCREF(__pyx_v_is_enabled);
    __Pyx_GIVEREF(__pyx_v_is_enabled);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_6, __pyx_v_is_enabled);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 293, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygcgopt/gcg.pyx":280
 *         return [DECdetectorGetName(detectors[i]).decode('utf-8') for i in range(n_detectors)]
 * 
 *     def setDetectorEnabled(self, detector_name, is_enabled=True):             # <<<<<<<<<<<<<<
 *         """Enables or disables a detector for detecting partial decompositions.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygcgopt.gcg.GCGModel.setDetectorEnabled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygcgopt/gcg.pyx":295
 *         self.setBoolParam("detection/detectors/{}/enabled".format(detector_name), is_enabled)
 * 
 *     def setDetectorFinishingEnabled(self, detector_name, is_enabled=True):             # <<<<<<<<<<<<<<
 *         """Enables or disables a detector for finishing partial decompositions.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_45setDetectorFinishingEnabled(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_8GCGModel_44setDetectorFinishingEnabled[] = "GCGModel.setDetectorFinishingEnabled(self, detector_name, is_enabled=True)\nEnables or disables a detector for finishing partial decompositions.\n\n        :param detector_name: The name of the detector.\n        :param is_enabled: Decides weather the detector should be enabled or diabled.\n\n        This is a convenience method to access the boolean parameter \"detection/detectors/<name>/finishingenabled\".\n\n        .. seealso:: * :meth:`setDetectorEnabled`\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_45setDetectorFinishingEnabled(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_detector_name = 0;
  PyObject *__pyx_v_is_enabled = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setDetectorFinishingEnabled (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_detector_name,&__pyx_n_s_is_enabled,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_detector_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_is_enabled);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setDetectorFinishingEnabled") < 0)) __PYX_ERR(3, 295, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_detector_name = values[0];
    __pyx_v_is_enabled = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setDetectorFinishingEnabled", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 295, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.GCGModel.setDetectorFinishingEnabled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8GCGModel_44setDetectorFinishingEnabled(((struct __pyx_obj_8pygcgopt_3gcg_GCGModel *)__pyx_v_self), __pyx_v_detector_name, __pyx_v_is_enabled);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_44setDetectorFinishingEnabled(struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self, PyObject *__pyx_v_detector_name, PyObject *__pyx_v_is_enabled) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setDetectorFinishingEnabled", 0);

  /* "pygcgopt/gcg.pyx":306
 *         """
 *         # TODO test if detector_name exists
 *         self.setBoolParam("detection/detectors/{}/finishingenabled".format(detector_name), is_enabled)             # <<<<<<<<<<<<<<
 * 
 *     def setDetectorPostprocessingEnabled(self, detector_name, is_enabled=True):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_setBoolParam); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_detection_detectors_finishingena, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_detector_name) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_detector_name);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_v_is_enabled};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 306, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_v_is_enabled};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 306, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 306, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_6, __pyx_t_3);
    __Pyx_INCREF(__pyx_v_is_enabled);
    __Pyx_GIVEREF(__pyx_v_is_enabled);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_6, __pyx_v_is_enabled);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 306, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygcgopt/gcg.pyx":295
 *         self.setBoolParam("detection/detectors/{}/enabled".format(detector_name), is_enabled)
 * 
 *     def setDetectorFinishingEnabled(self, detector_name, is_enabled=True):             # <<<<<<<<<<<<<<
 *         """Enables or disables a detector for finishing partial decompositions.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygcgopt.gcg.GCGModel.setDetectorFinishingEnabled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygcgopt/gcg.pyx":308
 *         self.setBoolParam("detection/detectors/{}/finishingenabled".format(detector_name), is_enabled)
 * 
 *     def setDetectorPostprocessingEnabled(self, detector_name, is_enabled=True):             # <<<<<<<<<<<<<<
 *         """Enables or disables a detector for postprocessing partial decompositions.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_47setDetectorPostprocessingEnabled(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_8GCGModel_46setDetectorPostprocessingEnabled[] = "GCGModel.setDetectorPostprocessingEnabled(self, detector_name, is_enabled=True)\nEnables or disables a detector for postprocessing partial decompositions.\n\n        :param detector_name: The name of the detector.\n        :param is_enabled: Decides weather the detector should be enabled or diabled.\n\n        This is a convenience method to access the boolean parameter \"detection/detectors/<name>/postprocessingenabled\".\n\n        .. seealso:: * :meth:`setDetectorEnabled`\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_47setDetectorPostprocessingEnabled(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_detector_name = 0;
  PyObject *__pyx_v_is_enabled = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setDetectorPostprocessingEnabled (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_detector_name,&__pyx_n_s_is_enabled,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_detector_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_is_enabled);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setDetectorPostprocessingEnabled") < 0)) __PYX_ERR(3, 308, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_detector_name = values[0];
    __pyx_v_is_enabled = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setDetectorPostprocessingEnabled", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 308, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.GCGModel.setDetectorPostprocessingEnabled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8GCGModel_46setDetectorPostprocessingEnabled(((struct __pyx_obj_8pygcgopt_3gcg_GCGModel *)__pyx_v_self), __pyx_v_detector_name, __pyx_v_is_enabled);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_46setDetectorPostprocessingEnabled(struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self, PyObject *__pyx_v_detector_name, PyObject *__pyx_v_is_enabled) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setDetectorPostprocessingEnabled", 0);

  /* "pygcgopt/gcg.pyx":319
 *         """
 *         # TODO test if detector_name exists
 *         self.setBoolParam("detection/detectors/{}/postprocessingenabled".format(detector_name), is_enabled)             # <<<<<<<<<<<<<<
 * 
 *     def getMasterProb(self):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_setBoolParam); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_detection_detectors_postprocessi, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_detector_name) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_detector_name);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_v_is_enabled};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 319, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_v_is_enabled};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 319, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 319, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_6, __pyx_t_3);
    __Pyx_INCREF(__pyx_v_is_enabled);
    __Pyx_GIVEREF(__pyx_v_is_enabled);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_6, __pyx_v_is_enabled);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 319, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygcgopt/gcg.pyx":308
 *         self.setBoolParam("detection/detectors/{}/finishingenabled".format(detector_name), is_enabled)
 * 
 *     def setDetectorPostprocessingEnabled(self, detector_name, is_enabled=True):             # <<<<<<<<<<<<<<
 *         """Enables or disables a detector for postprocessing partial decompositions.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygcgopt.gcg.GCGModel.setDetectorPostprocessingEnabled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygcgopt/gcg.pyx":321
 *         self.setBoolParam("detection/detectors/{}/postprocessingenabled".format(detector_name), is_enabled)
 * 
 *     def getMasterProb(self):             # <<<<<<<<<<<<<<
 *         """Provides access to the GCG master problem.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_49getMasterProb(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_8GCGModel_48getMasterProb[] = "GCGModel.getMasterProb(self)\nProvides access to the GCG master problem.\n\n        :return: An instance of scip#Model that represents the master problem.\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_49getMasterProb(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getMasterProb (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8GCGModel_48getMasterProb(((struct __pyx_obj_8pygcgopt_3gcg_GCGModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_48getMasterProb(struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self) {
  SCIP *__pyx_v_master_prob;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getMasterProb", 0);

  /* "pygcgopt/gcg.pyx":326
 *         :return: An instance of scip#Model that represents the master problem.
 *         """
 *         cdef SCIP * master_prob = GCGgetMasterprob(self._scip)             # <<<<<<<<<<<<<<
 *         return GCGMasterModel.create(master_prob)
 * 
 */
  __pyx_v_master_prob = GCGgetMasterprob(__pyx_v_self->__pyx_base._scip);

  /* "pygcgopt/gcg.pyx":327
 *         """
 *         cdef SCIP * master_prob = GCGgetMasterprob(self._scip)
 *         return GCGMasterModel.create(master_prob)             # <<<<<<<<<<<<<<
 * 
 *     def setGCGSeparating(self, setting):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pygcgopt_3gcg_14GCGMasterModel_create(__pyx_v_master_prob); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pygcgopt/gcg.pyx":321
 *         self.setBoolParam("detection/detectors/{}/postprocessingenabled".format(detector_name), is_enabled)
 * 
 *     def getMasterProb(self):             # <<<<<<<<<<<<<<
 *         """Provides access to the GCG master problem.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygcgopt.gcg.GCGModel.getMasterProb", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygcgopt/gcg.pyx":329
 *         return GCGMasterModel.create(master_prob)
 * 
 *     def setGCGSeparating(self, setting):             # <<<<<<<<<<<<<<
 *         """Sets parameter settings of all separators
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_51setGCGSeparating(PyObject *__pyx_v_self, PyObject *__pyx_v_setting); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_8GCGModel_50setGCGSeparating[] = "GCGModel.setGCGSeparating(self, setting)\nSets parameter settings of all separators\n\n        :param setting: the parameter settings (SCIP_PARAMSETTING)\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_51setGCGSeparating(PyObject *__pyx_v_self, PyObject *__pyx_v_setting) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setGCGSeparating (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8GCGModel_50setGCGSeparating(((struct __pyx_obj_8pygcgopt_3gcg_GCGModel *)__pyx_v_self), ((PyObject *)__pyx_v_setting));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_50setGCGSeparating(struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self, PyObject *__pyx_v_setting) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  SCIP_PARAMSETTING __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setGCGSeparating", 0);

  /* "pygcgopt/gcg.pyx":335
 *         """
 *         # GCG API is inconsistant with SCIP, SCIPsetSeparating
 *         PY_SCIP_CALL(GCGsetSeparators(self._scip, setting))             # <<<<<<<<<<<<<<
 * 
 *     def writeAllDecomps(self, directory="alldecompositions/", extension="dec", bool original=True, bool presolved=True, createDirectory=True):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_PY_SCIP_CALL); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = ((SCIP_PARAMSETTING)__Pyx_PyInt_As_SCIP_PARAMSETTING(__pyx_v_setting)); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 335, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyInt_From_SCIP_RETCODE(GCGsetSeparators(__pyx_v_self->__pyx_base._scip, __pyx_t_3)); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygcgopt/gcg.pyx":329
 *         return GCGMasterModel.create(master_prob)
 * 
 *     def setGCGSeparating(self, setting):             # <<<<<<<<<<<<<<
 *         """Sets parameter settings of all separators
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygcgopt.gcg.GCGModel.setGCGSeparating", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygcgopt/gcg.pyx":337
 *         PY_SCIP_CALL(GCGsetSeparators(self._scip, setting))
 * 
 *     def writeAllDecomps(self, directory="alldecompositions/", extension="dec", bool original=True, bool presolved=True, createDirectory=True):             # <<<<<<<<<<<<<<
 *         """Writes all decompositions to disk
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_53writeAllDecomps(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_8GCGModel_52writeAllDecomps[] = "GCGModel.writeAllDecomps(self, directory=u'alldecompositions/', extension=u'dec', bool original=True, bool presolved=True, createDirectory=True)\nWrites all decompositions to disk\n\n        :param directory: A path to a folder where to store the decomposition files\n        :param extension: Extension without a dot. Decides the output format. Use \"dec\" to output decomposition files\n        :param createDirectory: Automatically create the directory specified in ``directory`` if it does not exist\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_53writeAllDecomps(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_directory = 0;
  PyObject *__pyx_v_extension = 0;
  bool __pyx_v_original;
  bool __pyx_v_presolved;
  PyObject *__pyx_v_createDirectory = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeAllDecomps (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_directory,&__pyx_n_s_extension,&__pyx_n_s_original,&__pyx_n_s_presolved,&__pyx_n_s_createDirectory,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[0] = ((PyObject *)__pyx_kp_u_alldecompositions);
    values[1] = ((PyObject *)__pyx_n_u_dec);
    values[4] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_directory);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_extension);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_original);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_presolved);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_createDirectory);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "writeAllDecomps") < 0)) __PYX_ERR(3, 337, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_directory = values[0];
    __pyx_v_extension = values[1];
    if (values[2]) {
      __pyx_v_original = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_original == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(3, 337, __pyx_L3_error)
    } else {
      __pyx_v_original = ((bool)1);
    }
    if (values[3]) {
      __pyx_v_presolved = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_presolved == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(3, 337, __pyx_L3_error)
    } else {
      __pyx_v_presolved = ((bool)1);
    }
    __pyx_v_createDirectory = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("writeAllDecomps", 0, 0, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 337, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.GCGModel.writeAllDecomps", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8GCGModel_52writeAllDecomps(((struct __pyx_obj_8pygcgopt_3gcg_GCGModel *)__pyx_v_self), __pyx_v_directory, __pyx_v_extension, __pyx_v_original, __pyx_v_presolved, __pyx_v_createDirectory);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_52writeAllDecomps(struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self, PyObject *__pyx_v_directory, PyObject *__pyx_v_extension, bool __pyx_v_original, bool __pyx_v_presolved, PyObject *__pyx_v_createDirectory) {
  PyObject *__pyx_v_c_directory = NULL;
  PyObject *__pyx_v_c_extension = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  char *__pyx_t_5;
  char *__pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("writeAllDecomps", 0);

  /* "pygcgopt/gcg.pyx":344
 *         :param createDirectory: Automatically create the directory specified in ``directory`` if it does not exist
 *         """
 *         if createDirectory:             # <<<<<<<<<<<<<<
 *             Path(directory).mkdir(exist_ok=True, parents=True)
 *         c_directory = str_conversion(directory)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_createDirectory); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(3, 344, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "pygcgopt/gcg.pyx":345
 *         """
 *         if createDirectory:
 *             Path(directory).mkdir(exist_ok=True, parents=True)             # <<<<<<<<<<<<<<
 *         c_directory = str_conversion(directory)
 *         c_extension = str_conversion(extension)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Path); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 345, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_v_directory) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_directory);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 345, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_mkdir); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 345, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 345, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_exist_ok, Py_True) < 0) __PYX_ERR(3, 345, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_parents, Py_True) < 0) __PYX_ERR(3, 345, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 345, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pygcgopt/gcg.pyx":344
 *         :param createDirectory: Automatically create the directory specified in ``directory`` if it does not exist
 *         """
 *         if createDirectory:             # <<<<<<<<<<<<<<
 *             Path(directory).mkdir(exist_ok=True, parents=True)
 *         c_directory = str_conversion(directory)
 */
  }

  /* "pygcgopt/gcg.pyx":346
 *         if createDirectory:
 *             Path(directory).mkdir(exist_ok=True, parents=True)
 *         c_directory = str_conversion(directory)             # <<<<<<<<<<<<<<
 *         c_extension = str_conversion(extension)
 *         PY_SCIP_CALL(DECwriteAllDecomps(self._scip, c_directory, c_extension, original, presolved))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_str_conversion); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_4 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_directory) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_directory);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_c_directory = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "pygcgopt/gcg.pyx":347
 *             Path(directory).mkdir(exist_ok=True, parents=True)
 *         c_directory = str_conversion(directory)
 *         c_extension = str_conversion(extension)             # <<<<<<<<<<<<<<
 *         PY_SCIP_CALL(DECwriteAllDecomps(self._scip, c_directory, c_extension, original, presolved))
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_str_conversion); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_4 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_extension) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_extension);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_c_extension = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "pygcgopt/gcg.pyx":348
 *         c_directory = str_conversion(directory)
 *         c_extension = str_conversion(extension)
 *         PY_SCIP_CALL(DECwriteAllDecomps(self._scip, c_directory, c_extension, original, presolved))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_PY_SCIP_CALL); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_AsWritableString(__pyx_v_c_directory); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(3, 348, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyObject_AsWritableString(__pyx_v_c_extension); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(3, 348, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_From_SCIP_RETCODE(DECwriteAllDecomps(__pyx_v_self->__pyx_base._scip, __pyx_t_5, __pyx_t_6, __pyx_v_original, __pyx_v_presolved)); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_4 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_7, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pygcgopt/gcg.pyx":337
 *         PY_SCIP_CALL(GCGsetSeparators(self._scip, setting))
 * 
 *     def writeAllDecomps(self, directory="alldecompositions/", extension="dec", bool original=True, bool presolved=True, createDirectory=True):             # <<<<<<<<<<<<<<
 *         """Writes all decompositions to disk
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pygcgopt.gcg.GCGModel.writeAllDecomps", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_c_directory);
  __Pyx_XDECREF(__pyx_v_c_extension);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._scip,self._valid cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_55__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_8GCGModel_54__reduce_cython__[] = "GCGModel.__reduce_cython__(self)";
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_55__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8GCGModel_54__reduce_cython__(((struct __pyx_obj_8pygcgopt_3gcg_GCGModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_54__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._scip,self._valid cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._scip,self._valid cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(4, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._scip,self._valid cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygcgopt.gcg.GCGModel.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._scip,self._valid cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._scip,self._valid cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_57__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_8GCGModel_56__setstate_cython__[] = "GCGModel.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_8pygcgopt_3gcg_8GCGModel_57__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_8GCGModel_56__setstate_cython__(((struct __pyx_obj_8pygcgopt_3gcg_GCGModel *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_8GCGModel_56__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_GCGModel *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._scip,self._valid cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._scip,self._valid cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(4, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._scip,self._valid cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._scip,self._valid cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygcgopt.gcg.GCGModel.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygcgopt/gcg.pyx":353
 * cdef class GCGPricingModel(Model):
 *     @staticmethod
 *     cdef create(SCIP* scip):             # <<<<<<<<<<<<<<
 *         """Creates a pricing problem model and appropriately assigns the scip and bestsol parameters
 *         """
 */

static PyObject *__pyx_f_8pygcgopt_3gcg_15GCGPricingModel_create(SCIP *__pyx_v_scip) {
  struct __pyx_obj_8pygcgopt_3gcg_GCGPricingModel *__pyx_v_model = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create", 0);

  /* "pygcgopt/gcg.pyx":356
 *         """Creates a pricing problem model and appropriately assigns the scip and bestsol parameters
 *         """
 *         if scip == NULL:             # <<<<<<<<<<<<<<
 *             raise Warning("cannot create Model with SCIP* == NULL")
 *         model = GCGPricingModel(createscip=False)
 */
  __pyx_t_1 = ((__pyx_v_scip == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "pygcgopt/gcg.pyx":357
 *         """
 *         if scip == NULL:
 *             raise Warning("cannot create Model with SCIP* == NULL")             # <<<<<<<<<<<<<<
 *         model = GCGPricingModel(createscip=False)
 *         model._scip = scip
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_Warning, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 357, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(3, 357, __pyx_L1_error)

    /* "pygcgopt/gcg.pyx":356
 *         """Creates a pricing problem model and appropriately assigns the scip and bestsol parameters
 *         """
 *         if scip == NULL:             # <<<<<<<<<<<<<<
 *             raise Warning("cannot create Model with SCIP* == NULL")
 *         model = GCGPricingModel(createscip=False)
 */
  }

  /* "pygcgopt/gcg.pyx":358
 *         if scip == NULL:
 *             raise Warning("cannot create Model with SCIP* == NULL")
 *         model = GCGPricingModel(createscip=False)             # <<<<<<<<<<<<<<
 *         model._scip = scip
 *         model._bestSol = Solution.create(scip, SCIPgetBestSol(scip))
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_createscip, Py_False) < 0) __PYX_ERR(3, 358, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8pygcgopt_3gcg_GCGPricingModel), __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_model = ((struct __pyx_obj_8pygcgopt_3gcg_GCGPricingModel *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pygcgopt/gcg.pyx":359
 *             raise Warning("cannot create Model with SCIP* == NULL")
 *         model = GCGPricingModel(createscip=False)
 *         model._scip = scip             # <<<<<<<<<<<<<<
 *         model._bestSol = Solution.create(scip, SCIPgetBestSol(scip))
 *         return model
 */
  __pyx_v_model->__pyx_base._scip = __pyx_v_scip;

  /* "pygcgopt/gcg.pyx":360
 *         model = GCGPricingModel(createscip=False)
 *         model._scip = scip
 *         model._bestSol = Solution.create(scip, SCIPgetBestSol(scip))             # <<<<<<<<<<<<<<
 *         return model
 * 
 */
  __pyx_t_3 = __pyx_vtabptr_9pyscipopt_4scip_Solution->create(__pyx_v_scip, SCIPgetBestSol(__pyx_v_scip)); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_9pyscipopt_4scip_Solution))))) __PYX_ERR(3, 360, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_model->__pyx_base._bestSol);
  __Pyx_DECREF(((PyObject *)__pyx_v_model->__pyx_base._bestSol));
  __pyx_v_model->__pyx_base._bestSol = ((struct __pyx_obj_9pyscipopt_4scip_Solution *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pygcgopt/gcg.pyx":361
 *         model._scip = scip
 *         model._bestSol = Solution.create(scip, SCIPgetBestSol(scip))
 *         return model             # <<<<<<<<<<<<<<
 * 
 *     def createGcgCol(self, probnr, variables, vals, bool isray, redcost):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_model));
  __pyx_r = ((PyObject *)__pyx_v_model);
  goto __pyx_L0;

  /* "pygcgopt/gcg.pyx":353
 * cdef class GCGPricingModel(Model):
 *     @staticmethod
 *     cdef create(SCIP* scip):             # <<<<<<<<<<<<<<
 *         """Creates a pricing problem model and appropriately assigns the scip and bestsol parameters
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygcgopt.gcg.GCGPricingModel.create", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_model);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygcgopt/gcg.pyx":363
 *         return model
 * 
 *     def createGcgCol(self, probnr, variables, vals, bool isray, redcost):             # <<<<<<<<<<<<<<
 *         """create a gcg column
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_15GCGPricingModel_1createGcgCol(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_15GCGPricingModel_createGcgCol[] = "GCGPricingModel.createGcgCol(self, probnr, variables, vals, bool isray, redcost)\ncreate a gcg column\n\n        :param prob: number of corresponding pricing problem\n        :param variables: (sorted) array of variables of corresponding pricing problem\n        :param vals: array of solution values (belonging to vars)\n        :param isray: is the column a ray?\n        :param redcost: last known reduced cost\n        ";
static PyObject *__pyx_pw_8pygcgopt_3gcg_15GCGPricingModel_1createGcgCol(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_probnr = 0;
  PyObject *__pyx_v_variables = 0;
  PyObject *__pyx_v_vals = 0;
  bool __pyx_v_isray;
  PyObject *__pyx_v_redcost = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("createGcgCol (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_probnr,&__pyx_n_s_variables,&__pyx_n_s_vals,&__pyx_n_s_isray,&__pyx_n_s_redcost,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_probnr)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_variables)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("createGcgCol", 1, 5, 5, 1); __PYX_ERR(3, 363, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_vals)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("createGcgCol", 1, 5, 5, 2); __PYX_ERR(3, 363, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_isray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("createGcgCol", 1, 5, 5, 3); __PYX_ERR(3, 363, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_redcost)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("createGcgCol", 1, 5, 5, 4); __PYX_ERR(3, 363, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "createGcgCol") < 0)) __PYX_ERR(3, 363, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_probnr = values[0];
    __pyx_v_variables = values[1];
    __pyx_v_vals = values[2];
    __pyx_v_isray = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_isray == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(3, 363, __pyx_L3_error)
    __pyx_v_redcost = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("createGcgCol", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 363, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.GCGPricingModel.createGcgCol", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_15GCGPricingModel_createGcgCol(((struct __pyx_obj_8pygcgopt_3gcg_GCGPricingModel *)__pyx_v_self), __pyx_v_probnr, __pyx_v_variables, __pyx_v_vals, __pyx_v_isray, __pyx_v_redcost);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_15GCGPricingModel_createGcgCol(struct __pyx_obj_8pygcgopt_3gcg_GCGPricingModel *__pyx_v_self, PyObject *__pyx_v_probnr, PyObject *__pyx_v_variables, PyObject *__pyx_v_vals, bool __pyx_v_isray, PyObject *__pyx_v_redcost) {
  GCG_COL *__pyx_v_gcg_col;
  PyObject *__pyx_v_nvars = NULL;
  SCIP_VAR **__pyx_v_c_vars;
  SCIP_Real *__pyx_v_c_vals;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_pyGCGCol = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  SCIP_VAR *__pyx_t_6;
  Py_ssize_t __pyx_t_7;
  SCIP_Real __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("createGcgCol", 0);

  /* "pygcgopt/gcg.pyx":373
 *         """
 *         cdef GCG_COL * gcg_col
 *         nvars = len(variables)             # <<<<<<<<<<<<<<
 *         cdef SCIP_VAR ** c_vars = <SCIP_VAR**>malloc(nvars * sizeof(SCIP_VAR*))
 *         cdef SCIP_Real * c_vals = <SCIP_Real*>malloc(nvars * sizeof(SCIP_Real))
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_variables); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(3, 373, __pyx_L1_error)
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_nvars = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pygcgopt/gcg.pyx":374
 *         cdef GCG_COL * gcg_col
 *         nvars = len(variables)
 *         cdef SCIP_VAR ** c_vars = <SCIP_VAR**>malloc(nvars * sizeof(SCIP_VAR*))             # <<<<<<<<<<<<<<
 *         cdef SCIP_Real * c_vals = <SCIP_Real*>malloc(nvars * sizeof(SCIP_Real))
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_FromSize_t((sizeof(SCIP_VAR *))); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_v_nvars, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_size_t(__pyx_t_3); if (unlikely((__pyx_t_4 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(3, 374, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_c_vars = ((SCIP_VAR **)malloc(__pyx_t_4));

  /* "pygcgopt/gcg.pyx":375
 *         nvars = len(variables)
 *         cdef SCIP_VAR ** c_vars = <SCIP_VAR**>malloc(nvars * sizeof(SCIP_VAR*))
 *         cdef SCIP_Real * c_vals = <SCIP_Real*>malloc(nvars * sizeof(SCIP_Real))             # <<<<<<<<<<<<<<
 * 
 *         for i in range(nvars):
 */
  __pyx_t_3 = __Pyx_PyInt_FromSize_t((sizeof(SCIP_Real))); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyNumber_Multiply(__pyx_v_nvars, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_size_t(__pyx_t_2); if (unlikely((__pyx_t_4 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(3, 375, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_c_vals = ((SCIP_Real *)malloc(__pyx_t_4));

  /* "pygcgopt/gcg.pyx":377
 *         cdef SCIP_Real * c_vals = <SCIP_Real*>malloc(nvars * sizeof(SCIP_Real))
 * 
 *         for i in range(nvars):             # <<<<<<<<<<<<<<
 *             c_vars[i] = (<Variable>variables[i]).scip_var
 *             c_vals[i] = vals[i]
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_v_nvars); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_1 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 377, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 377, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_2); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(3, 377, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 377, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_2); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(3, 377, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 377, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(3, 377, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pygcgopt/gcg.pyx":378
 * 
 *         for i in range(nvars):
 *             c_vars[i] = (<Variable>variables[i]).scip_var             # <<<<<<<<<<<<<<
 *             c_vals[i] = vals[i]
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_variables, __pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 378, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = ((struct __pyx_obj_9pyscipopt_4scip_Variable *)__pyx_t_2)->scip_var;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_7 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_7 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(3, 378, __pyx_L1_error)
    (__pyx_v_c_vars[__pyx_t_7]) = __pyx_t_6;

    /* "pygcgopt/gcg.pyx":379
 *         for i in range(nvars):
 *             c_vars[i] = (<Variable>variables[i]).scip_var
 *             c_vals[i] = vals[i]             # <<<<<<<<<<<<<<
 * 
 *         GCGcreateGcgCol(self._scip, &gcg_col, probnr, c_vars, c_vals, nvars, isray, redcost)
 */
    __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_vals, __pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 379, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_8 == ((SCIP_Real)-1)) && PyErr_Occurred())) __PYX_ERR(3, 379, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_7 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_7 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(3, 379, __pyx_L1_error)
    (__pyx_v_c_vals[__pyx_t_7]) = __pyx_t_8;

    /* "pygcgopt/gcg.pyx":377
 *         cdef SCIP_Real * c_vals = <SCIP_Real*>malloc(nvars * sizeof(SCIP_Real))
 * 
 *         for i in range(nvars):             # <<<<<<<<<<<<<<
 *             c_vars[i] = (<Variable>variables[i]).scip_var
 *             c_vals[i] = vals[i]
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pygcgopt/gcg.pyx":381
 *             c_vals[i] = vals[i]
 * 
 *         GCGcreateGcgCol(self._scip, &gcg_col, probnr, c_vars, c_vals, nvars, isray, redcost)             # <<<<<<<<<<<<<<
 * 
 *         pyGCGCol = GCGColumn.create(gcg_col)
 */
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_v_probnr); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 381, __pyx_L1_error)
  __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_v_nvars); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 381, __pyx_L1_error)
  __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_v_redcost); if (unlikely((__pyx_t_8 == ((SCIP_Real)-1)) && PyErr_Occurred())) __PYX_ERR(3, 381, __pyx_L1_error)
  (void)(GCGcreateGcgCol(__pyx_v_self->__pyx_base._scip, (&__pyx_v_gcg_col), __pyx_t_9, __pyx_v_c_vars, __pyx_v_c_vals, __pyx_t_10, __pyx_v_isray, __pyx_t_8));

  /* "pygcgopt/gcg.pyx":383
 *         GCGcreateGcgCol(self._scip, &gcg_col, probnr, c_vars, c_vals, nvars, isray, redcost)
 * 
 *         pyGCGCol = GCGColumn.create(gcg_col)             # <<<<<<<<<<<<<<
 * 
 *         free(c_vars)
 */
  __pyx_t_3 = __pyx_f_8pygcgopt_3gcg_9GCGColumn_create(__pyx_v_gcg_col); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_pyGCGCol = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pygcgopt/gcg.pyx":385
 *         pyGCGCol = GCGColumn.create(gcg_col)
 * 
 *         free(c_vars)             # <<<<<<<<<<<<<<
 *         free(c_vals)
 * 
 */
  free(__pyx_v_c_vars);

  /* "pygcgopt/gcg.pyx":386
 * 
 *         free(c_vars)
 *         free(c_vals)             # <<<<<<<<<<<<<<
 * 
 *         return pyGCGCol
 */
  free(__pyx_v_c_vals);

  /* "pygcgopt/gcg.pyx":388
 *         free(c_vals)
 * 
 *         return pyGCGCol             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_pyGCGCol);
  __pyx_r = __pyx_v_pyGCGCol;
  goto __pyx_L0;

  /* "pygcgopt/gcg.pyx":363
 *         return model
 * 
 *     def createGcgCol(self, probnr, variables, vals, bool isray, redcost):             # <<<<<<<<<<<<<<
 *         """create a gcg column
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygcgopt.gcg.GCGPricingModel.createGcgCol", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_nvars);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_pyGCGCol);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._scip,self._valid cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_15GCGPricingModel_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_15GCGPricingModel_2__reduce_cython__[] = "GCGPricingModel.__reduce_cython__(self)";
static PyObject *__pyx_pw_8pygcgopt_3gcg_15GCGPricingModel_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_15GCGPricingModel_2__reduce_cython__(((struct __pyx_obj_8pygcgopt_3gcg_GCGPricingModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_15GCGPricingModel_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_GCGPricingModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._scip,self._valid cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._scip,self._valid cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(4, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._scip,self._valid cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygcgopt.gcg.GCGPricingModel.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._scip,self._valid cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._scip,self._valid cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_15GCGPricingModel_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_15GCGPricingModel_4__setstate_cython__[] = "GCGPricingModel.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_8pygcgopt_3gcg_15GCGPricingModel_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_15GCGPricingModel_4__setstate_cython__(((struct __pyx_obj_8pygcgopt_3gcg_GCGPricingModel *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_15GCGPricingModel_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_GCGPricingModel *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._scip,self._valid cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._scip,self._valid cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(4, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._scip,self._valid cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._scip,self._valid cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygcgopt.gcg.GCGPricingModel.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygcgopt/gcg.pyx":393
 * cdef class GCGMasterModel(Model):
 *     @staticmethod
 *     cdef create(SCIP* scip):             # <<<<<<<<<<<<<<
 *         """Creates a pricing problem model and appropriately assigns the scip and bestsol parameters
 *         """
 */

static PyObject *__pyx_f_8pygcgopt_3gcg_14GCGMasterModel_create(SCIP *__pyx_v_scip) {
  struct __pyx_obj_8pygcgopt_3gcg_GCGMasterModel *__pyx_v_model = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create", 0);

  /* "pygcgopt/gcg.pyx":396
 *         """Creates a pricing problem model and appropriately assigns the scip and bestsol parameters
 *         """
 *         if scip == NULL:             # <<<<<<<<<<<<<<
 *             raise Warning("cannot create Model with SCIP* == NULL")
 *         model = GCGMasterModel(createscip=False)
 */
  __pyx_t_1 = ((__pyx_v_scip == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "pygcgopt/gcg.pyx":397
 *         """
 *         if scip == NULL:
 *             raise Warning("cannot create Model with SCIP* == NULL")             # <<<<<<<<<<<<<<
 *         model = GCGMasterModel(createscip=False)
 *         model._scip = scip
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_Warning, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 397, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(3, 397, __pyx_L1_error)

    /* "pygcgopt/gcg.pyx":396
 *         """Creates a pricing problem model and appropriately assigns the scip and bestsol parameters
 *         """
 *         if scip == NULL:             # <<<<<<<<<<<<<<
 *             raise Warning("cannot create Model with SCIP* == NULL")
 *         model = GCGMasterModel(createscip=False)
 */
  }

  /* "pygcgopt/gcg.pyx":398
 *         if scip == NULL:
 *             raise Warning("cannot create Model with SCIP* == NULL")
 *         model = GCGMasterModel(createscip=False)             # <<<<<<<<<<<<<<
 *         model._scip = scip
 *         model._bestSol = Solution.create(scip, SCIPgetBestSol(scip))
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_createscip, Py_False) < 0) __PYX_ERR(3, 398, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8pygcgopt_3gcg_GCGMasterModel), __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_model = ((struct __pyx_obj_8pygcgopt_3gcg_GCGMasterModel *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pygcgopt/gcg.pyx":399
 *             raise Warning("cannot create Model with SCIP* == NULL")
 *         model = GCGMasterModel(createscip=False)
 *         model._scip = scip             # <<<<<<<<<<<<<<
 *         model._bestSol = Solution.create(scip, SCIPgetBestSol(scip))
 *         return model
 */
  __pyx_v_model->__pyx_base._scip = __pyx_v_scip;

  /* "pygcgopt/gcg.pyx":400
 *         model = GCGMasterModel(createscip=False)
 *         model._scip = scip
 *         model._bestSol = Solution.create(scip, SCIPgetBestSol(scip))             # <<<<<<<<<<<<<<
 *         return model
 * 
 */
  __pyx_t_3 = __pyx_vtabptr_9pyscipopt_4scip_Solution->create(__pyx_v_scip, SCIPgetBestSol(__pyx_v_scip)); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_9pyscipopt_4scip_Solution))))) __PYX_ERR(3, 400, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_model->__pyx_base._bestSol);
  __Pyx_DECREF(((PyObject *)__pyx_v_model->__pyx_base._bestSol));
  __pyx_v_model->__pyx_base._bestSol = ((struct __pyx_obj_9pyscipopt_4scip_Solution *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pygcgopt/gcg.pyx":401
 *         model._scip = scip
 *         model._bestSol = Solution.create(scip, SCIPgetBestSol(scip))
 *         return model             # <<<<<<<<<<<<<<
 * 
 *     def addCol(self, GCGColumn col):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_model));
  __pyx_r = ((PyObject *)__pyx_v_model);
  goto __pyx_L0;

  /* "pygcgopt/gcg.pyx":393
 * cdef class GCGMasterModel(Model):
 *     @staticmethod
 *     cdef create(SCIP* scip):             # <<<<<<<<<<<<<<
 *         """Creates a pricing problem model and appropriately assigns the scip and bestsol parameters
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygcgopt.gcg.GCGMasterModel.create", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_model);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygcgopt/gcg.pyx":403
 *         return model
 * 
 *     def addCol(self, GCGColumn col):             # <<<<<<<<<<<<<<
 *         PY_SCIP_CALL(GCGpricerAddCol(self._scip, col.gcg_col))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_14GCGMasterModel_1addCol(PyObject *__pyx_v_self, PyObject *__pyx_v_col); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_14GCGMasterModel_addCol[] = "GCGMasterModel.addCol(self, GCGColumn col)";
static PyObject *__pyx_pw_8pygcgopt_3gcg_14GCGMasterModel_1addCol(PyObject *__pyx_v_self, PyObject *__pyx_v_col) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addCol (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_col), __pyx_ptype_8pygcgopt_3gcg_GCGColumn, 1, "col", 0))) __PYX_ERR(3, 403, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_14GCGMasterModel_addCol(((struct __pyx_obj_8pygcgopt_3gcg_GCGMasterModel *)__pyx_v_self), ((struct __pyx_obj_8pygcgopt_3gcg_GCGColumn *)__pyx_v_col));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_14GCGMasterModel_addCol(struct __pyx_obj_8pygcgopt_3gcg_GCGMasterModel *__pyx_v_self, struct __pyx_obj_8pygcgopt_3gcg_GCGColumn *__pyx_v_col) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addCol", 0);

  /* "pygcgopt/gcg.pyx":404
 * 
 *     def addCol(self, GCGColumn col):
 *         PY_SCIP_CALL(GCGpricerAddCol(self._scip, col.gcg_col))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_PY_SCIP_CALL); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 404, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_SCIP_RETCODE(GCGpricerAddCol(__pyx_v_self->__pyx_base._scip, __pyx_v_col->gcg_col)); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 404, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 404, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygcgopt/gcg.pyx":403
 *         return model
 * 
 *     def addCol(self, GCGColumn col):             # <<<<<<<<<<<<<<
 *         PY_SCIP_CALL(GCGpricerAddCol(self._scip, col.gcg_col))
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pygcgopt.gcg.GCGMasterModel.addCol", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._scip,self._valid cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_14GCGMasterModel_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_14GCGMasterModel_2__reduce_cython__[] = "GCGMasterModel.__reduce_cython__(self)";
static PyObject *__pyx_pw_8pygcgopt_3gcg_14GCGMasterModel_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_14GCGMasterModel_2__reduce_cython__(((struct __pyx_obj_8pygcgopt_3gcg_GCGMasterModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_14GCGMasterModel_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_GCGMasterModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._scip,self._valid cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._scip,self._valid cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(4, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._scip,self._valid cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygcgopt.gcg.GCGMasterModel.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._scip,self._valid cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._scip,self._valid cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_14GCGMasterModel_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_14GCGMasterModel_4__setstate_cython__[] = "GCGMasterModel.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_8pygcgopt_3gcg_14GCGMasterModel_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_14GCGMasterModel_4__setstate_cython__(((struct __pyx_obj_8pygcgopt_3gcg_GCGMasterModel *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_14GCGMasterModel_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_GCGMasterModel *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._scip,self._valid cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._scip,self._valid cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(4, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._scip,self._valid cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._scip,self._valid cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygcgopt.gcg.GCGMasterModel.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygcgopt/gcg.pyx":411
 * 
 *     @staticmethod
 *     cdef create(GCG_COL* gcgcol):             # <<<<<<<<<<<<<<
 *         if gcgcol == NULL:
 *             raise Warning("cannot create Column with GCG_COL* == NULL")
 */

static PyObject *__pyx_f_8pygcgopt_3gcg_9GCGColumn_create(GCG_COL *__pyx_v_gcgcol) {
  struct __pyx_obj_8pygcgopt_3gcg_GCGColumn *__pyx_v_col = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create", 0);

  /* "pygcgopt/gcg.pyx":412
 *     @staticmethod
 *     cdef create(GCG_COL* gcgcol):
 *         if gcgcol == NULL:             # <<<<<<<<<<<<<<
 *             raise Warning("cannot create Column with GCG_COL* == NULL")
 *         col = GCGColumn()
 */
  __pyx_t_1 = ((__pyx_v_gcgcol == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "pygcgopt/gcg.pyx":413
 *     cdef create(GCG_COL* gcgcol):
 *         if gcgcol == NULL:
 *             raise Warning("cannot create Column with GCG_COL* == NULL")             # <<<<<<<<<<<<<<
 *         col = GCGColumn()
 *         col.gcg_col = gcgcol
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_Warning, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 413, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(3, 413, __pyx_L1_error)

    /* "pygcgopt/gcg.pyx":412
 *     @staticmethod
 *     cdef create(GCG_COL* gcgcol):
 *         if gcgcol == NULL:             # <<<<<<<<<<<<<<
 *             raise Warning("cannot create Column with GCG_COL* == NULL")
 *         col = GCGColumn()
 */
  }

  /* "pygcgopt/gcg.pyx":414
 *         if gcgcol == NULL:
 *             raise Warning("cannot create Column with GCG_COL* == NULL")
 *         col = GCGColumn()             # <<<<<<<<<<<<<<
 *         col.gcg_col = gcgcol
 *         return col
 */
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygcgopt_3gcg_GCGColumn)); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_col = ((struct __pyx_obj_8pygcgopt_3gcg_GCGColumn *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pygcgopt/gcg.pyx":415
 *             raise Warning("cannot create Column with GCG_COL* == NULL")
 *         col = GCGColumn()
 *         col.gcg_col = gcgcol             # <<<<<<<<<<<<<<
 *         return col
 * 
 */
  __pyx_v_col->gcg_col = __pyx_v_gcgcol;

  /* "pygcgopt/gcg.pyx":416
 *         col = GCGColumn()
 *         col.gcg_col = gcgcol
 *         return col             # <<<<<<<<<<<<<<
 * 
 *     def __hash__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_col));
  __pyx_r = ((PyObject *)__pyx_v_col);
  goto __pyx_L0;

  /* "pygcgopt/gcg.pyx":411
 * 
 *     @staticmethod
 *     cdef create(GCG_COL* gcgcol):             # <<<<<<<<<<<<<<
 *         if gcgcol == NULL:
 *             raise Warning("cannot create Column with GCG_COL* == NULL")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygcgopt.gcg.GCGColumn.create", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_col);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygcgopt/gcg.pyx":418
 *         return col
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return hash(<size_t>self.gcg_col)
 * 
 */

/* Python wrapper */
static Py_hash_t __pyx_pw_8pygcgopt_3gcg_9GCGColumn_1__hash__(PyObject *__pyx_v_self); /*proto*/
static Py_hash_t __pyx_pw_8pygcgopt_3gcg_9GCGColumn_1__hash__(PyObject *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_9GCGColumn___hash__(((struct __pyx_obj_8pygcgopt_3gcg_GCGColumn *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_hash_t __pyx_pf_8pygcgopt_3gcg_9GCGColumn___hash__(struct __pyx_obj_8pygcgopt_3gcg_GCGColumn *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_hash_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__hash__", 0);

  /* "pygcgopt/gcg.pyx":419
 * 
 *     def __hash__(self):
 *         return hash(<size_t>self.gcg_col)             # <<<<<<<<<<<<<<
 * 
 *     def __eq__(self, other):
 */
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(((size_t)__pyx_v_self->gcg_col)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Hash(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_hash_t)-1))) __PYX_ERR(3, 419, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  /* "pygcgopt/gcg.pyx":418
 *         return col
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return hash(<size_t>self.gcg_col)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygcgopt.gcg.GCGColumn.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygcgopt/gcg.pyx":421
 *         return hash(<size_t>self.gcg_col)
 * 
 *     def __eq__(self, other):             # <<<<<<<<<<<<<<
 *         return (self.__class__ == other.__class__ and self.gcg_col == (<GCGColumn>other).gcg_col)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_9GCGColumn_3__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_8pygcgopt_3gcg_9GCGColumn_3__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__eq__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_9GCGColumn_2__eq__(((struct __pyx_obj_8pygcgopt_3gcg_GCGColumn *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_9GCGColumn_2__eq__(struct __pyx_obj_8pygcgopt_3gcg_GCGColumn *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__eq__", 0);

  /* "pygcgopt/gcg.pyx":422
 * 
 *     def __eq__(self, other):
 *         return (self.__class__ == other.__class__ and self.gcg_col == (<GCGColumn>other).gcg_col)             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_class); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 422, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(3, 422, __pyx_L1_error)
  if (__pyx_t_5) {
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_1 = __pyx_t_4;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_5 = (__pyx_v_self->gcg_col == ((struct __pyx_obj_8pygcgopt_3gcg_GCGColumn *)__pyx_v_other)->gcg_col);
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pygcgopt/gcg.pyx":421
 *         return hash(<size_t>self.gcg_col)
 * 
 *     def __eq__(self, other):             # <<<<<<<<<<<<<<
 *         return (self.__class__ == other.__class__ and self.gcg_col == (<GCGColumn>other).gcg_col)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pygcgopt.gcg.GCGColumn.__eq__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.gcg_col cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_9GCGColumn_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_9GCGColumn_4__reduce_cython__[] = "GCGColumn.__reduce_cython__(self)";
static PyObject *__pyx_pw_8pygcgopt_3gcg_9GCGColumn_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_9GCGColumn_4__reduce_cython__(((struct __pyx_obj_8pygcgopt_3gcg_GCGColumn *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_9GCGColumn_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_GCGColumn *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.gcg_col cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.gcg_col cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(4, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.gcg_col cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygcgopt.gcg.GCGColumn.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.gcg_col cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.gcg_col cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_9GCGColumn_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_9GCGColumn_6__setstate_cython__[] = "GCGColumn.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_8pygcgopt_3gcg_9GCGColumn_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_9GCGColumn_6__setstate_cython__(((struct __pyx_obj_8pygcgopt_3gcg_GCGColumn *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_9GCGColumn_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygcgopt_3gcg_GCGColumn *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.gcg_col cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.gcg_col cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__37, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(4, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.gcg_col cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.gcg_col cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygcgopt.gcg.GCGColumn.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_Detector(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_1__pyx_unpickle_Detector(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg___pyx_unpickle_Detector[] = "__pyx_unpickle_Detector(__pyx_type, long __pyx_checksum, __pyx_state)";
static PyMethodDef __pyx_mdef_8pygcgopt_3gcg_1__pyx_unpickle_Detector = {"__pyx_unpickle_Detector", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygcgopt_3gcg_1__pyx_unpickle_Detector, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygcgopt_3gcg___pyx_unpickle_Detector};
static PyObject *__pyx_pw_8pygcgopt_3gcg_1__pyx_unpickle_Detector(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_Detector (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Detector", 1, 3, 3, 1); __PYX_ERR(4, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Detector", 1, 3, 3, 2); __PYX_ERR(4, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_Detector") < 0)) __PYX_ERR(4, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(4, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Detector", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.__pyx_unpickle_Detector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg___pyx_unpickle_Detector(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg___pyx_unpickle_Detector(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Detector", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xf7f977a:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xf7f977a = (detectorname, model))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xf7f977a) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xf7f977a:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xf7f977a = (detectorname, model))" % __pyx_checksum)
 *     __pyx_result = Detector.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xf7f977a:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xf7f977a = (detectorname, model))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = Detector.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xf7, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(4, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xf7f977a:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xf7f977a = (detectorname, model))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xf7f977a = (detectorname, model))" % __pyx_checksum)
 *     __pyx_result = Detector.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Detector__set_state(<Detector> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pygcgopt_3gcg_Detector), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xf7f977a = (detectorname, model))" % __pyx_checksum)
 *     __pyx_result = Detector.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Detector__set_state(<Detector> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = Detector.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Detector__set_state(<Detector> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_Detector__set_state(Detector __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(4, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_8pygcgopt_3gcg___pyx_unpickle_Detector__set_state(((struct __pyx_obj_8pygcgopt_3gcg_Detector *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xf7f977a = (detectorname, model))" % __pyx_checksum)
 *     __pyx_result = Detector.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Detector__set_state(<Detector> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Detector__set_state(<Detector> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_Detector__set_state(Detector __pyx_result, tuple __pyx_state):
 *     __pyx_result.detectorname = __pyx_state[0]; __pyx_result.model = __pyx_state[1]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Detector(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygcgopt.gcg.__pyx_unpickle_Detector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_Detector__set_state(<Detector> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Detector__set_state(Detector __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.detectorname = __pyx_state[0]; __pyx_result.model = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_8pygcgopt_3gcg___pyx_unpickle_Detector__set_state(struct __pyx_obj_8pygcgopt_3gcg_Detector *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Detector__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Detector__set_state(Detector __pyx_result, tuple __pyx_state):
 *     __pyx_result.detectorname = __pyx_state[0]; __pyx_result.model = __pyx_state[1]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[2])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(4, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(4, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->detectorname);
  __Pyx_DECREF(__pyx_v___pyx_result->detectorname);
  __pyx_v___pyx_result->detectorname = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(4, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9pyscipopt_4scip_Model))))) __PYX_ERR(4, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->model);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->model));
  __pyx_v___pyx_result->model = ((struct __pyx_obj_9pyscipopt_4scip_Model *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_Detector__set_state(Detector __pyx_result, tuple __pyx_state):
 *     __pyx_result.detectorname = __pyx_state[0]; __pyx_result.model = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[2])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(4, 13, __pyx_L1_error)
  }
  __pyx_t_3 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(4, 13, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 > 2) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(4, 13, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result.detectorname = __pyx_state[0]; __pyx_result.model = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[2])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(4, 14, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_1 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_Detector__set_state(Detector __pyx_result, tuple __pyx_state):
 *     __pyx_result.detectorname = __pyx_state[0]; __pyx_result.model = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[2])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_Detector__set_state(<Detector> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Detector__set_state(Detector __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.detectorname = __pyx_state[0]; __pyx_result.model = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pygcgopt.gcg.__pyx_unpickle_Detector__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_PricingSolver(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_3__pyx_unpickle_PricingSolver(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_2__pyx_unpickle_PricingSolver[] = "__pyx_unpickle_PricingSolver(__pyx_type, long __pyx_checksum, __pyx_state)";
static PyMethodDef __pyx_mdef_8pygcgopt_3gcg_3__pyx_unpickle_PricingSolver = {"__pyx_unpickle_PricingSolver", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygcgopt_3gcg_3__pyx_unpickle_PricingSolver, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygcgopt_3gcg_2__pyx_unpickle_PricingSolver};
static PyObject *__pyx_pw_8pygcgopt_3gcg_3__pyx_unpickle_PricingSolver(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_PricingSolver (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PricingSolver", 1, 3, 3, 1); __PYX_ERR(4, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PricingSolver", 1, 3, 3, 2); __PYX_ERR(4, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_PricingSolver") < 0)) __PYX_ERR(4, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(4, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PricingSolver", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.__pyx_unpickle_PricingSolver", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_2__pyx_unpickle_PricingSolver(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_2__pyx_unpickle_PricingSolver(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_PricingSolver", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x7a6ef99:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x7a6ef99 = (model, solvername))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0x7a6ef99) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x7a6ef99:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x7a6ef99 = (model, solvername))" % __pyx_checksum)
 *     __pyx_result = PricingSolver.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0x7a6ef99:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x7a6ef99 = (model, solvername))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = PricingSolver.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0x7a, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(4, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x7a6ef99:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x7a6ef99 = (model, solvername))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x7a6ef99 = (model, solvername))" % __pyx_checksum)
 *     __pyx_result = PricingSolver.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PricingSolver__set_state(<PricingSolver> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pygcgopt_3gcg_PricingSolver), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x7a6ef99 = (model, solvername))" % __pyx_checksum)
 *     __pyx_result = PricingSolver.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_PricingSolver__set_state(<PricingSolver> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = PricingSolver.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PricingSolver__set_state(<PricingSolver> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_PricingSolver__set_state(PricingSolver __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(4, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_8pygcgopt_3gcg___pyx_unpickle_PricingSolver__set_state(((struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x7a6ef99 = (model, solvername))" % __pyx_checksum)
 *     __pyx_result = PricingSolver.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_PricingSolver__set_state(<PricingSolver> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PricingSolver__set_state(<PricingSolver> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_PricingSolver__set_state(PricingSolver __pyx_result, tuple __pyx_state):
 *     __pyx_result.model = __pyx_state[0]; __pyx_result.solvername = __pyx_state[1]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_PricingSolver(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygcgopt.gcg.__pyx_unpickle_PricingSolver", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_PricingSolver__set_state(<PricingSolver> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_PricingSolver__set_state(PricingSolver __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.model = __pyx_state[0]; __pyx_result.solvername = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_8pygcgopt_3gcg___pyx_unpickle_PricingSolver__set_state(struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_PricingSolver__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_PricingSolver__set_state(PricingSolver __pyx_result, tuple __pyx_state):
 *     __pyx_result.model = __pyx_state[0]; __pyx_result.solvername = __pyx_state[1]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[2])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(4, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9pyscipopt_4scip_Model))))) __PYX_ERR(4, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->model);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->model));
  __pyx_v___pyx_result->model = ((struct __pyx_obj_9pyscipopt_4scip_Model *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(4, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(4, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->solvername);
  __Pyx_DECREF(__pyx_v___pyx_result->solvername);
  __pyx_v___pyx_result->solvername = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_PricingSolver__set_state(PricingSolver __pyx_result, tuple __pyx_state):
 *     __pyx_result.model = __pyx_state[0]; __pyx_result.solvername = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[2])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(4, 13, __pyx_L1_error)
  }
  __pyx_t_3 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(4, 13, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 > 2) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(4, 13, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result.model = __pyx_state[0]; __pyx_result.solvername = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[2])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(4, 14, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_1 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_PricingSolver__set_state(PricingSolver __pyx_result, tuple __pyx_state):
 *     __pyx_result.model = __pyx_state[0]; __pyx_result.solvername = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[2])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_PricingSolver__set_state(<PricingSolver> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_PricingSolver__set_state(PricingSolver __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.model = __pyx_state[0]; __pyx_result.solvername = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pygcgopt.gcg.__pyx_unpickle_PricingSolver__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_PY_GCG_PRICINGSTATUS(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygcgopt_3gcg_5__pyx_unpickle_PY_GCG_PRICINGSTATUS(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygcgopt_3gcg_4__pyx_unpickle_PY_GCG_PRICINGSTATUS[] = "__pyx_unpickle_PY_GCG_PRICINGSTATUS(__pyx_type, long __pyx_checksum, __pyx_state)";
static PyMethodDef __pyx_mdef_8pygcgopt_3gcg_5__pyx_unpickle_PY_GCG_PRICINGSTATUS = {"__pyx_unpickle_PY_GCG_PRICINGSTATUS", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygcgopt_3gcg_5__pyx_unpickle_PY_GCG_PRICINGSTATUS, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygcgopt_3gcg_4__pyx_unpickle_PY_GCG_PRICINGSTATUS};
static PyObject *__pyx_pw_8pygcgopt_3gcg_5__pyx_unpickle_PY_GCG_PRICINGSTATUS(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_PY_GCG_PRICINGSTATUS (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PY_GCG_PRICINGSTATUS", 1, 3, 3, 1); __PYX_ERR(4, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PY_GCG_PRICINGSTATUS", 1, 3, 3, 2); __PYX_ERR(4, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_PY_GCG_PRICINGSTATUS") < 0)) __PYX_ERR(4, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(4, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PY_GCG_PRICINGSTATUS", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygcgopt.gcg.__pyx_unpickle_PY_GCG_PRICINGSTATUS", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygcgopt_3gcg_4__pyx_unpickle_PY_GCG_PRICINGSTATUS(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygcgopt_3gcg_4__pyx_unpickle_PY_GCG_PRICINGSTATUS(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_PY_GCG_PRICINGSTATUS", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xd41d8cd) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = PY_GCG_PRICINGSTATUS.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = PY_GCG_PRICINGSTATUS.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xd4, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(4, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = PY_GCG_PRICINGSTATUS.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PY_GCG_PRICINGSTATUS__set_state(<PY_GCG_PRICINGSTATUS> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pygcgopt_3gcg_PY_GCG_PRICINGSTATUS), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = PY_GCG_PRICINGSTATUS.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_PY_GCG_PRICINGSTATUS__set_state(<PY_GCG_PRICINGSTATUS> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = PY_GCG_PRICINGSTATUS.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PY_GCG_PRICINGSTATUS__set_state(<PY_GCG_PRICINGSTATUS> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_PY_GCG_PRICINGSTATUS__set_state(PY_GCG_PRICINGSTATUS __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(4, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_8pygcgopt_3gcg___pyx_unpickle_PY_GCG_PRICINGSTATUS__set_state(((struct __pyx_obj_8pygcgopt_3gcg_PY_GCG_PRICINGSTATUS *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = PY_GCG_PRICINGSTATUS.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_PY_GCG_PRICINGSTATUS__set_state(<PY_GCG_PRICINGSTATUS> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PY_GCG_PRICINGSTATUS__set_state(<PY_GCG_PRICINGSTATUS> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_PY_GCG_PRICINGSTATUS__set_state(PY_GCG_PRICINGSTATUS __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_PY_GCG_PRICINGSTATUS(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygcgopt.gcg.__pyx_unpickle_PY_GCG_PRICINGSTATUS", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_PY_GCG_PRICINGSTATUS__set_state(<PY_GCG_PRICINGSTATUS> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_PY_GCG_PRICINGSTATUS__set_state(PY_GCG_PRICINGSTATUS __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

static PyObject *__pyx_f_8pygcgopt_3gcg___pyx_unpickle_PY_GCG_PRICINGSTATUS__set_state(struct __pyx_obj_8pygcgopt_3gcg_PY_GCG_PRICINGSTATUS *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_PY_GCG_PRICINGSTATUS__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_PY_GCG_PRICINGSTATUS__set_state(PY_GCG_PRICINGSTATUS __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(4, 12, __pyx_L1_error)
  }
  __pyx_t_2 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(4, 12, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 > 0) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(4, 12, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_PY_GCG_PRICINGSTATUS__set_state(PY_GCG_PRICINGSTATUS __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(4, 13, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_5 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_PY_GCG_PRICINGSTATUS__set_state(PY_GCG_PRICINGSTATUS __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_PY_GCG_PRICINGSTATUS__set_state(<PY_GCG_PRICINGSTATUS> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_PY_GCG_PRICINGSTATUS__set_state(PY_GCG_PRICINGSTATUS __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pygcgopt.gcg.__pyx_unpickle_PY_GCG_PRICINGSTATUS__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_int(const std::vector<int>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_int", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __Pyx_PyInt_From_int((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(4, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___(const std::vector<std::vector<int> >  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __pyx_convert_vector_to_py_int((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(4, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_int")
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<int>  __pyx_convert_vector_from_py_int(PyObject *__pyx_v_o) {
  std::vector<int>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<int>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_int", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(4, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(4, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(4, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_item); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((int)__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_int")
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_double")
 * cdef object __pyx_convert_vector_to_py_double(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_double(const std::vector<double>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_double", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_double")
 * cdef object __pyx_convert_vector_to_py_double(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = PyFloat_FromDouble((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(4, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_double")
 * cdef object __pyx_convert_vector_to_py_double(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_string")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_string(const std::vector<std::string>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_string", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_string")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __pyx_convert_PyBytes_string_to_py_std__in_string((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(4, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_string")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_double")
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<double>  __pyx_convert_vector_from_py_double(PyObject *__pyx_v_o) {
  std::vector<double>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<double>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_double", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(4, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(4, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(4, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_item); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((double)__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_double")
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pair.to_py":158
 * 
 * @cname("__pyx_convert_pair_to_py_int____int")
 * cdef object __pyx_convert_pair_to_py_int____int(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

static PyObject *__pyx_convert_pair_to_py_int____int(std::pair<int,int>  const &__pyx_v_p) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_to_py_int____int", 0);

  /* "pair.to_py":159
 * @cname("__pyx_convert_pair_to_py_int____int")
 * cdef object __pyx_convert_pair_to_py_int____int(const pair[X,Y]& p):
 *     return p.first, p.second             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_p.first); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_p.second); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pair.to_py":158
 * 
 * @cname("__pyx_convert_pair_to_py_int____int")
 * cdef object __pyx_convert_pair_to_py_int____int(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.to_py.__pyx_convert_pair_to_py_int____int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "map.to_py":201
 * 
 * @cname("__pyx_convert_map_to_py_std_3a__3a_pair_3c_int_2c_int_3e_______double")
 * cdef object __pyx_convert_map_to_py_std_3a__3a_pair_3c_int_2c_int_3e_______double(const map[X,Y]& s):             # <<<<<<<<<<<<<<
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 */

static PyObject *__pyx_convert_map_to_py_std_3a__3a_pair_3c_int_2c_int_3e_______double(std::map<std::pair<int,int> ,double>  const &__pyx_v_s) {
  PyObject *__pyx_v_o = NULL;
  std::map<std::pair<int,int> ,double> ::value_type const *__pyx_v_key_value;
  std::map<std::pair<int,int> ,double> ::const_iterator __pyx_v_iter;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_map_to_py_std_3a__3a_pair_3c_int_2c_int_3e_______double", 0);

  /* "map.to_py":202
 * @cname("__pyx_convert_map_to_py_std_3a__3a_pair_3c_int_2c_int_3e_______double")
 * cdef object __pyx_convert_map_to_py_std_3a__3a_pair_3c_int_2c_int_3e_______double(const map[X,Y]& s):
 *     o = {}             # <<<<<<<<<<<<<<
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_o = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "map.to_py":204
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()             # <<<<<<<<<<<<<<
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)
 */
  __pyx_v_iter = __pyx_v_s.begin();

  /* "map.to_py":205
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()
 *     while iter != s.end():             # <<<<<<<<<<<<<<
 *         key_value = &cython.operator.dereference(iter)
 *         o[key_value.first] = key_value.second
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_iter != __pyx_v_s.end()) != 0);
    if (!__pyx_t_2) break;

    /* "map.to_py":206
 *     cdef map[X,Y].const_iterator iter = s.begin()
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)             # <<<<<<<<<<<<<<
 *         o[key_value.first] = key_value.second
 *         cython.operator.preincrement(iter)
 */
    __pyx_v_key_value = (&(*__pyx_v_iter));

    /* "map.to_py":207
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)
 *         o[key_value.first] = key_value.second             # <<<<<<<<<<<<<<
 *         cython.operator.preincrement(iter)
 *     return o
 */
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_key_value->second); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __pyx_convert_pair_to_py_int____int(__pyx_v_key_value->first); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(PyDict_SetItem(__pyx_v_o, __pyx_t_3, __pyx_t_1) < 0)) __PYX_ERR(4, 207, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "map.to_py":208
 *         key_value = &cython.operator.dereference(iter)
 *         o[key_value.first] = key_value.second
 *         cython.operator.preincrement(iter)             # <<<<<<<<<<<<<<
 *     return o
 * 
 */
    (void)((++__pyx_v_iter));
  }

  /* "map.to_py":209
 *         o[key_value.first] = key_value.second
 *         cython.operator.preincrement(iter)
 *     return o             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "map.to_py":201
 * 
 * @cname("__pyx_convert_map_to_py_std_3a__3a_pair_3c_int_2c_int_3e_______double")
 * cdef object __pyx_convert_map_to_py_std_3a__3a_pair_3c_int_2c_int_3e_______double(const map[X,Y]& s):             # <<<<<<<<<<<<<<
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("map.to_py.__pyx_convert_map_to_py_std_3a__3a_pair_3c_int_2c_int_3e_______double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_map_to_py_std_3a__3a_pair_3c_int_2c_int_3e_______int(std::map<std::pair<int,int> ,int>  const &__pyx_v_s) {
  PyObject *__pyx_v_o = NULL;
  std::map<std::pair<int,int> ,int> ::value_type const *__pyx_v_key_value;
  std::map<std::pair<int,int> ,int> ::const_iterator __pyx_v_iter;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_map_to_py_std_3a__3a_pair_3c_int_2c_int_3e_______int", 0);

  /* "map.to_py":202
 * @cname("__pyx_convert_map_to_py_std_3a__3a_pair_3c_int_2c_int_3e_______int")
 * cdef object __pyx_convert_map_to_py_std_3a__3a_pair_3c_int_2c_int_3e_______int(const map[X,Y]& s):
 *     o = {}             # <<<<<<<<<<<<<<
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_o = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "map.to_py":204
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()             # <<<<<<<<<<<<<<
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)
 */
  __pyx_v_iter = __pyx_v_s.begin();

  /* "map.to_py":205
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()
 *     while iter != s.end():             # <<<<<<<<<<<<<<
 *         key_value = &cython.operator.dereference(iter)
 *         o[key_value.first] = key_value.second
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_iter != __pyx_v_s.end()) != 0);
    if (!__pyx_t_2) break;

    /* "map.to_py":206
 *     cdef map[X,Y].const_iterator iter = s.begin()
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)             # <<<<<<<<<<<<<<
 *         o[key_value.first] = key_value.second
 *         cython.operator.preincrement(iter)
 */
    __pyx_v_key_value = (&(*__pyx_v_iter));

    /* "map.to_py":207
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)
 *         o[key_value.first] = key_value.second             # <<<<<<<<<<<<<<
 *         cython.operator.preincrement(iter)
 *     return o
 */
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_key_value->second); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __pyx_convert_pair_to_py_int____int(__pyx_v_key_value->first); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(PyDict_SetItem(__pyx_v_o, __pyx_t_3, __pyx_t_1) < 0)) __PYX_ERR(4, 207, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "map.to_py":208
 *         key_value = &cython.operator.dereference(iter)
 *         o[key_value.first] = key_value.second
 *         cython.operator.preincrement(iter)             # <<<<<<<<<<<<<<
 *     return o
 * 
 */
    (void)((++__pyx_v_iter));
  }

  /* "map.to_py":209
 *         o[key_value.first] = key_value.second
 *         cython.operator.preincrement(iter)
 *     return o             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "map.to_py":201
 * 
 * @cname("__pyx_convert_map_to_py_std_3a__3a_pair_3c_int_2c_int_3e_______int")
 * cdef object __pyx_convert_map_to_py_std_3a__3a_pair_3c_int_2c_int_3e_______int(const map[X,Y]& s):             # <<<<<<<<<<<<<<
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("map.to_py.__pyx_convert_map_to_py_std_3a__3a_pair_3c_int_2c_int_3e_______int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e___(const std::vector<std::pair<int,int> >  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e___", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e___(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __pyx_convert_pair_to_py_int____int((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(4, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pair.from_py":145
 * 
 * @cname("__pyx_convert_pair_from_py_int__and_int")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_int__and_int(object o) except *:             # <<<<<<<<<<<<<<
 *     x, y = o
 *     return pair[X,Y](<X>x, <Y>y)
 */

static std::pair<int,int>  __pyx_convert_pair_from_py_int__and_int(PyObject *__pyx_v_o) {
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_y = NULL;
  std::pair<int,int>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_from_py_int__and_int", 0);

  /* "pair.from_py":146
 * @cname("__pyx_convert_pair_from_py_int__and_int")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_int__and_int(object o) except *:
 *     x, y = o             # <<<<<<<<<<<<<<
 *     return pair[X,Y](<X>x, <Y>y)
 * 
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_o))) || (PyList_CheckExact(__pyx_v_o))) {
    PyObject* sequence = __pyx_v_o;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(4, 146, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_2);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
  } else {
    Py_ssize_t index = -1;
    __pyx_t_3 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = Py_TYPE(__pyx_t_3)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_2 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_4(__pyx_t_3), 2) < 0) __PYX_ERR(4, 146, __pyx_L1_error)
    __pyx_t_4 = NULL;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(4, 146, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_x = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_y = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pair.from_py":147
 * cdef pair[X,Y] __pyx_convert_pair_from_py_int__and_int(object o) except *:
 *     x, y = o
 *     return pair[X,Y](<X>x, <Y>y)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_x); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 147, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_y); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 147, __pyx_L1_error)
  __pyx_r = std::pair<int,int> (((int)__pyx_t_5), ((int)__pyx_t_6));
  goto __pyx_L0;

  /* "pair.from_py":145
 * 
 * @cname("__pyx_convert_pair_from_py_int__and_int")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_int__and_int(object o) except *:             # <<<<<<<<<<<<<<
 *     x, y = o
 *     return pair[X,Y](<X>x, <Y>y)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.from_py.__pyx_convert_pair_from_py_int__and_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e___")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<std::pair<int,int> >  __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e___(PyObject *__pyx_v_o) {
  std::vector<std::pair<int,int> >  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<std::pair<int,int> >  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  std::pair<int,int>  __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e___", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e___(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(4, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(4, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(4, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_convert_pair_from_py_int__and_int(__pyx_v_item); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((std::pair<int,int> )__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e___(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e___")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_8pygcgopt_3gcg_GCGColumn __pyx_vtable_8pygcgopt_3gcg_GCGColumn;

static PyObject *__pyx_tp_new_8pygcgopt_3gcg_GCGColumn(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pygcgopt_3gcg_GCGColumn *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pygcgopt_3gcg_GCGColumn *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pygcgopt_3gcg_GCGColumn;
  return o;
}

static void __pyx_tp_dealloc_8pygcgopt_3gcg_GCGColumn(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_tp_richcompare_8pygcgopt_3gcg_GCGColumn(PyObject *o1, PyObject *o2, int op) {
  switch (op) {
    case Py_EQ: {
      return __pyx_pw_8pygcgopt_3gcg_9GCGColumn_3__eq__(o1, o2);
    }
    case Py_NE: {
      PyObject *ret;
      ret = __pyx_pw_8pygcgopt_3gcg_9GCGColumn_3__eq__(o1, o2);
      if (likely(ret && ret != Py_NotImplemented)) {
        int b = __Pyx_PyObject_IsTrue(ret); Py_DECREF(ret);
        if (unlikely(b < 0)) return NULL;
        ret = (b) ? Py_False : Py_True;
        Py_INCREF(ret);
      }
      return ret;
    }
    default: {
      return __Pyx_NewRef(Py_NotImplemented);
    }
  }
}

static PyMethodDef __pyx_methods_8pygcgopt_3gcg_GCGColumn[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_9GCGColumn_5__reduce_cython__, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_9GCGColumn_4__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_9GCGColumn_7__setstate_cython__, METH_O, __pyx_doc_8pygcgopt_3gcg_9GCGColumn_6__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pygcgopt_3gcg_GCGColumn = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygcgopt.gcg.GCGColumn", /*tp_name*/
  sizeof(struct __pyx_obj_8pygcgopt_3gcg_GCGColumn), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygcgopt_3gcg_GCGColumn, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  __pyx_pw_8pygcgopt_3gcg_9GCGColumn_1__hash__, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Base class holding a pointer to corresponding GCG_COL", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_tp_richcompare_8pygcgopt_3gcg_GCGColumn, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygcgopt_3gcg_GCGColumn, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygcgopt_3gcg_GCGColumn, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8pygcgopt_3gcg_Detector(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pygcgopt_3gcg_Detector *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pygcgopt_3gcg_Detector *)o);
  p->model = ((struct __pyx_obj_9pyscipopt_4scip_Model *)Py_None); Py_INCREF(Py_None);
  p->detectorname = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pygcgopt_3gcg_Detector(PyObject *o) {
  struct __pyx_obj_8pygcgopt_3gcg_Detector *p = (struct __pyx_obj_8pygcgopt_3gcg_Detector *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->model);
  Py_CLEAR(p->detectorname);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pygcgopt_3gcg_Detector(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pygcgopt_3gcg_Detector *p = (struct __pyx_obj_8pygcgopt_3gcg_Detector *)o;
  if (p->model) {
    e = (*v)(((PyObject *)p->model), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pygcgopt_3gcg_Detector(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pygcgopt_3gcg_Detector *p = (struct __pyx_obj_8pygcgopt_3gcg_Detector *)o;
  tmp = ((PyObject*)p->model);
  p->model = ((struct __pyx_obj_9pyscipopt_4scip_Model *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_8pygcgopt_3gcg_8Detector_model(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygcgopt_3gcg_8Detector_5model_1__get__(o);
}

static int __pyx_setprop_8pygcgopt_3gcg_8Detector_model(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8pygcgopt_3gcg_8Detector_5model_3__set__(o, v);
  }
  else {
    return __pyx_pw_8pygcgopt_3gcg_8Detector_5model_5__del__(o);
  }
}

static PyObject *__pyx_getprop_8pygcgopt_3gcg_8Detector_detectorname(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygcgopt_3gcg_8Detector_12detectorname_1__get__(o);
}

static int __pyx_setprop_8pygcgopt_3gcg_8Detector_detectorname(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8pygcgopt_3gcg_8Detector_12detectorname_3__set__(o, v);
  }
  else {
    return __pyx_pw_8pygcgopt_3gcg_8Detector_12detectorname_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_8pygcgopt_3gcg_Detector[] = {
  {"freeDetector", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_8Detector_1freeDetector, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_8Detector_freeDetector},
  {"initDetector", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_8Detector_3initDetector, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_8Detector_2initDetector},
  {"exitDetector", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_8Detector_5exitDetector, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_8Detector_4exitDetector},
  {"propagatePartialdec", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygcgopt_3gcg_8Detector_7propagatePartialdec, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygcgopt_3gcg_8Detector_6propagatePartialdec},
  {"finishPartialdec", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygcgopt_3gcg_8Detector_9finishPartialdec, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygcgopt_3gcg_8Detector_8finishPartialdec},
  {"postprocessPartialdec", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygcgopt_3gcg_8Detector_11postprocessPartialdec, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygcgopt_3gcg_8Detector_10postprocessPartialdec},
  {"setParamAggressive", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_8Detector_13setParamAggressive, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_8Detector_12setParamAggressive},
  {"setParamDefault", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_8Detector_15setParamDefault, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_8Detector_14setParamDefault},
  {"setParamFast", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_8Detector_17setParamFast, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_8Detector_16setParamFast},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_8Detector_19__reduce_cython__, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_8Detector_18__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_8Detector_21__setstate_cython__, METH_O, __pyx_doc_8pygcgopt_3gcg_8Detector_20__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pygcgopt_3gcg_Detector[] = {
  {(char *)"model", __pyx_getprop_8pygcgopt_3gcg_8Detector_model, __pyx_setprop_8pygcgopt_3gcg_8Detector_model, (char *)"model: pyscipopt.scip.Model", 0},
  {(char *)"detectorname", __pyx_getprop_8pygcgopt_3gcg_8Detector_detectorname, __pyx_setprop_8pygcgopt_3gcg_8Detector_detectorname, (char *)"detectorname: unicode", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pygcgopt_3gcg_Detector = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygcgopt.gcg.Detector", /*tp_name*/
  sizeof(struct __pyx_obj_8pygcgopt_3gcg_Detector), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygcgopt_3gcg_Detector, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Base class of the Detector Plugin", /*tp_doc*/
  __pyx_tp_traverse_8pygcgopt_3gcg_Detector, /*tp_traverse*/
  __pyx_tp_clear_8pygcgopt_3gcg_Detector, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygcgopt_3gcg_Detector, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pygcgopt_3gcg_Detector, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygcgopt_3gcg_Detector, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8pygcgopt_3gcg_PricingSolver(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *)o);
  p->model = ((struct __pyx_obj_9pyscipopt_4scip_Model *)Py_None); Py_INCREF(Py_None);
  p->solvername = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pygcgopt_3gcg_PricingSolver(PyObject *o) {
  struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *p = (struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->model);
  Py_CLEAR(p->solvername);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pygcgopt_3gcg_PricingSolver(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *p = (struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *)o;
  if (p->model) {
    e = (*v)(((PyObject *)p->model), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pygcgopt_3gcg_PricingSolver(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *p = (struct __pyx_obj_8pygcgopt_3gcg_PricingSolver *)o;
  tmp = ((PyObject*)p->model);
  p->model = ((struct __pyx_obj_9pyscipopt_4scip_Model *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_8pygcgopt_3gcg_13PricingSolver_model(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygcgopt_3gcg_13PricingSolver_5model_1__get__(o);
}

static int __pyx_setprop_8pygcgopt_3gcg_13PricingSolver_model(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8pygcgopt_3gcg_13PricingSolver_5model_3__set__(o, v);
  }
  else {
    return __pyx_pw_8pygcgopt_3gcg_13PricingSolver_5model_5__del__(o);
  }
}

static PyObject *__pyx_getprop_8pygcgopt_3gcg_13PricingSolver_solvername(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygcgopt_3gcg_13PricingSolver_10solvername_1__get__(o);
}

static int __pyx_setprop_8pygcgopt_3gcg_13PricingSolver_solvername(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8pygcgopt_3gcg_13PricingSolver_10solvername_3__set__(o, v);
  }
  else {
    return __pyx_pw_8pygcgopt_3gcg_13PricingSolver_10solvername_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_8pygcgopt_3gcg_PricingSolver[] = {
  {"freeSolver", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_13PricingSolver_1freeSolver, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_13PricingSolver_freeSolver},
  {"initSolver", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_13PricingSolver_3initSolver, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_13PricingSolver_2initSolver},
  {"exitSolver", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_13PricingSolver_5exitSolver, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_13PricingSolver_4exitSolver},
  {"initSolution", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_13PricingSolver_7initSolution, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_13PricingSolver_6initSolution},
  {"exitSolution", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_13PricingSolver_9exitSolution, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_13PricingSolver_8exitSolution},
  {"updateSolver", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygcgopt_3gcg_13PricingSolver_11updateSolver, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygcgopt_3gcg_13PricingSolver_10updateSolver},
  {"solve", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygcgopt_3gcg_13PricingSolver_13solve, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygcgopt_3gcg_13PricingSolver_12solve},
  {"solveHeuristic", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygcgopt_3gcg_13PricingSolver_15solveHeuristic, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygcgopt_3gcg_13PricingSolver_14solveHeuristic},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_13PricingSolver_17__reduce_cython__, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_13PricingSolver_16__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_13PricingSolver_19__setstate_cython__, METH_O, __pyx_doc_8pygcgopt_3gcg_13PricingSolver_18__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pygcgopt_3gcg_PricingSolver[] = {
  {(char *)"model", __pyx_getprop_8pygcgopt_3gcg_13PricingSolver_model, __pyx_setprop_8pygcgopt_3gcg_13PricingSolver_model, (char *)"model: pyscipopt.scip.Model", 0},
  {(char *)"solvername", __pyx_getprop_8pygcgopt_3gcg_13PricingSolver_solvername, __pyx_setprop_8pygcgopt_3gcg_13PricingSolver_solvername, (char *)"solvername: unicode", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pygcgopt_3gcg_PricingSolver = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygcgopt.gcg.PricingSolver", /*tp_name*/
  sizeof(struct __pyx_obj_8pygcgopt_3gcg_PricingSolver), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygcgopt_3gcg_PricingSolver, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Base class of the Pricing Solver Plugin", /*tp_doc*/
  __pyx_tp_traverse_8pygcgopt_3gcg_PricingSolver, /*tp_traverse*/
  __pyx_tp_clear_8pygcgopt_3gcg_PricingSolver, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygcgopt_3gcg_PricingSolver, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pygcgopt_3gcg_PricingSolver, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygcgopt_3gcg_PricingSolver, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_8pygcgopt_3gcg_ConsPart __pyx_vtable_8pygcgopt_3gcg_ConsPart;

static PyObject *__pyx_tp_new_8pygcgopt_3gcg_ConsPart(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pygcgopt_3gcg_ConsPart *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pygcgopt_3gcg_ConsPart *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pygcgopt_3gcg_ConsPart;
  p->detProbData = ((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_8pygcgopt_3gcg_8ConsPart_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_8pygcgopt_3gcg_ConsPart(PyObject *o) {
  struct __pyx_obj_8pygcgopt_3gcg_ConsPart *p = (struct __pyx_obj_8pygcgopt_3gcg_ConsPart *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_8pygcgopt_3gcg_8ConsPart_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->detProbData);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pygcgopt_3gcg_ConsPart(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pygcgopt_3gcg_ConsPart *p = (struct __pyx_obj_8pygcgopt_3gcg_ConsPart *)o;
  if (p->detProbData) {
    e = (*v)(((PyObject *)p->detProbData), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pygcgopt_3gcg_ConsPart(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pygcgopt_3gcg_ConsPart *p = (struct __pyx_obj_8pygcgopt_3gcg_ConsPart *)o;
  tmp = ((PyObject*)p->detProbData);
  p->detProbData = ((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_8pygcgopt_3gcg_ConsPart[] = {
  {"assignConsToClass", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygcgopt_3gcg_8ConsPart_5assignConsToClass, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygcgopt_3gcg_8ConsPart_4assignConsToClass},
  {"getAllSubsets", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygcgopt_3gcg_8ConsPart_7getAllSubsets, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygcgopt_3gcg_8ConsPart_6getAllSubsets},
  {"getClassNameOfCons", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_8ConsPart_9getClassNameOfCons, METH_O, __pyx_doc_8pygcgopt_3gcg_8ConsPart_8getClassNameOfCons},
  {"getClassOfCons", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_8ConsPart_11getClassOfCons, METH_O, __pyx_doc_8pygcgopt_3gcg_8ConsPart_10getClassOfCons},
  {"getNConss", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_8ConsPart_13getNConss, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_8ConsPart_12getNConss},
  {"getNConssOfClasses", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_8ConsPart_15getNConssOfClasses, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_8ConsPart_14getNConssOfClasses},
  {"isConsClassified", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_8ConsPart_17isConsClassified, METH_O, __pyx_doc_8pygcgopt_3gcg_8ConsPart_16isConsClassified},
  {"reduceClasses", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_8ConsPart_19reduceClasses, METH_O, __pyx_doc_8pygcgopt_3gcg_8ConsPart_18reduceClasses},
  {"getName", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_8ConsPart_21getName, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_8ConsPart_20getName},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_8ConsPart_25__reduce_cython__, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_8ConsPart_24__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_8ConsPart_27__setstate_cython__, METH_O, __pyx_doc_8pygcgopt_3gcg_8ConsPart_26__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pygcgopt_3gcg_ConsPart = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygcgopt.gcg.ConsPart", /*tp_name*/
  sizeof(struct __pyx_obj_8pygcgopt_3gcg_ConsPart), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygcgopt_3gcg_ConsPart, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_8pygcgopt_3gcg_8ConsPart_23__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8pygcgopt_3gcg_ConsPart, /*tp_traverse*/
  __pyx_tp_clear_8pygcgopt_3gcg_ConsPart, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygcgopt_3gcg_ConsPart, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygcgopt_3gcg_ConsPart, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_8pygcgopt_3gcg_VarPart __pyx_vtable_8pygcgopt_3gcg_VarPart;

static PyObject *__pyx_tp_new_8pygcgopt_3gcg_VarPart(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pygcgopt_3gcg_VarPart *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pygcgopt_3gcg_VarPart *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pygcgopt_3gcg_VarPart;
  if (unlikely(__pyx_pw_8pygcgopt_3gcg_7VarPart_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_8pygcgopt_3gcg_VarPart(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_8pygcgopt_3gcg_7VarPart_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_8pygcgopt_3gcg_VarPart[] = {
  {"assignVarToClass", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygcgopt_3gcg_7VarPart_5assignVarToClass, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygcgopt_3gcg_7VarPart_4assignVarToClass},
  {"getAllSubsets", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygcgopt_3gcg_7VarPart_7getAllSubsets, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygcgopt_3gcg_7VarPart_6getAllSubsets},
  {"getClassNameOfVar", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_7VarPart_9getClassNameOfVar, METH_O, __pyx_doc_8pygcgopt_3gcg_7VarPart_8getClassNameOfVar},
  {"getClassOfVar", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_7VarPart_11getClassOfVar, METH_O, __pyx_doc_8pygcgopt_3gcg_7VarPart_10getClassOfVar},
  {"getNVars", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_7VarPart_13getNVars, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_7VarPart_12getNVars},
  {"getNVarsOfClasses", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_7VarPart_15getNVarsOfClasses, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_7VarPart_14getNVarsOfClasses},
  {"isVarClassified", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_7VarPart_17isVarClassified, METH_O, __pyx_doc_8pygcgopt_3gcg_7VarPart_16isVarClassified},
  {"reduceClasses", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_7VarPart_19reduceClasses, METH_O, __pyx_doc_8pygcgopt_3gcg_7VarPart_18reduceClasses},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_7VarPart_21__reduce_cython__, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_7VarPart_20__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_7VarPart_23__setstate_cython__, METH_O, __pyx_doc_8pygcgopt_3gcg_7VarPart_22__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pygcgopt_3gcg_VarPart = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygcgopt.gcg.VarPart", /*tp_name*/
  sizeof(struct __pyx_obj_8pygcgopt_3gcg_VarPart), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygcgopt_3gcg_VarPart, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygcgopt_3gcg_VarPart, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygcgopt_3gcg_VarPart, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_8pygcgopt_3gcg_PartialDecomposition __pyx_vtable_8pygcgopt_3gcg_PartialDecomposition;

static PyObject *__pyx_tp_new_8pygcgopt_3gcg_PartialDecomposition(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pygcgopt_3gcg_PartialDecomposition;
  p->_visualizations = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->py_block_id_map = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_8pygcgopt_3gcg_PartialDecomposition(PyObject *o) {
  struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *p = (struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->_visualizations);
  Py_CLEAR(p->py_block_id_map);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pygcgopt_3gcg_PartialDecomposition(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *p = (struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)o;
  if (p->_visualizations) {
    e = (*v)(p->_visualizations, a); if (e) return e;
  }
  if (p->py_block_id_map) {
    e = (*v)(p->py_block_id_map, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pygcgopt_3gcg_PartialDecomposition(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *p = (struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *)o;
  tmp = ((PyObject*)p->_visualizations);
  p->_visualizations = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->py_block_id_map);
  p->py_block_id_map = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_8pygcgopt_3gcg_20PartialDecomposition_classic_score(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_13classic_score_1__get__(o);
}

static PyObject *__pyx_getprop_8pygcgopt_3gcg_20PartialDecomposition_border_area_score(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_17border_area_score_1__get__(o);
}

static PyObject *__pyx_getprop_8pygcgopt_3gcg_20PartialDecomposition_max_white_score(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_15max_white_score_1__get__(o);
}

static PyObject *__pyx_getprop_8pygcgopt_3gcg_20PartialDecomposition_max_for_white_score(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_19max_for_white_score_1__get__(o);
}

static PyObject *__pyx_getprop_8pygcgopt_3gcg_20PartialDecomposition_set_part_for_white_score(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_24set_part_for_white_score_1__get__(o);
}

static PyObject *__pyx_getprop_8pygcgopt_3gcg_20PartialDecomposition_max_for_white_agg_score(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_23max_for_white_agg_score_1__get__(o);
}

static PyObject *__pyx_getprop_8pygcgopt_3gcg_20PartialDecomposition_set_part_for_white_agg_score(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_28set_part_for_white_agg_score_1__get__(o);
}

static PyObject *__pyx_getprop_8pygcgopt_3gcg_20PartialDecomposition_benders_score(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_13benders_score_1__get__(o);
}

static PyObject *__pyx_getprop_8pygcgopt_3gcg_20PartialDecomposition_strong_decomp_score(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_19strong_decomp_score_1__get__(o);
}

static PyObject *__pyx_getprop_8pygcgopt_3gcg_20PartialDecomposition_isSelected(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_10isSelected_1__get__(o);
}

static int __pyx_setprop_8pygcgopt_3gcg_20PartialDecomposition_isSelected(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_10isSelected_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8pygcgopt_3gcg_20PartialDecomposition_classicScore(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_12classicScore_1__get__(o);
}

static int __pyx_setprop_8pygcgopt_3gcg_20PartialDecomposition_classicScore(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_12classicScore_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8pygcgopt_3gcg_20PartialDecomposition_borderAreaScore(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_15borderAreaScore_1__get__(o);
}

static int __pyx_setprop_8pygcgopt_3gcg_20PartialDecomposition_borderAreaScore(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_15borderAreaScore_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8pygcgopt_3gcg_20PartialDecomposition_maxWhiteScore(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_13maxWhiteScore_1__get__(o);
}

static int __pyx_setprop_8pygcgopt_3gcg_20PartialDecomposition_maxWhiteScore(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_13maxWhiteScore_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8pygcgopt_3gcg_20PartialDecomposition_maxForWhiteScore(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_16maxForWhiteScore_1__get__(o);
}

static int __pyx_setprop_8pygcgopt_3gcg_20PartialDecomposition_maxForWhiteScore(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_16maxForWhiteScore_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8pygcgopt_3gcg_20PartialDecomposition_partForWhiteScore(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_17partForWhiteScore_1__get__(o);
}

static int __pyx_setprop_8pygcgopt_3gcg_20PartialDecomposition_partForWhiteScore(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_17partForWhiteScore_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8pygcgopt_3gcg_20PartialDecomposition_maxForWhiteAggScore(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_19maxForWhiteAggScore_1__get__(o);
}

static int __pyx_setprop_8pygcgopt_3gcg_20PartialDecomposition_maxForWhiteAggScore(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_19maxForWhiteAggScore_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8pygcgopt_3gcg_20PartialDecomposition_partForWhiteAggScore(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_20partForWhiteAggScore_1__get__(o);
}

static int __pyx_setprop_8pygcgopt_3gcg_20PartialDecomposition_partForWhiteAggScore(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_20partForWhiteAggScore_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8pygcgopt_3gcg_20PartialDecomposition_bendersScore(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_12bendersScore_1__get__(o);
}

static int __pyx_setprop_8pygcgopt_3gcg_20PartialDecomposition_bendersScore(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_12bendersScore_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8pygcgopt_3gcg_20PartialDecomposition_strongDecompScore(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_17strongDecompScore_1__get__(o);
}

static int __pyx_setprop_8pygcgopt_3gcg_20PartialDecomposition_strongDecompScore(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_17strongDecompScore_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8pygcgopt_3gcg_20PartialDecomposition__visualizations(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_15_visualizations_1__get__(o);
}

static int __pyx_setprop_8pygcgopt_3gcg_20PartialDecomposition__visualizations(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_15_visualizations_3__set__(o, v);
  }
  else {
    return __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_15_visualizations_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_8pygcgopt_3gcg_PartialDecomposition[] = {
  {"__copy__", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_5__copy__, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_4__copy__},
  {"copy", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_7copy, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_6copy},
  {"fixConsToMaster", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_9fixConsToMaster, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_8fixConsToMaster},
  {"fixConssToMaster", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_11fixConssToMaster, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_10fixConssToMaster},
  {"fixConsToBlockId", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_13fixConsToBlockId, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_12fixConsToBlockId},
  {"fixConssToBlockId", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_15fixConssToBlockId, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_14fixConssToBlockId},
  {"fixConsToBlock", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_17fixConsToBlock, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_16fixConsToBlock},
  {"fixConssToBlock", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_19fixConssToBlock, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_18fixConssToBlock},
  {"getOpenconss", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_21getOpenconss, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_20getOpenconss},
  {"setUsergiven", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_23setUsergiven, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_22setUsergiven},
  {"addBlock", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_25addBlock, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_24addBlock},
  {"addClockTime", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_27addClockTime, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_26addClockTime},
  {"addDecChangesFromAncestor", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_29addDecChangesFromAncestor, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_28addDecChangesFromAncestor},
  {"addDetectorChainInfo", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_31addDetectorChainInfo, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_30addDetectorChainInfo},
  {"addNNewBlocks", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_33addNNewBlocks, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_32addNNewBlocks},
  {"addPctConssFromFree", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_35addPctConssFromFree, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_34addPctConssFromFree},
  {"addPctConssToBlock", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_37addPctConssToBlock, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_36addPctConssToBlock},
  {"addPctConssToBorder", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_39addPctConssToBorder, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_38addPctConssToBorder},
  {"addPctVarsFromFree", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_41addPctVarsFromFree, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_40addPctVarsFromFree},
  {"addPctVarsToBlock", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_43addPctVarsToBlock, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_42addPctVarsToBlock},
  {"addPctVarsToBorder", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_45addPctVarsToBorder, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_44addPctVarsToBorder},
  {"alreadyAssignedConssToBlocks", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_47alreadyAssignedConssToBlocks, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_46alreadyAssignedConssToBlocks},
  {"assignCurrentStairlinking", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_49assignCurrentStairlinking, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_48assignCurrentStairlinking},
  {"assignOpenConssToMaster", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_51assignOpenConssToMaster, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_50assignOpenConssToMaster},
  {"assignPartialdecFromConstoblockVector", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_53assignPartialdecFromConstoblockVector, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_52assignPartialdecFromConstoblockVector},
  {"assignSmallestComponentsButOneConssAdjacency", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_55assignSmallestComponentsButOneConssAdjacency, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_54assignSmallestComponentsButOneConssAdjacency},
  {"calcStairlinkingVars", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_57calcStairlinkingVars, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_56calcStairlinkingVars},
  {"checkAllConssAssigned", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_59checkAllConssAssigned, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_58checkAllConssAssigned},
  {"checkConsistency", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_61checkConsistency, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_60checkConsistency},
  {"complete", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_63complete, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_62complete},
  {"completeByConnected", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_65completeByConnected, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_64completeByConnected},
  {"completeByConnectedConssAdjacency", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_67completeByConnectedConssAdjacency, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_66completeByConnectedConssAdjacency},
  {"completeGreedily", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_69completeGreedily, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_68completeGreedily},
  {"removeMastercons", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_71removeMastercons, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_70removeMastercons},
  {"considerImplicits", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_73considerImplicits, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_72considerImplicits},
  {"copyPartitionStatistics", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_75copyPartitionStatistics, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_74copyPartitionStatistics},
  {"deleteEmptyBlocks", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_77deleteEmptyBlocks, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_76deleteEmptyBlocks},
  {"deleteOpencons", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_79deleteOpencons, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_78deleteOpencons},
  {"deleteOpenvar", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_81deleteOpenvar, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_80deleteOpenvar},
  {"displayInfo", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_83displayInfo, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_82displayInfo},
  {"findVarsLinkingToMaster", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_85findVarsLinkingToMaster, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_84findVarsLinkingToMaster},
  {"findVarsLinkingToStairlinking", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_87findVarsLinkingToStairlinking, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_86findVarsLinkingToStairlinking},
  {"getAncestorID", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_89getAncestorID, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_88getAncestorID},
  {"getAncestorList", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_91getAncestorList, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_90getAncestorList},
  {"setAncestorList", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_93setAncestorList, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_92setAncestorList},
  {"removeAncestorID", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_95removeAncestorID, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_94removeAncestorID},
  {"addAncestorID", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_97addAncestorID, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_96addAncestorID},
  {"getBlocksForRep", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_99getBlocksForRep, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_98getBlocksForRep},
  {"getDetectorClockTime", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_101getDetectorClockTime, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_100getDetectorClockTime},
  {"getDetectorClockTimes", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_103getDetectorClockTimes, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_102getDetectorClockTimes},
  {"getBlockConss", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_105getBlockConss, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_104getBlockConss},
  {"getFinishedByFinisher", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_107getFinishedByFinisher, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_106getFinishedByFinisher},
  {"getHashValue", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_109getHashValue, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_108getHashValue},
  {"getID", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_111getID, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_110getID},
  {"getLinkingvars", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_113getLinkingvars, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_112getLinkingvars},
  {"getMasterconss", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_115getMasterconss, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_114getMasterconss},
  {"getMastervars", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_117getMastervars, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_116getMastervars},
  {"getNCoeffsForBlock", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_119getNCoeffsForBlock, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_118getNCoeffsForBlock},
  {"getNCoeffsForMaster", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_121getNCoeffsForMaster, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_120getNCoeffsForMaster},
  {"hasSetppccardMaster", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_123hasSetppccardMaster, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_122hasSetppccardMaster},
  {"hasSetppcMaster", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_125hasSetppcMaster, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_124hasSetppcMaster},
  {"hasSetppMaster", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_127hasSetppMaster, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_126hasSetppMaster},
  {"getUsergiven", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_129getUsergiven, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_128getUsergiven},
  {"getNAncestors", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_131getNAncestors, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_130getNAncestors},
  {"getNBlocks", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_133getNBlocks, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_132getNBlocks},
  {"getNConss", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_135getNConss, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_134getNConss},
  {"getNConssForBlock", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_137getNConssForBlock, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_136getNConssForBlock},
  {"getDetectorchainInfo", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_139getDetectorchainInfo, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_138getDetectorchainInfo},
  {"getNDetectors", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_141getNDetectors, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_140getNDetectors},
  {"getNLinkingvars", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_143getNLinkingvars, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_142getNLinkingvars},
  {"getNMasterconss", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_145getNMasterconss, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_144getNMasterconss},
  {"getNMastervars", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_147getNMastervars, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_146getNMastervars},
  {"getNNewBlocks", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_149getNNewBlocks, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_148getNNewBlocks},
  {"getNNewBlocksVector", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_151getNNewBlocksVector, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_150getNNewBlocksVector},
  {"getNTotalStairlinkingvars", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_153getNTotalStairlinkingvars, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_152getNTotalStairlinkingvars},
  {"getNOpenconss", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_155getNOpenconss, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_154getNOpenconss},
  {"getNOpenvars", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_157getNOpenvars, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_156getNOpenvars},
  {"getNReps", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_159getNReps, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_158getNReps},
  {"getNStairlinkingvars", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_161getNStairlinkingvars, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_160getNStairlinkingvars},
  {"getNVars", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_163getNVars, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_162getNVars},
  {"getNVarsForBlock", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_165getNVarsForBlock, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_164getNVarsForBlock},
  {"getNVarsForBlocks", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_167getNVarsForBlocks, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_166getNVarsForBlocks},
  {"getOpenconssVec", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_169getOpenconssVec, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_168getOpenconssVec},
  {"getOpenvars", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_171getOpenvars, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_170getOpenvars},
  {"getOpenvarsVec", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_173getOpenvarsVec, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_172getOpenvarsVec},
  {"getPctVarsToBorder", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_175getPctVarsToBorder, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_174getPctVarsToBorder},
  {"getPctVarsToBorderVector", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_177getPctVarsToBorderVector, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_176getPctVarsToBorderVector},
  {"getPctVarsToBlock", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_179getPctVarsToBlock, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_178getPctVarsToBlock},
  {"getPctVarsToBlockVector", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_181getPctVarsToBlockVector, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_180getPctVarsToBlockVector},
  {"getPctVarsFromFree", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_183getPctVarsFromFree, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_182getPctVarsFromFree},
  {"getPctVarsFromFreeVector", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_185getPctVarsFromFreeVector, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_184getPctVarsFromFreeVector},
  {"getPctConssToBorder", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_187getPctConssToBorder, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_186getPctConssToBorder},
  {"getPctConssToBorderVector", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_189getPctConssToBorderVector, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_188getPctConssToBorderVector},
  {"getPctConssToBlock", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_191getPctConssToBlock, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_190getPctConssToBlock},
  {"getPctConssToBlockVector", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_193getPctConssToBlockVector, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_192getPctConssToBlockVector},
  {"getPctConssFromFree", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_195getPctConssFromFree, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_194getPctConssFromFree},
  {"getPctConssFromFreeVector", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_197getPctConssFromFreeVector, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_196getPctConssFromFreeVector},
  {"getRepForBlock", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_199getRepForBlock, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_198getRepForBlock},
  {"getRepVarmap", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_201getRepVarmap, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_200getRepVarmap},
  {"getDetprobdata", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_203getDetprobdata, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_202getDetprobdata},
  {"getStairlinkingvars", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_205getStairlinkingvars, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_204getStairlinkingvars},
  {"getVarsForBlock", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_207getVarsForBlock, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_206getVarsForBlock},
  {"getVarProbindexForBlock", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_209getVarProbindexForBlock, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_208getVarProbindexForBlock},
  {"isComplete", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_211isComplete, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_210isComplete},
  {"isConsMastercons", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_213isConsMastercons, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_212isConsMastercons},
  {"isConsOpencons", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_215isConsOpencons, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_214isConsOpencons},
  {"isAssignedToOrigProb", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_217isAssignedToOrigProb, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_216isAssignedToOrigProb},
  {"isTrivial", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_219isTrivial, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_218isTrivial},
  {"isVarBlockvarOfBlock", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_221isVarBlockvarOfBlock, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_220isVarBlockvarOfBlock},
  {"isVarLinkingvar", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_223isVarLinkingvar, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_222isVarLinkingvar},
  {"isVarMastervar", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_225isVarMastervar, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_224isVarMastervar},
  {"isVarOpenvar", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_227isVarOpenvar, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_226isVarOpenvar},
  {"isVarStairlinkingvar", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_229isVarStairlinkingvar, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_228isVarStairlinkingvar},
  {"isVarStairlinkingvarOfBlock", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_231isVarStairlinkingvarOfBlock, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_230isVarStairlinkingvarOfBlock},
  {"refineToBlocks", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_233refineToBlocks, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_232refineToBlocks},
  {"refineToMaster", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_235refineToMaster, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_234refineToMaster},
  {"setConsPartitionStatistics", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_237setConsPartitionStatistics, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_236setConsPartitionStatistics},
  {"setConsToBlock", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_239setConsToBlock, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_238setConsToBlock},
  {"setConsToMaster", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_241setConsToMaster, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_240setConsToMaster},
  {"setFinishedByFinisher", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_243setFinishedByFinisher, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_242setFinishedByFinisher},
  {"setFinishedByFinisherOrig", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_245setFinishedByFinisherOrig, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_244setFinishedByFinisherOrig},
  {"setNBlocks", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_247setNBlocks, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_246setNBlocks},
  {"setStemsFromOrig", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_249setStemsFromOrig, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_248setStemsFromOrig},
  {"setVarPartitionStatistics", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_251setVarPartitionStatistics, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_250setVarPartitionStatistics},
  {"setVarToBlock", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_253setVarToBlock, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_252setVarToBlock},
  {"fixVarToBlock", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_255fixVarToBlock, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_254fixVarToBlock},
  {"setVarToLinking", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_257setVarToLinking, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_256setVarToLinking},
  {"fixVarToLinking", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_259fixVarToLinking, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_258fixVarToLinking},
  {"setVarToMaster", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_261setVarToMaster, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_260setVarToMaster},
  {"fixVarToMaster", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_263fixVarToMaster, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_262fixVarToMaster},
  {"setVarToStairlinking", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_265setVarToStairlinking, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_264setVarToStairlinking},
  {"fixVarToStairlinking", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_267fixVarToStairlinking, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_266fixVarToStairlinking},
  {"fixConsToBlockByName", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_269fixConsToBlockByName, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_268fixConsToBlockByName},
  {"fixVarToBlockByName", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_271fixVarToBlockByName, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_270fixVarToBlockByName},
  {"fixConsToMasterByName", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_273fixConsToMasterByName, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_272fixConsToMasterByName},
  {"fixVarToMasterByName", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_275fixVarToMasterByName, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_274fixVarToMasterByName},
  {"fixVarToLinkingByName", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_277fixVarToLinkingByName, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_276fixVarToLinkingByName},
  {"showVisualization", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_279showVisualization, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_278showVisualization},
  {"shouldCompletedByConsToMaster", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_281shouldCompletedByConsToMaster, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_280shouldCompletedByConsToMaster},
  {"sort", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_283sort, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_282sort},
  {"setPctConssToBlockVector", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_285setPctConssToBlockVector, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_284setPctConssToBlockVector},
  {"setPctConssFromFreeVector", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_287setPctConssFromFreeVector, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_286setPctConssFromFreeVector},
  {"setPctConssToBorderVector", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_289setPctConssToBorderVector, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_288setPctConssToBorderVector},
  {"setPctVarsToBorderVector", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_291setPctVarsToBorderVector, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_290setPctVarsToBorderVector},
  {"setPctVarsToBlockVector", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_293setPctVarsToBlockVector, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_292setPctVarsToBlockVector},
  {"setPctVarsFromFreeVector", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_295setPctVarsFromFreeVector, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_294setPctVarsFromFreeVector},
  {"setDetectorClockTimes", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_297setDetectorClockTimes, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_296setDetectorClockTimes},
  {"prepare", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_299prepare, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_298prepare},
  {"aggInfoCalculated", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_301aggInfoCalculated, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_300aggInfoCalculated},
  {"calcAggregationInformation", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_303calcAggregationInformation, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_302calcAggregationInformation},
  {"getConssForBlocks", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_305getConssForBlocks, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_304getConssForBlocks},
  {"getTranslatedpartialdecid", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_307getTranslatedpartialdecid, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_306getTranslatedpartialdecid},
  {"setTranslatedpartialdecid", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_309setTranslatedpartialdecid, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_308setTranslatedpartialdecid},
  {"buildDecChainString", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_311buildDecChainString, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_310buildDecChainString},
  {"getVisuName", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_313getVisuName, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_312getVisuName},
  {"matrix", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_315matrix, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_314matrix},
  {"uniqueMatrixValues", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_317uniqueMatrixValues, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_316uniqueMatrixValues},
  {"matrixMIPLIBConsType", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_319matrixMIPLIBConsType, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_318matrixMIPLIBConsType},
  {"uniqueMatrixMIPLIBConsType", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_321uniqueMatrixMIPLIBConsType, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_320uniqueMatrixMIPLIBConsType},
  {"matrixSCIPVarType", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_323matrixSCIPVarType, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_322matrixSCIPVarType},
  {"uniqueMatrixSCIPVarType", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_325uniqueMatrixSCIPVarType, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_324uniqueMatrixSCIPVarType},
  {"scipVarMap", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_327scipVarMap, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_326scipVarMap},
  {"miplibConsMap", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_329miplibConsMap, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_328miplibConsMap},
  {"visualize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_331visualize, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_330visualize},
  {"_repr_svg_", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_333_repr_svg_, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_332_repr_svg_},
  {"_repr_png_", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_335_repr_png_, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_334_repr_png_},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_339__reduce_cython__, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_338__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_341__setstate_cython__, METH_O, __pyx_doc_8pygcgopt_3gcg_20PartialDecomposition_340__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pygcgopt_3gcg_PartialDecomposition[] = {
  {(char *)"classic_score", __pyx_getprop_8pygcgopt_3gcg_20PartialDecomposition_classic_score, 0, (char *)0, 0},
  {(char *)"border_area_score", __pyx_getprop_8pygcgopt_3gcg_20PartialDecomposition_border_area_score, 0, (char *)0, 0},
  {(char *)"max_white_score", __pyx_getprop_8pygcgopt_3gcg_20PartialDecomposition_max_white_score, 0, (char *)0, 0},
  {(char *)"max_for_white_score", __pyx_getprop_8pygcgopt_3gcg_20PartialDecomposition_max_for_white_score, 0, (char *)0, 0},
  {(char *)"set_part_for_white_score", __pyx_getprop_8pygcgopt_3gcg_20PartialDecomposition_set_part_for_white_score, 0, (char *)0, 0},
  {(char *)"max_for_white_agg_score", __pyx_getprop_8pygcgopt_3gcg_20PartialDecomposition_max_for_white_agg_score, 0, (char *)0, 0},
  {(char *)"set_part_for_white_agg_score", __pyx_getprop_8pygcgopt_3gcg_20PartialDecomposition_set_part_for_white_agg_score, 0, (char *)0, 0},
  {(char *)"benders_score", __pyx_getprop_8pygcgopt_3gcg_20PartialDecomposition_benders_score, 0, (char *)0, 0},
  {(char *)"strong_decomp_score", __pyx_getprop_8pygcgopt_3gcg_20PartialDecomposition_strong_decomp_score, 0, (char *)0, 0},
  {(char *)"isSelected", __pyx_getprop_8pygcgopt_3gcg_20PartialDecomposition_isSelected, __pyx_setprop_8pygcgopt_3gcg_20PartialDecomposition_isSelected, (char *)"!Gets whether the partialdec is currently selected in explore menue\n\n        :return: True iff the partialdec is currently selected in explore menue.\n        ", 0},
  {(char *)"classicScore", __pyx_getprop_8pygcgopt_3gcg_20PartialDecomposition_classicScore, __pyx_setprop_8pygcgopt_3gcg_20PartialDecomposition_classicScore, (char *)"gets the classic score\n\n        .. note:: -1 iff not calculated yet, .. seealso:: GCGconshdlrDecompCalcClassicScore\n        :return: border area score.\n        ", 0},
  {(char *)"borderAreaScore", __pyx_getprop_8pygcgopt_3gcg_20PartialDecomposition_borderAreaScore, __pyx_setprop_8pygcgopt_3gcg_20PartialDecomposition_borderAreaScore, (char *)"gets the border area score\n\n        .. note:: -1 iff not calculated yet, .. seealso:: GCGconshdlrDecompCalcBorderAreaScore\n        :return: border area score.\n        ", 0},
  {(char *)"maxWhiteScore", __pyx_getprop_8pygcgopt_3gcg_20PartialDecomposition_maxWhiteScore, __pyx_setprop_8pygcgopt_3gcg_20PartialDecomposition_maxWhiteScore, (char *)"gets the maximum white area score\n\n        \"maximum white score\" is fraction of the area of the decomposed matrix that is neither block or border\n        .. note:: -1 iff not calculated yet, .. seealso:: GCGconshdlrDecompCalcMaxWhiteScore\n        :return: maximum  white area score\n        ", 0},
  {(char *)"maxForWhiteScore", __pyx_getprop_8pygcgopt_3gcg_20PartialDecomposition_maxForWhiteScore, __pyx_setprop_8pygcgopt_3gcg_20PartialDecomposition_maxForWhiteScore, (char *)"gets the maximum foreseeing white area score\n\n        .. note:: -1 iff not calculated yet, .. seealso:: GCGconshdlrDecompCalcMaxForseeingWhiteScore\n        :return: maximum foreseeing white area score\n        ", 0},
  {(char *)"partForWhiteScore", __pyx_getprop_8pygcgopt_3gcg_20PartialDecomposition_partForWhiteScore, __pyx_setprop_8pygcgopt_3gcg_20PartialDecomposition_partForWhiteScore, (char *)"gets the setpartitioning maximum foreseeing white area score\n\n        .. note:: -1 iff not calculated yet, .. seealso:: GGCGconshdlrDecompCalcSetPartForseeingWhiteScore\n        :return: setpartitioning maximum foreseeing white area score\n        ", 0},
  {(char *)"maxForWhiteAggScore", __pyx_getprop_8pygcgopt_3gcg_20PartialDecomposition_maxForWhiteAggScore, __pyx_setprop_8pygcgopt_3gcg_20PartialDecomposition_maxForWhiteAggScore, (char *)"gets the maximum foreseeing white area score with respect to aggregatable blocks\n\n        .. note:: -1 iff not calculated yet, .. seealso:: GCGconshdlrDecompCalcMaxForeseeingWhiteAggScore\n        :return: maximum foreseeing white area score with respect to aggregatable blocks\n        ", 0},
  {(char *)"partForWhiteAggScore", __pyx_getprop_8pygcgopt_3gcg_20PartialDecomposition_partForWhiteAggScore, __pyx_setprop_8pygcgopt_3gcg_20PartialDecomposition_partForWhiteAggScore, (char *)"gets the setpartitioning maximum foreseeing white area score with respect to aggregateable\n\n        .. note:: -1 iff not calculated yet, .. seealso:: GCGconshdlrDecompCalcSetPartForWhiteAggScore\n        :return: setpartitioning maximum foreseeing white area score with respect to aggregateable.\n        ", 0},
  {(char *)"bendersScore", __pyx_getprop_8pygcgopt_3gcg_20PartialDecomposition_bendersScore, __pyx_setprop_8pygcgopt_3gcg_20PartialDecomposition_bendersScore, (char *)"gets the benders score\n\n        .. note:: -1 iff not calculated yet, .. seealso:: GCGconshdlrDecompCalcBendersScore\n        :return: benders score.\n        ", 0},
  {(char *)"strongDecompScore", __pyx_getprop_8pygcgopt_3gcg_20PartialDecomposition_strongDecompScore, __pyx_setprop_8pygcgopt_3gcg_20PartialDecomposition_strongDecompScore, (char *)"gets the strong decomposition score\n\n        .. note:: -1 iff not calculated yet, .. seealso:: GCGconshdlrDecompCalcStrongDecompositionScore\n        :return: strong decomposition score.\n        ", 0},
  {(char *)"_visualizations", __pyx_getprop_8pygcgopt_3gcg_20PartialDecomposition__visualizations, __pyx_setprop_8pygcgopt_3gcg_20PartialDecomposition__visualizations, (char *)"_visualizations: dict", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pygcgopt_3gcg_PartialDecomposition = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygcgopt.gcg.PartialDecomposition", /*tp_name*/
  sizeof(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygcgopt_3gcg_PartialDecomposition, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_8pygcgopt_3gcg_20PartialDecomposition_337__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "class to manage partial decompositions\n\n    each partialdec corresponds to one :class:`DetProbData` which contains the problem information,\n    there is one detprobdata for the original and the transformed problem.\n    ", /*tp_doc*/
  __pyx_tp_traverse_8pygcgopt_3gcg_PartialDecomposition, /*tp_traverse*/
  __pyx_tp_clear_8pygcgopt_3gcg_PartialDecomposition, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygcgopt_3gcg_PartialDecomposition, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pygcgopt_3gcg_PartialDecomposition, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygcgopt_3gcg_PartialDecomposition, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_8pygcgopt_3gcg_DetProbData __pyx_vtable_8pygcgopt_3gcg_DetProbData;

static PyObject *__pyx_tp_new_8pygcgopt_3gcg_DetProbData(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pygcgopt_3gcg_DetProbData *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pygcgopt_3gcg_DetProbData;
  if (unlikely(__pyx_pw_8pygcgopt_3gcg_11DetProbData_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_8pygcgopt_3gcg_DetProbData(PyObject *o) {
  struct __pyx_obj_8pygcgopt_3gcg_DetProbData *p = (struct __pyx_obj_8pygcgopt_3gcg_DetProbData *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_8pygcgopt_3gcg_11DetProbData_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  if (p->__weakref__) PyObject_ClearWeakRefs(o);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_8pygcgopt_3gcg_11DetProbData_candidatesNBlocks(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygcgopt_3gcg_11DetProbData_17candidatesNBlocks_1__get__(o);
}

static int __pyx_setprop_8pygcgopt_3gcg_11DetProbData_candidatesNBlocks(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8pygcgopt_3gcg_11DetProbData_17candidatesNBlocks_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8pygcgopt_3gcg_11DetProbData_conspartitioncollection(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygcgopt_3gcg_11DetProbData_23conspartitioncollection_1__get__(o);
}

static int __pyx_setprop_8pygcgopt_3gcg_11DetProbData_conspartitioncollection(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8pygcgopt_3gcg_11DetProbData_23conspartitioncollection_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8pygcgopt_3gcg_11DetProbData_varpartitioncollection(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygcgopt_3gcg_11DetProbData_22varpartitioncollection_1__get__(o);
}

static int __pyx_setprop_8pygcgopt_3gcg_11DetProbData_varpartitioncollection(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8pygcgopt_3gcg_11DetProbData_22varpartitioncollection_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8pygcgopt_3gcg_11DetProbData_classificationtime(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygcgopt_3gcg_11DetProbData_18classificationtime_1__get__(o);
}

static int __pyx_setprop_8pygcgopt_3gcg_11DetProbData_classificationtime(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8pygcgopt_3gcg_11DetProbData_18classificationtime_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8pygcgopt_3gcg_11DetProbData_nblockscandidatescalctime(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygcgopt_3gcg_11DetProbData_25nblockscandidatescalctime_1__get__(o);
}

static int __pyx_setprop_8pygcgopt_3gcg_11DetProbData_nblockscandidatescalctime(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8pygcgopt_3gcg_11DetProbData_25nblockscandidatescalctime_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8pygcgopt_3gcg_11DetProbData_postprocessingtime(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygcgopt_3gcg_11DetProbData_18postprocessingtime_1__get__(o);
}

static int __pyx_setprop_8pygcgopt_3gcg_11DetProbData_postprocessingtime(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8pygcgopt_3gcg_11DetProbData_18postprocessingtime_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8pygcgopt_3gcg_11DetProbData_translatingtime(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygcgopt_3gcg_11DetProbData_15translatingtime_1__get__(o);
}

static int __pyx_setprop_8pygcgopt_3gcg_11DetProbData_translatingtime(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8pygcgopt_3gcg_11DetProbData_15translatingtime_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_8pygcgopt_3gcg_DetProbData[] = {
  {"addConsPartition", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_11DetProbData_5addConsPartition, METH_O, __pyx_doc_8pygcgopt_3gcg_11DetProbData_4addConsPartition},
  {"addCandidatesNBlocksNVotes", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygcgopt_3gcg_11DetProbData_7addCandidatesNBlocksNVotes, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygcgopt_3gcg_11DetProbData_6addCandidatesNBlocksNVotes},
  {"addPartialdecToAncestor", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_11DetProbData_9addPartialdecToAncestor, METH_O, __pyx_doc_8pygcgopt_3gcg_11DetProbData_8addPartialdecToAncestor},
  {"addPartialdecToOpen", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_11DetProbData_11addPartialdecToOpen, METH_O, __pyx_doc_8pygcgopt_3gcg_11DetProbData_10addPartialdecToOpen},
  {"addPartialdecToFinished", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_11DetProbData_13addPartialdecToFinished, METH_O, __pyx_doc_8pygcgopt_3gcg_11DetProbData_12addPartialdecToFinished},
  {"addPartialdecToFinishedUnchecked", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_11DetProbData_15addPartialdecToFinishedUnchecked, METH_O, __pyx_doc_8pygcgopt_3gcg_11DetProbData_14addPartialdecToFinishedUnchecked},
  {"addVarPartition", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_11DetProbData_17addVarPartition, METH_O, __pyx_doc_8pygcgopt_3gcg_11DetProbData_16addVarPartition},
  {"clearAncestorPartialdecs", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_11DetProbData_19clearAncestorPartialdecs, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_11DetProbData_18clearAncestorPartialdecs},
  {"clearCurrentPartialdecs", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_11DetProbData_21clearCurrentPartialdecs, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_11DetProbData_20clearCurrentPartialdecs},
  {"clearFinishedPartialdecs", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_11DetProbData_23clearFinishedPartialdecs, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_11DetProbData_22clearFinishedPartialdecs},
  {"createConssAdjacency", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_11DetProbData_25createConssAdjacency, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_11DetProbData_24createConssAdjacency},
  {"freeTemporaryData", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_11DetProbData_27freeTemporaryData, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_11DetProbData_26freeTemporaryData},
  {"getAncestorPartialdec", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_11DetProbData_29getAncestorPartialdec, METH_O, __pyx_doc_8pygcgopt_3gcg_11DetProbData_28getAncestorPartialdec},
  {"getConsPartition", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_11DetProbData_31getConsPartition, METH_O, __pyx_doc_8pygcgopt_3gcg_11DetProbData_30getConsPartition},
  {"getCons", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_11DetProbData_33getCons, METH_O, __pyx_doc_8pygcgopt_3gcg_11DetProbData_32getCons},
  {"getConssForCons", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_11DetProbData_35getConssForCons, METH_O, __pyx_doc_8pygcgopt_3gcg_11DetProbData_34getConssForCons},
  {"getConssForVar", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_11DetProbData_37getConssForVar, METH_O, __pyx_doc_8pygcgopt_3gcg_11DetProbData_36getConssForVar},
  {"getOpenPartialdecs", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_11DetProbData_39getOpenPartialdecs, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_11DetProbData_38getOpenPartialdecs},
  {"getFinishedPartialdec", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_11DetProbData_41getFinishedPartialdec, METH_O, __pyx_doc_8pygcgopt_3gcg_11DetProbData_40getFinishedPartialdec},
  {"getFinishedPartialdecs", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_11DetProbData_43getFinishedPartialdecs, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_11DetProbData_42getFinishedPartialdecs},
  {"getIndexForCons", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_11DetProbData_45getIndexForCons, METH_O, __pyx_doc_8pygcgopt_3gcg_11DetProbData_44getIndexForCons},
  {"getNAncestorPartialdecs", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_11DetProbData_47getNAncestorPartialdecs, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_11DetProbData_46getNAncestorPartialdecs},
  {"getNConsPartitions", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_11DetProbData_49getNConsPartitions, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_11DetProbData_48getNConsPartitions},
  {"getNConss", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_11DetProbData_51getNConss, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_11DetProbData_50getNConss},
  {"getNConssForCons", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_11DetProbData_53getNConssForCons, METH_O, __pyx_doc_8pygcgopt_3gcg_11DetProbData_52getNConssForCons},
  {"getNConssForVar", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_11DetProbData_55getNConssForVar, METH_O, __pyx_doc_8pygcgopt_3gcg_11DetProbData_54getNConssForVar},
  {"getNOpenPartialdecs", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_11DetProbData_57getNOpenPartialdecs, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_11DetProbData_56getNOpenPartialdecs},
  {"getNFinishedPartialdecs", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_11DetProbData_59getNFinishedPartialdecs, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_11DetProbData_58getNFinishedPartialdecs},
  {"getNPartialdecs", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_11DetProbData_61getNPartialdecs, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_11DetProbData_60getNPartialdecs},
  {"getNNonzeros", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_11DetProbData_63getNNonzeros, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_11DetProbData_62getNNonzeros},
  {"getNVarPartitions", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_11DetProbData_65getNVarPartitions, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_11DetProbData_64getNVarPartitions},
  {"getNVars", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_11DetProbData_67getNVars, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_11DetProbData_66getNVars},
  {"getNVarsForCons", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_11DetProbData_69getNVarsForCons, METH_O, __pyx_doc_8pygcgopt_3gcg_11DetProbData_68getNVarsForCons},
  {"getOrigVarsFixedZero", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_11DetProbData_71getOrigVarsFixedZero, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_11DetProbData_70getOrigVarsFixedZero},
  {"getRelevantConss", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_11DetProbData_73getRelevantConss, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_11DetProbData_72getRelevantConss},
  {"getRelevantVars", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_11DetProbData_75getRelevantVars, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_11DetProbData_74getRelevantVars},
  {"getModel", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_11DetProbData_77getModel, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_11DetProbData_76getModel},
  {"getSortedCandidatesNBlocks", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_11DetProbData_79getSortedCandidatesNBlocks, METH_O, __pyx_doc_8pygcgopt_3gcg_11DetProbData_78getSortedCandidatesNBlocks},
  {"getVal", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygcgopt_3gcg_11DetProbData_81getVal, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygcgopt_3gcg_11DetProbData_80getVal},
  {"getValsForCons", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_11DetProbData_83getValsForCons, METH_O, __pyx_doc_8pygcgopt_3gcg_11DetProbData_82getValsForCons},
  {"getVarPartition", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_11DetProbData_85getVarPartition, METH_O, __pyx_doc_8pygcgopt_3gcg_11DetProbData_84getVarPartition},
  {"getVarPartitions", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_11DetProbData_87getVarPartitions, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_11DetProbData_86getVarPartitions},
  {"getVar", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_11DetProbData_89getVar, METH_O, __pyx_doc_8pygcgopt_3gcg_11DetProbData_88getVar},
  {"getVarsForCons", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_11DetProbData_91getVarsForCons, METH_O, __pyx_doc_8pygcgopt_3gcg_11DetProbData_90getVarsForCons},
  {"isConsCardinalityCons", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_11DetProbData_93isConsCardinalityCons, METH_O, __pyx_doc_8pygcgopt_3gcg_11DetProbData_92isConsCardinalityCons},
  {"isConssAdjInitialized", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_11DetProbData_95isConssAdjInitialized, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_11DetProbData_94isConssAdjInitialized},
  {"isConsSetpp", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_11DetProbData_97isConsSetpp, METH_O, __pyx_doc_8pygcgopt_3gcg_11DetProbData_96isConsSetpp},
  {"isConsSetppc", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_11DetProbData_99isConsSetppc, METH_O, __pyx_doc_8pygcgopt_3gcg_11DetProbData_98isConsSetppc},
  {"isPartialdecDuplicateofFinished", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_11DetProbData_101isPartialdecDuplicateofFinished, METH_O, __pyx_doc_8pygcgopt_3gcg_11DetProbData_100isPartialdecDuplicateofFinished},
  {"isAssignedToOrigProb", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_11DetProbData_103isAssignedToOrigProb, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_11DetProbData_102isAssignedToOrigProb},
  {"partialdecIsNoDuplicateOfPartialdecs", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygcgopt_3gcg_11DetProbData_105partialdecIsNoDuplicateOfPartialdecs, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygcgopt_3gcg_11DetProbData_104partialdecIsNoDuplicateOfPartialdecs},
  {"sortFinishedForScore", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_11DetProbData_107sortFinishedForScore, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_11DetProbData_106sortFinishedForScore},
  {"translatePartialdecs", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygcgopt_3gcg_11DetProbData_109translatePartialdecs, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygcgopt_3gcg_11DetProbData_108translatePartialdecs},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_11DetProbData_111__reduce_cython__, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_11DetProbData_110__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_11DetProbData_113__setstate_cython__, METH_O, __pyx_doc_8pygcgopt_3gcg_11DetProbData_112__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pygcgopt_3gcg_DetProbData[] = {
  {(char *)"candidatesNBlocks", __pyx_getprop_8pygcgopt_3gcg_11DetProbData_candidatesNBlocks, __pyx_setprop_8pygcgopt_3gcg_11DetProbData_candidatesNBlocks, (char *)"candidate for the number of blocks, second int indicates how often a candidate was added.\n        ", 0},
  {(char *)"conspartitioncollection", __pyx_getprop_8pygcgopt_3gcg_11DetProbData_conspartitioncollection, __pyx_setprop_8pygcgopt_3gcg_11DetProbData_conspartitioncollection, (char *)"collection of different constraint class distributions.\n        ", 0},
  {(char *)"varpartitioncollection", __pyx_getprop_8pygcgopt_3gcg_11DetProbData_varpartitioncollection, __pyx_setprop_8pygcgopt_3gcg_11DetProbData_varpartitioncollection, (char *)"collection of different variable class distributions.\n        ", 0},
  {(char *)"classificationtime", __pyx_getprop_8pygcgopt_3gcg_11DetProbData_classificationtime, __pyx_setprop_8pygcgopt_3gcg_11DetProbData_classificationtime, (char *)"time that was consumed by the classification of the constraint and variables classifiers.\n        ", 0},
  {(char *)"nblockscandidatescalctime", __pyx_getprop_8pygcgopt_3gcg_11DetProbData_nblockscandidatescalctime, __pyx_setprop_8pygcgopt_3gcg_11DetProbData_nblockscandidatescalctime, (char *)"time that was used to calulate the candidates of te block number.\n        ", 0},
  {(char *)"postprocessingtime", __pyx_getprop_8pygcgopt_3gcg_11DetProbData_postprocessingtime, __pyx_setprop_8pygcgopt_3gcg_11DetProbData_postprocessingtime, (char *)"time that was spent in postproceesing decomposigtions.\n        ", 0},
  {(char *)"translatingtime", __pyx_getprop_8pygcgopt_3gcg_11DetProbData_translatingtime, __pyx_setprop_8pygcgopt_3gcg_11DetProbData_translatingtime, (char *)"time that was spent by transforming partialdecs between presolved and orig problem.\n        ", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pygcgopt_3gcg_DetProbData = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygcgopt.gcg.DetProbData", /*tp_name*/
  sizeof(struct __pyx_obj_8pygcgopt_3gcg_DetProbData), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygcgopt_3gcg_DetProbData, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "class to manage the detection process and data for one coefficient matrix of a MIP, usually there is one detprobdata for the original and one detprobdata for the presolved problem.\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygcgopt_3gcg_DetProbData, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pygcgopt_3gcg_DetProbData, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygcgopt_3gcg_DetProbData, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8pygcgopt_3gcg_PY_GCG_PRICINGSTATUS(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_8pygcgopt_3gcg_PY_GCG_PRICINGSTATUS(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_8pygcgopt_3gcg_PY_GCG_PRICINGSTATUS[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PY_GCG_PRICINGSTATUS_1__reduce_cython__, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_20PY_GCG_PRICINGSTATUS___reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_20PY_GCG_PRICINGSTATUS_3__setstate_cython__, METH_O, __pyx_doc_8pygcgopt_3gcg_20PY_GCG_PRICINGSTATUS_2__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pygcgopt_3gcg_PY_GCG_PRICINGSTATUS = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygcgopt.gcg.PY_GCG_PRICINGSTATUS", /*tp_name*/
  sizeof(struct __pyx_obj_8pygcgopt_3gcg_PY_GCG_PRICINGSTATUS), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygcgopt_3gcg_PY_GCG_PRICINGSTATUS, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygcgopt_3gcg_PY_GCG_PRICINGSTATUS, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygcgopt_3gcg_PY_GCG_PRICINGSTATUS, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_8pygcgopt_3gcg_GCGModel __pyx_vtable_8pygcgopt_3gcg_GCGModel;

static PyObject *__pyx_tp_new_8pygcgopt_3gcg_GCGModel(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pygcgopt_3gcg_GCGModel *p;
  PyObject *o = __pyx_ptype_9pyscipopt_4scip_Model->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pygcgopt_3gcg_GCGModel *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9pyscipopt_4scip_Model*)__pyx_vtabptr_8pygcgopt_3gcg_GCGModel;
  return o;
}

static void __pyx_tp_dealloc_8pygcgopt_3gcg_GCGModel(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_9pyscipopt_4scip_Model)) __pyx_ptype_9pyscipopt_4scip_Model->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_8pygcgopt_3gcg_GCGModel);
}

static int __pyx_tp_traverse_8pygcgopt_3gcg_GCGModel(PyObject *o, visitproc v, void *a) {
  int e;
  e = ((likely(__pyx_ptype_9pyscipopt_4scip_Model)) ? ((__pyx_ptype_9pyscipopt_4scip_Model->tp_traverse) ? __pyx_ptype_9pyscipopt_4scip_Model->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_8pygcgopt_3gcg_GCGModel)); if (e) return e;
  return 0;
}

static int __pyx_tp_clear_8pygcgopt_3gcg_GCGModel(PyObject *o) {
  if (likely(__pyx_ptype_9pyscipopt_4scip_Model)) { if (__pyx_ptype_9pyscipopt_4scip_Model->tp_clear) __pyx_ptype_9pyscipopt_4scip_Model->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_8pygcgopt_3gcg_GCGModel);
  return 0;
}

static PyMethodDef __pyx_methods_8pygcgopt_3gcg_GCGModel[] = {
  {"includeDefaultPlugins", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_8GCGModel_1includeDefaultPlugins, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_8GCGModel_includeDefaultPlugins},
  {"addVar", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygcgopt_3gcg_8GCGModel_3addVar, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygcgopt_3gcg_8GCGModel_2addVar},
  {"presolve", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_8GCGModel_5presolve, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_8GCGModel_4presolve},
  {"detect", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_8GCGModel_7detect, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_8GCGModel_6detect},
  {"printStatistics", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_8GCGModel_9printStatistics, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_8GCGModel_8printStatistics},
  {"printVersion", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_8GCGModel_11printVersion, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_8GCGModel_10printVersion},
  {"optimize", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_8GCGModel_13optimize, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_8GCGModel_12optimize},
  {"getDualbound", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_8GCGModel_15getDualbound, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_8GCGModel_14getDualbound},
  {"listDecompositions", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_8GCGModel_17listDecompositions, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_8GCGModel_16listDecompositions},
  {"addDecompositionFromConss", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygcgopt_3gcg_8GCGModel_19addDecompositionFromConss, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygcgopt_3gcg_8GCGModel_18addDecompositionFromConss},
  {"addPreexistingPartialDecomposition", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_8GCGModel_21addPreexistingPartialDecomposition, METH_O, __pyx_doc_8pygcgopt_3gcg_8GCGModel_20addPreexistingPartialDecomposition},
  {"addDecomposition", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_8GCGModel_23addDecomposition, METH_O, __pyx_doc_8pygcgopt_3gcg_8GCGModel_22addDecomposition},
  {"createPartialDecomposition", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_8GCGModel_25createPartialDecomposition, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_8GCGModel_24createPartialDecomposition},
  {"createDecomposition", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_8GCGModel_27createDecomposition, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_8GCGModel_26createDecomposition},
  {"includePricingSolver", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygcgopt_3gcg_8GCGModel_29includePricingSolver, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygcgopt_3gcg_8GCGModel_28includePricingSolver},
  {"listPricingSolvers", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_8GCGModel_31listPricingSolvers, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_8GCGModel_30listPricingSolvers},
  {"setPricingSolverEnabled", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygcgopt_3gcg_8GCGModel_33setPricingSolverEnabled, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygcgopt_3gcg_8GCGModel_32setPricingSolverEnabled},
  {"setPricingSolverExactEnabled", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygcgopt_3gcg_8GCGModel_35setPricingSolverExactEnabled, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygcgopt_3gcg_8GCGModel_34setPricingSolverExactEnabled},
  {"setPricingSolverHeuristicEnabled", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygcgopt_3gcg_8GCGModel_37setPricingSolverHeuristicEnabled, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygcgopt_3gcg_8GCGModel_36setPricingSolverHeuristicEnabled},
  {"includeDetector", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygcgopt_3gcg_8GCGModel_39includeDetector, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygcgopt_3gcg_8GCGModel_38includeDetector},
  {"listDetectors", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_8GCGModel_41listDetectors, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_8GCGModel_40listDetectors},
  {"setDetectorEnabled", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygcgopt_3gcg_8GCGModel_43setDetectorEnabled, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygcgopt_3gcg_8GCGModel_42setDetectorEnabled},
  {"setDetectorFinishingEnabled", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygcgopt_3gcg_8GCGModel_45setDetectorFinishingEnabled, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygcgopt_3gcg_8GCGModel_44setDetectorFinishingEnabled},
  {"setDetectorPostprocessingEnabled", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygcgopt_3gcg_8GCGModel_47setDetectorPostprocessingEnabled, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygcgopt_3gcg_8GCGModel_46setDetectorPostprocessingEnabled},
  {"getMasterProb", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_8GCGModel_49getMasterProb, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_8GCGModel_48getMasterProb},
  {"setGCGSeparating", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_8GCGModel_51setGCGSeparating, METH_O, __pyx_doc_8pygcgopt_3gcg_8GCGModel_50setGCGSeparating},
  {"writeAllDecomps", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygcgopt_3gcg_8GCGModel_53writeAllDecomps, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygcgopt_3gcg_8GCGModel_52writeAllDecomps},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_8GCGModel_55__reduce_cython__, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_8GCGModel_54__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_8GCGModel_57__setstate_cython__, METH_O, __pyx_doc_8pygcgopt_3gcg_8GCGModel_56__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pygcgopt_3gcg_GCGModel = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygcgopt.gcg.GCGModel", /*tp_name*/
  sizeof(struct __pyx_obj_8pygcgopt_3gcg_GCGModel), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygcgopt_3gcg_GCGModel, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Main class for interaction with the GCG solver.", /*tp_doc*/
  __pyx_tp_traverse_8pygcgopt_3gcg_GCGModel, /*tp_traverse*/
  __pyx_tp_clear_8pygcgopt_3gcg_GCGModel, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygcgopt_3gcg_GCGModel, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygcgopt_3gcg_GCGModel, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_8pygcgopt_3gcg_GCGPricingModel __pyx_vtable_8pygcgopt_3gcg_GCGPricingModel;

static PyObject *__pyx_tp_new_8pygcgopt_3gcg_GCGPricingModel(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pygcgopt_3gcg_GCGPricingModel *p;
  PyObject *o = __pyx_ptype_9pyscipopt_4scip_Model->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pygcgopt_3gcg_GCGPricingModel *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9pyscipopt_4scip_Model*)__pyx_vtabptr_8pygcgopt_3gcg_GCGPricingModel;
  return o;
}

static void __pyx_tp_dealloc_8pygcgopt_3gcg_GCGPricingModel(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_9pyscipopt_4scip_Model)) __pyx_ptype_9pyscipopt_4scip_Model->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_8pygcgopt_3gcg_GCGPricingModel);
}

static int __pyx_tp_traverse_8pygcgopt_3gcg_GCGPricingModel(PyObject *o, visitproc v, void *a) {
  int e;
  e = ((likely(__pyx_ptype_9pyscipopt_4scip_Model)) ? ((__pyx_ptype_9pyscipopt_4scip_Model->tp_traverse) ? __pyx_ptype_9pyscipopt_4scip_Model->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_8pygcgopt_3gcg_GCGPricingModel)); if (e) return e;
  return 0;
}

static int __pyx_tp_clear_8pygcgopt_3gcg_GCGPricingModel(PyObject *o) {
  if (likely(__pyx_ptype_9pyscipopt_4scip_Model)) { if (__pyx_ptype_9pyscipopt_4scip_Model->tp_clear) __pyx_ptype_9pyscipopt_4scip_Model->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_8pygcgopt_3gcg_GCGPricingModel);
  return 0;
}

static PyMethodDef __pyx_methods_8pygcgopt_3gcg_GCGPricingModel[] = {
  {"createGcgCol", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygcgopt_3gcg_15GCGPricingModel_1createGcgCol, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygcgopt_3gcg_15GCGPricingModel_createGcgCol},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_15GCGPricingModel_3__reduce_cython__, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_15GCGPricingModel_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_15GCGPricingModel_5__setstate_cython__, METH_O, __pyx_doc_8pygcgopt_3gcg_15GCGPricingModel_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pygcgopt_3gcg_GCGPricingModel = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygcgopt.gcg.GCGPricingModel", /*tp_name*/
  sizeof(struct __pyx_obj_8pygcgopt_3gcg_GCGPricingModel), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygcgopt_3gcg_GCGPricingModel, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8pygcgopt_3gcg_GCGPricingModel, /*tp_traverse*/
  __pyx_tp_clear_8pygcgopt_3gcg_GCGPricingModel, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygcgopt_3gcg_GCGPricingModel, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygcgopt_3gcg_GCGPricingModel, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_8pygcgopt_3gcg_GCGMasterModel __pyx_vtable_8pygcgopt_3gcg_GCGMasterModel;

static PyObject *__pyx_tp_new_8pygcgopt_3gcg_GCGMasterModel(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pygcgopt_3gcg_GCGMasterModel *p;
  PyObject *o = __pyx_ptype_9pyscipopt_4scip_Model->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pygcgopt_3gcg_GCGMasterModel *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9pyscipopt_4scip_Model*)__pyx_vtabptr_8pygcgopt_3gcg_GCGMasterModel;
  return o;
}

static void __pyx_tp_dealloc_8pygcgopt_3gcg_GCGMasterModel(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_9pyscipopt_4scip_Model)) __pyx_ptype_9pyscipopt_4scip_Model->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_8pygcgopt_3gcg_GCGMasterModel);
}

static int __pyx_tp_traverse_8pygcgopt_3gcg_GCGMasterModel(PyObject *o, visitproc v, void *a) {
  int e;
  e = ((likely(__pyx_ptype_9pyscipopt_4scip_Model)) ? ((__pyx_ptype_9pyscipopt_4scip_Model->tp_traverse) ? __pyx_ptype_9pyscipopt_4scip_Model->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_8pygcgopt_3gcg_GCGMasterModel)); if (e) return e;
  return 0;
}

static int __pyx_tp_clear_8pygcgopt_3gcg_GCGMasterModel(PyObject *o) {
  if (likely(__pyx_ptype_9pyscipopt_4scip_Model)) { if (__pyx_ptype_9pyscipopt_4scip_Model->tp_clear) __pyx_ptype_9pyscipopt_4scip_Model->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_8pygcgopt_3gcg_GCGMasterModel);
  return 0;
}

static PyMethodDef __pyx_methods_8pygcgopt_3gcg_GCGMasterModel[] = {
  {"addCol", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_14GCGMasterModel_1addCol, METH_O, __pyx_doc_8pygcgopt_3gcg_14GCGMasterModel_addCol},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_14GCGMasterModel_3__reduce_cython__, METH_NOARGS, __pyx_doc_8pygcgopt_3gcg_14GCGMasterModel_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygcgopt_3gcg_14GCGMasterModel_5__setstate_cython__, METH_O, __pyx_doc_8pygcgopt_3gcg_14GCGMasterModel_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pygcgopt_3gcg_GCGMasterModel = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygcgopt.gcg.GCGMasterModel", /*tp_name*/
  sizeof(struct __pyx_obj_8pygcgopt_3gcg_GCGMasterModel), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygcgopt_3gcg_GCGMasterModel, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8pygcgopt_3gcg_GCGMasterModel, /*tp_traverse*/
  __pyx_tp_clear_8pygcgopt_3gcg_GCGMasterModel, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygcgopt_3gcg_GCGMasterModel, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygcgopt_3gcg_GCGMasterModel, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_gcg(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_gcg},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "gcg",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_u_000000, __pyx_k_000000, sizeof(__pyx_k_000000), 0, 1, 0, 0},
  {&__pyx_kp_u_1340C7, __pyx_k_1340C7, sizeof(__pyx_k_1340C7), 0, 1, 0, 0},
  {&__pyx_kp_u_718CDB, __pyx_k_718CDB, sizeof(__pyx_k_718CDB), 0, 1, 0, 0},
  {&__pyx_kp_u_886100, __pyx_k_886100, sizeof(__pyx_k_886100), 0, 1, 0, 0},
  {&__pyx_n_u_AGGR, __pyx_k_AGGR, sizeof(__pyx_k_AGGR), 0, 1, 0, 1},
  {&__pyx_n_u_BIN, __pyx_k_BIN, sizeof(__pyx_k_BIN), 0, 1, 0, 1},
  {&__pyx_n_u_BINP, __pyx_k_BINP, sizeof(__pyx_k_BINP), 0, 1, 0, 1},
  {&__pyx_n_s_BoundaryNorm, __pyx_k_BoundaryNorm, sizeof(__pyx_k_BoundaryNorm), 0, 0, 1, 1},
  {&__pyx_n_u_CARD, __pyx_k_CARD, sizeof(__pyx_k_CARD), 0, 1, 0, 1},
  {&__pyx_n_u_CONT, __pyx_k_CONT, sizeof(__pyx_k_CONT), 0, 1, 0, 1},
  {&__pyx_n_s_ConsPart, __pyx_k_ConsPart, sizeof(__pyx_k_ConsPart), 0, 0, 1, 1},
  {&__pyx_kp_u_ConsPart_name, __pyx_k_ConsPart_name, sizeof(__pyx_k_ConsPart_name), 0, 1, 0, 0},
  {&__pyx_n_s_DetProbData, __pyx_k_DetProbData, sizeof(__pyx_k_DetProbData), 0, 0, 1, 1},
  {&__pyx_n_s_Detector, __pyx_k_Detector, sizeof(__pyx_k_Detector), 0, 0, 1, 1},
  {&__pyx_kp_u_Detector_callback_returned_of_ty, __pyx_k_Detector_callback_returned_of_ty, sizeof(__pyx_k_Detector_callback_returned_of_ty), 0, 1, 0, 0},
  {&__pyx_n_u_EMPTY, __pyx_k_EMPTY, sizeof(__pyx_k_EMPTY), 0, 1, 0, 1},
  {&__pyx_n_u_EQUK, __pyx_k_EQUK, sizeof(__pyx_k_EQUK), 0, 1, 0, 1},
  {&__pyx_kp_u_Expected_iterable_as_first_argum, __pyx_k_Expected_iterable_as_first_argum, sizeof(__pyx_k_Expected_iterable_as_first_argum), 0, 1, 0, 0},
  {&__pyx_kp_u_FFB72D, __pyx_k_FFB72D, sizeof(__pyx_k_FFB72D), 0, 1, 0, 0},
  {&__pyx_kp_u_FFD88F, __pyx_k_FFD88F, sizeof(__pyx_k_FFD88F), 0, 1, 0, 0},
  {&__pyx_n_u_FREE, __pyx_k_FREE, sizeof(__pyx_k_FREE), 0, 1, 0, 1},
  {&__pyx_kp_u_Format, __pyx_k_Format, sizeof(__pyx_k_Format), 0, 1, 0, 0},
  {&__pyx_n_s_GCGColumn, __pyx_k_GCGColumn, sizeof(__pyx_k_GCGColumn), 0, 0, 1, 1},
  {&__pyx_n_s_GCGMasterModel, __pyx_k_GCGMasterModel, sizeof(__pyx_k_GCGMasterModel), 0, 0, 1, 1},
  {&__pyx_n_s_GCGModel, __pyx_k_GCGModel, sizeof(__pyx_k_GCGModel), 0, 0, 1, 1},
  {&__pyx_n_s_GCGPricingModel, __pyx_k_GCGPricingModel, sizeof(__pyx_k_GCGPricingModel), 0, 0, 1, 1},
  {&__pyx_n_u_GENL, __pyx_k_GENL, sizeof(__pyx_k_GENL), 0, 1, 0, 1},
  {&__pyx_n_u_IKNA, __pyx_k_IKNA, sizeof(__pyx_k_IKNA), 0, 1, 0, 1},
  {&__pyx_n_u_IMP, __pyx_k_IMP, sizeof(__pyx_k_IMP), 0, 1, 0, 1},
  {&__pyx_n_s_INFEASIBLE, __pyx_k_INFEASIBLE, sizeof(__pyx_k_INFEASIBLE), 0, 0, 1, 1},
  {&__pyx_n_u_INT, __pyx_k_INT, sizeof(__pyx_k_INT), 0, 1, 0, 1},
  {&__pyx_n_u_INVK, __pyx_k_INVK, sizeof(__pyx_k_INVK), 0, 1, 0, 1},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0x7a, __pyx_k_Incompatible_checksums_s_vs_0x7a, sizeof(__pyx_k_Incompatible_checksums_s_vs_0x7a), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0xd4, __pyx_k_Incompatible_checksums_s_vs_0xd4, sizeof(__pyx_k_Incompatible_checksums_s_vs_0xd4), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0xf7, __pyx_k_Incompatible_checksums_s_vs_0xf7, sizeof(__pyx_k_Incompatible_checksums_s_vs_0xf7), 0, 0, 1, 0},
  {&__pyx_n_s_Iterable, __pyx_k_Iterable, sizeof(__pyx_k_Iterable), 0, 0, 1, 1},
  {&__pyx_n_u_KNAP, __pyx_k_KNAP, sizeof(__pyx_k_KNAP), 0, 1, 0, 1},
  {&__pyx_kp_u_Length_of_value_for_decchar_must, __pyx_k_Length_of_value_for_decchar_must, sizeof(__pyx_k_Length_of_value_for_decchar_must), 0, 1, 0, 0},
  {&__pyx_n_s_List, __pyx_k_List, sizeof(__pyx_k_List), 0, 0, 1, 1},
  {&__pyx_n_s_ListedColormap, __pyx_k_ListedColormap, sizeof(__pyx_k_ListedColormap), 0, 0, 1, 1},
  {&__pyx_kp_u_MIPLIB_constypes, __pyx_k_MIPLIB_constypes, sizeof(__pyx_k_MIPLIB_constypes), 0, 1, 0, 0},
  {&__pyx_n_u_MIXB, __pyx_k_MIXB, sizeof(__pyx_k_MIXB), 0, 1, 0, 1},
  {&__pyx_n_s_N, __pyx_k_N, sizeof(__pyx_k_N), 0, 0, 1, 1},
  {&__pyx_n_u_NONE, __pyx_k_NONE, sizeof(__pyx_k_NONE), 0, 1, 0, 1},
  {&__pyx_n_s_NOTAPPLICABLE, __pyx_k_NOTAPPLICABLE, sizeof(__pyx_k_NOTAPPLICABLE), 0, 0, 1, 1},
  {&__pyx_n_s_NotImplementedError, __pyx_k_NotImplementedError, sizeof(__pyx_k_NotImplementedError), 0, 0, 1, 1},
  {&__pyx_n_s_OPTIMAL, __pyx_k_OPTIMAL, sizeof(__pyx_k_OPTIMAL), 0, 0, 1, 1},
  {&__pyx_n_s_PY_GCG_PRICINGSTATUS, __pyx_k_PY_GCG_PRICINGSTATUS, sizeof(__pyx_k_PY_GCG_PRICINGSTATUS), 0, 0, 1, 1},
  {&__pyx_n_s_PY_SCIP_CALL, __pyx_k_PY_SCIP_CALL, sizeof(__pyx_k_PY_SCIP_CALL), 0, 0, 1, 1},
  {&__pyx_n_s_PartialDecomposition, __pyx_k_PartialDecomposition, sizeof(__pyx_k_PartialDecomposition), 0, 0, 1, 1},
  {&__pyx_kp_u_PartialDecomposition_nBlocks, __pyx_k_PartialDecomposition_nBlocks, sizeof(__pyx_k_PartialDecomposition_nBlocks), 0, 1, 0, 0},
  {&__pyx_n_s_Path, __pyx_k_Path, sizeof(__pyx_k_Path), 0, 0, 1, 1},
  {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_PricingSolver, __pyx_k_PricingSolver, sizeof(__pyx_k_PricingSolver), 0, 0, 1, 1},
  {&__pyx_n_s_Rectangle, __pyx_k_Rectangle, sizeof(__pyx_k_Rectangle), 0, 0, 1, 1},
  {&__pyx_kp_u_SCIP_vartypes, __pyx_k_SCIP_vartypes, sizeof(__pyx_k_SCIP_vartypes), 0, 1, 0, 0},
  {&__pyx_n_u_SCOV, __pyx_k_SCOV, sizeof(__pyx_k_SCOV), 0, 1, 0, 1},
  {&__pyx_n_u_SING, __pyx_k_SING, sizeof(__pyx_k_SING), 0, 1, 0, 1},
  {&__pyx_n_s_SOLVERLIMIT, __pyx_k_SOLVERLIMIT, sizeof(__pyx_k_SOLVERLIMIT), 0, 0, 1, 1},
  {&__pyx_n_u_SPAC, __pyx_k_SPAC, sizeof(__pyx_k_SPAC), 0, 1, 0, 1},
  {&__pyx_n_u_SPAR, __pyx_k_SPAR, sizeof(__pyx_k_SPAR), 0, 1, 0, 1},
  {&__pyx_n_s_TemporaryDirectory, __pyx_k_TemporaryDirectory, sizeof(__pyx_k_TemporaryDirectory), 0, 0, 1, 1},
  {&__pyx_kp_u_The_value_of_the_key_newpartiald, __pyx_k_The_value_of_the_key_newpartiald, sizeof(__pyx_k_The_value_of_the_key_newpartiald), 0, 1, 0, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_UNBOUNDED, __pyx_k_UNBOUNDED, sizeof(__pyx_k_UNBOUNDED), 0, 0, 1, 1},
  {&__pyx_n_s_UNKNOWN, __pyx_k_UNKNOWN, sizeof(__pyx_k_UNKNOWN), 0, 0, 1, 1},
  {&__pyx_n_u_VARB, __pyx_k_VARB, sizeof(__pyx_k_VARB), 0, 1, 0, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_VarPart, __pyx_k_VarPart, sizeof(__pyx_k_VarPart), 0, 0, 1, 1},
  {&__pyx_n_s_Warning, __pyx_k_Warning, sizeof(__pyx_k_Warning), 0, 0, 1, 1},
  {&__pyx_n_s__12, __pyx_k__12, sizeof(__pyx_k__12), 0, 0, 1, 1},
  {&__pyx_kp_u__18, __pyx_k__18, sizeof(__pyx_k__18), 0, 1, 0, 0},
  {&__pyx_kp_u__3, __pyx_k__3, sizeof(__pyx_k__3), 0, 1, 0, 0},
  {&__pyx_n_s_addBlock, __pyx_k_addBlock, sizeof(__pyx_k_addBlock), 0, 0, 1, 1},
  {&__pyx_n_s_addClockTime, __pyx_k_addClockTime, sizeof(__pyx_k_addClockTime), 0, 0, 1, 1},
  {&__pyx_n_s_addDecomposition, __pyx_k_addDecomposition, sizeof(__pyx_k_addDecomposition), 0, 0, 1, 1},
  {&__pyx_n_s_addDetectorChainInfo, __pyx_k_addDetectorChainInfo, sizeof(__pyx_k_addDetectorChainInfo), 0, 0, 1, 1},
  {&__pyx_n_s_addVar, __pyx_k_addVar, sizeof(__pyx_k_addVar), 0, 0, 1, 1},
  {&__pyx_n_s_add_patch, __pyx_k_add_patch, sizeof(__pyx_k_add_patch), 0, 0, 1, 1},
  {&__pyx_n_s_additionalNBlocks, __pyx_k_additionalNBlocks, sizeof(__pyx_k_additionalNBlocks), 0, 0, 1, 1},
  {&__pyx_n_s_all, __pyx_k_all, sizeof(__pyx_k_all), 0, 0, 1, 1},
  {&__pyx_kp_u_alldecompositions, __pyx_k_alldecompositions, sizeof(__pyx_k_alldecompositions), 0, 1, 0, 0},
  {&__pyx_n_s_alpha, __pyx_k_alpha, sizeof(__pyx_k_alpha), 0, 0, 1, 1},
  {&__pyx_n_s_ax, __pyx_k_ax, sizeof(__pyx_k_ax), 0, 0, 1, 1},
  {&__pyx_n_s_bcoef, __pyx_k_bcoef, sizeof(__pyx_k_bcoef), 0, 0, 1, 1},
  {&__pyx_n_u_black, __pyx_k_black, sizeof(__pyx_k_black), 0, 1, 0, 1},
  {&__pyx_n_s_block, __pyx_k_block, sizeof(__pyx_k_block), 0, 0, 1, 1},
  {&__pyx_n_s_block1, __pyx_k_block1, sizeof(__pyx_k_block1), 0, 0, 1, 1},
  {&__pyx_n_s_block2, __pyx_k_block2, sizeof(__pyx_k_block2), 0, 0, 1, 1},
  {&__pyx_n_s_block_id, __pyx_k_block_id, sizeof(__pyx_k_block_id), 0, 0, 1, 1},
  {&__pyx_n_s_blockcolor, __pyx_k_blockcolor, sizeof(__pyx_k_blockcolor), 0, 0, 1, 1},
  {&__pyx_n_s_blockid, __pyx_k_blockid, sizeof(__pyx_k_blockid), 0, 0, 1, 1},
  {&__pyx_n_s_blockrepid, __pyx_k_blockrepid, sizeof(__pyx_k_blockrepid), 0, 0, 1, 1},
  {&__pyx_n_u_blue, __pyx_k_blue, sizeof(__pyx_k_blue), 0, 1, 0, 1},
  {&__pyx_n_s_both, __pyx_k_both, sizeof(__pyx_k_both), 0, 0, 1, 1},
  {&__pyx_n_s_bottom, __pyx_k_bottom, sizeof(__pyx_k_bottom), 0, 0, 1, 1},
  {&__pyx_n_s_boxes, __pyx_k_boxes, sizeof(__pyx_k_boxes), 0, 0, 1, 1},
  {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
  {&__pyx_n_s_candidate, __pyx_k_candidate, sizeof(__pyx_k_candidate), 0, 0, 1, 1},
  {&__pyx_kp_u_cannot_create_Column_with_GCG_CO, __pyx_k_cannot_create_Column_with_GCG_CO, sizeof(__pyx_k_cannot_create_Column_with_GCG_CO), 0, 1, 0, 0},
  {&__pyx_kp_u_cannot_create_ConsPart_with_Cons, __pyx_k_cannot_create_ConsPart_with_Cons, sizeof(__pyx_k_cannot_create_ConsPart_with_Cons), 0, 1, 0, 0},
  {&__pyx_kp_u_cannot_create_DetProbData_with_D, __pyx_k_cannot_create_DetProbData_with_D, sizeof(__pyx_k_cannot_create_DetProbData_with_D), 0, 1, 0, 0},
  {&__pyx_kp_u_cannot_create_Model_with_SCIP_NU, __pyx_k_cannot_create_Model_with_SCIP_NU, sizeof(__pyx_k_cannot_create_Model_with_SCIP_NU), 0, 1, 0, 0},
  {&__pyx_kp_u_cannot_create_PartialDecompositi, __pyx_k_cannot_create_PartialDecompositi, sizeof(__pyx_k_cannot_create_PartialDecompositi), 0, 1, 0, 0},
  {&__pyx_kp_u_cannot_create_VarPart_with_VarPa, __pyx_k_cannot_create_VarPart_with_VarPa, sizeof(__pyx_k_cannot_create_VarPart_with_VarPa), 0, 1, 0, 0},
  {&__pyx_n_s_class, __pyx_k_class, sizeof(__pyx_k_class), 0, 0, 1, 1},
  {&__pyx_n_s_classindex, __pyx_k_classindex, sizeof(__pyx_k_classindex), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_cmap, __pyx_k_cmap, sizeof(__pyx_k_cmap), 0, 0, 1, 1},
  {&__pyx_n_u_coefficients, __pyx_k_coefficients, sizeof(__pyx_k_coefficients), 0, 1, 0, 1},
  {&__pyx_n_s_col, __pyx_k_col, sizeof(__pyx_k_col), 0, 0, 1, 1},
  {&__pyx_n_s_collections_abc, __pyx_k_collections_abc, sizeof(__pyx_k_collections_abc), 0, 0, 1, 1},
  {&__pyx_n_s_colorbar, __pyx_k_colorbar, sizeof(__pyx_k_colorbar), 0, 0, 1, 1},
  {&__pyx_n_s_comppartialdec, __pyx_k_comppartialdec, sizeof(__pyx_k_comppartialdec), 0, 0, 1, 1},
  {&__pyx_n_s_cons, __pyx_k_cons, sizeof(__pyx_k_cons), 0, 0, 1, 1},
  {&__pyx_n_s_consToBlock, __pyx_k_consToBlock, sizeof(__pyx_k_consToBlock), 0, 0, 1, 1},
  {&__pyx_n_s_consclassesmaster, __pyx_k_consclassesmaster, sizeof(__pyx_k_consclassesmaster), 0, 0, 1, 1},
  {&__pyx_n_s_consname, __pyx_k_consname, sizeof(__pyx_k_consname), 0, 0, 1, 1},
  {&__pyx_n_s_conss, __pyx_k_conss, sizeof(__pyx_k_conss), 0, 0, 1, 1},
  {&__pyx_n_s_consschanged, __pyx_k_consschanged, sizeof(__pyx_k_consschanged), 0, 0, 1, 1},
  {&__pyx_n_s_constoblock, __pyx_k_constoblock, sizeof(__pyx_k_constoblock), 0, 0, 1, 1},
  {&__pyx_n_s_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
  {&__pyx_n_s_createDecomposition, __pyx_k_createDecomposition, sizeof(__pyx_k_createDecomposition), 0, 0, 1, 1},
  {&__pyx_n_s_createDirectory, __pyx_k_createDirectory, sizeof(__pyx_k_createDirectory), 0, 0, 1, 1},
  {&__pyx_n_s_createscip, __pyx_k_createscip, sizeof(__pyx_k_createscip), 0, 0, 1, 1},
  {&__pyx_n_u_darkblue, __pyx_k_darkblue, sizeof(__pyx_k_darkblue), 0, 1, 0, 1},
  {&__pyx_n_u_dec, __pyx_k_dec, sizeof(__pyx_k_dec), 0, 1, 0, 1},
  {&__pyx_n_s_decchar, __pyx_k_decchar, sizeof(__pyx_k_decchar), 0, 0, 1, 1},
  {&__pyx_n_s_desc, __pyx_k_desc, sizeof(__pyx_k_desc), 0, 0, 1, 1},
  {&__pyx_kp_u_detection_detectors_enabled, __pyx_k_detection_detectors_enabled, sizeof(__pyx_k_detection_detectors_enabled), 0, 1, 0, 0},
  {&__pyx_kp_u_detection_detectors_finishingena, __pyx_k_detection_detectors_finishingena, sizeof(__pyx_k_detection_detectors_finishingena), 0, 1, 0, 0},
  {&__pyx_kp_u_detection_detectors_postprocessi, __pyx_k_detection_detectors_postprocessi, sizeof(__pyx_k_detection_detectors_postprocessi), 0, 1, 0, 0},
  {&__pyx_n_s_detector, __pyx_k_detector, sizeof(__pyx_k_detector), 0, 0, 1, 1},
  {&__pyx_n_s_detector_name, __pyx_k_detector_name, sizeof(__pyx_k_detector_name), 0, 0, 1, 1},
  {&__pyx_n_s_detectorchainindex, __pyx_k_detectorchainindex, sizeof(__pyx_k_detectorchainindex), 0, 0, 1, 1},
  {&__pyx_n_s_detectorname, __pyx_k_detectorname, sizeof(__pyx_k_detectorname), 0, 0, 1, 1},
  {&__pyx_n_s_detprobdata, __pyx_k_detprobdata, sizeof(__pyx_k_detprobdata), 0, 0, 1, 1},
  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {&__pyx_n_s_directory, __pyx_k_directory, sizeof(__pyx_k_directory), 0, 0, 1, 1},
  {&__pyx_n_s_dots, __pyx_k_dots, sizeof(__pyx_k_dots), 0, 0, 1, 1},
  {&__pyx_n_s_dpi, __pyx_k_dpi, sizeof(__pyx_k_dpi), 0, 0, 1, 1},
  {&__pyx_n_s_dualsolconv, __pyx_k_dualsolconv, sizeof(__pyx_k_dualsolconv), 0, 0, 1, 1},
  {&__pyx_n_s_edgecolor, __pyx_k_edgecolor, sizeof(__pyx_k_edgecolor), 0, 0, 1, 1},
  {&__pyx_n_s_enabled, __pyx_k_enabled, sizeof(__pyx_k_enabled), 0, 0, 1, 1},
  {&__pyx_n_s_enabledfinishing, __pyx_k_enabledfinishing, sizeof(__pyx_k_enabledfinishing), 0, 0, 1, 1},
  {&__pyx_n_s_enabledpostprocessing, __pyx_k_enabledpostprocessing, sizeof(__pyx_k_enabledpostprocessing), 0, 0, 1, 1},
  {&__pyx_n_s_enter, __pyx_k_enter, sizeof(__pyx_k_enter), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_exactEnabled, __pyx_k_exactEnabled, sizeof(__pyx_k_exactEnabled), 0, 0, 1, 1},
  {&__pyx_n_s_exist_ok, __pyx_k_exist_ok, sizeof(__pyx_k_exist_ok), 0, 0, 1, 1},
  {&__pyx_n_s_exit, __pyx_k_exit, sizeof(__pyx_k_exit), 0, 0, 1, 1},
  {&__pyx_n_s_exitDetector, __pyx_k_exitDetector, sizeof(__pyx_k_exitDetector), 0, 0, 1, 1},
  {&__pyx_n_s_exitSolution, __pyx_k_exitSolution, sizeof(__pyx_k_exitSolution), 0, 0, 1, 1},
  {&__pyx_n_s_exitSolver, __pyx_k_exitSolver, sizeof(__pyx_k_exitSolver), 0, 0, 1, 1},
  {&__pyx_n_s_extension, __pyx_k_extension, sizeof(__pyx_k_extension), 0, 0, 1, 1},
  {&__pyx_n_s_facecolor, __pyx_k_facecolor, sizeof(__pyx_k_facecolor), 0, 0, 1, 1},
  {&__pyx_n_s_figsize, __pyx_k_figsize, sizeof(__pyx_k_figsize), 0, 0, 1, 1},
  {&__pyx_n_s_finishPartialdec, __pyx_k_finishPartialdec, sizeof(__pyx_k_finishPartialdec), 0, 0, 1, 1},
  {&__pyx_n_s_firstblock, __pyx_k_firstblock, sizeof(__pyx_k_firstblock), 0, 0, 1, 1},
  {&__pyx_n_s_fixConsToBlock, __pyx_k_fixConsToBlock, sizeof(__pyx_k_fixConsToBlock), 0, 0, 1, 1},
  {&__pyx_n_s_fixConsToBlockId, __pyx_k_fixConsToBlockId, sizeof(__pyx_k_fixConsToBlockId), 0, 0, 1, 1},
  {&__pyx_n_s_fixConsToMaster, __pyx_k_fixConsToMaster, sizeof(__pyx_k_fixConsToMaster), 0, 0, 1, 1},
  {&__pyx_n_s_fixConssToBlock, __pyx_k_fixConssToBlock, sizeof(__pyx_k_fixConssToBlock), 0, 0, 1, 1},
  {&__pyx_n_s_fixConssToMaster, __pyx_k_fixConssToMaster, sizeof(__pyx_k_fixConssToMaster), 0, 0, 1, 1},
  {&__pyx_n_s_fname, __pyx_k_fname, sizeof(__pyx_k_fname), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_freeDetector, __pyx_k_freeDetector, sizeof(__pyx_k_freeDetector), 0, 0, 1, 1},
  {&__pyx_n_s_freeSolver, __pyx_k_freeSolver, sizeof(__pyx_k_freeSolver), 0, 0, 1, 1},
  {&__pyx_n_s_freqcallround, __pyx_k_freqcallround, sizeof(__pyx_k_freqcallround), 0, 0, 1, 1},
  {&__pyx_n_s_freqcallroundoriginal, __pyx_k_freqcallroundoriginal, sizeof(__pyx_k_freqcallroundoriginal), 0, 0, 1, 1},
  {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {&__pyx_n_s_getCons, __pyx_k_getCons, sizeof(__pyx_k_getCons), 0, 0, 1, 1},
  {&__pyx_n_s_getDetprobdata, __pyx_k_getDetprobdata, sizeof(__pyx_k_getDetprobdata), 0, 0, 1, 1},
  {&__pyx_n_s_getIndexForCons, __pyx_k_getIndexForCons, sizeof(__pyx_k_getIndexForCons), 0, 0, 1, 1},
  {&__pyx_n_s_getMasterProb, __pyx_k_getMasterProb, sizeof(__pyx_k_getMasterProb), 0, 0, 1, 1},
  {&__pyx_n_s_getNBlocks, __pyx_k_getNBlocks, sizeof(__pyx_k_getNBlocks), 0, 0, 1, 1},
  {&__pyx_n_s_getNConss, __pyx_k_getNConss, sizeof(__pyx_k_getNConss), 0, 0, 1, 1},
  {&__pyx_n_s_getNConssForBlock, __pyx_k_getNConssForBlock, sizeof(__pyx_k_getNConssForBlock), 0, 0, 1, 1},
  {&__pyx_n_s_getNLinkingvars, __pyx_k_getNLinkingvars, sizeof(__pyx_k_getNLinkingvars), 0, 0, 1, 1},
  {&__pyx_n_s_getNMasterconss, __pyx_k_getNMasterconss, sizeof(__pyx_k_getNMasterconss), 0, 0, 1, 1},
  {&__pyx_n_s_getNMastervars, __pyx_k_getNMastervars, sizeof(__pyx_k_getNMastervars), 0, 0, 1, 1},
  {&__pyx_n_s_getNOpenconss, __pyx_k_getNOpenconss, sizeof(__pyx_k_getNOpenconss), 0, 0, 1, 1},
  {&__pyx_n_s_getNOpenvars, __pyx_k_getNOpenvars, sizeof(__pyx_k_getNOpenvars), 0, 0, 1, 1},
  {&__pyx_n_s_getNStairlinkingvars, __pyx_k_getNStairlinkingvars, sizeof(__pyx_k_getNStairlinkingvars), 0, 0, 1, 1},
  {&__pyx_n_s_getNVars, __pyx_k_getNVars, sizeof(__pyx_k_getNVars), 0, 0, 1, 1},
  {&__pyx_n_s_getNVarsForBlock, __pyx_k_getNVarsForBlock, sizeof(__pyx_k_getNVarsForBlock), 0, 0, 1, 1},
  {&__pyx_n_s_getName, __pyx_k_getName, sizeof(__pyx_k_getName), 0, 0, 1, 1},
  {&__pyx_n_s_getStage, __pyx_k_getStage, sizeof(__pyx_k_getStage), 0, 0, 1, 1},
  {&__pyx_n_s_getVisuName, __pyx_k_getVisuName, sizeof(__pyx_k_getVisuName), 0, 0, 1, 1},
  {&__pyx_n_s_get_major_locator, __pyx_k_get_major_locator, sizeof(__pyx_k_get_major_locator), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_u_gray, __pyx_k_gray, sizeof(__pyx_k_gray), 0, 1, 0, 1},
  {&__pyx_n_u_green, __pyx_k_green, sizeof(__pyx_k_green), 0, 1, 0, 1},
  {&__pyx_n_s_heuristicEnabled, __pyx_k_heuristicEnabled, sizeof(__pyx_k_heuristicEnabled), 0, 0, 1, 1},
  {&__pyx_n_u_hotpink, __pyx_k_hotpink, sizeof(__pyx_k_hotpink), 0, 1, 0, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
  {&__pyx_n_s_initDetector, __pyx_k_initDetector, sizeof(__pyx_k_initDetector), 0, 0, 1, 1},
  {&__pyx_n_s_initSolution, __pyx_k_initSolution, sizeof(__pyx_k_initSolution), 0, 0, 1, 1},
  {&__pyx_n_s_initSolver, __pyx_k_initSolver, sizeof(__pyx_k_initSolver), 0, 0, 1, 1},
  {&__pyx_n_s_integer, __pyx_k_integer, sizeof(__pyx_k_integer), 0, 0, 1, 1},
  {&__pyx_n_s_invert_yaxis, __pyx_k_invert_yaxis, sizeof(__pyx_k_invert_yaxis), 0, 0, 1, 1},
  {&__pyx_n_s_is_enabled, __pyx_k_is_enabled, sizeof(__pyx_k_is_enabled), 0, 0, 1, 1},
  {&__pyx_kp_u_is_not_supported_Only_svg_and_p, __pyx_k_is_not_supported_Only_svg_and_p, sizeof(__pyx_k_is_not_supported_Only_svg_and_p), 0, 1, 0, 0},
  {&__pyx_n_s_isray, __pyx_k_isray, sizeof(__pyx_k_isray), 0, 0, 1, 1},
  {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
  {&__pyx_n_s_joinpath, __pyx_k_joinpath, sizeof(__pyx_k_joinpath), 0, 0, 1, 1},
  {&__pyx_n_u_lime, __pyx_k_lime, sizeof(__pyx_k_lime), 0, 1, 0, 1},
  {&__pyx_n_s_linecolor, __pyx_k_linecolor, sizeof(__pyx_k_linecolor), 0, 0, 1, 1},
  {&__pyx_n_s_linewidth, __pyx_k_linewidth, sizeof(__pyx_k_linewidth), 0, 0, 1, 1},
  {&__pyx_n_s_linking, __pyx_k_linking, sizeof(__pyx_k_linking), 0, 0, 1, 1},
  {&__pyx_n_s_linkingcolor, __pyx_k_linkingcolor, sizeof(__pyx_k_linkingcolor), 0, 0, 1, 1},
  {&__pyx_n_s_lower, __pyx_k_lower, sizeof(__pyx_k_lower), 0, 0, 1, 1},
  {&__pyx_n_u_lowerbound, __pyx_k_lowerbound, sizeof(__pyx_k_lowerbound), 0, 1, 0, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_master, __pyx_k_master, sizeof(__pyx_k_master), 0, 0, 1, 1},
  {&__pyx_n_s_master_conss, __pyx_k_master_conss, sizeof(__pyx_k_master_conss), 0, 0, 1, 1},
  {&__pyx_n_s_mastercolor, __pyx_k_mastercolor, sizeof(__pyx_k_mastercolor), 0, 0, 1, 1},
  {&__pyx_n_s_matplotlib_colors, __pyx_k_matplotlib_colors, sizeof(__pyx_k_matplotlib_colors), 0, 0, 1, 1},
  {&__pyx_kp_u_matplotlib_is_needed, __pyx_k_matplotlib_is_needed, sizeof(__pyx_k_matplotlib_is_needed), 0, 1, 0, 0},
  {&__pyx_n_s_matplotlib_patches, __pyx_k_matplotlib_patches, sizeof(__pyx_k_matplotlib_patches), 0, 0, 1, 1},
  {&__pyx_n_s_matplotlib_pyplot, __pyx_k_matplotlib_pyplot, sizeof(__pyx_k_matplotlib_pyplot), 0, 0, 1, 1},
  {&__pyx_n_s_matrix, __pyx_k_matrix, sizeof(__pyx_k_matrix), 0, 0, 1, 1},
  {&__pyx_n_s_matrixMIPLIBConsType, __pyx_k_matrixMIPLIBConsType, sizeof(__pyx_k_matrixMIPLIBConsType), 0, 0, 1, 1},
  {&__pyx_n_s_matrixSCIPVarType, __pyx_k_matrixSCIPVarType, sizeof(__pyx_k_matrixSCIPVarType), 0, 0, 1, 1},
  {&__pyx_n_s_matrixType, __pyx_k_matrixType, sizeof(__pyx_k_matrixType), 0, 0, 1, 1},
  {&__pyx_kp_u_maxForWhiteScore, __pyx_k_maxForWhiteScore, sizeof(__pyx_k_maxForWhiteScore), 0, 1, 0, 0},
  {&__pyx_n_s_maxForWhiteScore_2, __pyx_k_maxForWhiteScore_2, sizeof(__pyx_k_maxForWhiteScore_2), 0, 0, 1, 1},
  {&__pyx_n_s_maxcallround, __pyx_k_maxcallround, sizeof(__pyx_k_maxcallround), 0, 0, 1, 1},
  {&__pyx_n_s_maxcallroundoriginal, __pyx_k_maxcallroundoriginal, sizeof(__pyx_k_maxcallroundoriginal), 0, 0, 1, 1},
  {&__pyx_n_s_mincallround, __pyx_k_mincallround, sizeof(__pyx_k_mincallround), 0, 0, 1, 1},
  {&__pyx_n_s_mincallroundoriginal, __pyx_k_mincallroundoriginal, sizeof(__pyx_k_mincallroundoriginal), 0, 0, 1, 1},
  {&__pyx_n_s_miplibConsMap, __pyx_k_miplibConsMap, sizeof(__pyx_k_miplibConsMap), 0, 0, 1, 1},
  {&__pyx_n_u_miplibconstype, __pyx_k_miplibconstype, sizeof(__pyx_k_miplibconstype), 0, 1, 0, 1},
  {&__pyx_n_s_mkdir, __pyx_k_mkdir, sizeof(__pyx_k_mkdir), 0, 0, 1, 1},
  {&__pyx_kp_u_nLinkingVars, __pyx_k_nLinkingVars, sizeof(__pyx_k_nLinkingVars), 0, 1, 0, 0},
  {&__pyx_kp_u_nMasterConss, __pyx_k_nMasterConss, sizeof(__pyx_k_nMasterConss), 0, 1, 0, 0},
  {&__pyx_kp_u_nMasterVars, __pyx_k_nMasterVars, sizeof(__pyx_k_nMasterVars), 0, 1, 0, 0},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_n_u_newpartialdecs, __pyx_k_newpartialdecs, sizeof(__pyx_k_newpartialdecs), 0, 1, 0, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_u_nonzero, __pyx_k_nonzero, sizeof(__pyx_k_nonzero), 0, 1, 0, 1},
  {&__pyx_n_u_nonzerowithvalue, __pyx_k_nonzerowithvalue, sizeof(__pyx_k_nonzerowithvalue), 0, 1, 0, 1},
  {&__pyx_n_s_norm, __pyx_k_norm, sizeof(__pyx_k_norm), 0, 0, 1, 1},
  {&__pyx_n_s_nvotes, __pyx_k_nvotes, sizeof(__pyx_k_nvotes), 0, 0, 1, 1},
  {&__pyx_n_s_obj, __pyx_k_obj, sizeof(__pyx_k_obj), 0, 0, 1, 1},
  {&__pyx_n_s_only_master, __pyx_k_only_master, sizeof(__pyx_k_only_master), 0, 0, 1, 1},
  {&__pyx_n_s_only_pricing, __pyx_k_only_pricing, sizeof(__pyx_k_only_pricing), 0, 0, 1, 1},
  {&__pyx_n_s_opencolor, __pyx_k_opencolor, sizeof(__pyx_k_opencolor), 0, 0, 1, 1},
  {&__pyx_n_s_original, __pyx_k_original, sizeof(__pyx_k_original), 0, 0, 1, 1},
  {&__pyx_n_s_otherdata, __pyx_k_otherdata, sizeof(__pyx_k_otherdata), 0, 0, 1, 1},
  {&__pyx_n_s_otherpartialdecs, __pyx_k_otherpartialdecs, sizeof(__pyx_k_otherpartialdecs), 0, 0, 1, 1},
  {&__pyx_n_s_parents, __pyx_k_parents, sizeof(__pyx_k_parents), 0, 0, 1, 1},
  {&__pyx_n_s_partialdecs, __pyx_k_partialdecs, sizeof(__pyx_k_partialdecs), 0, 0, 1, 1},
  {&__pyx_n_s_partition, __pyx_k_partition, sizeof(__pyx_k_partition), 0, 0, 1, 1},
  {&__pyx_n_s_pathlib, __pyx_k_pathlib, sizeof(__pyx_k_pathlib), 0, 0, 1, 1},
  {&__pyx_n_u_peachpuff, __pyx_k_peachpuff, sizeof(__pyx_k_peachpuff), 0, 1, 0, 1},
  {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
  {&__pyx_n_u_png, __pyx_k_png, sizeof(__pyx_k_png), 0, 1, 0, 1},
  {&__pyx_n_s_postprocessPartialdec, __pyx_k_postprocessPartialdec, sizeof(__pyx_k_postprocessPartialdec), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_presolved, __pyx_k_presolved, sizeof(__pyx_k_presolved), 0, 0, 1, 1},
  {&__pyx_n_s_pricingSolver, __pyx_k_pricingSolver, sizeof(__pyx_k_pricingSolver), 0, 0, 1, 1},
  {&__pyx_n_s_pricing_solver_name, __pyx_k_pricing_solver_name, sizeof(__pyx_k_pricing_solver_name), 0, 0, 1, 1},
  {&__pyx_n_s_pricingprob, __pyx_k_pricingprob, sizeof(__pyx_k_pricingprob), 0, 0, 1, 1},
  {&__pyx_kp_u_pricingsolver_exactenabled, __pyx_k_pricingsolver_exactenabled, sizeof(__pyx_k_pricingsolver_exactenabled), 0, 1, 0, 0},
  {&__pyx_kp_u_pricingsolver_heurenabled, __pyx_k_pricingsolver_heurenabled, sizeof(__pyx_k_pricingsolver_heurenabled), 0, 1, 0, 0},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_printVersion, __pyx_k_printVersion, sizeof(__pyx_k_printVersion), 0, 0, 1, 1},
  {&__pyx_n_s_priority, __pyx_k_priority, sizeof(__pyx_k_priority), 0, 0, 1, 1},
  {&__pyx_n_s_probnr, __pyx_k_probnr, sizeof(__pyx_k_probnr), 0, 0, 1, 1},
  {&__pyx_n_s_propagatePartialdec, __pyx_k_propagatePartialdec, sizeof(__pyx_k_propagatePartialdec), 0, 0, 1, 1},
  {&__pyx_n_s_proxy, __pyx_k_proxy, sizeof(__pyx_k_proxy), 0, 0, 1, 1},
  {&__pyx_n_s_pygcgopt_gcg, __pyx_k_pygcgopt_gcg, sizeof(__pyx_k_pygcgopt_gcg), 0, 0, 1, 1},
  {&__pyx_n_s_pygcgopt_util, __pyx_k_pygcgopt_util, sizeof(__pyx_k_pygcgopt_util), 0, 0, 1, 1},
  {&__pyx_n_s_pyscipopt_scip, __pyx_k_pyscipopt_scip, sizeof(__pyx_k_pyscipopt_scip), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_Detector, __pyx_k_pyx_unpickle_Detector, sizeof(__pyx_k_pyx_unpickle_Detector), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_PY_GCG_PRICINGSTA, __pyx_k_pyx_unpickle_PY_GCG_PRICINGSTA, sizeof(__pyx_k_pyx_unpickle_PY_GCG_PRICINGSTA), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_PricingSolver, __pyx_k_pyx_unpickle_PricingSolver, sizeof(__pyx_k_pyx_unpickle_PricingSolver), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_read_bytes, __pyx_k_read_bytes, sizeof(__pyx_k_read_bytes), 0, 0, 1, 1},
  {&__pyx_n_s_read_text, __pyx_k_read_text, sizeof(__pyx_k_read_text), 0, 0, 1, 1},
  {&__pyx_n_u_red, __pyx_k_red, sizeof(__pyx_k_red), 0, 1, 0, 1},
  {&__pyx_n_s_redcost, __pyx_k_redcost, sizeof(__pyx_k_redcost), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_repid, __pyx_k_repid, sizeof(__pyx_k_repid), 0, 0, 1, 1},
  {&__pyx_n_u_result, __pyx_k_result, sizeof(__pyx_k_result), 0, 1, 0, 1},
  {&__pyx_n_s_rotation, __pyx_k_rotation, sizeof(__pyx_k_rotation), 0, 0, 1, 1},
  {&__pyx_n_s_row, __pyx_k_row, sizeof(__pyx_k_row), 0, 0, 1, 1},
  {&__pyx_n_s_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 1},
  {&__pyx_n_s_savefig, __pyx_k_savefig, sizeof(__pyx_k_savefig), 0, 0, 1, 1},
  {&__pyx_n_s_scatter, __pyx_k_scatter, sizeof(__pyx_k_scatter), 0, 0, 1, 1},
  {&__pyx_n_s_scipVarMap, __pyx_k_scipVarMap, sizeof(__pyx_k_scipVarMap), 0, 0, 1, 1},
  {&__pyx_n_u_scipvartype, __pyx_k_scipvartype, sizeof(__pyx_k_scipvartype), 0, 1, 0, 1},
  {&__pyx_kp_s_self__scip_self__valid_cannot_be, __pyx_k_self__scip_self__valid_cannot_be, sizeof(__pyx_k_self__scip_self__valid_cannot_be), 0, 0, 1, 0},
  {&__pyx_kp_s_self_gcg_col_cannot_be_converted, __pyx_k_self_gcg_col_cannot_be_converted, sizeof(__pyx_k_self_gcg_col_cannot_be_converted), 0, 0, 1, 0},
  {&__pyx_n_s_setBoolParam, __pyx_k_setBoolParam, sizeof(__pyx_k_setBoolParam), 0, 0, 1, 1},
  {&__pyx_n_s_setParamAggressive, __pyx_k_setParamAggressive, sizeof(__pyx_k_setParamAggressive), 0, 0, 1, 1},
  {&__pyx_n_s_setParamDefault, __pyx_k_setParamDefault, sizeof(__pyx_k_setParamDefault), 0, 0, 1, 1},
  {&__pyx_n_s_setParamFast, __pyx_k_setParamFast, sizeof(__pyx_k_setParamFast), 0, 0, 1, 1},
  {&__pyx_n_s_setPricingSolverExactEnabled, __pyx_k_setPricingSolverExactEnabled, sizeof(__pyx_k_setPricingSolverExactEnabled), 0, 0, 1, 1},
  {&__pyx_n_s_setPricingSolverHeuristicEnabled, __pyx_k_setPricingSolverHeuristicEnabled, sizeof(__pyx_k_setPricingSolverHeuristicEnabled), 0, 0, 1, 1},
  {&__pyx_n_s_setUsergiven, __pyx_k_setUsergiven, sizeof(__pyx_k_setUsergiven), 0, 0, 1, 1},
  {&__pyx_n_s_set_params, __pyx_k_set_params, sizeof(__pyx_k_set_params), 0, 0, 1, 1},
  {&__pyx_n_s_set_ticklabels, __pyx_k_set_ticklabels, sizeof(__pyx_k_set_ticklabels), 0, 0, 1, 1},
  {&__pyx_n_s_set_ticks, __pyx_k_set_ticks, sizeof(__pyx_k_set_ticks), 0, 0, 1, 1},
  {&__pyx_n_s_set_title, __pyx_k_set_title, sizeof(__pyx_k_set_title), 0, 0, 1, 1},
  {&__pyx_n_s_set_xlim, __pyx_k_set_xlim, sizeof(__pyx_k_set_xlim), 0, 0, 1, 1},
  {&__pyx_n_s_set_ylabel, __pyx_k_set_ylabel, sizeof(__pyx_k_set_ylabel), 0, 0, 1, 1},
  {&__pyx_n_s_set_ylim, __pyx_k_set_ylim, sizeof(__pyx_k_set_ylim), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_show, __pyx_k_show, sizeof(__pyx_k_show), 0, 0, 1, 1},
  {&__pyx_n_s_skip, __pyx_k_skip, sizeof(__pyx_k_skip), 0, 0, 1, 1},
  {&__pyx_n_s_solve, __pyx_k_solve, sizeof(__pyx_k_solve), 0, 0, 1, 1},
  {&__pyx_n_s_solveHeuristic, __pyx_k_solveHeuristic, sizeof(__pyx_k_solveHeuristic), 0, 0, 1, 1},
  {&__pyx_n_s_solvername, __pyx_k_solvername, sizeof(__pyx_k_solvername), 0, 0, 1, 1},
  {&__pyx_n_s_sort, __pyx_k_sort, sizeof(__pyx_k_sort), 0, 0, 1, 1},
  {&__pyx_n_s_stairlinkingcolor, __pyx_k_stairlinkingcolor, sizeof(__pyx_k_stairlinkingcolor), 0, 0, 1, 1},
  {&__pyx_n_u_status, __pyx_k_status, sizeof(__pyx_k_status), 0, 1, 0, 1},
  {&__pyx_n_s_str_conversion, __pyx_k_str_conversion, sizeof(__pyx_k_str_conversion), 0, 0, 1, 1},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_s_subplots, __pyx_k_subplots, sizeof(__pyx_k_subplots), 0, 0, 1, 1},
  {&__pyx_n_s_super, __pyx_k_super, sizeof(__pyx_k_super), 0, 0, 1, 1},
  {&__pyx_n_u_svg, __pyx_k_svg, sizeof(__pyx_k_svg), 0, 1, 0, 1},
  {&__pyx_kp_u_tab_blue, __pyx_k_tab_blue, sizeof(__pyx_k_tab_blue), 0, 1, 0, 0},
  {&__pyx_kp_u_tab_brown, __pyx_k_tab_brown, sizeof(__pyx_k_tab_brown), 0, 1, 0, 0},
  {&__pyx_kp_u_tab_cyan, __pyx_k_tab_cyan, sizeof(__pyx_k_tab_cyan), 0, 1, 0, 0},
  {&__pyx_kp_u_tab_gray, __pyx_k_tab_gray, sizeof(__pyx_k_tab_gray), 0, 1, 0, 0},
  {&__pyx_kp_u_tab_green, __pyx_k_tab_green, sizeof(__pyx_k_tab_green), 0, 1, 0, 0},
  {&__pyx_kp_u_tab_olive, __pyx_k_tab_olive, sizeof(__pyx_k_tab_olive), 0, 1, 0, 0},
  {&__pyx_kp_u_tab_orange, __pyx_k_tab_orange, sizeof(__pyx_k_tab_orange), 0, 1, 0, 0},
  {&__pyx_kp_u_tab_pink, __pyx_k_tab_pink, sizeof(__pyx_k_tab_pink), 0, 1, 0, 0},
  {&__pyx_kp_u_tab_purple, __pyx_k_tab_purple, sizeof(__pyx_k_tab_purple), 0, 1, 0, 0},
  {&__pyx_kp_u_tab_red, __pyx_k_tab_red, sizeof(__pyx_k_tab_red), 0, 1, 0, 0},
  {&__pyx_n_u_tan, __pyx_k_tan, sizeof(__pyx_k_tan), 0, 1, 0, 1},
  {&__pyx_n_s_tempfile, __pyx_k_tempfile, sizeof(__pyx_k_tempfile), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_tick_top, __pyx_k_tick_top, sizeof(__pyx_k_tick_top), 0, 0, 1, 1},
  {&__pyx_n_s_title, __pyx_k_title, sizeof(__pyx_k_title), 0, 0, 1, 1},
  {&__pyx_n_s_top, __pyx_k_top, sizeof(__pyx_k_top), 0, 0, 1, 1},
  {&__pyx_n_s_typing, __pyx_k_typing, sizeof(__pyx_k_typing), 0, 0, 1, 1},
  {&__pyx_n_s_uniqueMatrixMIPLIBConsType, __pyx_k_uniqueMatrixMIPLIBConsType, sizeof(__pyx_k_uniqueMatrixMIPLIBConsType), 0, 0, 1, 1},
  {&__pyx_n_s_uniqueMatrixSCIPVarType, __pyx_k_uniqueMatrixSCIPVarType, sizeof(__pyx_k_uniqueMatrixSCIPVarType), 0, 0, 1, 1},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_s_updateSolver, __pyx_k_updateSolver, sizeof(__pyx_k_updateSolver), 0, 0, 1, 1},
  {&__pyx_n_s_usefulrecall, __pyx_k_usefulrecall, sizeof(__pyx_k_usefulrecall), 0, 0, 1, 1},
  {&__pyx_n_s_vals, __pyx_k_vals, sizeof(__pyx_k_vals), 0, 0, 1, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_s_var, __pyx_k_var, sizeof(__pyx_k_var), 0, 0, 1, 1},
  {&__pyx_n_s_varToBlock, __pyx_k_varToBlock, sizeof(__pyx_k_varToBlock), 0, 0, 1, 1},
  {&__pyx_n_s_varToStairLinking, __pyx_k_varToStairLinking, sizeof(__pyx_k_varToStairLinking), 0, 0, 1, 1},
  {&__pyx_n_s_varbndschanged, __pyx_k_varbndschanged, sizeof(__pyx_k_varbndschanged), 0, 0, 1, 1},
  {&__pyx_n_s_varclasseslinking, __pyx_k_varclasseslinking, sizeof(__pyx_k_varclasseslinking), 0, 0, 1, 1},
  {&__pyx_n_s_varclassesmaster, __pyx_k_varclassesmaster, sizeof(__pyx_k_varclassesmaster), 0, 0, 1, 1},
  {&__pyx_n_s_variables, __pyx_k_variables, sizeof(__pyx_k_variables), 0, 0, 1, 1},
  {&__pyx_n_s_varid, __pyx_k_varid, sizeof(__pyx_k_varid), 0, 0, 1, 1},
  {&__pyx_n_s_varindex, __pyx_k_varindex, sizeof(__pyx_k_varindex), 0, 0, 1, 1},
  {&__pyx_n_s_varname, __pyx_k_varname, sizeof(__pyx_k_varname), 0, 0, 1, 1},
  {&__pyx_n_s_varobjschanged, __pyx_k_varobjschanged, sizeof(__pyx_k_varobjschanged), 0, 0, 1, 1},
  {&__pyx_n_u_vis, __pyx_k_vis, sizeof(__pyx_k_vis), 0, 1, 0, 1},
  {&__pyx_kp_u_vis_gp, __pyx_k_vis_gp, sizeof(__pyx_k_vis_gp), 0, 1, 0, 0},
  {&__pyx_n_s_weakref, __pyx_k_weakref, sizeof(__pyx_k_weakref), 0, 0, 1, 1},
  {&__pyx_n_s_with_suffix, __pyx_k_with_suffix, sizeof(__pyx_k_with_suffix), 0, 0, 1, 1},
  {&__pyx_n_s_workonpartialdec, __pyx_k_workonpartialdec, sizeof(__pyx_k_workonpartialdec), 0, 0, 1, 1},
  {&__pyx_n_s_xaxis, __pyx_k_xaxis, sizeof(__pyx_k_xaxis), 0, 0, 1, 1},
  {&__pyx_n_s_xmax, __pyx_k_xmax, sizeof(__pyx_k_xmax), 0, 0, 1, 1},
  {&__pyx_n_s_xmin, __pyx_k_xmin, sizeof(__pyx_k_xmin), 0, 0, 1, 1},
  {&__pyx_n_s_yaxis, __pyx_k_yaxis, sizeof(__pyx_k_yaxis), 0, 0, 1, 1},
  {&__pyx_n_s_zorder, __pyx_k_zorder, sizeof(__pyx_k_zorder), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 58, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 66, __pyx_L1_error)
  __pyx_builtin_Warning = __Pyx_GetBuiltinName(__pyx_n_s_Warning); if (!__pyx_builtin_Warning) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_builtin_NotImplementedError = __Pyx_GetBuiltinName(__pyx_n_s_NotImplementedError); if (!__pyx_builtin_NotImplementedError) __PYX_ERR(2, 349, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(2, 2128, __pyx_L1_error)
  __pyx_builtin_print = __Pyx_GetBuiltinName(__pyx_n_s_print); if (!__pyx_builtin_print) __PYX_ERR(2, 2129, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(2, 2140, __pyx_L1_error)
  __pyx_builtin_super = __Pyx_GetBuiltinName(__pyx_n_s_super); if (!__pyx_builtin_super) __PYX_ERR(3, 64, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(3, 139, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "src/pygcgopt/pricing_solver.pxi":81
 *     py_pricingprob = GCGPricingModel.create(pricingprob)
 *     result_dict = py_pricing_solver.solve(py_pricingprob, probnr, dualsolconv)
 *     lowerbound[0] = result_dict.get("lowerbound", 0)             # <<<<<<<<<<<<<<
 *     status[0] = result_dict.get("status", <GCG_PRICINGSTATUS>status[0])
 *     return SCIP_OKAY
 */
  __pyx_tuple_ = PyTuple_Pack(2, __pyx_n_u_lowerbound, __pyx_int_0); if (unlikely(!__pyx_tuple_)) __PYX_ERR(5, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "src/pygcgopt/partition.pxi":17
 *     cdef create(ConsPartition* thisptr, DetProbData detProbData):
 *         if thisptr == NULL:
 *             raise Warning("cannot create ConsPart with ConsPartition* == NULL")             # <<<<<<<<<<<<<<
 *         new_ConsPart = ConsPart()
 *         new_ConsPart.thisptr = thisptr
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_u_cannot_create_ConsPart_with_Cons); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(4, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(4, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "src/pygcgopt/partition.pxi":130
 *     cdef create(VarPartition* thisptr):
 *         if thisptr == NULL:
 *             raise Warning("cannot create VarPart with VarPartition* == NULL")             # <<<<<<<<<<<<<<
 *         new_VarPart = VarPart()
 *         new_VarPart.thisptr = thisptr
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_u_cannot_create_VarPart_with_VarPa); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(1, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(4, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(4, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "src/pygcgopt/decomposition.pxi":27
 *     cdef create(PARTIALDECOMP* thisptr):
 *         if thisptr == NULL:
 *             raise Warning("cannot create PartialDecomposition with PARTIALDECOMP* == NULL")             # <<<<<<<<<<<<<<
 *         new_PartialDecomposition = PartialDecomposition()
 *         new_PartialDecomposition.thisptr = thisptr
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_u_cannot_create_PartialDecompositi); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(2, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "src/pygcgopt/decomposition.pxi":1987
 *             return "NONE"
 * 
 *     def visualize(PartialDecomposition self, fname=None, figsize=(12, 8), dpi=None, title=None, matrixType="nonzero", obj=False, bcoef=False, dots=True, boxes=True, s=1, alpha=1, cmap=None, norm=None, linkingcolor="#FFB72D", mastercolor="#1340C7", blockcolor="#718CDB", stairlinkingcolor="#886100", opencolor="#FFD88F", linecolor="#000000", linewidth=0.8):             # <<<<<<<<<<<<<<
 *         try:
 *             import matplotlib.pyplot as plt
 */
  __pyx_tuple__11 = PyTuple_Pack(2, __pyx_int_12, __pyx_int_8); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(2, 1987, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "src/pygcgopt/decomposition.pxi":2015
 * 
 *                 if self.getNLinkingvars()!=0:
 *                     lvars = patches.Rectangle((0,0), self.getNLinkingvars(), self.getNConss(), linewidth=linewidth, alpha=alpha, facecolor=linkingcolor, zorder=0, edgecolor=linecolor)             # <<<<<<<<<<<<<<
 *                     ax.add_patch(lvars)
 *                     colboxcounter+=self.getNLinkingvars()
 */
  __pyx_tuple__13 = PyTuple_Pack(2, __pyx_int_0, __pyx_int_0); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(2, 2015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "src/pygcgopt/decomposition.pxi":2064
 *                             scatter=ax.scatter([y+0.5 for y in Y], [x+0.5 for x in X], c=vals, cmap=cmap, norm=norm, s=s, alpha=1, zorder=zorderForBoxes)
 *                     cbar = fig.colorbar(scatter)
 *                     cbar.ax.set_ylabel("coefficients", rotation=90)             # <<<<<<<<<<<<<<
 *                 elif matrixType == "miplibconstype":
 *                     if cmap == None:
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_n_u_coefficients); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(2, 2064, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "src/pygcgopt/decomposition.pxi":2078
 *                         cbar.set_ticks([(boundaries[i]+boundaries[i+1])/(2) for i in range(len(boundaries)) if i != len(boundaries)-1])
 *                         cbar.set_ticklabels([self.miplibConsMap(i) for i in uniqueMatrixMIPLIBConsTypeList])
 *                         cbar.ax.set_ylabel("MIPLIB constypes", rotation=90)             # <<<<<<<<<<<<<<
 *                     else:
 *                         if norm == None:
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_u_MIPLIB_constypes); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(2, 2078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "src/pygcgopt/decomposition.pxi":2098
 *                         cbar.set_ticks([(boundaries[i]+boundaries[i+1])/(2) for i in range(len(boundaries)) if i != len(boundaries)-1])
 *                         cbar.set_ticklabels([self.scipVarMap(i) for i in uniqueMatrixSCIPVarTypeList])
 *                         cbar.ax.set_ylabel("SCIP vartypes", rotation=90)             # <<<<<<<<<<<<<<
 *                     else:
 *                         if norm == None:
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_u_SCIP_vartypes); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(2, 2098, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "src/pygcgopt/decomposition.pxi":2129
 * 
 *         except ImportError:
 *             print("matplotlib is needed")             # <<<<<<<<<<<<<<
 * 
 *     def _repr_svg_(self):
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_u_matplotlib_is_needed); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(2, 2129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "src/pygcgopt/decomposition.pxi":2143
 * 
 *         if format not in self._visualizations:
 *             with tempfile.TemporaryDirectory() as td:             # <<<<<<<<<<<<<<
 *                 temp_path = Path(td)
 * 
 */
  __pyx_tuple__19 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(2, 2143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(4, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(4, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "src/pygcgopt/detprobdata.pxi":21
 *     cdef create(DETPROBDATA* thisptr):
 *         if thisptr == NULL:
 *             raise Warning("cannot create DetProbData with DETPROBDATA* == NULL")             # <<<<<<<<<<<<<<
 *         new_DetProbData = DetProbData()
 *         new_DetProbData.thisptr = thisptr
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_u_cannot_create_DetProbData_with_D); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(6, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(4, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(4, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "pygcgopt/gcg.pyx":248
 *         """
 *         if len(decchar) != 1:
 *             raise ValueError("Length of value for 'decchar' must be 1")             # <<<<<<<<<<<<<<
 * 
 *         c_detectorname = str_conversion(detectorname)
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_kp_u_Length_of_value_for_decchar_must); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(3, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._scip,self._valid cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._scip,self._valid cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_kp_s_self__scip_self__valid_cannot_be); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(4, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "(tree fragment)":4
 *     raise TypeError("self._scip,self._valid cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._scip,self._valid cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_s_self__scip_self__valid_cannot_be); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(4, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "pygcgopt/gcg.pyx":357
 *         """
 *         if scip == NULL:
 *             raise Warning("cannot create Model with SCIP* == NULL")             # <<<<<<<<<<<<<<
 *         model = GCGPricingModel(createscip=False)
 *         model._scip = scip
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_kp_u_cannot_create_Model_with_SCIP_NU); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(3, 357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._scip,self._valid cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._scip,self._valid cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_kp_s_self__scip_self__valid_cannot_be); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(4, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "(tree fragment)":4
 *     raise TypeError("self._scip,self._valid cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._scip,self._valid cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_kp_s_self__scip_self__valid_cannot_be); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(4, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._scip,self._valid cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._scip,self._valid cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_kp_s_self__scip_self__valid_cannot_be); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(4, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "(tree fragment)":4
 *     raise TypeError("self._scip,self._valid cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._scip,self._valid cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_kp_s_self__scip_self__valid_cannot_be); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(4, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "pygcgopt/gcg.pyx":413
 *     cdef create(GCG_COL* gcgcol):
 *         if gcgcol == NULL:
 *             raise Warning("cannot create Column with GCG_COL* == NULL")             # <<<<<<<<<<<<<<
 *         col = GCGColumn()
 *         col.gcg_col = gcgcol
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_kp_u_cannot_create_Column_with_GCG_CO); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(3, 413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.gcg_col cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.gcg_col cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__36 = PyTuple_Pack(1, __pyx_kp_s_self_gcg_col_cannot_be_converted); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(4, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "(tree fragment)":4
 *     raise TypeError("self.gcg_col cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.gcg_col cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__37 = PyTuple_Pack(1, __pyx_kp_s_self_gcg_col_cannot_be_converted); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(4, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);

  /* "(tree fragment)":1
 * def __pyx_unpickle_Detector(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_tuple__38 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(4, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);
  __pyx_codeobj__39 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__38, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Detector, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__39)) __PYX_ERR(4, 1, __pyx_L1_error)
  __pyx_tuple__40 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(4, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);
  __pyx_codeobj__41 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__40, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_PricingSolver, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__41)) __PYX_ERR(4, 1, __pyx_L1_error)
  __pyx_tuple__42 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(4, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);
  __pyx_codeobj__43 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__42, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_PY_GCG_PRICINGSTA, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__43)) __PYX_ERR(4, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(3, 1, __pyx_L1_error);
  __pyx_float_0_5 = PyFloat_FromDouble(0.5); if (unlikely(!__pyx_float_0_5)) __PYX_ERR(3, 1, __pyx_L1_error)
  __pyx_float_0_8 = PyFloat_FromDouble(0.8); if (unlikely(!__pyx_float_0_8)) __PYX_ERR(3, 1, __pyx_L1_error)
  __pyx_float_neg_1_5 = PyFloat_FromDouble(-1.5); if (unlikely(!__pyx_float_neg_1_5)) __PYX_ERR(3, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(3, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(3, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(3, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(3, 1, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(3, 1, __pyx_L1_error)
  __pyx_int_5 = PyInt_FromLong(5); if (unlikely(!__pyx_int_5)) __PYX_ERR(3, 1, __pyx_L1_error)
  __pyx_int_6 = PyInt_FromLong(6); if (unlikely(!__pyx_int_6)) __PYX_ERR(3, 1, __pyx_L1_error)
  __pyx_int_7 = PyInt_FromLong(7); if (unlikely(!__pyx_int_7)) __PYX_ERR(3, 1, __pyx_L1_error)
  __pyx_int_8 = PyInt_FromLong(8); if (unlikely(!__pyx_int_8)) __PYX_ERR(3, 1, __pyx_L1_error)
  __pyx_int_9 = PyInt_FromLong(9); if (unlikely(!__pyx_int_9)) __PYX_ERR(3, 1, __pyx_L1_error)
  __pyx_int_10 = PyInt_FromLong(10); if (unlikely(!__pyx_int_10)) __PYX_ERR(3, 1, __pyx_L1_error)
  __pyx_int_11 = PyInt_FromLong(11); if (unlikely(!__pyx_int_11)) __PYX_ERR(3, 1, __pyx_L1_error)
  __pyx_int_12 = PyInt_FromLong(12); if (unlikely(!__pyx_int_12)) __PYX_ERR(3, 1, __pyx_L1_error)
  __pyx_int_13 = PyInt_FromLong(13); if (unlikely(!__pyx_int_13)) __PYX_ERR(3, 1, __pyx_L1_error)
  __pyx_int_14 = PyInt_FromLong(14); if (unlikely(!__pyx_int_14)) __PYX_ERR(3, 1, __pyx_L1_error)
  __pyx_int_15 = PyInt_FromLong(15); if (unlikely(!__pyx_int_15)) __PYX_ERR(3, 1, __pyx_L1_error)
  __pyx_int_90 = PyInt_FromLong(90); if (unlikely(!__pyx_int_90)) __PYX_ERR(3, 1, __pyx_L1_error)
  __pyx_int_128380825 = PyInt_FromLong(128380825L); if (unlikely(!__pyx_int_128380825)) __PYX_ERR(3, 1, __pyx_L1_error)
  __pyx_int_222419149 = PyInt_FromLong(222419149L); if (unlikely(!__pyx_int_222419149)) __PYX_ERR(3, 1, __pyx_L1_error)
  __pyx_int_260020090 = PyInt_FromLong(260020090L); if (unlikely(!__pyx_int_260020090)) __PYX_ERR(3, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(3, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_8pygcgopt_3gcg_GCGColumn = &__pyx_vtable_8pygcgopt_3gcg_GCGColumn;
  __pyx_vtable_8pygcgopt_3gcg_GCGColumn.create = (PyObject *(*)(GCG_COL *))__pyx_f_8pygcgopt_3gcg_9GCGColumn_create;
  if (PyType_Ready(&__pyx_type_8pygcgopt_3gcg_GCGColumn) < 0) __PYX_ERR(3, 407, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygcgopt_3gcg_GCGColumn.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygcgopt_3gcg_GCGColumn.tp_dictoffset && __pyx_type_8pygcgopt_3gcg_GCGColumn.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygcgopt_3gcg_GCGColumn.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_8pygcgopt_3gcg_GCGColumn.tp_dict, __pyx_vtabptr_8pygcgopt_3gcg_GCGColumn) < 0) __PYX_ERR(3, 407, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_GCGColumn, (PyObject *)&__pyx_type_8pygcgopt_3gcg_GCGColumn) < 0) __PYX_ERR(3, 407, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygcgopt_3gcg_GCGColumn) < 0) __PYX_ERR(3, 407, __pyx_L1_error)
  __pyx_ptype_8pygcgopt_3gcg_GCGColumn = &__pyx_type_8pygcgopt_3gcg_GCGColumn;
  if (PyType_Ready(&__pyx_type_8pygcgopt_3gcg_Detector) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygcgopt_3gcg_Detector.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygcgopt_3gcg_Detector.tp_dictoffset && __pyx_type_8pygcgopt_3gcg_Detector.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygcgopt_3gcg_Detector.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Detector, (PyObject *)&__pyx_type_8pygcgopt_3gcg_Detector) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygcgopt_3gcg_Detector) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_ptype_8pygcgopt_3gcg_Detector = &__pyx_type_8pygcgopt_3gcg_Detector;
  if (PyType_Ready(&__pyx_type_8pygcgopt_3gcg_PricingSolver) < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygcgopt_3gcg_PricingSolver.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygcgopt_3gcg_PricingSolver.tp_dictoffset && __pyx_type_8pygcgopt_3gcg_PricingSolver.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygcgopt_3gcg_PricingSolver.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PricingSolver, (PyObject *)&__pyx_type_8pygcgopt_3gcg_PricingSolver) < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygcgopt_3gcg_PricingSolver) < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  __pyx_ptype_8pygcgopt_3gcg_PricingSolver = &__pyx_type_8pygcgopt_3gcg_PricingSolver;
  __pyx_vtabptr_8pygcgopt_3gcg_ConsPart = &__pyx_vtable_8pygcgopt_3gcg_ConsPart;
  __pyx_vtable_8pygcgopt_3gcg_ConsPart.create = (PyObject *(*)(gcg::ConsPartition *, struct __pyx_obj_8pygcgopt_3gcg_DetProbData *))__pyx_f_8pygcgopt_3gcg_8ConsPart_create;
  if (PyType_Ready(&__pyx_type_8pygcgopt_3gcg_ConsPart) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygcgopt_3gcg_ConsPart.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygcgopt_3gcg_ConsPart.tp_dictoffset && __pyx_type_8pygcgopt_3gcg_ConsPart.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygcgopt_3gcg_ConsPart.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_8pygcgopt_3gcg_ConsPart.tp_dict, __pyx_vtabptr_8pygcgopt_3gcg_ConsPart) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ConsPart, (PyObject *)&__pyx_type_8pygcgopt_3gcg_ConsPart) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygcgopt_3gcg_ConsPart) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_ptype_8pygcgopt_3gcg_ConsPart = &__pyx_type_8pygcgopt_3gcg_ConsPart;
  __pyx_vtabptr_8pygcgopt_3gcg_VarPart = &__pyx_vtable_8pygcgopt_3gcg_VarPart;
  __pyx_vtable_8pygcgopt_3gcg_VarPart.create = (PyObject *(*)(gcg::VarPartition *))__pyx_f_8pygcgopt_3gcg_7VarPart_create;
  if (PyType_Ready(&__pyx_type_8pygcgopt_3gcg_VarPart) < 0) __PYX_ERR(1, 115, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygcgopt_3gcg_VarPart.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygcgopt_3gcg_VarPart.tp_dictoffset && __pyx_type_8pygcgopt_3gcg_VarPart.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygcgopt_3gcg_VarPart.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_8pygcgopt_3gcg_VarPart.tp_dict, __pyx_vtabptr_8pygcgopt_3gcg_VarPart) < 0) __PYX_ERR(1, 115, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_VarPart, (PyObject *)&__pyx_type_8pygcgopt_3gcg_VarPart) < 0) __PYX_ERR(1, 115, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygcgopt_3gcg_VarPart) < 0) __PYX_ERR(1, 115, __pyx_L1_error)
  __pyx_ptype_8pygcgopt_3gcg_VarPart = &__pyx_type_8pygcgopt_3gcg_VarPart;
  __pyx_vtabptr_8pygcgopt_3gcg_PartialDecomposition = &__pyx_vtable_8pygcgopt_3gcg_PartialDecomposition;
  __pyx_vtable_8pygcgopt_3gcg_PartialDecomposition.create = (PyObject *(*)(gcg::PARTIALDECOMP *))__pyx_f_8pygcgopt_3gcg_20PartialDecomposition_create;
  __pyx_vtable_8pygcgopt_3gcg_PartialDecomposition.__pyx___generate_visualization = (PyObject *(*)(struct __pyx_obj_8pygcgopt_3gcg_PartialDecomposition *, struct __pyx_opt_args_8pygcgopt_3gcg_20PartialDecomposition___generate_visualization *__pyx_optional_args))__pyx_f_8pygcgopt_3gcg_20PartialDecomposition___generate_visualization;
  if (PyType_Ready(&__pyx_type_8pygcgopt_3gcg_PartialDecomposition) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygcgopt_3gcg_PartialDecomposition.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygcgopt_3gcg_PartialDecomposition.tp_dictoffset && __pyx_type_8pygcgopt_3gcg_PartialDecomposition.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygcgopt_3gcg_PartialDecomposition.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_8pygcgopt_3gcg_PartialDecomposition.tp_dict, __pyx_vtabptr_8pygcgopt_3gcg_PartialDecomposition) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PartialDecomposition, (PyObject *)&__pyx_type_8pygcgopt_3gcg_PartialDecomposition) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygcgopt_3gcg_PartialDecomposition) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  __pyx_ptype_8pygcgopt_3gcg_PartialDecomposition = &__pyx_type_8pygcgopt_3gcg_PartialDecomposition;
  __pyx_vtabptr_8pygcgopt_3gcg_DetProbData = &__pyx_vtable_8pygcgopt_3gcg_DetProbData;
  __pyx_vtable_8pygcgopt_3gcg_DetProbData.create = (PyObject *(*)(gcg::DETPROBDATA *))__pyx_f_8pygcgopt_3gcg_11DetProbData_create;
  if (PyType_Ready(&__pyx_type_8pygcgopt_3gcg_DetProbData) < 0) __PYX_ERR(6, 1, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygcgopt_3gcg_DetProbData.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygcgopt_3gcg_DetProbData.tp_dictoffset && __pyx_type_8pygcgopt_3gcg_DetProbData.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygcgopt_3gcg_DetProbData.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_8pygcgopt_3gcg_DetProbData.tp_dict, __pyx_vtabptr_8pygcgopt_3gcg_DetProbData) < 0) __PYX_ERR(6, 1, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_DetProbData, (PyObject *)&__pyx_type_8pygcgopt_3gcg_DetProbData) < 0) __PYX_ERR(6, 1, __pyx_L1_error)
  if (__pyx_type_8pygcgopt_3gcg_DetProbData.tp_weaklistoffset == 0) __pyx_type_8pygcgopt_3gcg_DetProbData.tp_weaklistoffset = offsetof(struct __pyx_obj_8pygcgopt_3gcg_DetProbData, __weakref__);
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygcgopt_3gcg_DetProbData) < 0) __PYX_ERR(6, 1, __pyx_L1_error)
  __pyx_ptype_8pygcgopt_3gcg_DetProbData = &__pyx_type_8pygcgopt_3gcg_DetProbData;
  if (PyType_Ready(&__pyx_type_8pygcgopt_3gcg_PY_GCG_PRICINGSTATUS) < 0) __PYX_ERR(3, 44, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygcgopt_3gcg_PY_GCG_PRICINGSTATUS.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygcgopt_3gcg_PY_GCG_PRICINGSTATUS.tp_dictoffset && __pyx_type_8pygcgopt_3gcg_PY_GCG_PRICINGSTATUS.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygcgopt_3gcg_PY_GCG_PRICINGSTATUS.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PY_GCG_PRICINGSTATUS, (PyObject *)&__pyx_type_8pygcgopt_3gcg_PY_GCG_PRICINGSTATUS) < 0) __PYX_ERR(3, 44, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygcgopt_3gcg_PY_GCG_PRICINGSTATUS) < 0) __PYX_ERR(3, 44, __pyx_L1_error)
  __pyx_ptype_8pygcgopt_3gcg_PY_GCG_PRICINGSTATUS = &__pyx_type_8pygcgopt_3gcg_PY_GCG_PRICINGSTATUS;
  __pyx_t_1 = PyImport_ImportModule("pyscipopt.scip"); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_9pyscipopt_4scip_Model = __Pyx_ImportType(__pyx_t_1, "pyscipopt.scip", "Model", sizeof(struct __pyx_obj_9pyscipopt_4scip_Model), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pyscipopt_4scip_Model) __PYX_ERR(3, 1, __pyx_L1_error)
  __pyx_vtabptr_9pyscipopt_4scip_Model = (struct __pyx_vtabstruct_9pyscipopt_4scip_Model*)__Pyx_GetVtable(__pyx_ptype_9pyscipopt_4scip_Model->tp_dict); if (unlikely(!__pyx_vtabptr_9pyscipopt_4scip_Model)) __PYX_ERR(3, 1, __pyx_L1_error)
  __pyx_vtabptr_8pygcgopt_3gcg_GCGModel = &__pyx_vtable_8pygcgopt_3gcg_GCGModel;
  __pyx_vtable_8pygcgopt_3gcg_GCGModel.__pyx_base = *__pyx_vtabptr_9pyscipopt_4scip_Model;
  __pyx_type_8pygcgopt_3gcg_GCGModel.tp_base = __pyx_ptype_9pyscipopt_4scip_Model;
  if (PyType_Ready(&__pyx_type_8pygcgopt_3gcg_GCGModel) < 0) __PYX_ERR(3, 53, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygcgopt_3gcg_GCGModel.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygcgopt_3gcg_GCGModel.tp_dictoffset && __pyx_type_8pygcgopt_3gcg_GCGModel.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygcgopt_3gcg_GCGModel.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_8pygcgopt_3gcg_GCGModel.tp_dict, __pyx_vtabptr_8pygcgopt_3gcg_GCGModel) < 0) __PYX_ERR(3, 53, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_GCGModel, (PyObject *)&__pyx_type_8pygcgopt_3gcg_GCGModel) < 0) __PYX_ERR(3, 53, __pyx_L1_error)
  if (__pyx_type_8pygcgopt_3gcg_GCGModel.tp_weaklistoffset == 0) __pyx_type_8pygcgopt_3gcg_GCGModel.tp_weaklistoffset = offsetof(struct __pyx_obj_8pygcgopt_3gcg_GCGModel, __pyx_base.__weakref__);
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygcgopt_3gcg_GCGModel) < 0) __PYX_ERR(3, 53, __pyx_L1_error)
  __pyx_ptype_8pygcgopt_3gcg_GCGModel = &__pyx_type_8pygcgopt_3gcg_GCGModel;
  __pyx_vtabptr_8pygcgopt_3gcg_GCGPricingModel = &__pyx_vtable_8pygcgopt_3gcg_GCGPricingModel;
  __pyx_vtable_8pygcgopt_3gcg_GCGPricingModel.__pyx_base = *__pyx_vtabptr_9pyscipopt_4scip_Model;
  __pyx_vtable_8pygcgopt_3gcg_GCGPricingModel.__pyx_base.create = (PyObject *(*)(SCIP *))__pyx_f_8pygcgopt_3gcg_15GCGPricingModel_create;
  __pyx_type_8pygcgopt_3gcg_GCGPricingModel.tp_base = __pyx_ptype_9pyscipopt_4scip_Model;
  if (PyType_Ready(&__pyx_type_8pygcgopt_3gcg_GCGPricingModel) < 0) __PYX_ERR(3, 351, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygcgopt_3gcg_GCGPricingModel.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygcgopt_3gcg_GCGPricingModel.tp_dictoffset && __pyx_type_8pygcgopt_3gcg_GCGPricingModel.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygcgopt_3gcg_GCGPricingModel.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_8pygcgopt_3gcg_GCGPricingModel.tp_dict, __pyx_vtabptr_8pygcgopt_3gcg_GCGPricingModel) < 0) __PYX_ERR(3, 351, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_GCGPricingModel, (PyObject *)&__pyx_type_8pygcgopt_3gcg_GCGPricingModel) < 0) __PYX_ERR(3, 351, __pyx_L1_error)
  if (__pyx_type_8pygcgopt_3gcg_GCGPricingModel.tp_weaklistoffset == 0) __pyx_type_8pygcgopt_3gcg_GCGPricingModel.tp_weaklistoffset = offsetof(struct __pyx_obj_8pygcgopt_3gcg_GCGPricingModel, __pyx_base.__weakref__);
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygcgopt_3gcg_GCGPricingModel) < 0) __PYX_ERR(3, 351, __pyx_L1_error)
  __pyx_ptype_8pygcgopt_3gcg_GCGPricingModel = &__pyx_type_8pygcgopt_3gcg_GCGPricingModel;
  __pyx_vtabptr_8pygcgopt_3gcg_GCGMasterModel = &__pyx_vtable_8pygcgopt_3gcg_GCGMasterModel;
  __pyx_vtable_8pygcgopt_3gcg_GCGMasterModel.__pyx_base = *__pyx_vtabptr_9pyscipopt_4scip_Model;
  __pyx_vtable_8pygcgopt_3gcg_GCGMasterModel.__pyx_base.create = (PyObject *(*)(SCIP *))__pyx_f_8pygcgopt_3gcg_14GCGMasterModel_create;
  __pyx_type_8pygcgopt_3gcg_GCGMasterModel.tp_base = __pyx_ptype_9pyscipopt_4scip_Model;
  if (PyType_Ready(&__pyx_type_8pygcgopt_3gcg_GCGMasterModel) < 0) __PYX_ERR(3, 391, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygcgopt_3gcg_GCGMasterModel.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygcgopt_3gcg_GCGMasterModel.tp_dictoffset && __pyx_type_8pygcgopt_3gcg_GCGMasterModel.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygcgopt_3gcg_GCGMasterModel.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_8pygcgopt_3gcg_GCGMasterModel.tp_dict, __pyx_vtabptr_8pygcgopt_3gcg_GCGMasterModel) < 0) __PYX_ERR(3, 391, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_GCGMasterModel, (PyObject *)&__pyx_type_8pygcgopt_3gcg_GCGMasterModel) < 0) __PYX_ERR(3, 391, __pyx_L1_error)
  if (__pyx_type_8pygcgopt_3gcg_GCGMasterModel.tp_weaklistoffset == 0) __pyx_type_8pygcgopt_3gcg_GCGMasterModel.tp_weaklistoffset = offsetof(struct __pyx_obj_8pygcgopt_3gcg_GCGMasterModel, __pyx_base.__weakref__);
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygcgopt_3gcg_GCGMasterModel) < 0) __PYX_ERR(3, 391, __pyx_L1_error)
  __pyx_ptype_8pygcgopt_3gcg_GCGMasterModel = &__pyx_type_8pygcgopt_3gcg_GCGMasterModel;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule("pyscipopt.scip"); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 1734, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_9pyscipopt_4scip_Expr = __Pyx_ImportType(__pyx_t_1, "pyscipopt.scip", "Expr", sizeof(struct __pyx_obj_9pyscipopt_4scip_Expr), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pyscipopt_4scip_Expr) __PYX_ERR(7, 1734, __pyx_L1_error)
  __pyx_ptype_9pyscipopt_4scip_Event = __Pyx_ImportType(__pyx_t_1, "pyscipopt.scip", "Event", sizeof(struct __pyx_obj_9pyscipopt_4scip_Event), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pyscipopt_4scip_Event) __PYX_ERR(7, 1737, __pyx_L1_error)
  __pyx_vtabptr_9pyscipopt_4scip_Event = (struct __pyx_vtabstruct_9pyscipopt_4scip_Event*)__Pyx_GetVtable(__pyx_ptype_9pyscipopt_4scip_Event->tp_dict); if (unlikely(!__pyx_vtabptr_9pyscipopt_4scip_Event)) __PYX_ERR(7, 1737, __pyx_L1_error)
  __pyx_ptype_9pyscipopt_4scip_Column = __Pyx_ImportType(__pyx_t_1, "pyscipopt.scip", "Column", sizeof(struct __pyx_obj_9pyscipopt_4scip_Column), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pyscipopt_4scip_Column) __PYX_ERR(7, 1744, __pyx_L1_error)
  __pyx_vtabptr_9pyscipopt_4scip_Column = (struct __pyx_vtabstruct_9pyscipopt_4scip_Column*)__Pyx_GetVtable(__pyx_ptype_9pyscipopt_4scip_Column->tp_dict); if (unlikely(!__pyx_vtabptr_9pyscipopt_4scip_Column)) __PYX_ERR(7, 1744, __pyx_L1_error)
  __pyx_ptype_9pyscipopt_4scip_Row = __Pyx_ImportType(__pyx_t_1, "pyscipopt.scip", "Row", sizeof(struct __pyx_obj_9pyscipopt_4scip_Row), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pyscipopt_4scip_Row) __PYX_ERR(7, 1752, __pyx_L1_error)
  __pyx_vtabptr_9pyscipopt_4scip_Row = (struct __pyx_vtabstruct_9pyscipopt_4scip_Row*)__Pyx_GetVtable(__pyx_ptype_9pyscipopt_4scip_Row->tp_dict); if (unlikely(!__pyx_vtabptr_9pyscipopt_4scip_Row)) __PYX_ERR(7, 1752, __pyx_L1_error)
  __pyx_ptype_9pyscipopt_4scip_NLRow = __Pyx_ImportType(__pyx_t_1, "pyscipopt.scip", "NLRow", sizeof(struct __pyx_obj_9pyscipopt_4scip_NLRow), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pyscipopt_4scip_NLRow) __PYX_ERR(7, 1760, __pyx_L1_error)
  __pyx_vtabptr_9pyscipopt_4scip_NLRow = (struct __pyx_vtabstruct_9pyscipopt_4scip_NLRow*)__Pyx_GetVtable(__pyx_ptype_9pyscipopt_4scip_NLRow->tp_dict); if (unlikely(!__pyx_vtabptr_9pyscipopt_4scip_NLRow)) __PYX_ERR(7, 1760, __pyx_L1_error)
  __pyx_ptype_9pyscipopt_4scip_Solution = __Pyx_ImportType(__pyx_t_1, "pyscipopt.scip", "Solution", sizeof(struct __pyx_obj_9pyscipopt_4scip_Solution), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pyscipopt_4scip_Solution) __PYX_ERR(7, 1768, __pyx_L1_error)
  __pyx_vtabptr_9pyscipopt_4scip_Solution = (struct __pyx_vtabstruct_9pyscipopt_4scip_Solution*)__Pyx_GetVtable(__pyx_ptype_9pyscipopt_4scip_Solution->tp_dict); if (unlikely(!__pyx_vtabptr_9pyscipopt_4scip_Solution)) __PYX_ERR(7, 1768, __pyx_L1_error)
  __pyx_ptype_9pyscipopt_4scip_DomainChanges = __Pyx_ImportType(__pyx_t_1, "pyscipopt.scip", "DomainChanges", sizeof(struct __pyx_obj_9pyscipopt_4scip_DomainChanges), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pyscipopt_4scip_DomainChanges) __PYX_ERR(7, 1777, __pyx_L1_error)
  __pyx_vtabptr_9pyscipopt_4scip_DomainChanges = (struct __pyx_vtabstruct_9pyscipopt_4scip_DomainChanges*)__Pyx_GetVtable(__pyx_ptype_9pyscipopt_4scip_DomainChanges->tp_dict); if (unlikely(!__pyx_vtabptr_9pyscipopt_4scip_DomainChanges)) __PYX_ERR(7, 1777, __pyx_L1_error)
  __pyx_ptype_9pyscipopt_4scip_BoundChange = __Pyx_ImportType(__pyx_t_1, "pyscipopt.scip", "BoundChange", sizeof(struct __pyx_obj_9pyscipopt_4scip_BoundChange), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pyscipopt_4scip_BoundChange) __PYX_ERR(7, 1783, __pyx_L1_error)
  __pyx_vtabptr_9pyscipopt_4scip_BoundChange = (struct __pyx_vtabstruct_9pyscipopt_4scip_BoundChange*)__Pyx_GetVtable(__pyx_ptype_9pyscipopt_4scip_BoundChange->tp_dict); if (unlikely(!__pyx_vtabptr_9pyscipopt_4scip_BoundChange)) __PYX_ERR(7, 1783, __pyx_L1_error)
  __pyx_ptype_9pyscipopt_4scip_Node = __Pyx_ImportType(__pyx_t_1, "pyscipopt.scip", "Node", sizeof(struct __pyx_obj_9pyscipopt_4scip_Node), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pyscipopt_4scip_Node) __PYX_ERR(7, 1789, __pyx_L1_error)
  __pyx_vtabptr_9pyscipopt_4scip_Node = (struct __pyx_vtabstruct_9pyscipopt_4scip_Node*)__Pyx_GetVtable(__pyx_ptype_9pyscipopt_4scip_Node->tp_dict); if (unlikely(!__pyx_vtabptr_9pyscipopt_4scip_Node)) __PYX_ERR(7, 1789, __pyx_L1_error)
  __pyx_ptype_9pyscipopt_4scip_Variable = __Pyx_ImportType(__pyx_t_1, "pyscipopt.scip", "Variable", sizeof(struct __pyx_obj_9pyscipopt_4scip_Variable), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pyscipopt_4scip_Variable) __PYX_ERR(7, 1797, __pyx_L1_error)
  __pyx_vtabptr_9pyscipopt_4scip_Variable = (struct __pyx_vtabstruct_9pyscipopt_4scip_Variable*)__Pyx_GetVtable(__pyx_ptype_9pyscipopt_4scip_Variable->tp_dict); if (unlikely(!__pyx_vtabptr_9pyscipopt_4scip_Variable)) __PYX_ERR(7, 1797, __pyx_L1_error)
  __pyx_ptype_9pyscipopt_4scip_Constraint = __Pyx_ImportType(__pyx_t_1, "pyscipopt.scip", "Constraint", sizeof(struct __pyx_obj_9pyscipopt_4scip_Constraint), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pyscipopt_4scip_Constraint) __PYX_ERR(7, 1805, __pyx_L1_error)
  __pyx_vtabptr_9pyscipopt_4scip_Constraint = (struct __pyx_vtabstruct_9pyscipopt_4scip_Constraint*)__Pyx_GetVtable(__pyx_ptype_9pyscipopt_4scip_Constraint->tp_dict); if (unlikely(!__pyx_vtabptr_9pyscipopt_4scip_Constraint)) __PYX_ERR(7, 1805, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(8, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "bool", sizeof(PyBoolObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4bool_bool) __PYX_ERR(9, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "complex", sizeof(PyComplexObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_7complex_complex) __PYX_ERR(10, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initgcg(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initgcg(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_gcg(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_gcg(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_gcg(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'gcg' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_gcg(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(3, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(3, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(3, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(3, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(3, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(3, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(3, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(3, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(3, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(3, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("gcg", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(3, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(3, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(3, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(3, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(3, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(3, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(3, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_pygcgopt__gcg) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(3, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(3, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "pygcgopt.gcg")) {
      if (unlikely(PyDict_SetItemString(modules, "pygcgopt.gcg", __pyx_m) < 0)) __PYX_ERR(3, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(3, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(3, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(3, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_import_code() < 0)) __PYX_ERR(3, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(3, 1, __pyx_L1_error)
  #endif

  /* "pygcgopt/gcg.pyx":3
 * # distutils: language = c++
 * 
 * from pyscipopt.scip import PY_SCIP_CALL             # <<<<<<<<<<<<<<
 * from pyscipopt.scip cimport Model, Variable, Constraint, Solution, SCIP_RESULT, SCIP_DIDNOTRUN, SCIPgetStage, SCIP_STAGE, SCIP_STAGE_PRESOLVED, SCIP_OKAY, SCIPvarSetData, SCIPgetBestSol
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_PY_SCIP_CALL);
  __Pyx_GIVEREF(__pyx_n_s_PY_SCIP_CALL);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PY_SCIP_CALL);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pyscipopt_scip, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_PY_SCIP_CALL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PY_SCIP_CALL, __pyx_t_1) < 0) __PYX_ERR(3, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygcgopt/gcg.pyx":12
 * from libcpp cimport bool
 * 
 * from typing import List             # <<<<<<<<<<<<<<
 * 
 * from pygcgopt.util import str_conversion
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_List);
  __Pyx_GIVEREF(__pyx_n_s_List);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_List);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_typing, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_List); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_List, __pyx_t_2) < 0) __PYX_ERR(3, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygcgopt/gcg.pyx":14
 * from typing import List
 * 
 * from pygcgopt.util import str_conversion             # <<<<<<<<<<<<<<
 * 
 * from pathlib import Path
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_str_conversion);
  __Pyx_GIVEREF(__pyx_n_s_str_conversion);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_str_conversion);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pygcgopt_util, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_str_conversion); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_str_conversion, __pyx_t_1) < 0) __PYX_ERR(3, 14, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygcgopt/gcg.pyx":16
 * from pygcgopt.util import str_conversion
 * 
 * from pathlib import Path             # <<<<<<<<<<<<<<
 * import tempfile
 * import weakref
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_Path);
  __Pyx_GIVEREF(__pyx_n_s_Path);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_Path);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pathlib, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Path); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Path, __pyx_t_2) < 0) __PYX_ERR(3, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygcgopt/gcg.pyx":17
 * 
 * from pathlib import Path
 * import tempfile             # <<<<<<<<<<<<<<
 * import weakref
 * from copy import copy
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_tempfile, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_tempfile, __pyx_t_1) < 0) __PYX_ERR(3, 17, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygcgopt/gcg.pyx":18
 * from pathlib import Path
 * import tempfile
 * import weakref             # <<<<<<<<<<<<<<
 * from copy import copy
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_weakref, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_weakref, __pyx_t_1) < 0) __PYX_ERR(3, 18, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygcgopt/gcg.pyx":19
 * import tempfile
 * import weakref
 * from copy import copy             # <<<<<<<<<<<<<<
 * 
 * from collections.abc import Iterable
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_copy);
  __Pyx_GIVEREF(__pyx_n_s_copy);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_copy);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_copy, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_copy); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_copy, __pyx_t_1) < 0) __PYX_ERR(3, 19, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygcgopt/gcg.pyx":21
 * from copy import copy
 * 
 * from collections.abc import Iterable             # <<<<<<<<<<<<<<
 * 
 * include "detector.pxi"
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_Iterable);
  __Pyx_GIVEREF(__pyx_n_s_Iterable);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_Iterable);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_collections_abc, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Iterable); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Iterable, __pyx_t_2) < 0) __PYX_ERR(3, 21, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/pygcgopt/decomposition.pxi":158
 *         return [Constraint.create(det_prob_data.getCons(consIndex)) for consIndex in result]
 * 
 *     def setUsergiven(self, USERGIVEN value=COMPLETED_CONSTOMASTER):             # <<<<<<<<<<<<<<
 *         self.thisptr.setUsergiven(value)
 * 
 */
  __pyx_k__10 = gcg::COMPLETED_CONSTOMASTER;

  /* "pygcgopt/gcg.pyx":45
 * 
 * cdef class PY_GCG_PRICINGSTATUS:
 *     UNKNOWN = GCG_PRICINGSTATUS_UNKNOWN             # <<<<<<<<<<<<<<
 *     NOTAPPLICABLE = GCG_PRICINGSTATUS_NOTAPPLICABLE
 *     SOLVERLIMIT = GCG_PRICINGSTATUS_SOLVERLIMIT
 */
  __pyx_t_1 = __Pyx_PyInt_From_GCG_PRICINGSTATUS(GCG_PRICINGSTATUS_UNKNOWN); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pygcgopt_3gcg_PY_GCG_PRICINGSTATUS->tp_dict, __pyx_n_s_UNKNOWN, __pyx_t_1) < 0) __PYX_ERR(3, 45, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pygcgopt_3gcg_PY_GCG_PRICINGSTATUS);

  /* "pygcgopt/gcg.pyx":46
 * cdef class PY_GCG_PRICINGSTATUS:
 *     UNKNOWN = GCG_PRICINGSTATUS_UNKNOWN
 *     NOTAPPLICABLE = GCG_PRICINGSTATUS_NOTAPPLICABLE             # <<<<<<<<<<<<<<
 *     SOLVERLIMIT = GCG_PRICINGSTATUS_SOLVERLIMIT
 *     OPTIMAL = GCG_PRICINGSTATUS_OPTIMAL
 */
  __pyx_t_1 = __Pyx_PyInt_From_GCG_PRICINGSTATUS(GCG_PRICINGSTATUS_NOTAPPLICABLE); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pygcgopt_3gcg_PY_GCG_PRICINGSTATUS->tp_dict, __pyx_n_s_NOTAPPLICABLE, __pyx_t_1) < 0) __PYX_ERR(3, 46, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pygcgopt_3gcg_PY_GCG_PRICINGSTATUS);

  /* "pygcgopt/gcg.pyx":47
 *     UNKNOWN = GCG_PRICINGSTATUS_UNKNOWN
 *     NOTAPPLICABLE = GCG_PRICINGSTATUS_NOTAPPLICABLE
 *     SOLVERLIMIT = GCG_PRICINGSTATUS_SOLVERLIMIT             # <<<<<<<<<<<<<<
 *     OPTIMAL = GCG_PRICINGSTATUS_OPTIMAL
 *     INFEASIBLE = GCG_PRICINGSTATUS_INFEASIBLE
 */
  __pyx_t_1 = __Pyx_PyInt_From_GCG_PRICINGSTATUS(GCG_PRICINGSTATUS_SOLVERLIMIT); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pygcgopt_3gcg_PY_GCG_PRICINGSTATUS->tp_dict, __pyx_n_s_SOLVERLIMIT, __pyx_t_1) < 0) __PYX_ERR(3, 47, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pygcgopt_3gcg_PY_GCG_PRICINGSTATUS);

  /* "pygcgopt/gcg.pyx":48
 *     NOTAPPLICABLE = GCG_PRICINGSTATUS_NOTAPPLICABLE
 *     SOLVERLIMIT = GCG_PRICINGSTATUS_SOLVERLIMIT
 *     OPTIMAL = GCG_PRICINGSTATUS_OPTIMAL             # <<<<<<<<<<<<<<
 *     INFEASIBLE = GCG_PRICINGSTATUS_INFEASIBLE
 *     UNBOUNDED = GCG_PRICINGSTATUS_UNBOUNDED
 */
  __pyx_t_1 = __Pyx_PyInt_From_GCG_PRICINGSTATUS(GCG_PRICINGSTATUS_OPTIMAL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pygcgopt_3gcg_PY_GCG_PRICINGSTATUS->tp_dict, __pyx_n_s_OPTIMAL, __pyx_t_1) < 0) __PYX_ERR(3, 48, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pygcgopt_3gcg_PY_GCG_PRICINGSTATUS);

  /* "pygcgopt/gcg.pyx":49
 *     SOLVERLIMIT = GCG_PRICINGSTATUS_SOLVERLIMIT
 *     OPTIMAL = GCG_PRICINGSTATUS_OPTIMAL
 *     INFEASIBLE = GCG_PRICINGSTATUS_INFEASIBLE             # <<<<<<<<<<<<<<
 *     UNBOUNDED = GCG_PRICINGSTATUS_UNBOUNDED
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_GCG_PRICINGSTATUS(GCG_PRICINGSTATUS_INFEASIBLE); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pygcgopt_3gcg_PY_GCG_PRICINGSTATUS->tp_dict, __pyx_n_s_INFEASIBLE, __pyx_t_1) < 0) __PYX_ERR(3, 49, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pygcgopt_3gcg_PY_GCG_PRICINGSTATUS);

  /* "pygcgopt/gcg.pyx":50
 *     OPTIMAL = GCG_PRICINGSTATUS_OPTIMAL
 *     INFEASIBLE = GCG_PRICINGSTATUS_INFEASIBLE
 *     UNBOUNDED = GCG_PRICINGSTATUS_UNBOUNDED             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_GCG_PRICINGSTATUS(GCG_PRICINGSTATUS_UNBOUNDED); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pygcgopt_3gcg_PY_GCG_PRICINGSTATUS->tp_dict, __pyx_n_s_UNBOUNDED, __pyx_t_1) < 0) __PYX_ERR(3, 50, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pygcgopt_3gcg_PY_GCG_PRICINGSTATUS);

  /* "pygcgopt/gcg.pyx":239
 *         self.setBoolParam("pricingsolver/{}/heurenabled".format(pricing_solver_name), is_enabled)
 * 
 *     def includeDetector(self, Detector detector, detectorname, decchar, desc, freqcallround=1, maxcallround=INT_MAX, mincallround=0, freqcallroundoriginal=1, maxcallroundoriginal=INT_MAX, mincallroundoriginal=0, priority=0, enabled=True, enabledfinishing=False, enabledpostprocessing=False, skip=False, usefulrecall=False):             # <<<<<<<<<<<<<<
 *         """includes a detector
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(INT_MAX); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__25 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_int(INT_MAX); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__26 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Detector(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pygcgopt_3gcg_1__pyx_unpickle_Detector, NULL, __pyx_n_s_pygcgopt_gcg); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_Detector, __pyx_t_1) < 0) __PYX_ERR(4, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_Detector__set_state(<Detector> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Detector__set_state(Detector __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.detectorname = __pyx_state[0]; __pyx_result.model = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pygcgopt_3gcg_3__pyx_unpickle_PricingSolver, NULL, __pyx_n_s_pygcgopt_gcg); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_PricingSolver, __pyx_t_1) < 0) __PYX_ERR(4, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_PY_GCG_PRICINGSTATUS(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pygcgopt_3gcg_5__pyx_unpickle_PY_GCG_PRICINGSTATUS, NULL, __pyx_n_s_pygcgopt_gcg); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_PY_GCG_PRICINGSTA, __pyx_t_1) < 0) __PYX_ERR(4, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygcgopt/gcg.pyx":1
 * # distutils: language = c++             # <<<<<<<<<<<<<<
 * 
 * from pyscipopt.scip import PY_SCIP_CALL
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(3, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e___")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init pygcgopt.gcg", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init pygcgopt.gcg");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* GetAttr3 */
static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r = __Pyx_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseNoneIterError */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* decode_c_string */
static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    Py_ssize_t length;
    if (unlikely((start < 0) | (stop < 0))) {
        size_t slen = strlen(cstring);
        if (unlikely(slen > (size_t) PY_SSIZE_T_MAX)) {
            PyErr_SetString(PyExc_OverflowError,
                            "c-string too long to convert to Python");
            return NULL;
        }
        length = (Py_ssize_t) slen;
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    if (unlikely(stop <= start))
        return __Pyx_NewRef(__pyx_empty_unicode);
    length = stop - start;
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* JoinPyUnicode */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      CYTHON_UNUSED Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind;
    Py_ssize_t i, char_pos;
    void *result_udata;
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely(char_pos + ulength < 0))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + char_pos * result_ukind, udata, (size_t) (ulength * result_ukind));
        } else {
            #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    result_ulength++;
    value_count++;
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* decode_c_bytes */
static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    if (unlikely((start < 0) | (stop < 0))) {
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    if (stop > length)
        stop = length;
    if (unlikely(stop <= start))
        return __Pyx_NewRef(__pyx_empty_unicode);
    length = stop - start;
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* UnpackTupleError */
static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

/* UnpackTuple2 */
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
        PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2, int decref_tuple) {
    PyObject *value1 = NULL, *value2 = NULL;
#if CYTHON_COMPILING_IN_PYPY
    value1 = PySequence_ITEM(tuple, 0);  if (unlikely(!value1)) goto bad;
    value2 = PySequence_ITEM(tuple, 1);  if (unlikely(!value2)) goto bad;
#else
    value1 = PyTuple_GET_ITEM(tuple, 0);  Py_INCREF(value1);
    value2 = PyTuple_GET_ITEM(tuple, 1);  Py_INCREF(value2);
#endif
    if (decref_tuple) {
        Py_DECREF(tuple);
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
#if CYTHON_COMPILING_IN_PYPY
bad:
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
#endif
}
static int __Pyx_unpack_tuple2_generic(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                       int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    iternextfunc iternext;
    iter = PyObject_GetIter(tuple);
    if (unlikely(!iter)) goto bad;
    if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
    iternext = Py_TYPE(iter)->tp_iternext;
    value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
    value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
    if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
    Py_DECREF(iter);
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

/* dict_iter */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
    if (is_dict) {
#if !CYTHON_COMPILING_IN_PYPY
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
#elif PY_MAJOR_VERSION >= 3
        static PyObject *py_items = NULL, *py_keys = NULL, *py_values = NULL;
        PyObject **pp = NULL;
        if (method_name) {
            const char *name = PyUnicode_AsUTF8(method_name);
            if (strcmp(name, "iteritems") == 0) pp = &py_items;
            else if (strcmp(name, "iterkeys") == 0) pp = &py_keys;
            else if (strcmp(name, "itervalues") == 0) pp = &py_values;
            if (pp) {
                if (!*pp) {
                    *pp = PyUnicode_FromString(name + 4);
                    if (!*pp)
                        return NULL;
                }
                method_name = *pp;
            }
        }
#endif
    }
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

/* PyIntCompare */
static CYTHON_INLINE PyObject* __Pyx_PyInt_NeObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED long inplace) {
    if (op1 == op2) {
        Py_RETURN_FALSE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a != b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size != 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_TRUE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_TRUE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal != 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
        if ((double)a != (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_NE));
}

/* PyIntCompare */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED long inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_FALSE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_FALSE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
        if ((double)a == (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* None */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* PyFloatBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_AddObjC(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check) {
    const double b = floatval;
    double a, result;
    (void)inplace;
    (void)zerodivision_check;
    if (likely(PyFloat_CheckExact(op1))) {
        a = PyFloat_AS_DOUBLE(op1);
        
    } else
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        a = (double) PyInt_AS_LONG(op1);
        
    } else
    #endif
    if (likely(PyLong_CheckExact(op1))) {
        #if CYTHON_USE_PYLONG_INTERNALS
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        switch (size) {
            case  0: a = 0.0; break;
            case -1: a = -(double) digits[0]; break;
            case  1: a = (double) digits[0]; break;
            case -2:
            case 2:
                if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (1 * PyLong_SHIFT < 53))) {
                    a = (double) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -2)
                            a = -a;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            case -3:
            case 3:
                if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53))) {
                    a = (double) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -3)
                            a = -a;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            case -4:
            case 4:
                if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53))) {
                    a = (double) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (4 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -4)
                            a = -a;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            default:
        #else
        {
        #endif
            a = PyLong_AsDouble(op1);
            if (unlikely(a == -1.0 && PyErr_Occurred())) return NULL;
            
        }
    } else {
        return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
    }
        
        PyFPE_START_PROTECT("add", return NULL)
        result = a + b;
        PyFPE_END_PROTECT(result)
        return PyFloat_FromDouble(result);
}
#endif

/* SliceTupleAndList */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_crop_slice(Py_ssize_t* _start, Py_ssize_t* _stop, Py_ssize_t* _length) {
    Py_ssize_t start = *_start, stop = *_stop, length = *_length;
    if (start < 0) {
        start += length;
        if (start < 0)
            start = 0;
    }
    if (stop < 0)
        stop += length;
    else if (stop > length)
        stop = length;
    *_length = stop - start;
    *_start = start;
    *_stop = stop;
}
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject** CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject* __Pyx_PyList_GetSlice(
            PyObject* src, Py_ssize_t start, Py_ssize_t stop) {
    PyObject* dest;
    Py_ssize_t length = PyList_GET_SIZE(src);
    __Pyx_crop_slice(&start, &stop, &length);
    if (unlikely(length <= 0))
        return PyList_New(0);
    dest = PyList_New(length);
    if (unlikely(!dest))
        return NULL;
    __Pyx_copy_object_array(
        ((PyListObject*)src)->ob_item + start,
        ((PyListObject*)dest)->ob_item,
        length);
    return dest;
}
static CYTHON_INLINE PyObject* __Pyx_PyTuple_GetSlice(
            PyObject* src, Py_ssize_t start, Py_ssize_t stop) {
    PyObject* dest;
    Py_ssize_t length = PyTuple_GET_SIZE(src);
    __Pyx_crop_slice(&start, &stop, &length);
    if (unlikely(length <= 0))
        return PyTuple_New(0);
    dest = PyTuple_New(length);
    if (unlikely(!dest))
        return NULL;
    __Pyx_copy_object_array(
        ((PyTupleObject*)src)->ob_item + start,
        ((PyTupleObject*)dest)->ob_item,
        length);
    return dest;
}
#endif

/* PyIntBinop */
  #if !CYTHON_COMPILING_IN_PYPY
#if PY_MAJOR_VERSION < 3 || CYTHON_USE_PYLONG_INTERNALS
#define __Pyx_PyInt_TrueDivideObjC_ZeroDivisionError(operand)\
    if (unlikely(zerodivision_check && ((operand) == 0))) {\
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division by zero");\
        return NULL;\
    }
#endif
static PyObject* __Pyx_PyInt_TrueDivideObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
            __Pyx_PyInt_TrueDivideObjC_ZeroDivisionError(b)
            if (8 * sizeof(long) <= 53 || likely(labs(a) <= ((PY_LONG_LONG)1 << 53))) {
                return PyFloat_FromDouble((double)a / (double)b);
            }
            return PyInt_Type.tp_as_number->nb_true_divide(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT && 1 * PyLong_SHIFT < 53) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT && 1 * PyLong_SHIFT < 53) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT && 2 * PyLong_SHIFT < 53) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT && 2 * PyLong_SHIFT < 53) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT && 3 * PyLong_SHIFT < 53) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT && 3 * PyLong_SHIFT < 53) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_true_divide(op1, op2);
            }
        }
                __Pyx_PyInt_TrueDivideObjC_ZeroDivisionError(b)
                if ((8 * sizeof(long) <= 53 || likely(labs(a) <= ((PY_LONG_LONG)1 << 53)))
                        || __Pyx_sst_abs(size) <= 52 / PyLong_SHIFT) {
                    return PyFloat_FromDouble((double)a / (double)b);
                }
                return PyLong_Type.tp_as_number->nb_true_divide(op1, op2);
            return PyLong_FromLong(x);
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            if (unlikely(zerodivision_check && b == 0)) {
                PyErr_SetString(PyExc_ZeroDivisionError, "float division by zero");
                return NULL;
            }
            PyFPE_START_PROTECT("divide", return NULL)
            result = ((double)a) / (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceTrueDivide : PyNumber_TrueDivide)(op1, op2);
}
#endif

/* GetTopmostException */
  #if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
  #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* GetException */
  #if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* DictGetItem */
  #if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* UnicodeAsUCS4 */
  static CYTHON_INLINE Py_UCS4 __Pyx_PyUnicode_AsPy_UCS4(PyObject* x) {
   Py_ssize_t length;
   #if CYTHON_PEP393_ENABLED
   length = PyUnicode_GET_LENGTH(x);
   if (likely(length == 1)) {
       return PyUnicode_READ_CHAR(x, 0);
   }
   #else
   length = PyUnicode_GET_SIZE(x);
   if (likely(length == 1)) {
       return PyUnicode_AS_UNICODE(x)[0];
   }
   #if Py_UNICODE_SIZE == 2
   else if (PyUnicode_GET_SIZE(x) == 2) {
       Py_UCS4 high_val = PyUnicode_AS_UNICODE(x)[0];
       if (high_val >= 0xD800 && high_val <= 0xDBFF) {
           Py_UCS4 low_val = PyUnicode_AS_UNICODE(x)[1];
           if (low_val >= 0xDC00 && low_val <= 0xDFFF) {
               return 0x10000 + (((high_val & ((1<<10)-1)) << 10) | (low_val & ((1<<10)-1)));
           }
       }
   }
   #endif
   #endif
   PyErr_Format(PyExc_ValueError,
                "only single character unicode strings can be converted to Py_UCS4, "
                "got length %" CYTHON_FORMAT_SSIZE_T "d", length);
   return (Py_UCS4)-1;
}

/* object_ord */
  static long __Pyx__PyObject_Ord(PyObject* c) {
    Py_ssize_t size;
    if (PyBytes_Check(c)) {
        size = PyBytes_GET_SIZE(c);
        if (likely(size == 1)) {
            return (unsigned char) PyBytes_AS_STRING(c)[0];
        }
#if PY_MAJOR_VERSION < 3
    } else if (PyUnicode_Check(c)) {
        return (long)__Pyx_PyUnicode_AsPy_UCS4(c);
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    } else if (PyByteArray_Check(c)) {
        size = PyByteArray_GET_SIZE(c);
        if (likely(size == 1)) {
            return (unsigned char) PyByteArray_AS_STRING(c)[0];
        }
#endif
    } else {
        PyErr_Format(PyExc_TypeError,
            "ord() expected string of length 1, but %.200s found", Py_TYPE(c)->tp_name);
        return (long)(Py_UCS4)-1;
    }
    PyErr_Format(PyExc_TypeError,
        "ord() expected a character, but string of length %zd found", size);
    return (long)(Py_UCS4)-1;
}

/* ImportFrom */
  static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* HasAttr */
  static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (unlikely(!r)) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* CallNextTpDealloc */
  static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_dealloc != current_tp_dealloc)
        type = type->tp_base;
    while (type && type->tp_dealloc == current_tp_dealloc)
        type = type->tp_base;
    if (type)
        type->tp_dealloc(obj);
}

/* CallNextTpTraverse */
  static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_traverse != current_tp_traverse)
        type = type->tp_base;
    while (type && type->tp_traverse == current_tp_traverse)
        type = type->tp_base;
    if (type && type->tp_traverse)
        return type->tp_traverse(obj, v, a);
    return 0;
}

/* CallNextTpClear */
  static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_clear) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_clear != current_tp_clear)
        type = type->tp_base;
    while (type && type->tp_clear == current_tp_clear)
        type = type->tp_base;
    if (type && type->tp_clear)
        type->tp_clear(obj);
}

/* PyObject_GenericGetAttrNoDict */
  #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
  #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
  static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* PyObjectGetAttrStrNoError */
  static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
  static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* TypeImport */
  #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
  static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* CLineInTraceback */
  #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
  static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
  #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
  #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
  static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE gcg::USERGIVEN __Pyx_PyInt_As_gcg_3a__3a_USERGIVEN(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const gcg::USERGIVEN neg_one = (gcg::USERGIVEN) -1, const_zero = (gcg::USERGIVEN) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(gcg::USERGIVEN) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(gcg::USERGIVEN, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (gcg::USERGIVEN) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (gcg::USERGIVEN) 0;
                case  1: __PYX_VERIFY_RETURN_INT(gcg::USERGIVEN, digit, digits[0])
                case 2:
                    if (8 * sizeof(gcg::USERGIVEN) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(gcg::USERGIVEN, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(gcg::USERGIVEN) >= 2 * PyLong_SHIFT) {
                            return (gcg::USERGIVEN) (((((gcg::USERGIVEN)digits[1]) << PyLong_SHIFT) | (gcg::USERGIVEN)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(gcg::USERGIVEN) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(gcg::USERGIVEN, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(gcg::USERGIVEN) >= 3 * PyLong_SHIFT) {
                            return (gcg::USERGIVEN) (((((((gcg::USERGIVEN)digits[2]) << PyLong_SHIFT) | (gcg::USERGIVEN)digits[1]) << PyLong_SHIFT) | (gcg::USERGIVEN)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(gcg::USERGIVEN) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(gcg::USERGIVEN, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(gcg::USERGIVEN) >= 4 * PyLong_SHIFT) {
                            return (gcg::USERGIVEN) (((((((((gcg::USERGIVEN)digits[3]) << PyLong_SHIFT) | (gcg::USERGIVEN)digits[2]) << PyLong_SHIFT) | (gcg::USERGIVEN)digits[1]) << PyLong_SHIFT) | (gcg::USERGIVEN)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (gcg::USERGIVEN) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(gcg::USERGIVEN) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(gcg::USERGIVEN, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(gcg::USERGIVEN) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(gcg::USERGIVEN, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (gcg::USERGIVEN) 0;
                case -1: __PYX_VERIFY_RETURN_INT(gcg::USERGIVEN, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(gcg::USERGIVEN,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(gcg::USERGIVEN) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(gcg::USERGIVEN, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(gcg::USERGIVEN) - 1 > 2 * PyLong_SHIFT) {
                            return (gcg::USERGIVEN) (((gcg::USERGIVEN)-1)*(((((gcg::USERGIVEN)digits[1]) << PyLong_SHIFT) | (gcg::USERGIVEN)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(gcg::USERGIVEN) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(gcg::USERGIVEN, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(gcg::USERGIVEN) - 1 > 2 * PyLong_SHIFT) {
                            return (gcg::USERGIVEN) ((((((gcg::USERGIVEN)digits[1]) << PyLong_SHIFT) | (gcg::USERGIVEN)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(gcg::USERGIVEN) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(gcg::USERGIVEN, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(gcg::USERGIVEN) - 1 > 3 * PyLong_SHIFT) {
                            return (gcg::USERGIVEN) (((gcg::USERGIVEN)-1)*(((((((gcg::USERGIVEN)digits[2]) << PyLong_SHIFT) | (gcg::USERGIVEN)digits[1]) << PyLong_SHIFT) | (gcg::USERGIVEN)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(gcg::USERGIVEN) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(gcg::USERGIVEN, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(gcg::USERGIVEN) - 1 > 3 * PyLong_SHIFT) {
                            return (gcg::USERGIVEN) ((((((((gcg::USERGIVEN)digits[2]) << PyLong_SHIFT) | (gcg::USERGIVEN)digits[1]) << PyLong_SHIFT) | (gcg::USERGIVEN)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(gcg::USERGIVEN) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(gcg::USERGIVEN, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(gcg::USERGIVEN) - 1 > 4 * PyLong_SHIFT) {
                            return (gcg::USERGIVEN) (((gcg::USERGIVEN)-1)*(((((((((gcg::USERGIVEN)digits[3]) << PyLong_SHIFT) | (gcg::USERGIVEN)digits[2]) << PyLong_SHIFT) | (gcg::USERGIVEN)digits[1]) << PyLong_SHIFT) | (gcg::USERGIVEN)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(gcg::USERGIVEN) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(gcg::USERGIVEN, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(gcg::USERGIVEN) - 1 > 4 * PyLong_SHIFT) {
                            return (gcg::USERGIVEN) ((((((((((gcg::USERGIVEN)digits[3]) << PyLong_SHIFT) | (gcg::USERGIVEN)digits[2]) << PyLong_SHIFT) | (gcg::USERGIVEN)digits[1]) << PyLong_SHIFT) | (gcg::USERGIVEN)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(gcg::USERGIVEN) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(gcg::USERGIVEN, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(gcg::USERGIVEN) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(gcg::USERGIVEN, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            gcg::USERGIVEN val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (gcg::USERGIVEN) -1;
        }
    } else {
        gcg::USERGIVEN val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (gcg::USERGIVEN) -1;
        val = __Pyx_PyInt_As_gcg_3a__3a_USERGIVEN(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to gcg::USERGIVEN");
    return (gcg::USERGIVEN) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to gcg::USERGIVEN");
    return (gcg::USERGIVEN) -1;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_GCG_PRICINGSTATUS(GCG_PRICINGSTATUS value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const GCG_PRICINGSTATUS neg_one = (GCG_PRICINGSTATUS) -1, const_zero = (GCG_PRICINGSTATUS) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(GCG_PRICINGSTATUS) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(GCG_PRICINGSTATUS) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(GCG_PRICINGSTATUS) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(GCG_PRICINGSTATUS) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(GCG_PRICINGSTATUS) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(GCG_PRICINGSTATUS),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
  static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_SCIP_RESULT(SCIP_RESULT value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const SCIP_RESULT neg_one = (SCIP_RESULT) -1, const_zero = (SCIP_RESULT) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(SCIP_RESULT) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(SCIP_RESULT) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(SCIP_RESULT) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(SCIP_RESULT) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(SCIP_RESULT) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(SCIP_RESULT),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
  static CYTHON_INLINE SCIP_RESULT __Pyx_PyInt_As_SCIP_RESULT(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const SCIP_RESULT neg_one = (SCIP_RESULT) -1, const_zero = (SCIP_RESULT) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(SCIP_RESULT) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(SCIP_RESULT, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (SCIP_RESULT) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (SCIP_RESULT) 0;
                case  1: __PYX_VERIFY_RETURN_INT(SCIP_RESULT, digit, digits[0])
                case 2:
                    if (8 * sizeof(SCIP_RESULT) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(SCIP_RESULT, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(SCIP_RESULT) >= 2 * PyLong_SHIFT) {
                            return (SCIP_RESULT) (((((SCIP_RESULT)digits[1]) << PyLong_SHIFT) | (SCIP_RESULT)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(SCIP_RESULT) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(SCIP_RESULT, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(SCIP_RESULT) >= 3 * PyLong_SHIFT) {
                            return (SCIP_RESULT) (((((((SCIP_RESULT)digits[2]) << PyLong_SHIFT) | (SCIP_RESULT)digits[1]) << PyLong_SHIFT) | (SCIP_RESULT)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(SCIP_RESULT) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(SCIP_RESULT, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(SCIP_RESULT) >= 4 * PyLong_SHIFT) {
                            return (SCIP_RESULT) (((((((((SCIP_RESULT)digits[3]) << PyLong_SHIFT) | (SCIP_RESULT)digits[2]) << PyLong_SHIFT) | (SCIP_RESULT)digits[1]) << PyLong_SHIFT) | (SCIP_RESULT)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (SCIP_RESULT) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(SCIP_RESULT) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(SCIP_RESULT, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(SCIP_RESULT) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(SCIP_RESULT, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (SCIP_RESULT) 0;
                case -1: __PYX_VERIFY_RETURN_INT(SCIP_RESULT, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(SCIP_RESULT,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(SCIP_RESULT) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(SCIP_RESULT, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(SCIP_RESULT) - 1 > 2 * PyLong_SHIFT) {
                            return (SCIP_RESULT) (((SCIP_RESULT)-1)*(((((SCIP_RESULT)digits[1]) << PyLong_SHIFT) | (SCIP_RESULT)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(SCIP_RESULT) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(SCIP_RESULT, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(SCIP_RESULT) - 1 > 2 * PyLong_SHIFT) {
                            return (SCIP_RESULT) ((((((SCIP_RESULT)digits[1]) << PyLong_SHIFT) | (SCIP_RESULT)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(SCIP_RESULT) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(SCIP_RESULT, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(SCIP_RESULT) - 1 > 3 * PyLong_SHIFT) {
                            return (SCIP_RESULT) (((SCIP_RESULT)-1)*(((((((SCIP_RESULT)digits[2]) << PyLong_SHIFT) | (SCIP_RESULT)digits[1]) << PyLong_SHIFT) | (SCIP_RESULT)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(SCIP_RESULT) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(SCIP_RESULT, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(SCIP_RESULT) - 1 > 3 * PyLong_SHIFT) {
                            return (SCIP_RESULT) ((((((((SCIP_RESULT)digits[2]) << PyLong_SHIFT) | (SCIP_RESULT)digits[1]) << PyLong_SHIFT) | (SCIP_RESULT)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(SCIP_RESULT) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(SCIP_RESULT, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(SCIP_RESULT) - 1 > 4 * PyLong_SHIFT) {
                            return (SCIP_RESULT) (((SCIP_RESULT)-1)*(((((((((SCIP_RESULT)digits[3]) << PyLong_SHIFT) | (SCIP_RESULT)digits[2]) << PyLong_SHIFT) | (SCIP_RESULT)digits[1]) << PyLong_SHIFT) | (SCIP_RESULT)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(SCIP_RESULT) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(SCIP_RESULT, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(SCIP_RESULT) - 1 > 4 * PyLong_SHIFT) {
                            return (SCIP_RESULT) ((((((((((SCIP_RESULT)digits[3]) << PyLong_SHIFT) | (SCIP_RESULT)digits[2]) << PyLong_SHIFT) | (SCIP_RESULT)digits[1]) << PyLong_SHIFT) | (SCIP_RESULT)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(SCIP_RESULT) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(SCIP_RESULT, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(SCIP_RESULT) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(SCIP_RESULT, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            SCIP_RESULT val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (SCIP_RESULT) -1;
        }
    } else {
        SCIP_RESULT val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (SCIP_RESULT) -1;
        val = __Pyx_PyInt_As_SCIP_RESULT(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to SCIP_RESULT");
    return (SCIP_RESULT) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to SCIP_RESULT");
    return (SCIP_RESULT) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE GCG_PRICINGSTATUS __Pyx_PyInt_As_GCG_PRICINGSTATUS(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const GCG_PRICINGSTATUS neg_one = (GCG_PRICINGSTATUS) -1, const_zero = (GCG_PRICINGSTATUS) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(GCG_PRICINGSTATUS) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(GCG_PRICINGSTATUS, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (GCG_PRICINGSTATUS) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (GCG_PRICINGSTATUS) 0;
                case  1: __PYX_VERIFY_RETURN_INT(GCG_PRICINGSTATUS, digit, digits[0])
                case 2:
                    if (8 * sizeof(GCG_PRICINGSTATUS) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(GCG_PRICINGSTATUS, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(GCG_PRICINGSTATUS) >= 2 * PyLong_SHIFT) {
                            return (GCG_PRICINGSTATUS) (((((GCG_PRICINGSTATUS)digits[1]) << PyLong_SHIFT) | (GCG_PRICINGSTATUS)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(GCG_PRICINGSTATUS) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(GCG_PRICINGSTATUS, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(GCG_PRICINGSTATUS) >= 3 * PyLong_SHIFT) {
                            return (GCG_PRICINGSTATUS) (((((((GCG_PRICINGSTATUS)digits[2]) << PyLong_SHIFT) | (GCG_PRICINGSTATUS)digits[1]) << PyLong_SHIFT) | (GCG_PRICINGSTATUS)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(GCG_PRICINGSTATUS) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(GCG_PRICINGSTATUS, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(GCG_PRICINGSTATUS) >= 4 * PyLong_SHIFT) {
                            return (GCG_PRICINGSTATUS) (((((((((GCG_PRICINGSTATUS)digits[3]) << PyLong_SHIFT) | (GCG_PRICINGSTATUS)digits[2]) << PyLong_SHIFT) | (GCG_PRICINGSTATUS)digits[1]) << PyLong_SHIFT) | (GCG_PRICINGSTATUS)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (GCG_PRICINGSTATUS) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(GCG_PRICINGSTATUS) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(GCG_PRICINGSTATUS, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(GCG_PRICINGSTATUS) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(GCG_PRICINGSTATUS, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (GCG_PRICINGSTATUS) 0;
                case -1: __PYX_VERIFY_RETURN_INT(GCG_PRICINGSTATUS, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(GCG_PRICINGSTATUS,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(GCG_PRICINGSTATUS) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(GCG_PRICINGSTATUS, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(GCG_PRICINGSTATUS) - 1 > 2 * PyLong_SHIFT) {
                            return (GCG_PRICINGSTATUS) (((GCG_PRICINGSTATUS)-1)*(((((GCG_PRICINGSTATUS)digits[1]) << PyLong_SHIFT) | (GCG_PRICINGSTATUS)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(GCG_PRICINGSTATUS) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(GCG_PRICINGSTATUS, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(GCG_PRICINGSTATUS) - 1 > 2 * PyLong_SHIFT) {
                            return (GCG_PRICINGSTATUS) ((((((GCG_PRICINGSTATUS)digits[1]) << PyLong_SHIFT) | (GCG_PRICINGSTATUS)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(GCG_PRICINGSTATUS) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(GCG_PRICINGSTATUS, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(GCG_PRICINGSTATUS) - 1 > 3 * PyLong_SHIFT) {
                            return (GCG_PRICINGSTATUS) (((GCG_PRICINGSTATUS)-1)*(((((((GCG_PRICINGSTATUS)digits[2]) << PyLong_SHIFT) | (GCG_PRICINGSTATUS)digits[1]) << PyLong_SHIFT) | (GCG_PRICINGSTATUS)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(GCG_PRICINGSTATUS) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(GCG_PRICINGSTATUS, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(GCG_PRICINGSTATUS) - 1 > 3 * PyLong_SHIFT) {
                            return (GCG_PRICINGSTATUS) ((((((((GCG_PRICINGSTATUS)digits[2]) << PyLong_SHIFT) | (GCG_PRICINGSTATUS)digits[1]) << PyLong_SHIFT) | (GCG_PRICINGSTATUS)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(GCG_PRICINGSTATUS) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(GCG_PRICINGSTATUS, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(GCG_PRICINGSTATUS) - 1 > 4 * PyLong_SHIFT) {
                            return (GCG_PRICINGSTATUS) (((GCG_PRICINGSTATUS)-1)*(((((((((GCG_PRICINGSTATUS)digits[3]) << PyLong_SHIFT) | (GCG_PRICINGSTATUS)digits[2]) << PyLong_SHIFT) | (GCG_PRICINGSTATUS)digits[1]) << PyLong_SHIFT) | (GCG_PRICINGSTATUS)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(GCG_PRICINGSTATUS) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(GCG_PRICINGSTATUS, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(GCG_PRICINGSTATUS) - 1 > 4 * PyLong_SHIFT) {
                            return (GCG_PRICINGSTATUS) ((((((((((GCG_PRICINGSTATUS)digits[3]) << PyLong_SHIFT) | (GCG_PRICINGSTATUS)digits[2]) << PyLong_SHIFT) | (GCG_PRICINGSTATUS)digits[1]) << PyLong_SHIFT) | (GCG_PRICINGSTATUS)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(GCG_PRICINGSTATUS) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(GCG_PRICINGSTATUS, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(GCG_PRICINGSTATUS) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(GCG_PRICINGSTATUS, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            GCG_PRICINGSTATUS val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (GCG_PRICINGSTATUS) -1;
        }
    } else {
        GCG_PRICINGSTATUS val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (GCG_PRICINGSTATUS) -1;
        val = __Pyx_PyInt_As_GCG_PRICINGSTATUS(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to GCG_PRICINGSTATUS");
    return (GCG_PRICINGSTATUS) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to GCG_PRICINGSTATUS");
    return (GCG_PRICINGSTATUS) -1;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_long(unsigned long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned long neg_one = (unsigned long) -1, const_zero = (unsigned long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned long),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_SCIP_RETCODE(SCIP_RETCODE value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const SCIP_RETCODE neg_one = (SCIP_RETCODE) -1, const_zero = (SCIP_RETCODE) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(SCIP_RETCODE) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(SCIP_RETCODE) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(SCIP_RETCODE) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(SCIP_RETCODE) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(SCIP_RETCODE) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(SCIP_RETCODE),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_SCIP_STAGE(SCIP_STAGE value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const SCIP_STAGE neg_one = (SCIP_STAGE) -1, const_zero = (SCIP_STAGE) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(SCIP_STAGE) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(SCIP_STAGE) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(SCIP_STAGE) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(SCIP_STAGE) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(SCIP_STAGE) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(SCIP_STAGE),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
  static CYTHON_INLINE SCIP_PARAMSETTING __Pyx_PyInt_As_SCIP_PARAMSETTING(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const SCIP_PARAMSETTING neg_one = (SCIP_PARAMSETTING) -1, const_zero = (SCIP_PARAMSETTING) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(SCIP_PARAMSETTING) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(SCIP_PARAMSETTING, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (SCIP_PARAMSETTING) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (SCIP_PARAMSETTING) 0;
                case  1: __PYX_VERIFY_RETURN_INT(SCIP_PARAMSETTING, digit, digits[0])
                case 2:
                    if (8 * sizeof(SCIP_PARAMSETTING) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(SCIP_PARAMSETTING, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(SCIP_PARAMSETTING) >= 2 * PyLong_SHIFT) {
                            return (SCIP_PARAMSETTING) (((((SCIP_PARAMSETTING)digits[1]) << PyLong_SHIFT) | (SCIP_PARAMSETTING)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(SCIP_PARAMSETTING) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(SCIP_PARAMSETTING, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(SCIP_PARAMSETTING) >= 3 * PyLong_SHIFT) {
                            return (SCIP_PARAMSETTING) (((((((SCIP_PARAMSETTING)digits[2]) << PyLong_SHIFT) | (SCIP_PARAMSETTING)digits[1]) << PyLong_SHIFT) | (SCIP_PARAMSETTING)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(SCIP_PARAMSETTING) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(SCIP_PARAMSETTING, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(SCIP_PARAMSETTING) >= 4 * PyLong_SHIFT) {
                            return (SCIP_PARAMSETTING) (((((((((SCIP_PARAMSETTING)digits[3]) << PyLong_SHIFT) | (SCIP_PARAMSETTING)digits[2]) << PyLong_SHIFT) | (SCIP_PARAMSETTING)digits[1]) << PyLong_SHIFT) | (SCIP_PARAMSETTING)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (SCIP_PARAMSETTING) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(SCIP_PARAMSETTING) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(SCIP_PARAMSETTING, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(SCIP_PARAMSETTING) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(SCIP_PARAMSETTING, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (SCIP_PARAMSETTING) 0;
                case -1: __PYX_VERIFY_RETURN_INT(SCIP_PARAMSETTING, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(SCIP_PARAMSETTING,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(SCIP_PARAMSETTING) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(SCIP_PARAMSETTING, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(SCIP_PARAMSETTING) - 1 > 2 * PyLong_SHIFT) {
                            return (SCIP_PARAMSETTING) (((SCIP_PARAMSETTING)-1)*(((((SCIP_PARAMSETTING)digits[1]) << PyLong_SHIFT) | (SCIP_PARAMSETTING)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(SCIP_PARAMSETTING) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(SCIP_PARAMSETTING, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(SCIP_PARAMSETTING) - 1 > 2 * PyLong_SHIFT) {
                            return (SCIP_PARAMSETTING) ((((((SCIP_PARAMSETTING)digits[1]) << PyLong_SHIFT) | (SCIP_PARAMSETTING)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(SCIP_PARAMSETTING) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(SCIP_PARAMSETTING, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(SCIP_PARAMSETTING) - 1 > 3 * PyLong_SHIFT) {
                            return (SCIP_PARAMSETTING) (((SCIP_PARAMSETTING)-1)*(((((((SCIP_PARAMSETTING)digits[2]) << PyLong_SHIFT) | (SCIP_PARAMSETTING)digits[1]) << PyLong_SHIFT) | (SCIP_PARAMSETTING)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(SCIP_PARAMSETTING) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(SCIP_PARAMSETTING, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(SCIP_PARAMSETTING) - 1 > 3 * PyLong_SHIFT) {
                            return (SCIP_PARAMSETTING) ((((((((SCIP_PARAMSETTING)digits[2]) << PyLong_SHIFT) | (SCIP_PARAMSETTING)digits[1]) << PyLong_SHIFT) | (SCIP_PARAMSETTING)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(SCIP_PARAMSETTING) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(SCIP_PARAMSETTING, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(SCIP_PARAMSETTING) - 1 > 4 * PyLong_SHIFT) {
                            return (SCIP_PARAMSETTING) (((SCIP_PARAMSETTING)-1)*(((((((((SCIP_PARAMSETTING)digits[3]) << PyLong_SHIFT) | (SCIP_PARAMSETTING)digits[2]) << PyLong_SHIFT) | (SCIP_PARAMSETTING)digits[1]) << PyLong_SHIFT) | (SCIP_PARAMSETTING)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(SCIP_PARAMSETTING) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(SCIP_PARAMSETTING, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(SCIP_PARAMSETTING) - 1 > 4 * PyLong_SHIFT) {
                            return (SCIP_PARAMSETTING) ((((((((((SCIP_PARAMSETTING)digits[3]) << PyLong_SHIFT) | (SCIP_PARAMSETTING)digits[2]) << PyLong_SHIFT) | (SCIP_PARAMSETTING)digits[1]) << PyLong_SHIFT) | (SCIP_PARAMSETTING)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(SCIP_PARAMSETTING) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(SCIP_PARAMSETTING, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(SCIP_PARAMSETTING) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(SCIP_PARAMSETTING, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            SCIP_PARAMSETTING val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (SCIP_PARAMSETTING) -1;
        }
    } else {
        SCIP_PARAMSETTING val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (SCIP_PARAMSETTING) -1;
        val = __Pyx_PyInt_As_SCIP_PARAMSETTING(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to SCIP_PARAMSETTING");
    return (SCIP_PARAMSETTING) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to SCIP_PARAMSETTING");
    return (SCIP_PARAMSETTING) -1;
}

/* FastTypeChecks */
  #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
  static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
  static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
